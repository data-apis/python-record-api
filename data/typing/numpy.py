from typing import *

# usage.pandas: 2
# usage.scipy: 2
ComplexWarning: object

# usage.dask: 2
False_: object

# usage.matplotlib: 2
# usage.pandas: 1
# usage.scipy: 1
# usage.sklearn: 4
Inf: object

# usage.pandas: 1
# usage.scipy: 4
# usage.skimage: 1
NAN: object

# usage.scipy: 1
# usage.sklearn: 2
NINF: object

# usage.dask: 5
# usage.matplotlib: 4
# usage.pandas: 75
# usage.scipy: 3
# usage.skimage: 1
# usage.sklearn: 7
# usage.xarray: 7
NaN: object

# usage.dask: 1
# usage.scipy: 1
ScalarType: object

# usage.dask: 2
True_: object

# usage.dask: 2
# usage.skimage: 1
# usage.sklearn: 4
# usage.xarray: 1
__version__: object

# usage.scipy: 4
_cospi: numpy.ufunc

# usage.scipy: 5
_ellip_harm: numpy.ufunc

# usage.scipy: 8
_factorial: numpy.ufunc

# usage.scipy: 4
_kolmogc: numpy.ufunc

# usage.scipy: 7
_kolmogci: numpy.ufunc

# usage.scipy: 4
_kolmogp: numpy.ufunc

# usage.scipy: 9
_lambertw: numpy.ufunc

# usage.scipy: 3
_riemann_zeta: numpy.ufunc

# usage.scipy: 3
_sf_error_test_function: numpy.ufunc

# usage.scipy: 6
_sinpi: numpy.ufunc

# usage.scipy: 9
_smirnovc: numpy.ufunc

# usage.scipy: 7
_smirnovci: numpy.ufunc

# usage.scipy: 8
_smirnovp: numpy.ufunc

# usage.scipy: 7
_spherical_in: numpy.ufunc

# usage.scipy: 3
_spherical_in_d: numpy.ufunc

# usage.scipy: 9
_spherical_jn: numpy.ufunc

# usage.scipy: 3
_spherical_jn_d: numpy.ufunc

# usage.scipy: 7
_spherical_kn: numpy.ufunc

# usage.scipy: 2
_spherical_kn_d: numpy.ufunc

# usage.scipy: 8
_spherical_yn: numpy.ufunc

# usage.scipy: 2
_spherical_yn_d: numpy.ufunc

# usage.scipy: 9
_zeta: numpy.ufunc

# usage.matplotlib: 1
# usage.pandas: 1
# usage.scipy: 1
# usage.skimage: 5
# usage.sklearn: 28
# usage.xarray: 1
abs: object

# usage.dask: 49
# usage.matplotlib: 84
# usage.pandas: 47
# usage.scipy: 519
# usage.skimage: 96
# usage.sklearn: 265
# usage.xarray: 1
absolute: numpy.ufunc

# usage.dask: 38
# usage.matplotlib: 2
# usage.pandas: 93
# usage.sample-usage: 2
# usage.scipy: 14
# usage.skimage: 12
# usage.sklearn: 4
# usage.xarray: 17
add: numpy.ufunc

# usage.scipy: 32
agm: numpy.ufunc

# usage.scipy: 13
airy: numpy.ufunc

# usage.scipy: 7
airye: numpy.ufunc

# usage.dask: 40
# usage.matplotlib: 1
# usage.pandas: 15
# usage.scipy: 8
# usage.xarray: 2
arccos: numpy.ufunc

# usage.dask: 38
# usage.pandas: 15
# usage.scipy: 11
# usage.xarray: 2
arccosh: numpy.ufunc

# usage.dask: 40
# usage.matplotlib: 2
# usage.pandas: 15
# usage.scipy: 18
# usage.skimage: 1
# usage.sklearn: 2
# usage.xarray: 2
arcsin: numpy.ufunc

# usage.dask: 38
# usage.pandas: 15
# usage.scipy: 19
# usage.xarray: 2
arcsinh: numpy.ufunc

# usage.dask: 40
# usage.matplotlib: 2
# usage.pandas: 15
# usage.scipy: 41
# usage.skimage: 3
# usage.sklearn: 2
# usage.xarray: 2
arctan: numpy.ufunc

# usage.dask: 112
# usage.matplotlib: 16
# usage.pandas: 1
# usage.scipy: 21
# usage.skimage: 8
# usage.xarray: 2
arctan2: numpy.ufunc

# usage.dask: 40
# usage.pandas: 15
# usage.scipy: 19
# usage.xarray: 2
arctanh: numpy.ufunc

# usage.scipy: 17
bdtr: numpy.ufunc

# usage.scipy: 16
bdtrc: numpy.ufunc

# usage.scipy: 12
bdtri: numpy.ufunc

# usage.scipy: 8
bdtrik: numpy.ufunc

# usage.scipy: 4
bdtrin: numpy.ufunc

# usage.scipy: 5
bei: numpy.ufunc

# usage.scipy: 5
beip: numpy.ufunc

# usage.scipy: 5
ber: numpy.ufunc

# usage.scipy: 5
berp: numpy.ufunc

# usage.scipy: 3
besselpoly: numpy.ufunc

# usage.scipy: 28
beta: numpy.ufunc

# usage.scipy: 23
betainc: numpy.ufunc

# usage.scipy: 6
betaincinv: numpy.ufunc

# usage.scipy: 42
# usage.sklearn: 1
betaln: numpy.ufunc

# usage.scipy: 13
# usage.sklearn: 2
binom: numpy.ufunc

# usage.dask: 19
# usage.scipy: 1
bitwise_and: numpy.ufunc

# usage.dask: 18
# usage.pandas: 4
# usage.scipy: 1
bitwise_or: numpy.ufunc

# usage.dask: 18
# usage.pandas: 1
# usage.scipy: 6
# usage.skimage: 1
bitwise_xor: numpy.ufunc

# usage.dask: 1
# usage.pandas: 62
# usage.skimage: 50
# usage.sklearn: 40
# usage.xarray: 5
bool: object

# usage.dask: 1
# usage.skimage: 1
bool8: object

# usage.scipy: 22
# usage.sklearn: 3
boxcox: numpy.ufunc

# usage.scipy: 22
boxcox1p: numpy.ufunc

# usage.scipy: 7
btdtr: numpy.ufunc

# usage.scipy: 12
btdtri: numpy.ufunc

# usage.scipy: 6
btdtria: numpy.ufunc

# usage.scipy: 6
btdtrib: numpy.ufunc

# usage.matplotlib: 1
# usage.pandas: 3
# usage.scipy: 18
# usage.skimage: 1
# usage.sklearn: 40
c_: object

# usage.scipy: 1
cast: object

# usage.dask: 37
# usage.scipy: 6
# usage.skimage: 2
cbrt: numpy.ufunc

# usage.scipy: 4
cdouble: object

# usage.dask: 45
# usage.matplotlib: 35
# usage.pandas: 1
# usage.scipy: 49
# usage.skimage: 31
# usage.sklearn: 19
# usage.xarray: 5
ceil: numpy.ufunc

# usage.xarray: 1
character: object

# usage.scipy: 7
chdtr: numpy.ufunc

# usage.scipy: 5
# usage.sklearn: 1
chdtrc: numpy.ufunc

# usage.scipy: 7
chdtri: numpy.ufunc

# usage.scipy: 4
chdtriv: numpy.ufunc

# usage.scipy: 15
chndtr: numpy.ufunc

# usage.scipy: 4
chndtridf: numpy.ufunc

# usage.scipy: 4
chndtrinc: numpy.ufunc

# usage.scipy: 12
chndtrix: numpy.ufunc

# usage.scipy: 2
clongdouble: object

# usage.pandas: 1
# usage.skimage: 1
# usage.xarray: 1
complex: object

# usage.pandas: 2
# usage.scipy: 7
complex_: object

# usage.dask: 1
# usage.pandas: 6
# usage.scipy: 59
# usage.xarray: 3
complexfloating: object

# usage.dask: 45
# usage.matplotlib: 4
# usage.scipy: 150
# usage.skimage: 2
# usage.xarray: 2
conjugate: numpy.ufunc

# usage.dask: 112
# usage.matplotlib: 1
# usage.xarray: 2
copysign: numpy.ufunc

# usage.dask: 43
# usage.matplotlib: 86
# usage.pandas: 19
# usage.scipy: 217
# usage.skimage: 49
# usage.sklearn: 21
# usage.xarray: 14
cos: numpy.ufunc

# usage.scipy: 5
cosdg: numpy.ufunc

# usage.dask: 38
# usage.pandas: 15
# usage.scipy: 19
# usage.sklearn: 2
# usage.xarray: 2
cosh: numpy.ufunc

# usage.scipy: 5
cosm1: numpy.ufunc

# usage.scipy: 18
cotdg: numpy.ufunc

# usage.scipy: 1
csingle: object

# usage.scipy: 8
dawsn: numpy.ufunc

# usage.dask: 40
# usage.matplotlib: 48
# usage.pandas: 15
# usage.scipy: 6
# usage.skimage: 18
# usage.xarray: 2
deg2rad: numpy.ufunc

# usage.dask: 38
# usage.xarray: 2
degrees: numpy.ufunc

# usage.scipy: 1
# usage.skimage: 1
# usage.sklearn: 3
divide: object

# usage.dask: 4
# usage.pandas: 8
# usage.xarray: 1
divmod: numpy.ufunc

# usage.dask: 1
# usage.pandas: 2
# usage.scipy: 138
# usage.skimage: 92
# usage.sklearn: 13
double: object

# usage.matplotlib: 12
# usage.scipy: 5
# usage.skimage: 1
# usage.xarray: 1
e: object

# usage.dask: 3
eig: numpy.ufunc

# usage.scipy: 12
ellipe: numpy.ufunc

# usage.scipy: 24
# usage.skimage: 1
ellipeinc: numpy.ufunc

# usage.scipy: 8
ellipj: numpy.ufunc

# usage.scipy: 15
ellipk: numpy.ufunc

# usage.scipy: 33
# usage.skimage: 1
ellipkinc: numpy.ufunc

# usage.scipy: 8
ellipkm1: numpy.ufunc

# usage.scipy: 13
entr: numpy.ufunc

# usage.dask: 113
# usage.scipy: 25
# usage.sklearn: 1
equal: numpy.ufunc

# usage.scipy: 18
# usage.sklearn: 1
erf: numpy.ufunc

# usage.scipy: 25
erfc: numpy.ufunc

# usage.scipy: 8
erfcinv: numpy.ufunc

# usage.scipy: 6
erfcx: numpy.ufunc

# usage.scipy: 8
erfi: numpy.ufunc

# usage.scipy: 6
erfinv: numpy.ufunc

# usage.scipy: 1
# usage.sklearn: 3
euler_gamma: object

# usage.scipy: 9
eval_chebyc: numpy.ufunc

# usage.scipy: 6
eval_chebys: numpy.ufunc

# usage.scipy: 8
eval_chebyt: numpy.ufunc

# usage.scipy: 5
eval_chebyu: numpy.ufunc

# usage.scipy: 25
eval_gegenbauer: numpy.ufunc

# usage.scipy: 31
eval_genlaguerre: numpy.ufunc

# usage.scipy: 13
eval_hermite: numpy.ufunc

# usage.scipy: 11
eval_hermitenorm: numpy.ufunc

# usage.scipy: 18
eval_jacobi: numpy.ufunc

# usage.scipy: 8
eval_laguerre: numpy.ufunc

# usage.scipy: 16
eval_legendre: numpy.ufunc

# usage.scipy: 8
eval_sh_chebyt: numpy.ufunc

# usage.scipy: 5
eval_sh_chebyu: numpy.ufunc

# usage.scipy: 7
eval_sh_jacobi: numpy.ufunc

# usage.scipy: 10
eval_sh_legendre: numpy.ufunc

# usage.dask: 42
# usage.matplotlib: 30
# usage.pandas: 33
# usage.sample-usage: 1
# usage.scipy: 697
# usage.skimage: 26
# usage.sklearn: 123
# usage.xarray: 4
exp: numpy.ufunc

# usage.scipy: 13
exp1: numpy.ufunc

# usage.scipy: 5
exp10: numpy.ufunc

# usage.dask: 37
# usage.pandas: 15
# usage.scipy: 9
exp2: numpy.ufunc

# usage.scipy: 8
expi: numpy.ufunc

# usage.scipy: 18
# usage.sklearn: 27
expit: numpy.ufunc

# usage.dask: 41
# usage.pandas: 15
# usage.scipy: 118
# usage.sklearn: 6
# usage.xarray: 2
expm1: numpy.ufunc

# usage.scipy: 8
expn: numpy.ufunc

# usage.scipy: 2
exprel: numpy.ufunc

# usage.dask: 39
# usage.pandas: 6
# usage.scipy: 9
# usage.sklearn: 2
# usage.xarray: 5
fabs: numpy.ufunc

# usage.scipy: 5
fdtr: numpy.ufunc

# usage.dask: 2
# usage.scipy: 9
# usage.sklearn: 2
fdtrc: numpy.ufunc

# usage.scipy: 9
fdtri: numpy.ufunc

# usage.scipy: 4
fdtridfd: numpy.ufunc

# usage.pandas: 1
# usage.sklearn: 1
flexible: object

# usage.dask: 1
# usage.matplotlib: 2
# usage.pandas: 4
# usage.skimage: 54
# usage.sklearn: 29
# usage.xarray: 4
float: object

# usage.dask: 4
# usage.pandas: 15
# usage.scipy: 38
# usage.skimage: 4
# usage.xarray: 1
float_: object

# usage.dask: 18
# usage.scipy: 2
float_power: numpy.ufunc

# usage.dask: 1
# usage.matplotlib: 1
# usage.pandas: 15
# usage.scipy: 5
# usage.skimage: 8
# usage.sklearn: 3
# usage.xarray: 10
floating: object

# usage.dask: 41
# usage.matplotlib: 20
# usage.pandas: 8
# usage.scipy: 101
# usage.skimage: 18
# usage.sklearn: 3
# usage.xarray: 2
floor: numpy.ufunc

# usage.dask: 20
# usage.pandas: 1
# usage.skimage: 5
floor_divide: numpy.ufunc

# usage.dask: 112
# usage.skimage: 3
# usage.sklearn: 6
# usage.xarray: 2
fmax: numpy.ufunc

# usage.dask: 112
# usage.sklearn: 5
# usage.xarray: 2
fmin: numpy.ufunc

# usage.dask: 112
# usage.scipy: 4
# usage.xarray: 2
fmod: numpy.ufunc

# usage.scipy: 9
fresnel: numpy.ufunc

# usage.dask: 10
# usage.pandas: 1
# usage.scipy: 2
# usage.xarray: 7
frexp: numpy.ufunc

# usage.scipy: 107
# usage.sklearn: 2
gamma: numpy.ufunc

# usage.scipy: 35
# usage.sklearn: 1
gammainc: numpy.ufunc

# usage.scipy: 27
gammaincc: numpy.ufunc

# usage.scipy: 31
gammainccinv: numpy.ufunc

# usage.scipy: 56
gammaincinv: numpy.ufunc

# usage.scipy: 95
# usage.sklearn: 11
gammaln: numpy.ufunc

# usage.scipy: 3
gammasgn: numpy.ufunc

# usage.scipy: 5
gdtr: numpy.ufunc

# usage.scipy: 4
gdtrc: numpy.ufunc

# usage.scipy: 4
gdtria: numpy.ufunc

# usage.scipy: 6
gdtrib: numpy.ufunc

# usage.scipy: 6
gdtrix: numpy.ufunc

# usage.pandas: 1
# usage.scipy: 2
# usage.xarray: 3
generic: object

# usage.dask: 109
# usage.pandas: 2
# usage.scipy: 11
# usage.sklearn: 12
# usage.xarray: 1
greater: numpy.ufunc

# usage.dask: 111
# usage.scipy: 3
# usage.sklearn: 4
# usage.xarray: 1
greater_equal: numpy.ufunc

# usage.scipy: 9
hankel1: numpy.ufunc

# usage.scipy: 5
hankel1e: numpy.ufunc

# usage.scipy: 8
hankel2: numpy.ufunc

# usage.scipy: 6
hankel2e: numpy.ufunc

# usage.scipy: 6
huber: numpy.ufunc

# usage.scipy: 10
hyp0f1: numpy.ufunc

# usage.scipy: 34
hyp1f1: numpy.ufunc

# usage.scipy: 13
hyp2f1: numpy.ufunc

# usage.scipy: 15
hyperu: numpy.ufunc

# usage.dask: 112
# usage.matplotlib: 43
# usage.scipy: 8
# usage.skimage: 12
# usage.xarray: 2
hypot: numpy.ufunc

# usage.scipy: 6
i0e: numpy.ufunc

# usage.scipy: 5
i1: numpy.ufunc

# usage.scipy: 4
i1e: numpy.ufunc

# usage.scipy: 10
# usage.xarray: 1
inexact: object

# usage.dask: 4
# usage.matplotlib: 38
# usage.pandas: 77
# usage.scipy: 707
# usage.skimage: 36
# usage.sklearn: 115
# usage.xarray: 11
inf: object

# usage.scipy: 1
# usage.sklearn: 5
infty: object

# usage.dask: 1
# usage.pandas: 5
# usage.skimage: 24
# usage.sklearn: 94
# usage.xarray: 3
int: object

# usage.scipy: 1
int0: object

# usage.pandas: 8
# usage.scipy: 31
# usage.skimage: 3
# usage.xarray: 1
int_: object

# usage.scipy: 13
# usage.sklearn: 5
intc: object

# usage.dask: 7
# usage.matplotlib: 4
# usage.pandas: 30
# usage.scipy: 11
# usage.skimage: 8
# usage.sklearn: 2
# usage.xarray: 14
integer: object

# usage.dask: 21
# usage.pandas: 210
# usage.scipy: 49
# usage.skimage: 14
# usage.sklearn: 38
# usage.xarray: 2
intp: object

# usage.dask: 3
inv: numpy.ufunc

# usage.scipy: 4
inv_boxcox: numpy.ufunc

# usage.scipy: 6
inv_boxcox1p: numpy.ufunc

# usage.dask: 8
# usage.scipy: 1
# usage.skimage: 11
# usage.sklearn: 1
invert: numpy.ufunc

# usage.dask: 31
# usage.matplotlib: 66
# usage.pandas: 27
# usage.scipy: 231
# usage.skimage: 10
# usage.sklearn: 53
# usage.xarray: 6
isfinite: numpy.ufunc

# usage.dask: 31
# usage.matplotlib: 6
# usage.pandas: 31
# usage.scipy: 55
# usage.skimage: 2
# usage.sklearn: 12
# usage.xarray: 2
isinf: numpy.ufunc

# usage.dask: 168
# usage.matplotlib: 25
# usage.pandas: 1228
# usage.scipy: 388
# usage.skimage: 21
# usage.sklearn: 121
# usage.xarray: 33
isnan: numpy.ufunc

# usage.pandas: 3
# usage.xarray: 6
isnat: numpy.ufunc

# usage.scipy: 4
it2i0k0: numpy.ufunc

# usage.scipy: 4
it2j0y0: numpy.ufunc

# usage.scipy: 3
it2struve0: numpy.ufunc

# usage.scipy: 3
itairy: numpy.ufunc

# usage.scipy: 4
iti0k0: numpy.ufunc

# usage.scipy: 4
itj0y0: numpy.ufunc

# usage.scipy: 3
itmodstruve0: numpy.ufunc

# usage.scipy: 3
itstruve0: numpy.ufunc

# usage.scipy: 37
iv: numpy.ufunc

# usage.scipy: 10
ive: numpy.ufunc

# usage.scipy: 4
j0: numpy.ufunc

# usage.scipy: 4
j1: numpy.ufunc

# usage.scipy: 49
jv: numpy.ufunc

# usage.scipy: 8
jve: numpy.ufunc

# usage.scipy: 4
k0: numpy.ufunc

# usage.scipy: 4
k0e: numpy.ufunc

# usage.scipy: 4
k1: numpy.ufunc

# usage.scipy: 6
k1e: numpy.ufunc

# usage.scipy: 5
kei: numpy.ufunc

# usage.scipy: 5
keip: numpy.ufunc

# usage.scipy: 3
kelvin: numpy.ufunc

# usage.scipy: 5
ker: numpy.ufunc

# usage.scipy: 5
kerp: numpy.ufunc

# usage.scipy: 3
kl_div: numpy.ufunc

# usage.scipy: 11
kn: numpy.ufunc

# usage.scipy: 9
kolmogi: numpy.ufunc

# usage.scipy: 8
kolmogorov: numpy.ufunc

# usage.scipy: 40
# usage.sklearn: 2
kv: numpy.ufunc

# usage.scipy: 32
kve: numpy.ufunc

# usage.dask: 88
# usage.scipy: 7
# usage.xarray: 2
ldexp: numpy.ufunc

# usage.dask: 109
# usage.scipy: 27
# usage.skimage: 3
# usage.sklearn: 5
# usage.xarray: 1
less: numpy.ufunc

# usage.dask: 109
# usage.scipy: 7
# usage.sklearn: 2
less_equal: numpy.ufunc

# usage.dask: 50
# usage.matplotlib: 37
# usage.pandas: 25
# usage.sample-usage: 1
# usage.scipy: 485
# usage.skimage: 19
# usage.sklearn: 191
# usage.xarray: 3
log: numpy.ufunc

# usage.dask: 40
# usage.matplotlib: 37
# usage.pandas: 19
# usage.scipy: 39
# usage.skimage: 4
# usage.sklearn: 5
# usage.xarray: 2
log10: numpy.ufunc

# usage.dask: 40
# usage.pandas: 15
# usage.scipy: 147
# usage.sklearn: 14
# usage.xarray: 2
log1p: numpy.ufunc

# usage.dask: 37
# usage.matplotlib: 19
# usage.pandas: 23
# usage.scipy: 13
# usage.skimage: 5
# usage.sklearn: 26
# usage.xarray: 2
log2: numpy.ufunc

# usage.scipy: 9
log_ndtr: numpy.ufunc

# usage.dask: 112
# usage.pandas: 21
# usage.sklearn: 8
# usage.xarray: 2
logaddexp: numpy.ufunc

# usage.dask: 112
# usage.xarray: 2
logaddexp2: numpy.ufunc

# usage.scipy: 13
loggamma: numpy.ufunc

# usage.dask: 112
# usage.matplotlib: 1
# usage.pandas: 16
# usage.scipy: 101
# usage.skimage: 11
# usage.sklearn: 2
# usage.xarray: 3
logical_and: numpy.ufunc

# usage.dask: 31
# usage.matplotlib: 1
# usage.pandas: 9
# usage.scipy: 32
# usage.skimage: 14
# usage.sklearn: 25
# usage.xarray: 12
logical_not: numpy.ufunc

# usage.dask: 112
# usage.matplotlib: 3
# usage.pandas: 14
# usage.scipy: 21
# usage.skimage: 3
# usage.sklearn: 14
# usage.xarray: 3
logical_or: numpy.ufunc

# usage.dask: 112
# usage.pandas: 13
# usage.scipy: 3
# usage.skimage: 2
# usage.xarray: 2
logical_xor: numpy.ufunc

# usage.scipy: 11
# usage.sklearn: 1
logit: numpy.ufunc

# usage.scipy: 3
longcomplex: object

# usage.matplotlib: 4
# usage.scipy: 4
longdouble: object

# usage.scipy: 2
longfloat: object

# usage.scipy: 12
lpmv: numpy.ufunc

# usage.scipy: 3
math: object

# usage.scipy: 5
mathieu_a: numpy.ufunc

# usage.scipy: 4
mathieu_b: numpy.ufunc

# usage.scipy: 7
mathieu_cem: numpy.ufunc

# usage.scipy: 7
mathieu_modcem1: numpy.ufunc

# usage.scipy: 8
mathieu_modcem2: numpy.ufunc

# usage.scipy: 7
mathieu_modsem1: numpy.ufunc

# usage.scipy: 9
mathieu_modsem2: numpy.ufunc

# usage.scipy: 7
mathieu_sem: numpy.ufunc

# usage.dask: 15
# usage.scipy: 25
# usage.sklearn: 1
matmul: numpy.ufunc

# usage.dask: 5
# usage.matplotlib: 7
# usage.pandas: 12
# usage.scipy: 21
# usage.skimage: 23
# usage.sklearn: 27
# usage.xarray: 2
max: object

# usage.dask: 200
# usage.matplotlib: 4
# usage.pandas: 5
# usage.scipy: 124
# usage.skimage: 18
# usage.sklearn: 56
# usage.xarray: 95
maximum: numpy.ufunc

# usage.matplotlib: 12
# usage.scipy: 3
# usage.skimage: 49
# usage.sklearn: 1
mgrid: object

# usage.dask: 5
# usage.matplotlib: 8
# usage.pandas: 11
# usage.scipy: 16
# usage.skimage: 6
# usage.sklearn: 24
# usage.xarray: 2
min: object

# usage.dask: 115
# usage.matplotlib: 3
# usage.pandas: 6
# usage.scipy: 93
# usage.skimage: 9
# usage.sklearn: 22
# usage.xarray: 4
minimum: numpy.ufunc

# usage.dask: 2
mod: object

# usage.dask: 10
# usage.pandas: 13
modf: numpy.ufunc

# usage.scipy: 3
modfresnelm: numpy.ufunc

# usage.scipy: 3
modfresnelp: numpy.ufunc

# usage.scipy: 2
modstruve: numpy.ufunc

# usage.dask: 24
# usage.pandas: 3
# usage.scipy: 69
# usage.skimage: 36
# usage.sklearn: 7
# usage.xarray: 2
multiply: numpy.ufunc

# usage.dask: 125
# usage.matplotlib: 61
# usage.pandas: 2265
# usage.scipy: 629
# usage.skimage: 16
# usage.sklearn: 150
# usage.xarray: 371
nan: object

# usage.scipy: 6
nbdtr: numpy.ufunc

# usage.scipy: 6
nbdtrc: numpy.ufunc

# usage.scipy: 6
nbdtri: numpy.ufunc

# usage.scipy: 7
nbdtrik: numpy.ufunc

# usage.scipy: 4
nbdtrin: numpy.ufunc

# usage.scipy: 11
ncfdtr: numpy.ufunc

# usage.scipy: 9
ncfdtri: numpy.ufunc

# usage.scipy: 4
ncfdtridfd: numpy.ufunc

# usage.scipy: 4
ncfdtridfn: numpy.ufunc

# usage.scipy: 4
ncfdtrinc: numpy.ufunc

# usage.scipy: 13
nctdtr: numpy.ufunc

# usage.scipy: 3
nctdtridf: numpy.ufunc

# usage.scipy: 4
nctdtrinc: numpy.ufunc

# usage.scipy: 8
nctdtrit: numpy.ufunc

# usage.scipy: 14
ndtr: numpy.ufunc

# usage.scipy: 21
ndtri: numpy.ufunc

# usage.dask: 41
# usage.pandas: 1
negative: numpy.ufunc

# usage.dask: 10
# usage.matplotlib: 41
# usage.pandas: 5
# usage.scipy: 134
# usage.skimage: 53
# usage.sklearn: 240
# usage.xarray: 22
newaxis: object

# usage.dask: 112
# usage.matplotlib: 1
# usage.pandas: 4
# usage.scipy: 24
# usage.sklearn: 2
# usage.xarray: 2
nextafter: numpy.ufunc

# usage.dask: 109
# usage.scipy: 4
# usage.sklearn: 6
not_equal: numpy.ufunc

# usage.scipy: 4
nrdtrimn: numpy.ufunc

# usage.scipy: 4
nrdtrisd: numpy.ufunc

# usage.dask: 6
# usage.pandas: 21
# usage.scipy: 3
# usage.sklearn: 2
# usage.xarray: 5
number: object

# usage.pandas: 46
# usage.sklearn: 11
object: object

# usage.scipy: 3
obl_ang1: numpy.ufunc

# usage.scipy: 3
obl_ang1_cv: numpy.ufunc

# usage.scipy: 2
obl_cv: numpy.ufunc

# usage.scipy: 2
obl_rad1: numpy.ufunc

# usage.scipy: 2
obl_rad1_cv: numpy.ufunc

# usage.scipy: 2
obl_rad2: numpy.ufunc

# usage.scipy: 2
obl_rad2_cv: numpy.ufunc

# usage.dask: 1
# usage.matplotlib: 4
# usage.scipy: 3
# usage.skimage: 8
ogrid: object

# usage.scipy: 19
owens_t: numpy.ufunc

# usage.scipy: 10
pbdv: numpy.ufunc

# usage.scipy: 5
pbvv: numpy.ufunc

# usage.scipy: 5
pbwa: numpy.ufunc

# usage.scipy: 14
pdtr: numpy.ufunc

# usage.scipy: 12
pdtrc: numpy.ufunc

# usage.scipy: 6
pdtri: numpy.ufunc

# usage.scipy: 9
pdtrik: numpy.ufunc

# usage.matplotlib: 129
# usage.pandas: 3
# usage.scipy: 424
# usage.skimage: 88
# usage.sklearn: 51
# usage.xarray: 10
pi: object

# usage.scipy: 20
poch: numpy.ufunc

# usage.pandas: 3
positive: numpy.ufunc

# usage.dask: 21
# usage.matplotlib: 11
# usage.scipy: 116
# usage.skimage: 7
# usage.sklearn: 47
power: numpy.ufunc

# usage.scipy: 3
pro_ang1: numpy.ufunc

# usage.scipy: 3
pro_ang1_cv: numpy.ufunc

# usage.scipy: 2
pro_cv: numpy.ufunc

# usage.scipy: 2
pro_rad1: numpy.ufunc

# usage.scipy: 2
pro_rad1_cv: numpy.ufunc

# usage.scipy: 2
pro_rad2: numpy.ufunc

# usage.scipy: 2
pro_rad2_cv: numpy.ufunc

# usage.scipy: 3
pseudo_huber: numpy.ufunc

# usage.scipy: 39
# usage.sklearn: 15
psi: numpy.ufunc

# usage.matplotlib: 6
# usage.pandas: 13
# usage.scipy: 103
# usage.skimage: 11
# usage.sklearn: 33
# usage.xarray: 3
r_: object

# usage.dask: 40
# usage.matplotlib: 16
# usage.pandas: 15
# usage.scipy: 6
# usage.skimage: 8
# usage.xarray: 2
rad2deg: numpy.ufunc

# usage.scipy: 5
radian: numpy.ufunc

# usage.dask: 40
# usage.matplotlib: 9
# usage.xarray: 2
radians: numpy.ufunc

# usage.matplotlib: 1
# usage.pandas: 1
rec: object

# usage.dask: 37
# usage.scipy: 2
# usage.skimage: 2
reciprocal: numpy.ufunc

# usage.scipy: 6
rel_entr: numpy.ufunc

# usage.dask: 23
# usage.pandas: 1
# usage.scipy: 2
# usage.sklearn: 3
# usage.xarray: 2
remainder: numpy.ufunc

# usage.scipy: 9
rgamma: numpy.ufunc

# usage.dask: 42
# usage.scipy: 11
# usage.skimage: 3
# usage.sklearn: 2
# usage.xarray: 2
rint: numpy.ufunc

# usage.dask: 1
# usage.matplotlib: 1
# usage.pandas: 5
# usage.scipy: 11
# usage.skimage: 1
round: numpy.ufunc

# usage.matplotlib: 2
# usage.pandas: 1
# usage.scipy: 4
# usage.skimage: 1
# usage.sklearn: 1
s_: object

# usage.scipy: 2
sctypes: object

# usage.scipy: 6
shichi: numpy.ufunc

# usage.scipy: 8
sici: numpy.ufunc

# usage.dask: 38
# usage.matplotlib: 10
# usage.pandas: 5
# usage.scipy: 65
# usage.skimage: 2
# usage.sklearn: 35
# usage.xarray: 3
sign: numpy.ufunc

# usage.dask: 31
# usage.pandas: 27
# usage.scipy: 7
# usage.xarray: 2
signbit: numpy.ufunc

# usage.pandas: 2
# usage.scipy: 5
# usage.skimage: 2
# usage.sklearn: 1
signedinteger: object

# usage.dask: 58
# usage.matplotlib: 127
# usage.pandas: 34
# usage.scipy: 294
# usage.skimage: 48
# usage.sklearn: 32
# usage.xarray: 30
sin: numpy.ufunc

# usage.scipy: 6
sindg: numpy.ufunc

# usage.scipy: 1
single: object

# usage.dask: 40
# usage.pandas: 15
# usage.scipy: 27
# usage.xarray: 2
sinh: numpy.ufunc

# usage.scipy: 21
smirnov: numpy.ufunc

# usage.scipy: 12
smirnovi: numpy.ufunc

# usage.dask: 37
# usage.scipy: 43
# usage.skimage: 1
# usage.sklearn: 6
spacing: numpy.ufunc

# usage.scipy: 8
spence: numpy.ufunc

# usage.scipy: 17
sph_harm: numpy.ufunc

# usage.dask: 68
# usage.matplotlib: 40
# usage.pandas: 58
# usage.scipy: 732
# usage.skimage: 110
# usage.sklearn: 246
# usage.xarray: 4
sqrt: numpy.ufunc

# usage.dask: 43
# usage.matplotlib: 2
# usage.scipy: 22
# usage.skimage: 7
# usage.sklearn: 4
# usage.xarray: 2
square: numpy.ufunc

# usage.scipy: 9
stdtr: numpy.ufunc

# usage.scipy: 4
stdtridf: numpy.ufunc

# usage.scipy: 12
stdtrit: numpy.ufunc

# usage.scipy: 2
# usage.xarray: 3
string_: object

# usage.scipy: 18
struve: numpy.ufunc

# usage.dask: 21
# usage.pandas: 38
# usage.scipy: 14
# usage.skimage: 14
# usage.sklearn: 2
# usage.xarray: 2
subtract: numpy.ufunc

# usage.dask: 40
# usage.matplotlib: 4
# usage.pandas: 15
# usage.scipy: 77
# usage.sklearn: 1
# usage.xarray: 2
tan: numpy.ufunc

# usage.scipy: 17
tandg: numpy.ufunc

# usage.dask: 40
# usage.pandas: 15
# usage.scipy: 21
# usage.skimage: 2
# usage.sklearn: 9
# usage.xarray: 2
tanh: numpy.ufunc

# usage.scipy: 9
tklmbda: numpy.ufunc

# usage.dask: 32
# usage.pandas: 5
# usage.scipy: 16
# usage.skimage: 2
# usage.sklearn: 3
true_divide: numpy.ufunc

# usage.dask: 40
# usage.scipy: 3
# usage.xarray: 2
trunc: numpy.ufunc

# usage.scipy: 1
typeDict: object

# usage.pandas: 8
# usage.scipy: 6
# usage.skimage: 4
typecodes: object

# usage.skimage: 1
ubyte: object

# usage.scipy: 3
# usage.skimage: 1
uint: object

# usage.scipy: 1
uintp: object

# usage.pandas: 2
# usage.scipy: 2
# usage.xarray: 2
unicode_: object

# usage.pandas: 2
# usage.scipy: 2
# usage.skimage: 1
unsignedinteger: object

# usage.scipy: 14
voigt_profile: numpy.ufunc

# usage.sklearn: 2
warnings: object

# usage.scipy: 4
wofz: numpy.ufunc

# usage.scipy: 15
wrightomega: numpy.ufunc

# usage.scipy: 37
xlog1py: numpy.ufunc

# usage.dask: 2
# usage.scipy: 101
# usage.sklearn: 11
xlogy: numpy.ufunc

# usage.scipy: 4
y0: numpy.ufunc

# usage.scipy: 4
y1: numpy.ufunc

# usage.scipy: 12
yn: numpy.ufunc

# usage.scipy: 38
yv: numpy.ufunc

# usage.scipy: 9
yve: numpy.ufunc

# usage.scipy: 8
zetac: numpy.ufunc


@overload
def all(a: numpy.ndarray):
    """
    usage.dask: 18
    usage.matplotlib: 27
    usage.scipy: 257
    usage.skimage: 93
    usage.sklearn: 139
    usage.xarray: 21
    """
    ...


@overload
def all(a: numpy.ndarray, axis: int):
    """
    usage.dask: 4
    usage.scipy: 3
    usage.skimage: 1
    usage.sklearn: 5
    usage.xarray: 3
    """
    ...


@overload
def all(a: numpy.ma.core.MaskedArray):
    """
    usage.dask: 3
    usage.scipy: 1
    usage.skimage: 1
    """
    ...


@overload
def all(a: List[bool]):
    """
    usage.matplotlib: 1
    usage.skimage: 1
    usage.sklearn: 1
    """
    ...


@overload
def all(a: sparse._coo.core.COO):
    """
    usage.xarray: 1
    """
    ...


@overload
def all(a: xarray.core.variable.Variable):
    """
    usage.xarray: 1
    """
    ...


@overload
def all(a: numpy.ndarray, out: None):
    """
    usage.xarray: 3
    """
    ...


@overload
def all(a: object):
    """
    usage.xarray: 2
    """
    ...


@overload
def all(a: xarray.core.dataarray.DataArray):
    """
    usage.xarray: 1
    """
    ...


@overload
def all(a: object, out: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def all(a: xarray.core.dataset.Dataset):
    """
    usage.xarray: 1
    """
    ...


@overload
def all(a: object, axis: int, out: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def all(a: numpy.ndarray, axis: int, out: None):
    """
    usage.xarray: 2
    """
    ...


@overload
def all(a: object, axis: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def all(
    a: object,
    axis: Union[int, None] = ...,
    out: Union[object, numpy.ndarray] = ...,
    keepdims: bool = ...,
):
    """
    usage.pandas: 81
    """
    ...


@overload
def all(a: bool):
    """
    usage.scipy: 7
    usage.sklearn: 5
    """
    ...


@overload
def all(
    a: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray], axis: int
):
    """
    usage.scipy: 1
    """
    ...


@overload
def all(a: numpy.bool_):
    """
    usage.scipy: 6
    usage.sklearn: 3
    """
    ...


@overload
def all(a: numpy.matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def all(a: numpy.ndarray, axis: Tuple[int, int], keepdims: bool):
    """
    usage.dask: 3
    """
    ...


@overload
def all(
    _0: numpy.ndarray, /, *, axis: Tuple[int, int], computing_meta: bool, keepdims: bool
):
    """
    usage.dask: 2
    """
    ...


@overload
def all(a: numpy.ndarray, axis: Tuple[int], keepdims: bool):
    """
    usage.dask: 8
    """
    ...


@overload
def all(
    _0: numpy.ndarray, /, *, axis: Tuple[int], computing_meta: bool, keepdims: bool
):
    """
    usage.dask: 4
    """
    ...


@overload
def all(a: numpy.ma.core.MaskedArray, axis: Tuple[int, int], keepdims: bool):
    """
    usage.dask: 4
    """
    ...


@overload
def all(
    _0: numpy.ma.core.MaskedArray,
    /,
    *,
    axis: Tuple[int, int],
    computing_meta: bool,
    keepdims: bool,
):
    """
    usage.dask: 2
    """
    ...


@overload
def all(a: numpy.ma.core.MaskedArray, axis: Tuple[int], keepdims: bool):
    """
    usage.dask: 4
    """
    ...


@overload
def all(
    _0: numpy.ma.core.MaskedArray,
    /,
    *,
    axis: Tuple[int],
    computing_meta: bool,
    keepdims: bool,
):
    """
    usage.dask: 2
    """
    ...


@overload
def all(a: numpy.ma.core.MaskedArray, axis: int):
    """
    usage.dask: 6
    """
    ...


@overload
def all(a: numpy.ma.core.MaskedArray, keepdims: bool):
    """
    usage.dask: 2
    """
    ...


@overload
def all(a: numpy.ma.core.MaskedArray, axis: int, keepdims: bool):
    """
    usage.dask: 4
    """
    ...


@overload
def all(a: dask.array.core.Array):
    """
    usage.dask: 3
    """
    ...


@overload
def all(a: numpy.ndarray, keepdims: bool):
    """
    usage.dask: 5
    """
    ...


@overload
def all(a: numpy.ndarray, axis: Tuple[None, ...], keepdims: bool):
    """
    usage.dask: 8
    """
    ...


@overload
def all(
    _0: numpy.ndarray,
    /,
    *,
    axis: Tuple[None, ...],
    computing_meta: bool,
    keepdims: bool,
):
    """
    usage.dask: 4
    """
    ...


@overload
def all(a: numpy.ndarray, axis: Tuple[None, ...]):
    """
    usage.dask: 3
    """
    ...


@overload
def all(a: numpy.ndarray, axis: int, keepdims: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def all(a: numpy.ndarray, axis: Tuple[int, int]):
    """
    usage.dask: 1
    """
    ...


@overload
def all(a: pandas.core.series.Series):
    """
    usage.dask: 1
    usage.sklearn: 10
    """
    ...


def all(
    _0: Union[numpy.ndarray, numpy.ma.core.MaskedArray] = ...,
    /,
    a: object = ...,
    axis: Union[int, None, Tuple[Union[None, int], ...]] = ...,
    keepdims: bool = ...,
    out: Union[numpy.ndarray, object, None] = ...,
    *,
    computing_meta: bool = ...,
):
    """
    usage.dask: 92
    usage.matplotlib: 28
    usage.pandas: 81
    usage.scipy: 276
    usage.skimage: 96
    usage.sklearn: 163
    usage.xarray: 38
    """
    ...


@overload
def allclose(a: List[int], b: numpy.ndarray):
    """
    usage.skimage: 1
    """
    ...


@overload
def allclose(a: List[int], b: dask.array.core.Array):
    """
    usage.skimage: 1
    """
    ...


@overload
def allclose(a: numpy.float64, b: int):
    """
    usage.scipy: 1
    usage.skimage: 3
    usage.sklearn: 2
    """
    ...


@overload
def allclose(a: List[numpy.float64], b: List[numpy.float64]):
    """
    usage.skimage: 1
    """
    ...


@overload
def allclose(a: numpy.ndarray, b: numpy.ndarray):
    """
    usage.dask: 12
    usage.matplotlib: 3
    usage.scipy: 18
    usage.skimage: 18
    usage.sklearn: 21
    usage.xarray: 6
    """
    ...


@overload
def allclose(a: numpy.float64, b: numpy.float64):
    """
    usage.dask: 3
    usage.scipy: 5
    usage.skimage: 1
    usage.sklearn: 9
    """
    ...


@overload
def allclose(a: numpy.ndarray, b: int):
    """
    usage.scipy: 12
    usage.skimage: 1
    usage.sklearn: 5
    usage.xarray: 4
    """
    ...


@overload
def allclose(a: numpy.ndarray, b: numpy.ndarray, rtol: int, atol: float):
    """
    usage.skimage: 1
    usage.sklearn: 3
    """
    ...


@overload
def allclose(a: numpy.ndarray, b: List[int]):
    """
    usage.skimage: 1
    usage.sklearn: 1
    """
    ...


@overload
def allclose(a: numpy.ndarray, b: numpy.ndarray, rtol: float, atol: float):
    """
    usage.scipy: 11
    usage.skimage: 1
    usage.sklearn: 4
    """
    ...


@overload
def allclose(a: numpy.ndarray, b: numpy.ndarray, atol: float):
    """
    usage.scipy: 4
    usage.skimage: 1
    usage.sklearn: 3
    """
    ...


@overload
def allclose(a: numpy.ndarray, b: numpy.float64, rtol: float):
    """
    usage.skimage: 1
    """
    ...


@overload
def allclose(a: xarray.core.dataarray.DataArray, b: List[int]):
    """
    usage.xarray: 1
    """
    ...


@overload
def allclose(a: xarray.core.dataarray.DataArray, b: xarray.core.dataarray.DataArray):
    """
    usage.xarray: 1
    """
    ...


@overload
def allclose(a: xarray.core.dataarray.DataArray, b: float):
    """
    usage.xarray: 2
    """
    ...


@overload
def allclose(a: numpy.ndarray, b: numpy.ndarray, rtol: float):
    """
    usage.matplotlib: 1
    usage.scipy: 61
    usage.sklearn: 2
    usage.xarray: 5
    """
    ...


@overload
def allclose(a: numpy.ndarray, b: numpy.ndarray, rtol: float, equal_nan: bool):
    """
    usage.xarray: 4
    """
    ...


@overload
def allclose(
    a: xarray.core.variable.Variable, b: xarray.core.variable.Variable, equal_nan: bool
):
    """
    usage.xarray: 1
    """
    ...


@overload
def allclose(a: numpy.ndarray, b: numpy.ndarray, equal_nan: bool):
    """
    usage.dask: 27
    usage.xarray: 15
    """
    ...


@overload
def allclose(a: int, b: int, equal_nan: bool):
    """
    usage.xarray: 2
    """
    ...


@overload
def allclose(a: bool, b: bool, equal_nan: bool):
    """
    usage.xarray: 2
    """
    ...


@overload
def allclose(a: numpy.ndarray, b: sparse._coo.core.COO, equal_nan: bool):
    """
    usage.xarray: 1
    """
    ...


@overload
def allclose(
    a: xarray.core.dataarray.DataArray,
    b: xarray.core.dataarray.DataArray,
    equal_nan: bool,
):
    """
    usage.xarray: 2
    """
    ...


@overload
def allclose(
    a: pandas.core.indexes.numeric.Int64Index,
    b: pandas.core.indexes.numeric.Int64Index,
    equal_nan: bool,
):
    """
    usage.xarray: 1
    """
    ...


@overload
def allclose(a: numpy.int64, b: numpy.int64, equal_nan: bool):
    """
    usage.dask: 1
    usage.xarray: 1
    """
    ...


@overload
def allclose(a: xarray.core.variable.Variable, b: numpy.ndarray):
    """
    usage.xarray: 2
    """
    ...


@overload
def allclose(
    a: Union[numpy.ndarray, float, complex],
    b: Union[numpy.ndarray, numpy.float64, float, complex, numpy.float32],
    rtol: Union[int, float] = ...,
    atol: float = ...,
):
    """
    usage.pandas: 42
    """
    ...


@overload
def allclose(a: numpy.float64, b: numpy.ndarray, rtol: float, atol: float):
    """
    usage.scipy: 2
    """
    ...


@overload
def allclose(a: complex, b: numpy.ndarray, rtol: float, atol: float):
    """
    usage.scipy: 1
    """
    ...


@overload
def allclose(a: numpy.float64, b: numpy.float64, rtol: float, atol: float):
    """
    usage.scipy: 2
    """
    ...


@overload
def allclose(a: numpy.float32, b: numpy.float32):
    """
    usage.scipy: 1
    """
    ...


@overload
def allclose(a: float, b: numpy.float32):
    """
    usage.scipy: 1
    """
    ...


@overload
def allclose(a: float, b: numpy.float64):
    """
    usage.dask: 2
    usage.scipy: 1
    """
    ...


@overload
def allclose(a: float, b: numpy.float64, rtol: float):
    """
    usage.scipy: 2
    """
    ...


@overload
def allclose(a: numpy.ndarray, b: List[float], rtol: float):
    """
    usage.scipy: 2
    """
    ...


@overload
def allclose(a: numpy.ndarray, b: float, atol: numpy.float64):
    """
    usage.scipy: 1
    """
    ...


@overload
def allclose(a: numpy.ndarray, b: List[float]):
    """
    usage.scipy: 4
    """
    ...


@overload
def allclose(a: numpy.ndarray, b: int, atol: float):
    """
    usage.scipy: 2
    usage.sklearn: 1
    """
    ...


@overload
def allclose(a: List[numpy.float64], b: List[numpy.float64], rtol: float, atol: float):
    """
    usage.scipy: 1
    """
    ...


@overload
def allclose(a: List[int], b: List[numpy.float64], rtol: float, atol: float):
    """
    usage.scipy: 1
    """
    ...


@overload
def allclose(a: List[float], b: List[numpy.float64], rtol: float, atol: float):
    """
    usage.scipy: 1
    """
    ...


@overload
def allclose(a: numpy.ndarray, b: float):
    """
    usage.scipy: 1
    usage.sklearn: 1
    """
    ...


@overload
def allclose(a: numpy.float64, b: float, rtol: float, atol: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def allclose(a: float, b: float, rtol: int, atol: numpy.float64):
    """
    usage.scipy: 1
    """
    ...


@overload
def allclose(a: numpy.int64, b: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def allclose(a: numpy.float64, b: float, atol: float):
    """
    usage.scipy: 1
    """
    ...


@overload
def allclose(a: numpy.float64, b: numpy.ndarray):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def allclose(a: numpy.float64, b: float):
    """
    usage.matplotlib: 3
    usage.sklearn: 1
    """
    ...


@overload
def allclose(a: numpy.ndarray, b: numpy.float64):
    """
    usage.matplotlib: 4
    usage.sklearn: 1
    """
    ...


@overload
def allclose(a: Tuple[int, float], b: Tuple[numpy.int64, float], equal_nan: bool):
    """
    usage.dask: 2
    """
    ...


@overload
def allclose(a: numpy.ndarray, b: numpy.int64, equal_nan: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def allclose(a: numpy.memmap, b: numpy.ndarray, equal_nan: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def allclose(
    a: Tuple[float, float, float], b: Tuple[float, float, float], equal_nan: bool
):
    """
    usage.dask: 2
    """
    ...


@overload
def allclose(a: numpy.float64, b: numpy.float64, equal_nan: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def allclose(a: object, b: numpy.ndarray, equal_nan: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def allclose(a: object, b: object, equal_nan: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def allclose(a: dask.array.core.Array, b: numpy.ndarray):
    """
    usage.dask: 1
    """
    ...


@overload
def allclose(a: numpy.ndarray, b: dask.array.core.Array):
    """
    usage.dask: 1
    """
    ...


@overload
def allclose(
    a: numpy.ma.core.MaskedArray, b: numpy.ma.core.MaskedArray, equal_nan: bool
):
    """
    usage.dask: 3
    """
    ...


@overload
def allclose(a: numpy.float64, b: numpy.ndarray, equal_nan: bool):
    """
    usage.dask: 2
    """
    ...


@overload
def allclose(a: numpy.ndarray, b: numpy.ma.core.MaskedArray, equal_nan: bool):
    """
    usage.dask: 3
    """
    ...


@overload
def allclose(a: numpy.bool_, b: numpy.bool_, equal_nan: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def allclose(a: numpy.int64, b: numpy.ndarray, equal_nan: bool):
    """
    usage.dask: 2
    """
    ...


@overload
def allclose(a: numpy.float32, b: numpy.float32, equal_nan: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def allclose(a: numpy.int32, b: numpy.int32, equal_nan: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def allclose(a: numpy.complex128, b: numpy.complex128, equal_nan: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def allclose(
    a: scipy.stats.stats.Power_divergenceResult,
    b: scipy.stats.stats.Power_divergenceResult,
    equal_nan: bool,
):
    """
    usage.dask: 1
    """
    ...


@overload
def allclose(
    a: scipy.stats.stats.NormaltestResult,
    b: scipy.stats.stats.NormaltestResult,
    equal_nan: bool,
):
    """
    usage.dask: 1
    """
    ...


@overload
def allclose(
    a: scipy.stats.stats.SkewtestResult,
    b: scipy.stats.stats.SkewtestResult,
    equal_nan: bool,
):
    """
    usage.dask: 1
    """
    ...


@overload
def allclose(
    a: scipy.stats.stats.KurtosistestResult,
    b: scipy.stats.stats.KurtosistestResult,
    equal_nan: bool,
):
    """
    usage.dask: 1
    """
    ...


@overload
def allclose(
    a: scipy.stats.stats.Ttest_indResult,
    b: scipy.stats.stats.Ttest_indResult,
    equal_nan: bool,
):
    """
    usage.dask: 1
    """
    ...


@overload
def allclose(
    a: scipy.stats.stats.Ttest_1sampResult,
    b: scipy.stats.stats.Ttest_1sampResult,
    equal_nan: bool,
):
    """
    usage.dask: 1
    """
    ...


@overload
def allclose(
    a: scipy.stats.stats.Ttest_relResult,
    b: scipy.stats.stats.Ttest_relResult,
    equal_nan: bool,
):
    """
    usage.dask: 1
    """
    ...


@overload
def allclose(
    a: scipy.stats.stats.F_onewayResult,
    b: scipy.stats.stats.F_onewayResult,
    equal_nan: bool,
):
    """
    usage.dask: 1
    """
    ...


@overload
def allclose(a: numpy.recarray, b: numpy.ndarray, equal_nan: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def allclose(a: float, b: int):
    """
    usage.dask: 1
    """
    ...


@overload
def allclose(a: int, b: numpy.float64):
    """
    usage.dask: 1
    """
    ...


@overload
def allclose(a: float, b: float):
    """
    usage.dask: 1
    usage.sklearn: 2
    """
    ...


@overload
def allclose(a: numpy.ndarray, b: numpy.recarray, equal_nan: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def allclose(a: dask.array.core.Array, b: dask.array.core.Array):
    """
    usage.dask: 1
    """
    ...


@overload
def allclose(a: numpy.ndarray, b: numpy.float32):
    """
    usage.sklearn: 2
    """
    ...


@overload
def allclose(a: numpy.ndarray, b: List[numpy.float64], rtol: float):
    """
    usage.sklearn: 1
    """
    ...


@overload
def allclose(a: numpy.float64, b: numpy.float64, rtol: float):
    """
    usage.sklearn: 1
    """
    ...


@overload
def allclose(a: int, b: numpy.ndarray):
    """
    usage.sklearn: 2
    """
    ...


@overload
def allclose(a: numpy.ndarray, b: float, atol: float):
    """
    usage.sklearn: 1
    """
    ...


def allclose(
    a: object,
    b: object,
    rtol: Union[int, float] = ...,
    equal_nan: bool = ...,
    atol: Union[float, int, numpy.float64] = ...,
):
    """
    usage.dask: 84
    usage.matplotlib: 12
    usage.pandas: 42
    usage.scipy: 139
    usage.skimage: 31
    usage.sklearn: 63
    usage.xarray: 50
    """
    ...


def alltrue(*args: Literal["v", "t"]):
    """
    usage.dask: 1
    usage.skimage: 2
    """
    ...


@overload
def amax(a: numpy.ndarray):
    """
    usage.dask: 11
    usage.matplotlib: 35
    usage.scipy: 132
    usage.skimage: 70
    usage.sklearn: 52
    usage.xarray: 9
    """
    ...


@overload
def amax(a: List[int]):
    """
    usage.matplotlib: 2
    usage.scipy: 10
    usage.skimage: 2
    usage.sklearn: 2
    """
    ...


@overload
def amax(a: List[numpy.int64]):
    """
    usage.scipy: 3
    usage.skimage: 4
    """
    ...


@overload
def amax(a: numpy.ndarray, axis: int):
    """
    usage.dask: 6
    usage.matplotlib: 6
    usage.scipy: 11
    usage.skimage: 6
    usage.sklearn: 14
    usage.xarray: 6
    """
    ...


@overload
def amax(a: List[numpy.ndarray], axis: int):
    """
    usage.scipy: 1
    usage.skimage: 2
    """
    ...


@overload
def amax(a: numpy.ndarray, axis: Tuple[int, int]):
    """
    usage.dask: 1
    usage.skimage: 1
    usage.xarray: 1
    """
    ...


@overload
def amax(a: numpy.ndarray, axis: Tuple[int, int], keepdims: bool):
    """
    usage.dask: 13
    usage.scipy: 3
    usage.skimage: 2
    """
    ...


@overload
def amax(a: numpy.ndarray, axis: Tuple[int, int, int], keepdims: bool):
    """
    usage.dask: 10
    usage.skimage: 2
    """
    ...


@overload
def amax(a: numpy.ma.core.MaskedArray):
    """
    usage.dask: 3
    usage.matplotlib: 1
    usage.skimage: 2
    """
    ...


@overload
def amax(a: Tuple[int, int, int]):
    """
    usage.dask: 1
    usage.skimage: 1
    """
    ...


@overload
def amax(a: Tuple[int]):
    """
    usage.skimage: 1
    """
    ...


@overload
def amax(a: Tuple[int, int]):
    """
    usage.dask: 1
    usage.skimage: 3
    """
    ...


@overload
def amax(a: Tuple[int, int, int, int]):
    """
    usage.dask: 1
    usage.skimage: 1
    """
    ...


@overload
def amax(a: numpy.ndarray, axis: None):
    """
    usage.sklearn: 2
    usage.xarray: 7
    """
    ...


@overload
def amax(a: dask.array.core.Array, axis: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def amax(a: dask.array.core.Array, axis: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def amax(a: numpy.datetime64):
    """
    usage.xarray: 1
    """
    ...


@overload
def amax(a: object, axis: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def amax(a: object):
    """
    usage.xarray: 1
    """
    ...


@overload
def amax(a: xarray.core.dataarray.DataArray):
    """
    usage.xarray: 1
    """
    ...


@overload
def amax(a: xarray.core.dataset.Dataset):
    """
    usage.xarray: 1
    """
    ...


@overload
def amax(a: object, axis: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def amax(a: object, axis: Union[None, int] = ..., out: int = ..., keepdims: int = ...):
    """
    usage.pandas: 41
    """
    ...


@overload
def amax(a: numpy.float64):
    """
    usage.scipy: 1
    """
    ...


@overload
def amax(a: float):
    """
    usage.scipy: 1
    """
    ...


@overload
def amax(a: List[numpy.float64]):
    """
    usage.matplotlib: 20
    usage.scipy: 5
    """
    ...


@overload
def amax(a: List[Union[numpy.float64, int]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def amax(a: scipy.sparse.csc.csc_matrix, axis: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def amax(a: scipy.sparse.csr.csr_matrix, axis: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def amax(a: List[numpy.ndarray]):
    """
    usage.scipy: 1
    """
    ...


@overload
def amax(a: Tuple[numpy.float64, numpy.float64]):
    """
    usage.matplotlib: 1
    usage.scipy: 2
    """
    ...


@overload
def amax(a: numpy.ndarray, axis: int, keepdims: bool):
    """
    usage.dask: 4
    usage.scipy: 5
    """
    ...


@overload
def amax(a: scipy.sparse.csr.csr_matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def amax(a: numpy.matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def amax(a: scipy.sparse.csc.csc_matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def amax(a: scipy.sparse.coo.coo_matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def amax(a: scipy.sparse.bsr.bsr_matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def amax(a: numpy.ndarray, axis: None, keepdims: bool):
    """
    usage.dask: 2
    usage.scipy: 4
    """
    ...


@overload
def amax(a: list):
    """
    usage.scipy: 1
    """
    ...


@overload
def amax(a: List[float]):
    """
    usage.dask: 1
    usage.matplotlib: 1
    """
    ...


@overload
def amax(
    a: Tuple[
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
    ]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def amax(a: Tuple[numpy.int64, numpy.int64, numpy.int64, numpy.int64]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def amax(a: Tuple[numpy.int64]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def amax(a: Tuple[numpy.float64]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def amax(a: numpy.ndarray, axis: Tuple[int], keepdims: bool):
    """
    usage.dask: 16
    """
    ...


@overload
def amax(
    _0: numpy.ndarray, /, *, axis: Tuple[int], computing_meta: bool, keepdims: bool
):
    """
    usage.dask: 8
    """
    ...


@overload
def amax(
    _0: numpy.ndarray,
    /,
    *,
    axis: Tuple[int, int, int],
    computing_meta: bool,
    keepdims: bool,
):
    """
    usage.dask: 5
    """
    ...


@overload
def amax(
    _0: numpy.ndarray, /, *, axis: Tuple[int, int], computing_meta: bool, keepdims: bool
):
    """
    usage.dask: 7
    """
    ...


@overload
def amax(a: numpy.ma.core.MaskedArray, axis: Tuple[int], keepdims: bool):
    """
    usage.dask: 4
    """
    ...


@overload
def amax(
    _0: numpy.ma.core.MaskedArray,
    /,
    *,
    axis: Tuple[int],
    computing_meta: bool,
    keepdims: bool,
):
    """
    usage.dask: 2
    """
    ...


@overload
def amax(a: numpy.ma.core.MaskedArray, axis: Tuple[int, int], keepdims: bool):
    """
    usage.dask: 4
    """
    ...


@overload
def amax(
    _0: numpy.ma.core.MaskedArray,
    /,
    *,
    axis: Tuple[int, int],
    computing_meta: bool,
    keepdims: bool,
):
    """
    usage.dask: 2
    """
    ...


@overload
def amax(a: numpy.ma.core.MaskedArray, axis: int):
    """
    usage.dask: 6
    """
    ...


@overload
def amax(a: numpy.ma.core.MaskedArray, keepdims: bool):
    """
    usage.dask: 2
    """
    ...


@overload
def amax(a: numpy.ma.core.MaskedArray, axis: int, keepdims: bool):
    """
    usage.dask: 5
    """
    ...


@overload
def amax(a: numpy.ma.core.MaskedArray, axis: None, keepdims: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def amax(a: dask.array.core.Array):
    """
    usage.dask: 1
    """
    ...


@overload
def amax(a: numpy.ndarray, keepdims: bool):
    """
    usage.dask: 5
    """
    ...


@overload
def amax(a: numpy.ndarray, axis: Tuple[None, ...], keepdims: bool):
    """
    usage.dask: 9
    """
    ...


@overload
def amax(
    _0: numpy.ndarray,
    /,
    *,
    axis: Tuple[None, ...],
    computing_meta: bool,
    keepdims: bool,
):
    """
    usage.dask: 4
    """
    ...


@overload
def amax(a: numpy.ndarray, axis: Tuple[None, ...]):
    """
    usage.dask: 4
    """
    ...


@overload
def amax(a: dask.dataframe.core.DataFrame, axis: int, out: dask.dataframe.core.Series):
    """
    usage.dask: 1
    """
    ...


@overload
def amax(a: dask.dataframe.core.Series, axis: None, out: dask.dataframe.core.Scalar):
    """
    usage.dask: 1
    """
    ...


@overload
def amax(a: pandas.core.frame.DataFrame):
    """
    usage.dask: 2
    """
    ...


@overload
def amax(a: dask.dataframe.core.Series):
    """
    usage.dask: 2
    """
    ...


@overload
def amax(a: pandas.core.series.Series):
    """
    usage.dask: 1
    """
    ...


@overload
def amax(a: dask.dataframe.core.DataFrame):
    """
    usage.dask: 2
    """
    ...


def amax(
    _0: Union[numpy.ndarray, numpy.ma.core.MaskedArray] = ...,
    /,
    a: object = ...,
    axis: Union[int, None, Tuple[Union[None, int], ...]] = ...,
    out: Union[dask.dataframe.core.Series, dask.dataframe.core.Scalar, int] = ...,
    keepdims: Union[bool, int] = ...,
    *,
    computing_meta: bool = ...,
):
    """
    usage.dask: 148
    usage.matplotlib: 70
    usage.pandas: 41
    usage.scipy: 188
    usage.skimage: 97
    usage.sklearn: 70
    usage.xarray: 31
    """
    ...


@overload
def amin(a: numpy.ndarray):
    """
    usage.dask: 14
    usage.matplotlib: 31
    usage.scipy: 49
    usage.skimage: 49
    usage.sklearn: 46
    usage.xarray: 10
    """
    ...


@overload
def amin(a: List[int]):
    """
    usage.matplotlib: 2
    usage.scipy: 1
    usage.skimage: 1
    usage.sklearn: 2
    """
    ...


@overload
def amin(a: List[numpy.int64]):
    """
    usage.scipy: 3
    usage.skimage: 4
    """
    ...


@overload
def amin(a: numpy.ndarray, axis: Tuple[int, int]):
    """
    usage.dask: 1
    usage.skimage: 1
    """
    ...


@overload
def amin(a: Tuple[int, int]):
    """
    usage.scipy: 1
    usage.skimage: 1
    usage.sklearn: 1
    """
    ...


@overload
def amin(a: numpy.ndarray, axis: int):
    """
    usage.dask: 6
    usage.matplotlib: 6
    usage.scipy: 12
    usage.sklearn: 6
    usage.xarray: 6
    """
    ...


@overload
def amin(a: numpy.ndarray, axis: None):
    """
    usage.sklearn: 2
    usage.xarray: 6
    """
    ...


@overload
def amin(a: dask.array.core.Array, axis: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def amin(a: dask.array.core.Array, axis: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def amin(a: numpy.datetime64):
    """
    usage.xarray: 1
    """
    ...


@overload
def amin(a: Tuple[numpy.float64, numpy.float64]):
    """
    usage.matplotlib: 1
    usage.xarray: 2
    """
    ...


@overload
def amin(a: object, axis: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def amin(a: object):
    """
    usage.xarray: 1
    """
    ...


@overload
def amin(a: xarray.core.dataarray.DataArray):
    """
    usage.xarray: 1
    """
    ...


@overload
def amin(a: xarray.core.dataset.Dataset):
    """
    usage.xarray: 1
    """
    ...


@overload
def amin(a: object, axis: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def amin(a: object, axis: Union[None, int] = ..., out: int = ..., keepdims: int = ...):
    """
    usage.pandas: 53
    """
    ...


@overload
def amin(a: List[Union[numpy.float64, float]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def amin(a: List[Union[numpy.float64, int]]):
    """
    usage.scipy: 6
    """
    ...


@overload
def amin(a: List[Union[int, numpy.float64]]):
    """
    usage.scipy: 6
    """
    ...


@overload
def amin(a: List[Union[int, numpy.int64]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def amin(a: numpy.ndarray, axis: int, keepdims: bool):
    """
    usage.dask: 2
    usage.scipy: 2
    """
    ...


@overload
def amin(a: List[float]):
    """
    usage.dask: 1
    usage.matplotlib: 1
    usage.scipy: 3
    usage.sklearn: 1
    """
    ...


@overload
def amin(a: List[Union[int, float]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def amin(a: scipy.sparse.csr.csr_matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def amin(a: numpy.matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def amin(a: scipy.sparse.csc.csc_matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def amin(a: scipy.sparse.coo.coo_matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def amin(a: scipy.sparse.bsr.bsr_matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def amin(a: list):
    """
    usage.scipy: 1
    """
    ...


@overload
def amin(a: numpy.int64):
    """
    usage.scipy: 4
    """
    ...


@overload
def amin(a: List[numpy.float64]):
    """
    usage.matplotlib: 20
    usage.scipy: 2
    usage.sklearn: 10
    """
    ...


@overload
def amin(
    a: Tuple[
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
    ]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def amin(a: Tuple[numpy.int64, numpy.int64, numpy.int64, numpy.int64]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def amin(a: Tuple[numpy.int64]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def amin(a: Tuple[numpy.float64]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def amin(a: numpy.ndarray, axis: Tuple[int, int], keepdims: bool):
    """
    usage.dask: 13
    """
    ...


@overload
def amin(
    _0: numpy.ndarray, /, *, axis: Tuple[int, int], computing_meta: bool, keepdims: bool
):
    """
    usage.dask: 7
    """
    ...


@overload
def amin(a: dask.array.core.Array):
    """
    usage.dask: 3
    """
    ...


@overload
def amin(a: numpy.ndarray, axis: Tuple[int], keepdims: bool):
    """
    usage.dask: 16
    """
    ...


@overload
def amin(
    _0: numpy.ndarray, /, *, axis: Tuple[int], computing_meta: bool, keepdims: bool
):
    """
    usage.dask: 8
    """
    ...


@overload
def amin(a: numpy.ndarray, axis: Tuple[int, int, int], keepdims: bool):
    """
    usage.dask: 10
    """
    ...


@overload
def amin(
    _0: numpy.ndarray,
    /,
    *,
    axis: Tuple[int, int, int],
    computing_meta: bool,
    keepdims: bool,
):
    """
    usage.dask: 5
    """
    ...


@overload
def amin(a: numpy.ma.core.MaskedArray, axis: Tuple[int, int], keepdims: bool):
    """
    usage.dask: 4
    """
    ...


@overload
def amin(
    _0: numpy.ma.core.MaskedArray,
    /,
    *,
    axis: Tuple[int, int],
    computing_meta: bool,
    keepdims: bool,
):
    """
    usage.dask: 2
    """
    ...


@overload
def amin(a: numpy.ma.core.MaskedArray):
    """
    usage.dask: 3
    """
    ...


@overload
def amin(a: numpy.ma.core.MaskedArray, axis: Tuple[int], keepdims: bool):
    """
    usage.dask: 4
    """
    ...


@overload
def amin(
    _0: numpy.ma.core.MaskedArray,
    /,
    *,
    axis: Tuple[int],
    computing_meta: bool,
    keepdims: bool,
):
    """
    usage.dask: 2
    """
    ...


@overload
def amin(a: numpy.ma.core.MaskedArray, axis: int):
    """
    usage.dask: 6
    """
    ...


@overload
def amin(a: numpy.ma.core.MaskedArray, keepdims: bool):
    """
    usage.dask: 2
    """
    ...


@overload
def amin(a: numpy.ma.core.MaskedArray, axis: int, keepdims: bool):
    """
    usage.dask: 5
    """
    ...


@overload
def amin(a: numpy.ma.core.MaskedArray, axis: None, keepdims: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def amin(a: numpy.ndarray, keepdims: bool):
    """
    usage.dask: 5
    """
    ...


@overload
def amin(a: numpy.ndarray, axis: Tuple[None, ...], keepdims: bool):
    """
    usage.dask: 9
    """
    ...


@overload
def amin(
    _0: numpy.ndarray,
    /,
    *,
    axis: Tuple[None, ...],
    computing_meta: bool,
    keepdims: bool,
):
    """
    usage.dask: 4
    """
    ...


@overload
def amin(a: numpy.ndarray, axis: Tuple[None, ...]):
    """
    usage.dask: 4
    """
    ...


@overload
def amin(a: numpy.ndarray, axis: None, keepdims: bool):
    """
    usage.dask: 2
    """
    ...


@overload
def amin(a: int):
    """
    usage.dask: 1
    usage.sklearn: 2
    """
    ...


@overload
def amin(a: numpy.ndarray, axis: Tuple[int]):
    """
    usage.dask: 1
    """
    ...


@overload
def amin(a: dask.dataframe.core.DataFrame, axis: int, out: dask.dataframe.core.Series):
    """
    usage.dask: 1
    """
    ...


@overload
def amin(a: dask.dataframe.core.Series, axis: None, out: dask.dataframe.core.Scalar):
    """
    usage.dask: 1
    """
    ...


@overload
def amin(a: dask.dataframe.core.Series):
    """
    usage.dask: 2
    """
    ...


@overload
def amin(a: pandas.core.series.Series):
    """
    usage.dask: 1
    """
    ...


@overload
def amin(a: dask.dataframe.core.DataFrame):
    """
    usage.dask: 2
    """
    ...


@overload
def amin(a: pandas.core.frame.DataFrame):
    """
    usage.dask: 1
    """
    ...


@overload
def amin(a: float):
    """
    usage.sklearn: 3
    """
    ...


def amin(
    _0: Union[numpy.ndarray, numpy.ma.core.MaskedArray] = ...,
    /,
    a: object = ...,
    axis: Union[int, None, Tuple[Union[None, int], ...]] = ...,
    out: Union[dask.dataframe.core.Series, dask.dataframe.core.Scalar, int] = ...,
    keepdims: Union[bool, int] = ...,
    *,
    computing_meta: bool = ...,
):
    """
    usage.dask: 149
    usage.matplotlib: 65
    usage.pandas: 53
    usage.scipy: 98
    usage.skimage: 56
    usage.sklearn: 73
    usage.xarray: 32
    """
    ...


@overload
def angle(z: numpy.ndarray):
    """
    usage.dask: 3
    usage.matplotlib: 4
    usage.scipy: 7
    usage.skimage: 3
    usage.xarray: 1
    """
    ...


@overload
def angle(z: xarray.core.dataarray.DataArray):
    """
    usage.xarray: 1
    """
    ...


@overload
def angle(z: numpy.complex128):
    """
    usage.scipy: 1
    """
    ...


@overload
def angle(z: numpy.float64):
    """
    usage.scipy: 1
    """
    ...


@overload
def angle(z: bool, deg: numpy.ndarray):
    """
    usage.dask: 2
    """
    ...


@overload
def angle(z: numpy.ndarray, deg: bool):
    """
    usage.dask: 4
    """
    ...


@overload
def angle(z: bool, deg: pandas.core.series.Series):
    """
    usage.dask: 1
    """
    ...


@overload
def angle(z: pandas.core.series.Series, deg: bool):
    """
    usage.dask: 2
    """
    ...


@overload
def angle(z: pandas.core.series.Series):
    """
    usage.dask: 3
    """
    ...


@overload
def angle(z: dask.dataframe.core.Series):
    """
    usage.dask: 2
    """
    ...


@overload
def angle(z: bool, deg: pandas.core.frame.DataFrame):
    """
    usage.dask: 1
    """
    ...


@overload
def angle(z: pandas.core.frame.DataFrame, deg: bool):
    """
    usage.dask: 2
    """
    ...


@overload
def angle(z: pandas.core.frame.DataFrame):
    """
    usage.dask: 3
    """
    ...


@overload
def angle(z: dask.dataframe.core.DataFrame):
    """
    usage.dask: 2
    """
    ...


def angle(
    z: object,
    deg: Union[
        bool, numpy.ndarray, pandas.core.series.Series, pandas.core.frame.DataFrame
    ] = ...,
):
    """
    usage.dask: 25
    usage.matplotlib: 4
    usage.scipy: 9
    usage.skimage: 3
    usage.xarray: 2
    """
    ...


@overload
def any(a: numpy.bool_):
    """
    usage.dask: 1
    usage.matplotlib: 1
    usage.scipy: 24
    usage.skimage: 2
    usage.sklearn: 4
    """
    ...


@overload
def any(a: numpy.ndarray):
    """
    usage.dask: 10
    usage.matplotlib: 11
    usage.scipy: 154
    usage.skimage: 33
    usage.sklearn: 61
    usage.xarray: 4
    """
    ...


@overload
def any(a: List[bool]):
    """
    usage.scipy: 1
    usage.skimage: 1
    usage.sklearn: 4
    """
    ...


@overload
def any(a: numpy.ndarray, axis: int):
    """
    usage.dask: 4
    usage.scipy: 4
    usage.sklearn: 5
    usage.xarray: 4
    """
    ...


@overload
def any(a: numpy.bool_, axis: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def any(a: sparse._coo.core.COO):
    """
    usage.xarray: 1
    """
    ...


@overload
def any(a: object):
    """
    usage.xarray: 2
    """
    ...


@overload
def any(a: xarray.core.dataarray.DataArray):
    """
    usage.xarray: 1
    """
    ...


@overload
def any(a: numpy.ndarray, out: None):
    """
    usage.xarray: 2
    """
    ...


@overload
def any(a: object, out: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def any(a: xarray.core.dataset.Dataset):
    """
    usage.xarray: 1
    """
    ...


@overload
def any(a: object, axis: int, out: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def any(a: numpy.ndarray, axis: int, out: None):
    """
    usage.xarray: 2
    """
    ...


@overload
def any(a: object, axis: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def any(
    a: object,
    axis: Union[int, None] = ...,
    out: Union[object, bool] = ...,
    keepdims: bool = ...,
):
    """
    usage.pandas: 46
    """
    ...


@overload
def any(a: List[numpy.ndarray]):
    """
    usage.scipy: 1
    """
    ...


@overload
def any(a: Tuple[None, ...]):
    """
    usage.scipy: 2
    """
    ...


@overload
def any(a: bool):
    """
    usage.matplotlib: 3
    usage.scipy: 3
    usage.sklearn: 1
    """
    ...


@overload
def any(a: numpy.int64):
    """
    usage.scipy: 17
    """
    ...


@overload
def any(a: numpy.ma.core.MaskedArray):
    """
    usage.dask: 3
    usage.matplotlib: 1
    """
    ...


@overload
def any(a: numpy.ma.core.MaskedArray, axis: Tuple[int, int], keepdims: bool):
    """
    usage.dask: 4
    """
    ...


@overload
def any(
    _0: numpy.ma.core.MaskedArray,
    /,
    *,
    axis: Tuple[int, int],
    computing_meta: bool,
    keepdims: bool,
):
    """
    usage.dask: 2
    """
    ...


@overload
def any(a: numpy.ma.core.MaskedArray, axis: Tuple[int], keepdims: bool):
    """
    usage.dask: 4
    """
    ...


@overload
def any(
    _0: numpy.ma.core.MaskedArray,
    /,
    *,
    axis: Tuple[int],
    computing_meta: bool,
    keepdims: bool,
):
    """
    usage.dask: 2
    """
    ...


@overload
def any(a: numpy.ma.core.MaskedArray, axis: int):
    """
    usage.dask: 6
    """
    ...


@overload
def any(a: numpy.ma.core.MaskedArray, keepdims: bool):
    """
    usage.dask: 2
    """
    ...


@overload
def any(a: numpy.ma.core.MaskedArray, axis: int, keepdims: bool):
    """
    usage.dask: 4
    """
    ...


@overload
def any(a: numpy.ndarray, axis: Tuple[int], keepdims: bool):
    """
    usage.dask: 8
    """
    ...


@overload
def any(
    _0: numpy.ndarray, /, *, axis: Tuple[int], computing_meta: bool, keepdims: bool
):
    """
    usage.dask: 4
    """
    ...


@overload
def any(a: numpy.ndarray, keepdims: bool):
    """
    usage.dask: 5
    """
    ...


@overload
def any(a: numpy.ndarray, axis: Tuple[None, ...], keepdims: bool):
    """
    usage.dask: 7
    """
    ...


@overload
def any(
    _0: numpy.ndarray,
    /,
    *,
    axis: Tuple[None, ...],
    computing_meta: bool,
    keepdims: bool,
):
    """
    usage.dask: 3
    """
    ...


@overload
def any(a: numpy.ndarray, axis: Tuple[None, ...]):
    """
    usage.dask: 3
    """
    ...


@overload
def any(a: numpy.ndarray, axis: Tuple[int, int], keepdims: bool):
    """
    usage.dask: 4
    """
    ...


@overload
def any(
    _0: numpy.ndarray, /, *, axis: Tuple[int, int], computing_meta: bool, keepdims: bool
):
    """
    usage.dask: 2
    """
    ...


@overload
def any(a: numpy.ndarray, axis: int, keepdims: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def any(a: numpy.ndarray, axis: Tuple[int, int]):
    """
    usage.dask: 1
    """
    ...


@overload
def any(a: pandas.core.series.Series):
    """
    usage.dask: 1
    """
    ...


@overload
def any(a: List[numpy.bool_]):
    """
    usage.sklearn: 6
    """
    ...


@overload
def any(a: List[Union[bool, numpy.bool_]]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def any(a: List[Union[numpy.bool_, bool]]):
    """
    usage.sklearn: 1
    """
    ...


def any(
    _0: Union[numpy.ndarray, numpy.ma.core.MaskedArray] = ...,
    /,
    a: object = ...,
    axis: Union[int, None, Tuple[Union[None, int], ...]] = ...,
    keepdims: bool = ...,
    out: Union[bool, object, None] = ...,
    *,
    computing_meta: bool = ...,
):
    """
    usage.dask: 81
    usage.matplotlib: 16
    usage.pandas: 46
    usage.scipy: 206
    usage.skimage: 36
    usage.sklearn: 83
    usage.xarray: 21
    """
    ...


@overload
def append(
    arr: Union[List[float], pandas.core.indexes.base.Index, numpy.ndarray],
    values: Union[numpy.ndarray, pandas.core.indexes.base.Index, int, Literal["k"]],
):
    """
    usage.pandas: 8
    """
    ...


@overload
def append(arr: bool, values: numpy.ndarray):
    """
    usage.scipy: 1
    """
    ...


@overload
def append(arr: numpy.ndarray, values: int):
    """
    usage.scipy: 3
    usage.sklearn: 1
    """
    ...


@overload
def append(arr: numpy.ndarray, values: numpy.ndarray):
    """
    usage.matplotlib: 1
    usage.scipy: 14
    usage.sklearn: 7
    """
    ...


@overload
def append(arr: int, values: numpy.ndarray):
    """
    usage.scipy: 3
    """
    ...


@overload
def append(arr: numpy.ndarray, values: float):
    """
    usage.dask: 1
    usage.matplotlib: 2
    usage.scipy: 2
    usage.sklearn: 3
    """
    ...


@overload
def append(arr: numpy.ndarray, values: numpy.int32):
    """
    usage.scipy: 1
    """
    ...


@overload
def append(arr: numpy.ndarray, values: numpy.int64):
    """
    usage.scipy: 1
    """
    ...


@overload
def append(arr: numpy.ndarray, values: numpy.float64):
    """
    usage.scipy: 2
    usage.sklearn: 4
    """
    ...


@overload
def append(arr: numpy.ndarray, values: numpy.ndarray, axis: int):
    """
    usage.scipy: 32
    usage.sklearn: 9
    """
    ...


@overload
def append(arr: numpy.float64, values: numpy.float64):
    """
    usage.scipy: 1
    """
    ...


@overload
def append(arr: numpy.ndarray, values: List[int]):
    """
    usage.scipy: 2
    usage.sklearn: 4
    """
    ...


@overload
def append(arr: numpy.ndarray, values: List[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def append(arr: numpy.ndarray, values: List[Tuple[int, int]], axis: int):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def append(arr: List[numpy.float64], values: numpy.ndarray):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def append(arr: numpy.ndarray, values: Literal["a"]):
    """
    usage.sklearn: 1
    """
    ...


def append(arr: object, values: object, axis: int = ...):
    """
    usage.dask: 1
    usage.matplotlib: 6
    usage.pandas: 8
    usage.scipy: 63
    usage.sklearn: 29
    """
    ...


@overload
def apply_along_axis(func1d: Callable, axis: int, arr: numpy.ndarray):
    """
    usage.skimage: 1
    """
    ...


@overload
def apply_along_axis(func1d: Callable, axis: int, arr: numpy.ndarray):
    """
    usage.skimage: 1
    """
    ...


@overload
def apply_along_axis(func1d: Callable, axis: int, arr: numpy.ndarray):
    """
    usage.dask: 2
    usage.scipy: 50
    usage.skimage: 6
    usage.sklearn: 3
    """
    ...


@overload
def apply_along_axis(
    func1d: Callable, axis: int, arr: numpy.ndarray, *args: Literal["v", "t"]
):
    """
    usage.dask: 1
    usage.matplotlib: 2
    usage.pandas: 7
    """
    ...


@overload
def apply_along_axis(
    func1d: Callable, axis: int, arr: numpy.ndarray, *args: Literal["v", "t"]
):
    """
    usage.scipy: 25
    """
    ...


@overload
def apply_along_axis(func1d: Callable, axis: int, arr: numpy.ndarray):
    """
    usage.scipy: 2
    """
    ...


@overload
def apply_along_axis(
    func1d: Callable, axis: int, arr: numpy.ndarray, *args: Literal["v", "t"]
):
    """
    usage.scipy: 1
    """
    ...


@overload
def apply_along_axis(
    func1d: Callable, axis: int, arr: numpy.ndarray, *args: Literal["v", "t"]
):
    """
    usage.scipy: 3
    """
    ...


@overload
def apply_along_axis(func1d: Callable, axis: int, arr: numpy.ndarray):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def apply_along_axis(func1d: int, axis: Callable, arr: int, *args: Literal["v", "t"]):
    """
    usage.dask: 1
    """
    ...


@overload
def apply_along_axis(func1d: Callable, axis: int, arr: numpy.ndarray):
    """
    usage.sklearn: 1
    """
    ...


@overload
def apply_along_axis(
    func1d: sklearn.gaussian_process.kernels.PairwiseKernel,
    axis: int,
    arr: numpy.ndarray,
):
    """
    usage.sklearn: 1
    """
    ...


def apply_along_axis(
    func1d: Union[Callable, sklearn.gaussian_process.kernels.PairwiseKernel, int],
    axis: Union[int, Callable],
    arr: Union[numpy.ndarray, int],
    *args: Literal["v", "t"],
):
    """
    usage.dask: 4
    usage.matplotlib: 3
    usage.pandas: 7
    usage.scipy: 81
    usage.skimage: 8
    usage.sklearn: 5
    """
    ...


@overload
def apply_over_axes(func: Callable, a: numpy.ndarray, axes: Tuple[int, int]):
    """
    usage.skimage: 10
    """
    ...


@overload
def apply_over_axes(func: Callable, a: numpy.ndarray, axes: list):
    """
    usage.scipy: 2
    """
    ...


@overload
def apply_over_axes(func: Callable, a: numpy.ndarray, axes: List[int]):
    """
    usage.scipy: 5
    """
    ...


@overload
def apply_over_axes(func: Callable, a: numpy.ndarray, axes: Tuple[None, ...]):
    """
    usage.dask: 1
    """
    ...


@overload
def apply_over_axes(func: Callable, a: numpy.ndarray, axes: int):
    """
    usage.dask: 1
    """
    ...


@overload
def apply_over_axes(func: Callable, a: numpy.ndarray, axes: Tuple[int]):
    """
    usage.dask: 1
    """
    ...


@overload
def apply_over_axes(func: Callable, a: numpy.ndarray, axes: Tuple[int, int]):
    """
    usage.dask: 1
    """
    ...


@overload
def apply_over_axes(func: Callable, a: numpy.ndarray, axes: Tuple[int, int, int]):
    """
    usage.dask: 1
    """
    ...


def apply_over_axes(
    func: Callable,
    a: numpy.ndarray,
    axes: Union[int, Tuple[Union[int, None], ...], List[int]],
):
    """
    usage.dask: 5
    usage.scipy: 7
    usage.skimage: 10
    """
    ...


@overload
def arange(_0: int, /):
    """
    usage.dask: 241
    usage.matplotlib: 188
    usage.sample-usage: 4
    usage.scipy: 504
    usage.skimage: 95
    usage.sklearn: 287
    usage.xarray: 518
    """
    ...


@overload
def arange(_0: int, /, *, dtype: Type[float]):
    """
    usage.dask: 3
    usage.matplotlib: 11
    usage.scipy: 20
    usage.skimage: 6
    """
    ...


@overload
def arange(_0: numpy.int64, _1: numpy.int64, /):
    """
    usage.scipy: 3
    usage.skimage: 1
    usage.sklearn: 1
    """
    ...


@overload
def arange(_0: numpy.float64, _1: numpy.float64, _2: float, /):
    """
    usage.skimage: 1
    """
    ...


@overload
def arange(_0: int, _1: int, /):
    """
    usage.dask: 15
    usage.matplotlib: 21
    usage.scipy: 160
    usage.skimage: 20
    usage.sklearn: 35
    usage.xarray: 66
    """
    ...


@overload
def arange(_0: int, _1: int, _2: int, /):
    """
    usage.dask: 5
    usage.matplotlib: 26
    usage.scipy: 46
    usage.skimage: 12
    usage.sklearn: 8
    usage.xarray: 20
    """
    ...


@overload
def arange(_0: int, _1: int, _2: int, _3: Type[numpy.uint8], /):
    """
    usage.skimage: 9
    """
    ...


@overload
def arange(_0: int, /, *, dtype: Type[numpy.float32]):
    """
    usage.dask: 4
    usage.scipy: 11
    usage.skimage: 4
    usage.sklearn: 2
    usage.xarray: 4
    """
    ...


@overload
def arange(_0: int, /, *, dtype: Type[numpy.float64]):
    """
    usage.scipy: 43
    usage.skimage: 1
    usage.sklearn: 7
    usage.xarray: 1
    """
    ...


@overload
def arange(_0: numpy.int64, /):
    """
    usage.dask: 4
    usage.matplotlib: 2
    usage.scipy: 9
    usage.skimage: 5
    usage.sklearn: 6
    """
    ...


@overload
def arange(_0: int, /, *, dtype: Type[numpy.uint8]):
    """
    usage.scipy: 4
    usage.skimage: 2
    """
    ...


@overload
def arange(_0: dask.array.core.Array, /):
    """
    usage.skimage: 1
    """
    ...


@overload
def arange(_0: numpy.int64, /, *, dtype: Type[numpy.float32]):
    """
    usage.skimage: 1
    """
    ...


@overload
def arange(_0: numpy.int64, /, *, dtype: numpy.dtype):
    """
    usage.scipy: 12
    usage.skimage: 1
    """
    ...


@overload
def arange(_0: int, _1: float, _2: float, /):
    """
    usage.dask: 3
    usage.matplotlib: 11
    usage.scipy: 3
    usage.skimage: 3
    """
    ...


@overload
def arange(_0: numpy.float64, _1: numpy.float64, _2: numpy.float64, /):
    """
    usage.matplotlib: 2
    usage.skimage: 1
    """
    ...


@overload
def arange(_0: int, _1: int, _2: float, /):
    """
    usage.dask: 6
    usage.matplotlib: 16
    usage.scipy: 8
    usage.skimage: 1
    usage.sklearn: 1
    """
    ...


@overload
def arange(_0: int, /, *, dtype: Type[numpy.int64]):
    """
    usage.dask: 4
    usage.scipy: 9
    usage.skimage: 1
    usage.sklearn: 7
    usage.xarray: 5
    """
    ...


@overload
def arange(_0: numpy.float64, /):
    """
    usage.matplotlib: 3
    usage.scipy: 1
    usage.skimage: 2
    """
    ...


@overload
def arange(_0: int, /, *, dtype: numpy.dtype):
    """
    usage.dask: 1
    usage.matplotlib: 7
    usage.scipy: 12
    usage.skimage: 2
    """
    ...


@overload
def arange(_0: int, /, *, dtype: Type[int]):
    """
    usage.scipy: 7
    usage.skimage: 1
    usage.sklearn: 3
    usage.xarray: 2
    """
    ...


@overload
def arange(_0: float, _1: float, /):
    """
    usage.matplotlib: 10
    usage.scipy: 8
    usage.skimage: 1
    usage.xarray: 1
    """
    ...


@overload
def arange(_0: int, _1: float, _2: int, /, *, dtype: Type[int]):
    """
    usage.skimage: 1
    """
    ...


@overload
def arange(_0: float, _1: int, _2: int, /, *, dtype: Type[int]):
    """
    usage.skimage: 1
    """
    ...


@overload
def arange(_0: int, _1: int, _2: None, /):
    """
    usage.skimage: 1
    """
    ...


@overload
def arange(_0: int, _1: int, /, *, dtype: Literal[">i2"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def arange(_0: int, _1: int, /, *, dtype: Literal["<i4"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def arange(_0: int, _1: int, /, *, dtype: Literal["=i8"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def arange(_0: int, _1: int, /, *, dtype: Type[float]):
    """
    usage.scipy: 7
    usage.xarray: 1
    """
    ...


@overload
def arange(_0: float, /):
    """
    usage.dask: 4
    usage.matplotlib: 1
    usage.scipy: 66
    usage.xarray: 21
    """
    ...


@overload
def arange(_0: int, /, *, dtype: Literal["int16"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def arange(_0: float, /, *, dtype: Literal["f4"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def arange(_0: int, /, *, dtype: Literal["f"]):
    """
    usage.xarray: 2
    """
    ...


@overload
def arange(_0: int, /, *, dtype: Literal["float32"]):
    """
    usage.xarray: 3
    """
    ...


@overload
def arange(_0: int, /, *, dtype: Literal["u1"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def arange(_0: int, /, *, dtype: Literal["u2"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def arange(_0: int, /, *, dtype: Literal["i1"]):
    """
    usage.dask: 2
    usage.xarray: 1
    """
    ...


@overload
def arange(_0: int, /, *, dtype: Literal["i2"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def arange(_0: int, /, *, dtype: Literal["f2"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def arange(_0: int, /, *, dtype: Literal["f4"]):
    """
    usage.dask: 3
    usage.xarray: 1
    """
    ...


@overload
def arange(_0: int, /, *, dtype: Literal["int64"]):
    """
    usage.xarray: 3
    """
    ...


@overload
def arange(_0: int, /, *, dtype: Literal[">i8"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def arange(_0: numpy.int64, _1: numpy.int64, _2: None, /):
    """
    usage.xarray: 1
    """
    ...


@overload
def arange(_0: float, _1: float, /, *, dtype: Literal["float64"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def arange(_0: int, /, *, dtype: Type[numpy.int32]):
    """
    usage.dask: 3
    usage.matplotlib: 15
    usage.scipy: 14
    usage.sklearn: 1
    usage.xarray: 1
    """
    ...


@overload
def arange(_0: int, _1: int, /, *, dtype: Type[int]):
    """
    usage.dask: 1
    usage.matplotlib: 1
    usage.scipy: 3
    usage.xarray: 1
    """
    ...


@overload
def arange(_0: int, /, *, dtype: Literal["uint8"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def arange(_0: int, /, *, dtype: Literal["i8"]):
    """
    usage.dask: 1
    usage.xarray: 2
    """
    ...


@overload
def arange(
    _0: Union[int, numpy.int64, float, Literal["2019-01-01"]],
    _1: Union[int, numpy.int64, numpy.uint64, float, Literal["2019-01-06"]] = ...,
    _2: Union[int, numpy.float64, float, None] = ...,
    /,
    *,
    dtype: Union[type, numpy.dtype, str] = ...,
    step: Union[int, float] = ...,
):
    """
    usage.pandas: 894
    """
    ...


@overload
def arange(_0: int, /, *, dtype: Type[numpy.complex64]):
    """
    usage.scipy: 9
    """
    ...


@overload
def arange(_0: int, /, *, dtype: Type[numpy.complex128]):
    """
    usage.scipy: 6
    """
    ...


@overload
def arange(_0: int, /, *, dtype: Type[numpy.complex256]):
    """
    usage.scipy: 1
    """
    ...


@overload
def arange(_0: float, _1: float, _2: float, /):
    """
    usage.dask: 3
    usage.matplotlib: 17
    usage.scipy: 6
    usage.sklearn: 4
    """
    ...


@overload
def arange(_0: int, /, *, dtype: Literal["d"]):
    """
    usage.scipy: 6
    """
    ...


@overload
def arange(_0: int, /, *, dtype: Type[numpy.float16]):
    """
    usage.scipy: 1
    """
    ...


@overload
def arange(_0: int, /, *, dtype: Type[numpy.float128]):
    """
    usage.scipy: 4
    """
    ...


@overload
def arange(_0: int, _1: int, /, *, dtype: Type[numpy.float16]):
    """
    usage.scipy: 1
    """
    ...


@overload
def arange(_0: int, _1: int, /, *, dtype: Type[numpy.float32]):
    """
    usage.dask: 1
    usage.scipy: 4
    """
    ...


@overload
def arange(_0: int, _1: int, /, *, dtype: Type[numpy.float64]):
    """
    usage.scipy: 7
    """
    ...


@overload
def arange(_0: int, _1: int, /, *, dtype: Literal["d"]):
    """
    usage.scipy: 8
    """
    ...


@overload
def arange(_0: float, /, *, dtype: Type[numpy.float32]):
    """
    usage.scipy: 22
    """
    ...


@overload
def arange(_0: float, /, *, dtype: numpy.dtype):
    """
    usage.scipy: 12
    """
    ...


@overload
def arange(_0: float, /, *, dtype: Type[numpy.float64]):
    """
    usage.scipy: 22
    """
    ...


@overload
def arange(_0: float, /, *, dtype: Type[numpy.complex64]):
    """
    usage.scipy: 22
    """
    ...


@overload
def arange(_0: float, /, *, dtype: Type[numpy.complex128]):
    """
    usage.scipy: 22
    """
    ...


@overload
def arange(_0: int, /, *, dtype: Type[numpy.int8]):
    """
    usage.scipy: 3
    """
    ...


@overload
def arange(_0: int, /, *, dtype: Type[numpy.int16]):
    """
    usage.scipy: 3
    """
    ...


@overload
def arange(_0: int, /, *, dtype: Type[numpy.uint16]):
    """
    usage.scipy: 2
    """
    ...


@overload
def arange(_0: int, /, *, dtype: Type[numpy.uint32]):
    """
    usage.scipy: 2
    usage.sklearn: 7
    """
    ...


@overload
def arange(_0: int, /, *, dtype: Type[numpy.uint64]):
    """
    usage.scipy: 2
    """
    ...


@overload
def arange(_0: numpy.int64, /, *, dtype: Type[numpy.int32]):
    """
    usage.matplotlib: 1
    usage.scipy: 1
    """
    ...


@overload
def arange(_0: int, /, *, dtype: Literal["<f4"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def arange(_0: int, /, *, dtype: Literal[">f4"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def arange(_0: int, _1: numpy.int64, /):
    """
    usage.scipy: 7
    """
    ...


@overload
def arange(_0: float, /, *, dtype: Literal["float64"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def arange(_0: numpy.int64, /, *, dtype: Type[int]):
    """
    usage.scipy: 1
    usage.sklearn: 1
    """
    ...


@overload
def arange(_0: numpy.int8, /):
    """
    usage.scipy: 2
    """
    ...


@overload
def arange(_0: numpy.int16, /):
    """
    usage.scipy: 2
    """
    ...


@overload
def arange(_0: numpy.int32, /):
    """
    usage.scipy: 2
    """
    ...


@overload
def arange(_0: numpy.ndarray, /):
    """
    usage.scipy: 2
    """
    ...


@overload
def arange(_0: numpy.int64, _1: numpy.int64, _2: int, /):
    """
    usage.scipy: 6
    """
    ...


@overload
def arange(_0: numpy.int64, _1: int, _2: int, /):
    """
    usage.scipy: 2
    """
    ...


@overload
def arange(_0: int, _1: numpy.int64, _2: int, /):
    """
    usage.scipy: 2
    """
    ...


@overload
def arange(_0: int, _1: numpy.float64, /):
    """
    usage.scipy: 1
    """
    ...


@overload
def arange(_0: float, _1: float, _2: int, /):
    """
    usage.matplotlib: 1
    usage.scipy: 1
    """
    ...


@overload
def arange(_0: float, _1: int, /):
    """
    usage.scipy: 6
    """
    ...


@overload
def arange(_0: int, _1: int, /, *, dtype: numpy.dtype):
    """
    usage.scipy: 6
    """
    ...


@overload
def arange(_0: int, _1: float, /):
    """
    usage.matplotlib: 1
    usage.scipy: 3
    """
    ...


@overload
def arange(_0: int, /, *, dtype: Literal["int32"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def arange(_0: numpy.int64, _1: numpy.int64, /, *, dtype: numpy.dtype):
    """
    usage.scipy: 4
    """
    ...


@overload
def arange(_0: numpy.float64, _1: numpy.float64, _2: int, /):
    """
    usage.matplotlib: 2
    usage.scipy: 1
    """
    ...


@overload
def arange(_0: numpy.float64, _1: numpy.float64, /):
    """
    usage.matplotlib: 1
    usage.scipy: 2
    """
    ...


@overload
def arange(_0: numpy.float64, _1: numpy.int64, /):
    """
    usage.scipy: 1
    """
    ...


@overload
def arange(_0: int, _1: int, _2: int, /, *, dtype: Type[float]):
    """
    usage.matplotlib: 2
    usage.scipy: 2
    """
    ...


@overload
def arange(_0: numpy.int64, _1: numpy.int64, _2: numpy.int64, /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def arange(_0: float, _1: int, _2: float, /):
    """
    usage.matplotlib: 4
    """
    ...


@overload
def arange(_0: int, _1: float, _2: int, /):
    """
    usage.dask: 1
    usage.matplotlib: 6
    """
    ...


@overload
def arange(_0: int, /, *, dtype: Literal["float"]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def arange(_0: int, _1: int, _2: int, _3: Type[numpy.float64], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def arange(
    _0: Literal["2018-11-03"],
    _1: Literal["2018-11-06"],
    /,
    *,
    dtype: Literal["datetime64"],
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def arange(_0: int, _1: int, /, *, dtype: Type[numpy.int32]):
    """
    usage.dask: 1
    usage.matplotlib: 4
    """
    ...


@overload
def arange(
    _0: Literal["2005-02"],
    _1: Literal["2005-03"],
    /,
    *,
    dtype: Literal["datetime64[D]"],
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def arange(_0: int, /, *, dtype: Literal["i4"]):
    """
    usage.dask: 1
    """
    ...


@overload
def arange(_0: int, _1: int, _2: int, _3: numpy.dtype, /):
    """
    usage.dask: 2
    """
    ...


@overload
def arange(_0: int, _1: int, _2: int, _3: Type[numpy.int32], /):
    """
    usage.dask: 1
    """
    ...


@overload
def arange(_0: int, _1: int, _2: int, _3: Type[float], /):
    """
    usage.dask: 1
    """
    ...


@overload
def arange(_0: int, _1: int, _2: int, _3: Type[int], /):
    """
    usage.dask: 1
    """
    ...


@overload
def arange(_0: float, _1: float, _2: float, _3: numpy.dtype, /):
    """
    usage.dask: 1
    """
    ...


@overload
def arange(_0: int, _1: int, _2: int, /, *, dtype: None):
    """
    usage.dask: 1
    """
    ...


@overload
def arange(_0: float, _1: int, _2: int, /, *, dtype: None):
    """
    usage.dask: 1
    """
    ...


@overload
def arange(_0: float, _1: int, _2: int, /):
    """
    usage.dask: 1
    """
    ...


@overload
def arange(_0: float, _1: float, _2: int, _3: numpy.dtype, /):
    """
    usage.dask: 1
    """
    ...


@overload
def arange(_0: int, _1: float, _2: int, /, *, dtype: None):
    """
    usage.dask: 1
    """
    ...


@overload
def arange(_0: int, _1: int, _2: float, /, *, dtype: None):
    """
    usage.dask: 1
    """
    ...


@overload
def arange(_0: numpy.float32, _1: numpy.float32, _2: numpy.float32, /, *, dtype: None):
    """
    usage.dask: 1
    """
    ...


@overload
def arange(_0: numpy.float32, _1: numpy.float32, _2: numpy.float64, /):
    """
    usage.dask: 1
    """
    ...


@overload
def arange(_0: numpy.float64, _1: numpy.float64, _2: numpy.float32, _3: numpy.dtype, /):
    """
    usage.dask: 1
    """
    ...


@overload
def arange(_0: numpy.int32, _1: numpy.int32, _2: numpy.int32, /, *, dtype: None):
    """
    usage.dask: 1
    """
    ...


@overload
def arange(_0: numpy.int32, _1: numpy.int32, _2: numpy.int64, /):
    """
    usage.dask: 1
    """
    ...


@overload
def arange(_0: numpy.int64, _1: numpy.int64, _2: numpy.int32, _3: numpy.dtype, /):
    """
    usage.dask: 1
    """
    ...


@overload
def arange(_0: numpy.uint32, _1: numpy.uint32, _2: numpy.uint32, /, *, dtype: None):
    """
    usage.dask: 1
    """
    ...


@overload
def arange(_0: numpy.uint32, _1: numpy.uint32, _2: numpy.int64, /):
    """
    usage.dask: 1
    """
    ...


@overload
def arange(_0: numpy.int64, _1: numpy.int64, _2: numpy.uint32, _3: numpy.dtype, /):
    """
    usage.dask: 1
    """
    ...


@overload
def arange(_0: numpy.uint64, _1: numpy.uint64, _2: numpy.uint64, /, *, dtype: None):
    """
    usage.dask: 1
    """
    ...


@overload
def arange(_0: numpy.uint64, _1: numpy.uint64, _2: numpy.float64, /):
    """
    usage.dask: 1
    """
    ...


@overload
def arange(_0: numpy.float64, _1: numpy.float64, _2: numpy.uint64, _3: numpy.dtype, /):
    """
    usage.dask: 1
    """
    ...


@overload
def arange(
    _0: numpy.uint32,
    _1: numpy.uint32,
    _2: numpy.uint32,
    /,
    *,
    dtype: Type[numpy.uint32],
):
    """
    usage.dask: 1
    """
    ...


@overload
def arange(
    _0: numpy.int64, _1: numpy.int64, _2: numpy.uint32, _3: Type[numpy.uint32], /
):
    """
    usage.dask: 1
    """
    ...


@overload
def arange(
    _0: numpy.uint64,
    _1: numpy.uint64,
    _2: numpy.uint64,
    /,
    *,
    dtype: Type[numpy.uint64],
):
    """
    usage.dask: 1
    """
    ...


@overload
def arange(
    _0: numpy.float64, _1: numpy.float64, _2: numpy.uint64, _3: Type[numpy.uint64], /
):
    """
    usage.dask: 1
    """
    ...


@overload
def arange(_0: float, _1: float, _2: float, /, *, dtype: Literal["i8"]):
    """
    usage.dask: 1
    """
    ...


@overload
def arange(_0: float, _1: float, _2: float, _3: Literal["i8"], /):
    """
    usage.dask: 1
    """
    ...


@overload
def arange(_0: numpy.int64, /, *, dtype: Literal["float32"]):
    """
    usage.dask: 1
    """
    ...


@overload
def arange(_0: numpy.int64, /, *, dtype: Literal["float64"]):
    """
    usage.dask: 1
    """
    ...


@overload
def arange(_0: int, _1: int, _2: int, _3: Type[numpy.int64], /):
    """
    usage.dask: 1
    """
    ...


@overload
def arange(_0: int, _1: int, _2: int, /, *, dtype: Literal["i4"]):
    """
    usage.dask: 1
    """
    ...


@overload
def arange(_0: int, /, *, stop: int):
    """
    usage.dask: 1
    """
    ...


@overload
def arange(_0: int, /, *, dtype: Literal["f8"]):
    """
    usage.dask: 1
    """
    ...


@overload
def arange(_0: int, _1: int, /, *, dtype: Literal["f8"]):
    """
    usage.dask: 4
    """
    ...


@overload
def arange(_0: numpy.int64, _1: int, /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def arange(_0: numpy.int32, _1: numpy.int64, /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def arange(_0: int, _1: int, _2: numpy.float64, /):
    """
    usage.sklearn: 1
    """
    ...


def arange(
    _0: object,
    /,
    *_args: object,
    dtype: Union[type, str, numpy.dtype, None] = ...,
    step: Union[int, float] = ...,
    stop: int = ...,
):
    """
    usage.dask: 347
    usage.matplotlib: 359
    usage.pandas: 894
    usage.sample-usage: 4
    usage.scipy: 1173
    usage.skimage: 174
    usage.sklearn: 373
    usage.xarray: 666
    """
    ...


@overload
def argmax(a: numpy.ndarray):
    """
    usage.dask: 6
    usage.scipy: 18
    usage.skimage: 12
    usage.sklearn: 17
    usage.xarray: 4
    """
    ...


@overload
def argmax(a: dask.array.core.Array):
    """
    usage.skimage: 3
    """
    ...


@overload
def argmax(a: numpy.ndarray, axis: int):
    """
    usage.dask: 13
    usage.scipy: 6
    usage.skimage: 3
    usage.sklearn: 57
    usage.xarray: 7
    """
    ...


@overload
def argmax(a: numpy.ndarray, axis: None):
    """
    usage.dask: 2
    usage.xarray: 1
    """
    ...


@overload
def argmax(a: object, axis: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def argmax(a: object):
    """
    usage.xarray: 1
    """
    ...


@overload
def argmax(a: xarray.core.dataarray.DataArray):
    """
    usage.xarray: 1
    """
    ...


@overload
def argmax(a: xarray.core.dataset.Dataset):
    """
    usage.xarray: 1
    """
    ...


@overload
def argmax(a: object, axis: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def argmax(
    a: object, axis: Union[int, None] = ..., out: Union[numpy.ndarray, int] = ...
):
    """
    usage.pandas: 23
    """
    ...


@overload
def argmax(a: numpy.ma.core.MaskedArray):
    """
    usage.dask: 2
    """
    ...


@overload
def argmax(_0: numpy.ma.core.MaskedArray, /, *, axis: None, keepdims: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def argmax(a: numpy.ma.core.MaskedArray, axis: None):
    """
    usage.dask: 1
    """
    ...


@overload
def argmax(_0: numpy.ndarray, /, *, axis: None, keepdims: bool):
    """
    usage.dask: 4
    """
    ...


@overload
def argmax(a: numpy.ma.core.MaskedArray, axis: int):
    """
    usage.dask: 4
    """
    ...


@overload
def argmax(_0: numpy.ma.core.MaskedArray, /, *, axis: int, keepdims: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def argmax(_0: numpy.ndarray, /, *, axis: int, keepdims: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def argmax(a: dask.array.core.Array, axis: int, out: dask.array.core.Array):
    """
    usage.dask: 1
    """
    ...


@overload
def argmax(a: numpy.matrix):
    """
    usage.sklearn: 3
    """
    ...


def argmax(
    _0: Union[numpy.ndarray, numpy.ma.core.MaskedArray] = ...,
    /,
    a: object = ...,
    axis: Union[int, None] = ...,
    out: Union[dask.array.core.Array, int, numpy.ndarray] = ...,
    *,
    keepdims: bool = ...,
):
    """
    usage.dask: 36
    usage.pandas: 23
    usage.scipy: 24
    usage.skimage: 18
    usage.sklearn: 77
    usage.xarray: 17
    """
    ...


@overload
def argmin(a: numpy.ndarray):
    """
    usage.dask: 6
    usage.matplotlib: 2
    usage.scipy: 23
    usage.skimage: 5
    usage.sklearn: 9
    """
    ...


@overload
def argmin(a: numpy.ndarray, axis: int):
    """
    usage.dask: 12
    usage.matplotlib: 4
    usage.scipy: 4
    usage.skimage: 3
    usage.sklearn: 2
    usage.xarray: 5
    """
    ...


@overload
def argmin(a: List[numpy.float64]):
    """
    usage.skimage: 2
    usage.sklearn: 10
    """
    ...


@overload
def argmin(a: numpy.ndarray, axis: None):
    """
    usage.dask: 2
    usage.xarray: 1
    """
    ...


@overload
def argmin(a: object, axis: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def argmin(a: object):
    """
    usage.xarray: 1
    """
    ...


@overload
def argmin(a: xarray.core.dataarray.DataArray):
    """
    usage.xarray: 1
    """
    ...


@overload
def argmin(a: xarray.core.dataset.Dataset):
    """
    usage.xarray: 1
    """
    ...


@overload
def argmin(a: object, axis: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def argmin(
    a: object, axis: Union[int, None] = ..., out: Union[numpy.ndarray, int] = ...
):
    """
    usage.pandas: 23
    """
    ...


@overload
def argmin(a: List[int]):
    """
    usage.dask: 1
    """
    ...


@overload
def argmin(a: numpy.ma.core.MaskedArray):
    """
    usage.dask: 2
    """
    ...


@overload
def argmin(_0: numpy.ma.core.MaskedArray, /, *, axis: None, keepdims: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def argmin(a: numpy.ma.core.MaskedArray, axis: None):
    """
    usage.dask: 1
    """
    ...


@overload
def argmin(_0: numpy.ndarray, /, *, axis: None, keepdims: bool):
    """
    usage.dask: 4
    """
    ...


@overload
def argmin(a: numpy.ma.core.MaskedArray, axis: int):
    """
    usage.dask: 4
    """
    ...


@overload
def argmin(_0: numpy.ma.core.MaskedArray, /, *, axis: int, keepdims: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def argmin(_0: numpy.ndarray, /, *, axis: int, keepdims: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def argmin(a: List[float]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def argmin(a: Tuple[numpy.float64, numpy.float64, numpy.float64, numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


def argmin(
    _0: Union[numpy.ndarray, numpy.ma.core.MaskedArray] = ...,
    /,
    a: object = ...,
    axis: Union[int, None] = ...,
    *,
    keepdims: bool = ...,
):
    """
    usage.dask: 35
    usage.matplotlib: 6
    usage.pandas: 23
    usage.scipy: 27
    usage.skimage: 10
    usage.sklearn: 23
    usage.xarray: 11
    """
    ...


@overload
def argpartition(a: numpy.ndarray, kth: int, axis: int):
    """
    usage.dask: 1
    usage.sklearn: 3
    """
    ...


@overload
def argpartition(a: numpy.ndarray, kth: numpy.int64, axis: int):
    """
    usage.sklearn: 1
    """
    ...


def argpartition(a: numpy.ndarray, kth: Union[numpy.int64, int], axis: int):
    """
    usage.dask: 1
    usage.sklearn: 4
    """
    ...


@overload
def argsort(a: numpy.ndarray):
    """
    usage.dask: 5
    usage.matplotlib: 1
    usage.scipy: 67
    usage.skimage: 17
    usage.sklearn: 31
    """
    ...


@overload
def argsort(a: numpy.flatiter):
    """
    usage.skimage: 2
    """
    ...


@overload
def argsort(a: List[int]):
    """
    usage.xarray: 1
    """
    ...


@overload
def argsort(
    a: object,
    kind: Union[None, Literal["quicksort", "mergesort"]] = ...,
    axis: int = ...,
    order: Literal["C"] = ...,
):
    """
    usage.pandas: 62
    """
    ...


@overload
def argsort(a: numpy.ndarray, axis: int):
    """
    usage.dask: 7
    usage.scipy: 3
    usage.sklearn: 7
    """
    ...


@overload
def argsort(a: List[numpy.int64]):
    """
    usage.scipy: 10
    """
    ...


@overload
def argsort(a: numpy.ndarray, kind: Literal["mergesort"]):
    """
    usage.scipy: 11
    usage.sklearn: 16
    """
    ...


@overload
def argsort(a: numpy.ndarray, kind: Literal["quicksort"]):
    """
    usage.scipy: 5
    """
    ...


@overload
def argsort(
    a: Tuple[
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
    ]
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def argsort(
    a: Tuple[float, float, float, float, float, float, float, float, float, float]
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def argsort(a: numpy.matrix):
    """
    usage.sklearn: 1
    """
    ...


def argsort(
    a: object,
    kind: Union[Literal["mergesort", "quicksort"], None] = ...,
    axis: int = ...,
    order: Literal["C"] = ...,
):
    """
    usage.dask: 12
    usage.matplotlib: 1
    usage.pandas: 62
    usage.scipy: 96
    usage.skimage: 19
    usage.sklearn: 57
    usage.xarray: 1
    """
    ...


def argwhere(a: numpy.ndarray):
    """
    usage.dask: 3
    """
    ...


@overload
def around(a: Tuple[numpy.float64, numpy.float64]):
    """
    usage.skimage: 1
    """
    ...


@overload
def around(a: numpy.ndarray):
    """
    usage.scipy: 3
    usage.sklearn: 1
    usage.xarray: 5
    """
    ...


@overload
def around(a: numpy.ndarray, decimals: int):
    """
    usage.dask: 1
    usage.matplotlib: 2
    usage.scipy: 7
    usage.sklearn: 8
    usage.xarray: 3
    """
    ...


@overload
def around(
    a: Union[List[float], numpy.int64, numpy.float64, float], decimals: int = ...
):
    """
    usage.pandas: 4
    """
    ...


@overload
def around(a: numpy.float64):
    """
    usage.scipy: 2
    """
    ...


@overload
def around(a: numpy.matrix, decimals: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def around(a: float):
    """
    usage.scipy: 1
    """
    ...


@overload
def around(a: numpy.float64, decimals: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def around(a: scipy.sparse.csr.csr_matrix):
    """
    usage.sklearn: 1
    """
    ...


@overload
def around(a: scipy.sparse.csc.csc_matrix):
    """
    usage.sklearn: 1
    """
    ...


def around(a: object, decimals: int = ...):
    """
    usage.dask: 1
    usage.matplotlib: 2
    usage.pandas: 4
    usage.scipy: 15
    usage.skimage: 1
    usage.sklearn: 11
    usage.xarray: 8
    """
    ...


@overload
def array(_0: List[float], /):
    """
    usage.dask: 18
    usage.matplotlib: 79
    usage.scipy: 729
    usage.skimage: 39
    usage.sklearn: 158
    usage.xarray: 39
    """
    ...


@overload
def array(_0: List[float], /, *, dtype: Literal["float32"]):
    """
    usage.skimage: 1
    """
    ...


@overload
def array(_0: List[numpy.ndarray], /):
    """
    usage.matplotlib: 13
    usage.scipy: 90
    usage.skimage: 47
    usage.sklearn: 107
    usage.xarray: 13
    """
    ...


@overload
def array(_0: List[Union[int, float]], /):
    """
    usage.dask: 5
    usage.matplotlib: 8
    usage.scipy: 185
    usage.skimage: 5
    usage.sklearn: 14
    usage.xarray: 7
    """
    ...


@overload
def array(_0: List[List[Union[float, int]]], /):
    """
    usage.dask: 2
    usage.matplotlib: 7
    usage.scipy: 61
    usage.skimage: 5
    usage.sklearn: 64
    usage.xarray: 4
    """
    ...


@overload
def array(_0: List[List[int]], /, *, dtype: Type[numpy.uint8]):
    """
    usage.skimage: 62
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[List[Union[int, float]]], /):
    """
    usage.matplotlib: 5
    usage.scipy: 69
    usage.skimage: 6
    usage.sklearn: 54
    usage.xarray: 3
    """
    ...


@overload
def array(_0: List[float], /, *, dtype: numpy.dtype):
    """
    usage.scipy: 2
    usage.skimage: 4
    """
    ...


@overload
def array(_0: numpy.ndarray, /):
    """
    usage.dask: 8
    usage.matplotlib: 23
    usage.scipy: 65
    usage.skimage: 14
    usage.sklearn: 72
    usage.xarray: 30
    """
    ...


@overload
def array(_0: List[int], /):
    """
    usage.dask: 126
    usage.matplotlib: 41
    usage.sample-usage: 1
    usage.scipy: 774
    usage.skimage: 101
    usage.sklearn: 427
    usage.xarray: 79
    """
    ...


@overload
def array(_0: Tuple[int, int, int], /):
    """
    usage.matplotlib: 1
    usage.scipy: 9
    usage.skimage: 12
    usage.sklearn: 2
    usage.xarray: 1
    """
    ...


@overload
def array(_0: Tuple[int, float, int], /):
    """
    usage.matplotlib: 1
    usage.scipy: 2
    usage.skimage: 1
    """
    ...


@overload
def array(_0: Tuple[float, int, float], /):
    """
    usage.scipy: 2
    usage.skimage: 1
    """
    ...


@overload
def array(_0: Tuple[int, float, float], /):
    """
    usage.matplotlib: 1
    usage.skimage: 1
    """
    ...


@overload
def array(_0: Tuple[float, float, float], /):
    """
    usage.dask: 1
    usage.matplotlib: 2
    usage.scipy: 1
    usage.skimage: 1
    usage.sklearn: 2
    """
    ...


@overload
def array(_0: List[Tuple[int, int, int]], /):
    """
    usage.scipy: 3
    usage.skimage: 1
    """
    ...


@overload
def array(_0: List[Tuple[float, float, float]], /):
    """
    usage.matplotlib: 10
    usage.scipy: 1
    usage.skimage: 2
    """
    ...


@overload
def array(_0: List[List[float]], /):
    """
    usage.matplotlib: 33
    usage.scipy: 323
    usage.skimage: 31
    usage.sklearn: 183
    usage.xarray: 9
    """
    ...


@overload
def array(_0: int, /, *, copy: bool, ndmin: int):
    """
    usage.skimage: 1
    """
    ...


@overload
def array(_0: Tuple[int, int, int], /, *, copy: bool, ndmin: int):
    """
    usage.skimage: 1
    """
    ...


@overload
def array(
    _0: Tuple[
        Tuple[int, int],
        Tuple[int, int],
        Tuple[int, int],
        Tuple[int, int],
        Tuple[int, int],
    ],
    /,
):
    """
    usage.skimage: 3
    """
    ...


@overload
def array(_0: List[List[int]], /):
    """
    usage.dask: 33
    usage.matplotlib: 27
    usage.scipy: 594
    usage.skimage: 153
    usage.sklearn: 422
    usage.xarray: 14
    """
    ...


@overload
def array(_0: List[numpy.float64], /):
    """
    usage.dask: 4
    usage.matplotlib: 32
    usage.scipy: 112
    usage.skimage: 12
    usage.sklearn: 61
    usage.xarray: 8
    """
    ...


@overload
def array(_0: Tuple[int, int], /):
    """
    usage.dask: 4
    usage.matplotlib: 2
    usage.scipy: 8
    usage.skimage: 31
    usage.sklearn: 7
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[numpy.int64], /):
    """
    usage.dask: 3
    usage.matplotlib: 3
    usage.scipy: 16
    usage.skimage: 10
    usage.sklearn: 17
    usage.xarray: 4
    """
    ...


@overload
def array(_0: List[List[List[int]]], /):
    """
    usage.dask: 3
    usage.scipy: 11
    usage.skimage: 7
    usage.sklearn: 3
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[List[List[float]]], /):
    """
    usage.matplotlib: 2
    usage.scipy: 7
    usage.skimage: 1
    usage.sklearn: 3
    """
    ...


@overload
def array(_0: List[List[List[int]]], /, *, dtype: Type[numpy.uint8]):
    """
    usage.matplotlib: 1
    usage.skimage: 3
    """
    ...


@overload
def array(_0: List[int], /, *, dtype: Type[numpy.int8]):
    """
    usage.matplotlib: 1
    usage.scipy: 2
    usage.skimage: 13
    """
    ...


@overload
def array(_0: List[int], /, *, dtype: Type[numpy.uint8]):
    """
    usage.matplotlib: 3
    usage.scipy: 3
    usage.skimage: 8
    usage.sklearn: 2
    """
    ...


@overload
def array(_0: List[int], /, *, dtype: Type[numpy.float16]):
    """
    usage.scipy: 7
    usage.skimage: 2
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, dtype: Type[bool]):
    """
    usage.scipy: 6
    usage.skimage: 6
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[float], /, *, dtype: Type[numpy.float64]):
    """
    usage.dask: 1
    usage.matplotlib: 1
    usage.scipy: 28
    usage.skimage: 2
    usage.sklearn: 3
    """
    ...


@overload
def array(_0: List[int], /, *, dtype: Type[numpy.uint16]):
    """
    usage.scipy: 6
    usage.skimage: 7
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, copy: bool, ndmin: int):
    """
    usage.skimage: 4
    """
    ...


@overload
def array(_0: list, /):
    """
    usage.dask: 5
    usage.matplotlib: 8
    usage.scipy: 65
    usage.skimage: 11
    usage.sklearn: 13
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Tuple[int, int]], /):
    """
    usage.scipy: 24
    usage.skimage: 6
    usage.sklearn: 8
    """
    ...


@overload
def array(_0: List[Union[float, int]], /):
    """
    usage.dask: 5
    usage.matplotlib: 14
    usage.scipy: 85
    usage.skimage: 9
    usage.sklearn: 21
    usage.xarray: 3
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, dtype: Type[numpy.int32]):
    """
    usage.skimage: 14
    """
    ...


@overload
def array(
    _0: numpy.ndarray, /, *, copy: bool, dtype: Type[numpy.int64], order: Literal["C"]
):
    """
    usage.scipy: 8
    usage.skimage: 3
    """
    ...


@overload
def array(_0: List[List[int]], /, *, dtype: Type[bool]):
    """
    usage.scipy: 2
    usage.skimage: 11
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[List[Union[int, numpy.float64]]], /):
    """
    usage.matplotlib: 1
    usage.scipy: 3
    usage.skimage: 1
    usage.sklearn: 4
    """
    ...


@overload
def array(_0: List[List[Union[float, int, numpy.float64]]], /):
    """
    usage.skimage: 1
    """
    ...


@overload
def array(_0: Tuple[numpy.ndarray, numpy.ndarray], /):
    """
    usage.matplotlib: 2
    usage.scipy: 1
    usage.skimage: 3
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: skimage.feature._hessian_det_appx._memoryviewslice, /):
    """
    usage.skimage: 1
    """
    ...


@overload
def array(_0: List[int], /, *, copy: bool, ndmin: int):
    """
    usage.skimage: 1
    """
    ...


@overload
def array(_0: Tuple[float, int, float], /, *, copy: bool, ndmin: int):
    """
    usage.skimage: 1
    """
    ...


@overload
def array(_0: List[List[List[Tuple[int, int]]]], /):
    """
    usage.skimage: 3
    """
    ...


@overload
def array(_0: List[List[bool]], /):
    """
    usage.dask: 3
    usage.matplotlib: 2
    usage.scipy: 3
    usage.skimage: 11
    usage.sklearn: 5
    usage.xarray: 4
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, copy: bool, order: Literal["C"]):
    """
    usage.skimage: 1
    usage.xarray: 1
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, copy: bool, dtype: Type[numpy.float64]):
    """
    usage.scipy: 18
    usage.skimage: 1
    """
    ...


@overload
def array(_0: Tuple[numpy.int64, numpy.int64], /):
    """
    usage.scipy: 2
    usage.skimage: 2
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, dtype: Type[numpy.uint8]):
    """
    usage.skimage: 4
    """
    ...


@overload
def array(_0: List[List[int]], /, *, dtype: Type[numpy.uint32]):
    """
    usage.scipy: 1
    usage.skimage: 9
    """
    ...


@overload
def array(_0: range, /):
    """
    usage.scipy: 4
    usage.skimage: 3
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[List[int]], /, *, dtype: Type[numpy.uint16]):
    """
    usage.skimage: 4
    """
    ...


@overload
def array(_0: List[List[int]], /, *, dtype: Type[numpy.bool_]):
    """
    usage.scipy: 4
    usage.skimage: 5
    """
    ...


@overload
def array(_0: List[List[int]], /, *, dtype: Type[numpy.int32]):
    """
    usage.matplotlib: 5
    usage.scipy: 1
    usage.skimage: 2
    usage.sklearn: 2
    """
    ...


@overload
def array(_0: List[List[int]], /, *, dtype: Type[numpy.int64]):
    """
    usage.dask: 1
    usage.scipy: 8
    usage.skimage: 3
    usage.sklearn: 1
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[List[int]], /, *, dtype: Type[numpy.float32]):
    """
    usage.scipy: 7
    usage.skimage: 3
    usage.sklearn: 10
    """
    ...


@overload
def array(_0: List[List[int]], /, *, dtype: Type[numpy.float64]):
    """
    usage.scipy: 21
    usage.skimage: 4
    usage.sklearn: 12
    """
    ...


@overload
def array(_0: List[List[int]], /, *, dtype: Type[float]):
    """
    usage.scipy: 67
    usage.skimage: 3
    usage.sklearn: 1
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[List[numpy.float64]], /):
    """
    usage.matplotlib: 9
    usage.scipy: 11
    usage.skimage: 2
    usage.sklearn: 6
    """
    ...


@overload
def array(_0: List[List[Union[float, int]]], /, *, dtype: Type[numpy.float32]):
    """
    usage.scipy: 1
    usage.skimage: 1
    usage.sklearn: 2
    """
    ...


@overload
def array(_0: int, /, *, dtype: Literal["float"], ndmin: int):
    """
    usage.skimage: 2
    """
    ...


@overload
def array(_0: Tuple[int, int], /, *, dtype: Literal["float"], ndmin: int):
    """
    usage.skimage: 2
    """
    ...


@overload
def array(_0: int, /):
    """
    usage.dask: 17
    usage.matplotlib: 3
    usage.scipy: 66
    usage.skimage: 1
    usage.sklearn: 8
    usage.xarray: 12
    """
    ...


@overload
def array(_0: numpy.float64, /, *, dtype: Literal["float"], ndmin: int):
    """
    usage.skimage: 1
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, dtype: Literal["float"], ndmin: int):
    """
    usage.skimage: 1
    """
    ...


@overload
def array(_0: Tuple[int, int, int], /, *, dtype: Literal["float"], ndmin: int):
    """
    usage.skimage: 1
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, copy: bool):
    """
    usage.dask: 1
    usage.matplotlib: 4
    usage.scipy: 83
    usage.skimage: 4
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: Tuple[int, int, int, int], /):
    """
    usage.dask: 2
    usage.matplotlib: 1
    usage.skimage: 3
    """
    ...


@overload
def array(_0: Tuple[int], /):
    """
    usage.scipy: 5
    usage.skimage: 12
    usage.sklearn: 3
    """
    ...


@overload
def array(_0: List[int], /, *, dtype: Type[numpy.float64]):
    """
    usage.matplotlib: 1
    usage.scipy: 25
    usage.skimage: 2
    usage.sklearn: 8
    usage.xarray: 10
    """
    ...


@overload
def array(_0: List[int], /, *, dtype: numpy.dtype):
    """
    usage.dask: 10
    usage.matplotlib: 3
    usage.scipy: 11
    usage.skimage: 3
    usage.sklearn: 14
    """
    ...


@overload
def array(_0: PIL.Image.Image, /, *, dtype: None):
    """
    usage.skimage: 1
    """
    ...


@overload
def array(_0: PIL.PngImagePlugin.PngImageFile, /, *, dtype: Literal["uint16"]):
    """
    usage.skimage: 1
    """
    ...


@overload
def array(_0: PIL.PngImagePlugin.PngImageFile, /, *, dtype: None):
    """
    usage.skimage: 1
    """
    ...


@overload
def array(_0: PIL.JpegImagePlugin.JpegImageFile, /, *, dtype: None):
    """
    usage.skimage: 1
    """
    ...


@overload
def array(_0: List[List[float]], /, *, dtype: Type[numpy.float64]):
    """
    usage.dask: 1
    usage.matplotlib: 3
    usage.scipy: 8
    usage.skimage: 1
    usage.sklearn: 5
    """
    ...


@overload
def array(_0: List[List[float]], /, *, dtype: Type[numpy.float16]):
    """
    usage.skimage: 1
    """
    ...


@overload
def array(_0: collections.deque, /):
    """
    usage.skimage: 1
    """
    ...


@overload
def array(_0: List[int], /, *, dtype: Literal["float"]):
    """
    usage.scipy: 1
    usage.skimage: 2
    """
    ...


@overload
def array(
    _0: Tuple[Tuple[int, int], Tuple[int, int], Tuple[int, int], Tuple[int, int]], /
):
    """
    usage.skimage: 2
    """
    ...


@overload
def array(_0: List[List[Union[numpy.float64, float]]], /):
    """
    usage.matplotlib: 1
    usage.scipy: 1
    usage.skimage: 1
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, dtype: Type[numpy.float64], order: Literal["C"]):
    """
    usage.skimage: 2
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Tuple[numpy.float64, ...]], /):
    """
    usage.skimage: 2
    usage.sklearn: 2
    """
    ...


@overload
def array(_0: List[Tuple[numpy.float32, ...]], /):
    """
    usage.skimage: 3
    """
    ...


@overload
def array(_0: List[List[Union[numpy.float64, int]]], /):
    """
    usage.scipy: 4
    usage.skimage: 4
    usage.sklearn: 3
    """
    ...


@overload
def array(_0: List[int], _1: Type[float], /):
    """
    usage.skimage: 6
    """
    ...


@overload
def array(_0: List[List[int]], _1: Type[numpy.uint8], /):
    """
    usage.scipy: 103
    usage.skimage: 11
    """
    ...


@overload
def array(_0: List[List[int]], /, *, dtype: Type[int]):
    """
    usage.scipy: 9
    usage.skimage: 4
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: Tuple[int, int, int, int, int, int, int, int], /):
    """
    usage.skimage: 2
    """
    ...


@overload
def array(_0: List[Union[int, float]], /, *, dtype: Type[numpy.float16]):
    """
    usage.skimage: 1
    """
    ...


@overload
def array(_0: Tuple[numpy.ndarray], /):
    """
    usage.skimage: 1
    """
    ...


@overload
def array(_0: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray], /):
    """
    usage.scipy: 2
    usage.skimage: 2
    """
    ...


@overload
def array(_0: List[List[float]], /, *, dtype: Type[numpy.float32]):
    """
    usage.scipy: 10
    usage.skimage: 3
    usage.sklearn: 12
    """
    ...


@overload
def array(_0: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray], /):
    """
    usage.skimage: 1
    """
    ...


@overload
def array(_0: Tuple[int, int, int, int, int], /):
    """
    usage.dask: 1
    usage.skimage: 2
    """
    ...


@overload
def array(
    _0: Tuple[
        numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray
    ],
    /,
):
    """
    usage.skimage: 1
    """
    ...


@overload
def array(_0: List[List[int]], /, *, order: Literal["F"]):
    """
    usage.scipy: 1
    usage.skimage: 1
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[List[int]], _1: Type[bool], /):
    """
    usage.scipy: 40
    usage.skimage: 3
    """
    ...


@overload
def array(_0: List[List[int]], _1: Type[int], /):
    """
    usage.skimage: 7
    """
    ...


@overload
def array(_0: List[List[int]], _1: Type[numpy.bool_], /):
    """
    usage.skimage: 2
    """
    ...


@overload
def array(_0: List[numpy.int64], _1: Type[numpy.int32], /):
    """
    usage.skimage: 2
    """
    ...


@overload
def array(_0: List[bool], /):
    """
    usage.dask: 9
    usage.matplotlib: 2
    usage.scipy: 13
    usage.skimage: 5
    usage.sklearn: 19
    usage.xarray: 5
    """
    ...


@overload
def array(_0: List[numpy.bool_], /):
    """
    usage.scipy: 12
    usage.skimage: 1
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, dtype: Type[float]):
    """
    usage.matplotlib: 1
    usage.scipy: 5
    usage.skimage: 4
    usage.xarray: 2
    """
    ...


@overload
def array(_0: Tuple[numpy.int64, numpy.int64], /, *, dtype: Type[numpy.float64]):
    """
    usage.skimage: 2
    """
    ...


@overload
def array(_0: int, /, *, dtype: Type[numpy.float64]):
    """
    usage.scipy: 2
    usage.skimage: 1
    """
    ...


@overload
def array(
    _0: Tuple[numpy.int64, numpy.int64, numpy.int64], /, *, dtype: Type[numpy.float64]
):
    """
    usage.skimage: 2
    """
    ...


@overload
def array(
    _0: Tuple[numpy.int64, numpy.int64, numpy.int64, numpy.int64],
    /,
    *,
    dtype: Type[numpy.float64],
):
    """
    usage.skimage: 2
    """
    ...


@overload
def array(_0: List[List[bool]], /, *, dtype: Type[bool]):
    """
    usage.matplotlib: 1
    usage.skimage: 1
    """
    ...


@overload
def array(_0: Tuple[int, int], /, *, dtype: numpy.dtype):
    """
    usage.skimage: 1
    """
    ...


@overload
def array(_0: List[int], /, *, dtype: Type[numpy.int32]):
    """
    usage.matplotlib: 2
    usage.scipy: 7
    usage.skimage: 3
    usage.sklearn: 5
    """
    ...


@overload
def array(_0: List[int], /, *, dtype: Type[numpy.uint32]):
    """
    usage.skimage: 3
    usage.sklearn: 18
    """
    ...


@overload
def array(_0: List[int], /, *, dtype: Type[numpy.int64]):
    """
    usage.dask: 1
    usage.scipy: 8
    usage.skimage: 8
    usage.sklearn: 17
    """
    ...


@overload
def array(_0: List[int], /, *, dtype: Type[numpy.int16]):
    """
    usage.dask: 1
    usage.scipy: 8
    usage.skimage: 2
    """
    ...


@overload
def array(_0: List[int], /, *, dtype: Type[numpy.longlong]):
    """
    usage.skimage: 2
    """
    ...


@overload
def array(_0: List[int], /, *, dtype: Type[numpy.uint64]):
    """
    usage.scipy: 2
    usage.skimage: 2
    """
    ...


@overload
def array(_0: List[int], /, *, dtype: Type[numpy.ulonglong]):
    """
    usage.skimage: 2
    """
    ...


@overload
def array(_0: List[int], /, *, dtype: Type[float]):
    """
    usage.matplotlib: 4
    usage.scipy: 22
    usage.skimage: 1
    usage.sklearn: 1
    usage.xarray: 2
    """
    ...


@overload
def array(_0: skimage.util._map_array.ArrayMap, /):
    """
    usage.skimage: 2
    """
    ...


@overload
def array(_0: List[numpy.ndarray], /, *, dtype: Type[numpy.int8]):
    """
    usage.skimage: 4
    """
    ...


@overload
def array(_0: List[List[int]], /, *, dtype: Type[numpy.int8]):
    """
    usage.skimage: 3
    """
    ...


@overload
def array(_0: List[List[int]], _1: Type[float], /):
    """
    usage.scipy: 9
    usage.skimage: 11
    """
    ...


@overload
def array(
    _0: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray], /, *, dtype: Type[float]
):
    """
    usage.skimage: 1
    """
    ...


@overload
def array(_0: Tuple[int, int], /, *, dtype: Type[numpy.int64]):
    """
    usage.scipy: 2
    usage.skimage: 2
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, copy: bool, order: Literal["K"]):
    """
    usage.skimage: 2
    """
    ...


@overload
def array(_0: List[Union[int, numpy.int64]], /):
    """
    usage.skimage: 1
    """
    ...


@overload
def array(_0: List[numpy.ndarray], /, *, dtype: Type[int]):
    """
    usage.skimage: 3
    usage.sklearn: 2
    """
    ...


@overload
def array(_0: List[numpy.uint64], /):
    """
    usage.skimage: 2
    """
    ...


@overload
def array(_0: list, /, *, dtype: Type[int]):
    """
    usage.scipy: 6
    usage.skimage: 1
    """
    ...


@overload
def array(_0: List[Union[numpy.uint64, numpy.uint8]], /):
    """
    usage.skimage: 1
    """
    ...


@overload
def array(_0: List[Tuple[numpy.int64, numpy.int64]], /):
    """
    usage.skimage: 2
    usage.sklearn: 12
    """
    ...


@overload
def array(_0: Tuple[int, int, int, int, int, int], /):
    """
    usage.scipy: 1
    usage.skimage: 1
    """
    ...


@overload
def array(_0: Tuple[int, int, int, int, int, int, int], /):
    """
    usage.skimage: 1
    """
    ...


@overload
def array(_0: List[List[Union[int, numpy.int64]]], /):
    """
    usage.scipy: 3
    usage.skimage: 1
    """
    ...


@overload
def array(_0: List[int], /, *, dtype: Type[numpy.float32]):
    """
    usage.scipy: 18
    usage.skimage: 3
    usage.sklearn: 11
    """
    ...


@overload
def array(_0: Tuple[bool, bool], /, *, dtype: Type[numpy.bool_]):
    """
    usage.skimage: 1
    """
    ...


@overload
def array(_0: Tuple[int, int], /, *, dtype: Type[numpy.float16]):
    """
    usage.skimage: 1
    """
    ...


@overload
def array(_0: Tuple[int, int], /, *, dtype: Type[numpy.float32]):
    """
    usage.scipy: 2
    usage.skimage: 1
    """
    ...


@overload
def array(_0: Tuple[int, int], /, *, dtype: Type[numpy.float64]):
    """
    usage.scipy: 2
    usage.skimage: 1
    """
    ...


@overload
def array(_0: Tuple[int, int], /, *, dtype: Type[numpy.int8]):
    """
    usage.skimage: 1
    """
    ...


@overload
def array(_0: Tuple[int, int], /, *, dtype: Type[numpy.uint8]):
    """
    usage.skimage: 1
    """
    ...


@overload
def array(_0: Tuple[int, int], /, *, dtype: Type[numpy.int16]):
    """
    usage.skimage: 1
    """
    ...


@overload
def array(_0: Tuple[int, int], /, *, dtype: Type[numpy.uint16]):
    """
    usage.skimage: 1
    """
    ...


@overload
def array(_0: Tuple[int, int], /, *, dtype: Type[numpy.int32]):
    """
    usage.scipy: 1
    usage.skimage: 1
    """
    ...


@overload
def array(_0: Tuple[int, int], /, *, dtype: Type[numpy.uint32]):
    """
    usage.skimage: 1
    """
    ...


@overload
def array(_0: Tuple[int, int], /, *, dtype: Type[numpy.uint64]):
    """
    usage.skimage: 1
    """
    ...


@overload
def array(_0: Tuple[int, int], /, *, dtype: Type[numpy.longlong]):
    """
    usage.skimage: 1
    """
    ...


@overload
def array(_0: Tuple[int, int], /, *, dtype: Type[numpy.ulonglong]):
    """
    usage.skimage: 1
    """
    ...


@overload
def array(_0: List[List[List[List[int]]]], /):
    """
    usage.dask: 2
    usage.scipy: 1
    usage.skimage: 2
    """
    ...


@overload
def array(_0: Tuple[int], /, *, dtype: numpy.dtype):
    """
    usage.skimage: 1
    """
    ...


@overload
def array(_0: List[List[float]], _1: Type[float], /):
    """
    usage.matplotlib: 6
    usage.skimage: 2
    """
    ...


@overload
def array(_0: List[int], _1: Type[numpy.uint8], /):
    """
    usage.scipy: 11
    usage.skimage: 1
    """
    ...


@overload
def array(_0: List[int], /, *, dtype: Literal["int64"]):
    """
    usage.xarray: 10
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, dtype: Type[numpy.int64]):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(
    _0: numpy.ndarray, /, *, copy: bool, dtype: Type[numpy.bytes_], order: Literal["C"]
):
    """
    usage.xarray: 5
    """
    ...


@overload
def array(
    _0: xarray.core.indexing.LazilyOuterIndexedArray,
    /,
    *,
    copy: bool,
    order: Literal["C"],
):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[float], /, *, dtype: Type[object]):
    """
    usage.xarray: 3
    """
    ...


@overload
def array(_0: List[bytes], /, *, dtype: Type[object]):
    """
    usage.matplotlib: 2
    usage.scipy: 5
    usage.xarray: 2
    """
    ...


@overload
def array(_0: List[Union[float, bytes]], /, *, dtype: Type[object]):
    """
    usage.xarray: 2
    """
    ...


@overload
def array(_0: List[Literal["g", "cdef", "ab"]], /, *, dtype: Type[object]):
    """
    usage.xarray: 2
    """
    ...


@overload
def array(_0: List[Union[float, Literal["cdef", "ab"]]], /, *, dtype: Type[object]):
    """
    usage.xarray: 3
    """
    ...


@overload
def array(_0: float, /):
    """
    usage.dask: 5
    usage.matplotlib: 1
    usage.scipy: 25
    usage.sklearn: 9
    usage.xarray: 11
    """
    ...


@overload
def array(_0: List[bytes], /, *, dtype: Type[bytes]):
    """
    usage.xarray: 4
    """
    ...


@overload
def array(_0: List[Literal["cdef", "ab"]], /, *, dtype: Type[object]):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: pandas.core.indexes.base.Index, /, *, dtype: Literal["O"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[cftime._cftime.DatetimeNoLeap], /):
    """
    usage.xarray: 15
    """
    ...


@overload
def array(_0: xarray.coding.cftimeindex.CFTimeIndex, /, *, dtype: Literal["O"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[cftime._cftime.Datetime360Day], /):
    """
    usage.xarray: 14
    """
    ...


@overload
def array(_0: List[cftime._cftime.DatetimeJulian], /):
    """
    usage.xarray: 13
    """
    ...


@overload
def array(_0: List[cftime._cftime.DatetimeAllLeap], /):
    """
    usage.xarray: 14
    """
    ...


@overload
def array(_0: List[cftime._cftime.DatetimeGregorian], /):
    """
    usage.xarray: 18
    """
    ...


@overload
def array(_0: List[cftime._cftime.DatetimeProlepticGregorian], /):
    """
    usage.xarray: 13
    """
    ...


@overload
def array(_0: List[float], /, *, dtype: Literal["float64"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: Literal["a"], /):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[float], /, *, dtype: Type[numpy.float32]):
    """
    usage.scipy: 28
    usage.xarray: 4
    """
    ...


@overload
def array(
    _0: xarray.coding.variables._ElementwiseFunctionArray,
    /,
    *,
    copy: bool,
    dtype: Type[numpy.float32],
):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Union[float, int]], /, *, dtype: Type[numpy.float32]):
    """
    usage.xarray: 2
    """
    ...


@overload
def array(_0: List[Literal["baz", "bar", "foo"]], /, *, dtype: Type[object]):
    """
    usage.xarray: 2
    """
    ...


@overload
def array(_0: List[List[str]], /, *, dtype: Literal["S"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Literal["def", "abc"]], /, *, dtype: Literal["S"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Literal["zzzz", "foo"]], /, *, dtype: Literal["S"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Literal["df", "bc", "ae"]], /, *, dtype: Type[object]):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Literal["asdfg", "asdf"]], /, *, dtype: Type[object]):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(
    _0: List[Literal["2019-01-03", "2019-01-02", "2019-01-01"]],
    /,
    *,
    dtype: Literal["datetime64[s]"],
):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(
    _0: List[Literal["2019-01-05", "2019-01-04"]], /, *, dtype: Literal["datetime64[s]"]
):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[bool], /, *, dtype: Type[bool]):
    """
    usage.matplotlib: 2
    usage.scipy: 7
    usage.xarray: 3
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, copy: bool, dtype: numpy.dtype):
    """
    usage.scipy: 57
    usage.sklearn: 1
    usage.xarray: 6
    """
    ...


@overload
def array(_0: List[str], /, *, dtype: Type[object]):
    """
    usage.matplotlib: 2
    usage.sklearn: 3
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Literal["foobar"]], /, *, dtype: Type[object]):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Literal["", "cdef", "ab"]], /, *, dtype: Type[object]):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Union[numpy.float64, int]], /):
    """
    usage.matplotlib: 1
    usage.scipy: 9
    usage.sklearn: 1
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[List[List[int]]], /, *, dtype: Literal["i"]):
    """
    usage.xarray: 2
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, dtype: Literal["O"]):
    """
    usage.xarray: 2
    """
    ...


@overload
def array(
    _0: List[Union[cftime._cftime.DatetimeAllLeap, cftime._cftime.DatetimeNoLeap]], /
):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Union[cftime._cftime.DatetimeNoLeap, int]], /):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(
    _0: List[Union[cftime._cftime.DatetimeNoLeap, cftime._cftime.Datetime360Day]], /
):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Union[cftime._cftime.Datetime360Day, int]], /):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(
    _0: List[Union[cftime._cftime.DatetimeNoLeap, cftime._cftime.DatetimeJulian]], /
):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Union[cftime._cftime.DatetimeJulian, int]], /):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(
    _0: List[Union[cftime._cftime.DatetimeNoLeap, cftime._cftime.DatetimeAllLeap]], /
):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Union[cftime._cftime.DatetimeAllLeap, int]], /):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(
    _0: List[Union[cftime._cftime.DatetimeNoLeap, cftime._cftime.DatetimeGregorian]], /
):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Union[cftime._cftime.DatetimeGregorian, int]], /):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(
    _0: List[
        Union[cftime._cftime.DatetimeNoLeap, cftime._cftime.DatetimeProlepticGregorian]
    ],
    /,
):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Union[cftime._cftime.DatetimeProlepticGregorian, int]], /):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: list, /, *, dtype: Literal["O"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[cftime._cftime.DatetimeNoLeap], /, *, dtype: Literal["O"]):
    """
    usage.xarray: 4
    """
    ...


@overload
def array(_0: xarray.coding.cftimeindex.CFTimeIndex, /):
    """
    usage.xarray: 7
    """
    ...


@overload
def array(_0: List[cftime._cftime.Datetime360Day], /, *, dtype: Literal["O"]):
    """
    usage.xarray: 4
    """
    ...


@overload
def array(_0: List[cftime._cftime.DatetimeJulian], /, *, dtype: Literal["O"]):
    """
    usage.xarray: 4
    """
    ...


@overload
def array(_0: List[cftime._cftime.DatetimeAllLeap], /, *, dtype: Literal["O"]):
    """
    usage.xarray: 4
    """
    ...


@overload
def array(_0: List[cftime._cftime.DatetimeGregorian], /, *, dtype: Literal["O"]):
    """
    usage.xarray: 4
    """
    ...


@overload
def array(
    _0: List[cftime._cftime.DatetimeProlepticGregorian], /, *, dtype: Literal["O"]
):
    """
    usage.xarray: 5
    """
    ...


@overload
def array(_0: cftime._cftime.DatetimeNoLeap, /):
    """
    usage.xarray: 3
    """
    ...


@overload
def array(_0: cftime._cftime.Datetime360Day, /):
    """
    usage.xarray: 2
    """
    ...


@overload
def array(_0: cftime._cftime.DatetimeJulian, /):
    """
    usage.xarray: 2
    """
    ...


@overload
def array(_0: cftime._cftime.DatetimeAllLeap, /):
    """
    usage.xarray: 2
    """
    ...


@overload
def array(_0: cftime._cftime.DatetimeGregorian, /):
    """
    usage.xarray: 2
    """
    ...


@overload
def array(_0: cftime._cftime.DatetimeProlepticGregorian, /):
    """
    usage.xarray: 2
    """
    ...


@overload
def array(_0: pandas.core.indexes.base.Index, /):
    """
    usage.xarray: 2
    """
    ...


@overload
def array(
    _0: List[List[Literal["2000-01-02", "2000-01-01", "2000-01-04", "2000-01-03"]]], /
):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[List[cftime._cftime.DatetimeNoLeap]], /):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: Literal["2000-01-01"], /):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(
    _0: xarray.core.indexing.NumpyIndexingAdapter,
    /,
    *,
    copy: bool,
    dtype: Type[numpy.float32],
):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[bytes], /):
    """
    usage.xarray: 7
    """
    ...


@overload
def array(_0: List[Literal["ß∂µ∆", "abc"]], /, *, dtype: Type[object]):
    """
    usage.xarray: 3
    """
    ...


@overload
def array(_0: List[Literal["abc"]], /, *, dtype: Type[object]):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: list, /, *, dtype: Type[object]):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Literal["ß∂µ∆", "abc"]], /, *, dtype: numpy.dtype):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[List[bytes]], /):
    """
    usage.xarray: 6
    """
    ...


@overload
def array(_0: List[List[bytes]], /, *, dtype: Literal["S"]):
    """
    usage.xarray: 2
    """
    ...


@overload
def array(_0: List[bytes], /, *, dtype: Literal["S"]):
    """
    usage.xarray: 2
    """
    ...


@overload
def array(_0: bytes, /):
    """
    usage.dask: 2
    usage.xarray: 2
    """
    ...


@overload
def array(_0: dask.array.core.Array, /):
    """
    usage.dask: 11
    usage.xarray: 5
    """
    ...


@overload
def array(_0: List[List[List[bytes]]], /):
    """
    usage.xarray: 2
    """
    ...


@overload
def array(_0: numpy.int64, /):
    """
    usage.dask: 6
    usage.scipy: 1
    usage.xarray: 2
    """
    ...


@overload
def array(_0: List[Union[float, int]], /, *, ndmin: int):
    """
    usage.xarray: 2
    """
    ...


@overload
def array(_0: List[Union[int, float]], /, *, ndmin: int):
    """
    usage.xarray: 2
    """
    ...


@overload
def array(_0: List[int], /, *, ndmin: int):
    """
    usage.scipy: 4
    usage.xarray: 3
    """
    ...


@overload
def array(_0: List[int], /, *, dtype: Literal["i1"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Literal["bar", "foo"]], /, *, dtype: Type[object]):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(
    _0: List[Tuple[Literal["Abe", "Stacy", "Dick"], int]],
    /,
    *,
    dtype: List[
        Tuple[Literal["name", "height"], Union[Literal["|S256"], Type[object]]]
    ],
):
    """
    usage.xarray: 2
    """
    ...


@overload
def array(
    _0: List[Tuple[Literal["Abe", "Stacy", "Dick"], Union[int, float]]],
    /,
    *,
    dtype: List[
        Tuple[Literal["name", "height"], Union[Literal["|S256"], Type[object]]]
    ],
):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[int], /, *, dtype: Literal["uint64"]):
    """
    usage.xarray: 3
    """
    ...


@overload
def array(_0: List[int], /, *, dtype: Literal["uint32"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[str], /):
    """
    usage.dask: 3
    usage.matplotlib: 6
    usage.sklearn: 10
    usage.xarray: 6
    """
    ...


@overload
def array(_0: numpy.timedelta64, /):
    """
    usage.dask: 4
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[int], _1: Literal["int64"], /):
    """
    usage.xarray: 7
    """
    ...


@overload
def array(_0: List[int], /, *, dtype: Type[complex]):
    """
    usage.scipy: 1
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Union[float, Literal["a"]]], /, *, dtype: Type[object]):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Literal["c", "a"]], /):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Literal["c", "b", "a"]], /):
    """
    usage.dask: 2
    usage.scipy: 1
    usage.sklearn: 2
    usage.xarray: 3
    """
    ...


@overload
def array(_0: List[numpy.datetime64], /):
    """
    usage.xarray: 3
    """
    ...


@overload
def array(_0: Tuple[Literal["dim2"]], /):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: Tuple[Literal["dim1"], Literal["dim2"]], /):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: Tuple[Literal["dim3"], Literal["dim1"]], /):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: pandas.core.indexes.multi.MultiIndex, /):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: Literal["bar"], /):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Literal["foo"]], /):
    """
    usage.xarray: 3
    """
    ...


@overload
def array(_0: List[Literal["SON", "JJA", "MAM", "DJF"]], /):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Literal["b", "a"]], _1: Literal["S1"], /):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Literal["b", "a"]], _1: Literal["U1"], /):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[int], _1: Literal["uint16"], /):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[str], /, *, dtype: Literal["datetime64"]):
    """
    usage.xarray: 2
    """
    ...


@overload
def array(_0: List[Union[Literal["b"], int]], /, *, dtype: Type[object]):
    """
    usage.xarray: 3
    """
    ...


@overload
def array(_0: List[int], _1: Type[numpy.float32], /):
    """
    usage.scipy: 16
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[numpy.datetime64], /, *, dtype: None):
    """
    usage.xarray: 2
    """
    ...


@overload
def array(_0: List[float], /, *, dtype: None):
    """
    usage.xarray: 2
    """
    ...


@overload
def array(_0: List[Union[None, Literal["baz", "foo"]]], /, *, dtype: Type[object]):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Union[None, Literal["bar", "foo"]]], /, *, dtype: Type[object]):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Union[float, Literal["baz", "foo"]]], /, *, dtype: Type[object]):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Union[float, Literal["bar", "foo"]]], /, *, dtype: Type[object]):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(
    _0: List[Literal["NaT", "2010-01-03", "2010-01-01"]], /, *, dtype: Literal["M8"]
):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: Literal["2010-01-02"], /, *, dtype: Literal["M8"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: Literal["NaT"], /, *, dtype: Literal["M8"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: datetime.timedelta, /):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: numpy.float64, /):
    """
    usage.dask: 8
    usage.matplotlib: 2
    usage.scipy: 7
    usage.sklearn: 4
    usage.xarray: 1
    """
    ...


@overload
def array(_0: numpy.float32, /):
    """
    usage.dask: 5
    usage.scipy: 1
    usage.sklearn: 1
    usage.xarray: 1
    """
    ...


@overload
def array(_0: numpy.bool_, /):
    """
    usage.dask: 4
    usage.scipy: 1
    usage.xarray: 1
    """
    ...


@overload
def array(_0: bool, /):
    """
    usage.dask: 3
    usage.scipy: 1
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[List[int]], /, *, dtype: Literal["int64"]):
    """
    usage.sklearn: 2
    usage.xarray: 3
    """
    ...


@overload
def array(_0: List[Literal["b", "a"]], /, *, dtype: Literal["U1"]):
    """
    usage.xarray: 2
    """
    ...


@overload
def array(_0: List[Literal["c", "a"]], /, *, dtype: Literal["U1"]):
    """
    usage.xarray: 2
    """
    ...


@overload
def array(_0: Tuple[Literal["j"], Literal["k"]], /):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: Tuple[Literal["i"], Literal["j"], Literal["k"]], /):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: xarray.core.indexing.NumpyIndexingAdapter, /):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Literal["bar", "foo"]], /):
    """
    usage.xarray: 2
    """
    ...


@overload
def array(_0: xarray.core.indexing.CopyOnWriteArray, /):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: xarray.core.indexing.MemoryCachedArray, /):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: int, /, *, dtype: Type[numpy.int64]):
    """
    usage.scipy: 1
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Union[int, numpy.float64]], /):
    """
    usage.matplotlib: 2
    usage.scipy: 5
    usage.sklearn: 3
    usage.xarray: 3
    """
    ...


@overload
def array(
    _0: List[Literal["2000-01-03T12:00", "2000-01-02T12:00", "2000-01-01T12:00"]], /
):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: Literal["2000-01-01T12:00"], /):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Union[int, float]], /, *, dtype: Type[numpy.float64]):
    """
    usage.xarray: 6
    """
    ...


@overload
def array(_0: List[Union[float, int]], /, *, dtype: Type[numpy.float64]):
    """
    usage.xarray: 2
    """
    ...


@overload
def array(_0: List[List[Union[float, int]]], /, *, dtype: Type[float]):
    """
    usage.scipy: 6
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Dict[Literal["z"], numpy.str_]], /):
    """
    usage.xarray: 2
    """
    ...


@overload
def array(_0: List[Dict[Literal["columns", "rows"], numpy.int64]], /):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Dict[Literal["z"], numpy.int64]], /):
    """
    usage.xarray: 3
    """
    ...


@overload
def array(_0: List[Dict[Literal["time"], numpy.int64]], /):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Dict[Literal["b", "a"], numpy.int64]], /):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: Tuple[numpy.float64, numpy.float64], /):
    """
    usage.matplotlib: 2
    usage.scipy: 9
    usage.sklearn: 1
    usage.xarray: 1
    """
    ...


@overload
def array(_0: Tuple[float, float], /):
    """
    usage.matplotlib: 5
    usage.scipy: 13
    usage.sklearn: 2
    usage.xarray: 3
    """
    ...


@overload
def array(_0: List[Union[None, Dict[Literal["z"], numpy.str_]]], /):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Dict[Literal["z"], numpy.float64]], /):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Dict[Literal["col", "row"], numpy.str_]], /):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Dict[Literal["x", "w"], Union[numpy.str_, numpy.int64]]], /):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Dict[Literal["col", "row"], Union[numpy.str_, numpy.int64]]], /):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Dict[Literal["row", "col"], Union[numpy.int64, numpy.str_]]], /):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Union[None, Dict[Literal["col"], numpy.int64]]], /):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Dict[Literal["row"], numpy.str_]], /):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Dict[Literal["col", "row"], numpy.int64]], /):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: object, /):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Literal["c", "b", "a"]], /, *, dtype: Type[object]):
    """
    usage.dask: 1
    usage.matplotlib: 2
    usage.sklearn: 3
    usage.xarray: 2
    """
    ...


@overload
def array(_0: int, /, *, dtype: Type[object]):
    """
    usage.scipy: 1
    usage.xarray: 2
    """
    ...


@overload
def array(_0: float, /, *, dtype: Type[object]):
    """
    usage.matplotlib: 1
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Union[float, int]], /, *, dtype: Type[float]):
    """
    usage.matplotlib: 1
    usage.scipy: 1
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Union[int, float]], /, *, dtype: Type[float]):
    """
    usage.matplotlib: 4
    usage.scipy: 1
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Literal["horse"]], /, *, dtype: Literal["S"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Literal["aardvark"]], /, *, dtype: Literal["S"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Literal["aardvark", "horse"]], /, *, dtype: Literal["S"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Literal["horse"]], /, *, dtype: Literal["U"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Literal["aardvark"]], /, *, dtype: Literal["U"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Literal["aardvark", "horse"]], /, *, dtype: Literal["U"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Union[Literal["two"], int]], /, *, dtype: Type[object]):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[datetime.timedelta], /):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[Union[float, Literal["3", "2", "1"]]], /, *, dtype: Type[object]):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: xarray.core.indexing.PandasIndexAdapter, /):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(_0: numpy.datetime64, /):
    """
    usage.dask: 3
    usage.xarray: 1
    """
    ...


@overload
def array(_0: List[int], /, *, dtype: Literal["datetime64[ns]"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def array(
    _0: object,
    _1: Union[type, Literal["timedelta64[ns]", "datetime64[ns]", "S1"]] = ...,
    /,
    *,
    dtype: object = ...,
    copy: bool = ...,
    subok: bool = ...,
    ndmin: int = ...,
):
    """
    usage.pandas: 6865
    """
    ...


@overload
def array(_0: List[int], /, *, dtype: Type[int]):
    """
    usage.dask: 1
    usage.scipy: 18
    usage.sklearn: 4
    """
    ...


@overload
def array(_0: numpy.matrix, /, *, copy: bool):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Union[complex, int]], /, *, dtype: Type[numpy.complex256]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Union[int, complex]], /, *, dtype: Type[numpy.complex256]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[int], /, *, dtype: Type[numpy.float128]):
    """
    usage.scipy: 7
    """
    ...


@overload
def array(_0: List[Union[complex, int]], /, *, dtype: Type[numpy.complex128]):
    """
    usage.scipy: 3
    """
    ...


@overload
def array(_0: List[Union[int, complex]], /, *, dtype: Type[numpy.complex128]):
    """
    usage.scipy: 4
    """
    ...


@overload
def array(_0: List[Union[complex, int]], /, *, dtype: Type[numpy.complex64]):
    """
    usage.scipy: 3
    """
    ...


@overload
def array(_0: List[Union[int, complex]], /, *, dtype: Type[numpy.complex64]):
    """
    usage.scipy: 4
    """
    ...


@overload
def array(_0: List[Union[complex, int]], _1: Type[numpy.complex256], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Union[int, complex]], _1: Type[numpy.complex256], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[int], _1: Type[numpy.float128], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Union[complex, int]], _1: Type[numpy.complex128], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[Union[int, complex]], _1: Type[numpy.complex128], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[int], _1: Type[numpy.float64], /):
    """
    usage.matplotlib: 2
    usage.scipy: 14
    """
    ...


@overload
def array(_0: List[Union[complex, int]], _1: Type[numpy.complex64], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[Union[int, complex]], _1: Type[numpy.complex64], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: object, /, *, copy: bool, dtype: numpy.dtype):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[List[int]], _1: Type[numpy.float32], /):
    """
    usage.scipy: 106
    """
    ...


@overload
def array(_0: numpy.ndarray, _1: Type[numpy.complex64], /):
    """
    usage.scipy: 4
    """
    ...


@overload
def array(_0: List[List[int]], _1: Type[numpy.float16], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, dtype: Type[numpy.float128]):
    """
    usage.scipy: 5
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, dtype: Type[numpy.float64]):
    """
    usage.scipy: 17
    usage.sklearn: 5
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, dtype: Type[numpy.float32]):
    """
    usage.scipy: 12
    usage.sklearn: 3
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, dtype: Type[int]):
    """
    usage.scipy: 11
    usage.sklearn: 7
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, dtype: numpy.dtype):
    """
    usage.scipy: 14
    usage.sklearn: 7
    """
    ...


@overload
def array(_0: List[numpy.ndarray], /, *, dtype: numpy.dtype):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[numpy.float64], /, *, dtype: numpy.dtype):
    """
    usage.dask: 1
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[float], _1: Type[float], /):
    """
    usage.matplotlib: 1
    usage.scipy: 3
    """
    ...


@overload
def array(_0: List[float], _1: Type[complex], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, copy: bool, dtype: Type[numpy.int32]):
    """
    usage.scipy: 23
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, copy: bool, dtype: None):
    """
    usage.scipy: 30
    """
    ...


@overload
def array(_0: List[complex], /):
    """
    usage.scipy: 43
    usage.sklearn: 4
    """
    ...


@overload
def array(_0: List[numpy.complex128], /):
    """
    usage.scipy: 14
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: list, /, *, dtype: Type[numpy.float64]):
    """
    usage.scipy: 8
    """
    ...


@overload
def array(_0: list, _1: Type[float], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: list, _1: numpy.dtype, /):
    """
    usage.scipy: 20
    """
    ...


@overload
def array(_0: List[Tuple[numpy.float64, numpy.float64]], /):
    """
    usage.scipy: 1
    usage.sklearn: 8
    """
    ...


@overload
def array(
    _0: List[Tuple[Union[int, float], Union[int, float]]],
    /,
    *,
    dtype: Type[numpy.float64],
):
    """
    usage.scipy: 13
    """
    ...


@overload
def array(_0: List[Tuple[int, int]], /, *, dtype: Type[numpy.float64]):
    """
    usage.scipy: 8
    """
    ...


@overload
def array(_0: List[Tuple[Union[int, float], int]], /, *, dtype: Type[numpy.float64]):
    """
    usage.scipy: 5
    """
    ...


@overload
def array(
    _0: List[Tuple[Union[int, float], Union[int, float]]], /, *, dtype: Type[float]
):
    """
    usage.scipy: 4
    """
    ...


@overload
def array(_0: Tuple[int, float], /):
    """
    usage.matplotlib: 1
    usage.scipy: 3
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Tuple[int, int]], /, *, dtype: Type[float]):
    """
    usage.scipy: 5
    """
    ...


@overload
def array(_0: List[Tuple[Union[int, float], Union[int, numpy.float64]]], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[float]], /, *, dtype: Type[object]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Tuple[int], /, *, dtype: Type[numpy.int32]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Tuple[int, int, int], /, *, dtype: Type[numpy.int32]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Tuple[int, int, int, int], /, *, dtype: Type[numpy.int32]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Union[complex, int]], /):
    """
    usage.dask: 1
    usage.scipy: 9
    """
    ...


@overload
def array(_0: List[Union[complex, float]], /):
    """
    usage.scipy: 4
    """
    ...


@overload
def array(_0: List[Union[int, complex]], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(
    _0: List[Tuple[float, float, float, float, Literal["class1", "class2", "class3"]]],
    _1: List[
        Tuple[
            Literal["attr0", "attr1", "attr2", "attr3", "class"],
            Union[Type[numpy.float64], Tuple[Type[numpy.bytes_], int]],
        ]
    ],
    /,
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: List[Tuple[float, float, float, float, Literal["C"]]],
    _1: List[
        Tuple[
            Literal["attr0", "attr1", "attr2", "attr3", "class"],
            Union[Type[numpy.float64], Tuple[Type[numpy.bytes_], int]],
        ]
    ],
    /,
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: List[Tuple[float, float, float, float, Literal["class1"]]],
    _1: List[
        Tuple[
            Literal["attr0", "attr1", "attr2", "attr3", "class"],
            Union[Type[numpy.float64], Tuple[Type[numpy.bytes_], int]],
        ]
    ],
    /,
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: List[Tuple[float, float]],
    _1: List[Tuple[Literal["yop", "yap"], Type[numpy.float64]]],
    /,
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: list,
    _1: List[
        Tuple[
            Literal["sepallength", "sepalwidth", "petallength", "petalwidth", "class"],
            Union[Type[numpy.float64], Tuple[Type[numpy.bytes_], int]],
        ]
    ],
    /,
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[str], /, *, dtype: Literal["datetime64[Y]"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[str], /, *, dtype: Literal["datetime64[M]"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[str], /, *, dtype: Literal["datetime64[D]"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[str], /, *, dtype: Literal["datetime64[m]"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: List[
        Literal["1631-10-15T20:04", "2013-11-30T04:55", "nat", "2004-12-01T23:59"]
    ],
    /,
    *,
    dtype: Literal["datetime64[m]"],
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: List[Tuple[Literal["1999-01-31", "1935-11-27"], int]],
    /,
    *,
    dtype: List[
        Tuple[
            Literal["attr_date", "attr_number"],
            Union[Literal["datetime64[D]"], Type[numpy.float64]],
        ]
    ],
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: List[Tuple[Literal["2004-12-01", "1942-08-13"], int]],
    /,
    *,
    dtype: List[
        Tuple[
            Literal["attr_date", "attr_number"],
            Union[Literal["datetime64[D]"], Type[numpy.float64]],
        ]
    ],
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: List[Tuple[Literal["1817-04-28"], int]],
    /,
    *,
    dtype: List[
        Tuple[
            Literal["attr_date", "attr_number"],
            Union[Literal["datetime64[D]"], Type[numpy.float64]],
        ]
    ],
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: List[Tuple[Literal["2100-09-10", "1957-04-17", "1721-01-14"], int]],
    /,
    *,
    dtype: List[
        Tuple[
            Literal["attr_date", "attr_number"],
            Union[Literal["datetime64[D]"], Type[numpy.float64]],
        ]
    ],
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: List[Tuple[Literal["2013-11-30"], int]],
    /,
    *,
    dtype: List[
        Tuple[
            Literal["attr_date", "attr_number"],
            Union[Literal["datetime64[D]"], Type[numpy.float64]],
        ]
    ],
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: List[Tuple[Literal["1631-10-15"], int]],
    /,
    *,
    dtype: List[
        Tuple[
            Literal["attr_date", "attr_number"],
            Union[Literal["datetime64[D]"], Type[numpy.float64]],
        ]
    ],
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: List[Tuple[int]],
    /,
    *,
    dtype: List[Tuple[Literal["attr_number"], Type[numpy.float64]]],
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Literal["no", "yes"]], /, *, dtype: Literal["<S3"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Literal["no  ", "  yes"]], /, *, dtype: Literal["<S5"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: str, /):
    """
    usage.sample-usage: 1
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Literal["r"], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Literal["one  two  three"], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Tuple[int, int], /, *, dtype: Literal["i4"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Tuple[int, int, int], /, *, dtype: Literal["i4"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[int], /, *, dtype: Literal["i4"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: List[Literal["complexfield", "doublefield", "stringfield"]],
    /,
    *,
    dtype: Literal["S13"],
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Literal["two", "one"]], /, *, dtype: Literal["S4"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Literal["three"]], /, *, dtype: Literal["S6"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Literal["inline"], /, *, dtype: Literal["S"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[str], /, *, dtype: Literal["S10"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: int, /, *, dtype: Type[numpy.int32]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: list, /, *, dtype: Type[numpy.int8]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[str], /, *, dtype: Literal["S32"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[str], /, *, dtype: Literal["S64"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: List[List[Tuple[int, int]]],
    /,
    *,
    dtype: List[Tuple[Literal["a", "b"], Type[object]]],
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: List[List[Tuple[int, int]]],
    /,
    *,
    dtype: List[Tuple[Literal["b", "a"], Type[object]]],
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: List[Tuple[int, int]], _1: List[Tuple[Literal["a", "b"], Type[object]]], /
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Literal["b", "a"]], /, *, dtype: Literal["S2"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Tuple[None, ...], /, *, dtype: Literal["U"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: List[Tuple[int, int]],
    /,
    *,
    dtype: List[Tuple[Literal["a", "b"], Literal["|O8"]]],
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: List[Tuple[int, int]],
    /,
    *,
    dtype: List[Tuple[Literal["b", "a"], Literal["|O8"]]],
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Tuple[int]], _1: List[Tuple[Literal["a"], Type[object]]], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Tuple[int]], _1: List[Tuple[Literal["f"], Type[object]]], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Tuple[int]], /, *, dtype: List[Tuple[Literal["f"], Literal["|O8"]]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Literal["f2", "f1"]], /, *, dtype: Literal["S3"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: List[Tuple[int, Literal["a string"]]],
    _1: List[Tuple[Literal["field1", "field2"], Type[object]]],
    /,
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Literal["field2", "field1"]], /, *, dtype: Literal["S7"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Literal["a string"]], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[str], /, *, dtype: Literal["U1"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: list, /, *, dtype: Literal["U1"]):
    """
    usage.scipy: 4
    """
    ...


@overload
def array(_0: List[Literal[""]], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[Literal["hello", "world"]]], /, *, dtype: Type[object]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Literal["world", "hello"]], /, *, dtype: Literal["U"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[bool]], /, *, dtype: Type[numpy.bool_]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: List[Tuple[scipy.sparse.coo.coo_matrix]],
    _1: List[Tuple[Literal["sparsefield"], Type[object]]],
    /,
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Literal["sparsefield"]], /, *, dtype: Literal["S12"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: List[Tuple[int, int]], _1: List[Tuple[Literal["one", "two"], Type[object]]], /
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Literal["Foob", "Hello"]], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Literal["Foob ", "Hello"]], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Literal["a string"], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Literal["SchrÃ¶dinger"], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: List[Tuple[int, Literal["test_str"]]],
    _1: List[Tuple[Literal["b", "c"], Type[object]]],
    /,
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Literal["c", "b"]], /, *, dtype: Literal["S2"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: int, /, *, dtype: Type[numpy.uint32]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: List[Literal["here  ", "fast  ", "python", "learn "]],
    /,
    *,
    dtype: Literal["U6"],
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[str]], /, *, dtype: Literal["U1"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[str]], /, *, dtype: Literal["U1"], order: Literal["F"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[Literal[""]]], /, *, dtype: Literal["U1"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Literal[""]], /, *, dtype: Literal["U1"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[list], /):
    """
    usage.matplotlib: 1
    usage.scipy: 7
    usage.sklearn: 3
    """
    ...


@overload
def array(_0: List[List[list]], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[bytes], /, *, dtype: Type[numpy.object_]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[numpy.complex64], /):
    """
    usage.scipy: 4
    """
    ...


@overload
def array(_0: numpy.int16, /):
    """
    usage.dask: 3
    usage.scipy: 1
    """
    ...


@overload
def array(_0: numpy.int32, /):
    """
    usage.dask: 4
    usage.scipy: 1
    """
    ...


@overload
def array(_0: numpy.complex64, /):
    """
    usage.dask: 3
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[scipy.io.idl.Pointer], /, *, dtype: Type[numpy.object_]):
    """
    usage.scipy: 3
    """
    ...


@overload
def array(_0: numpy.float32, /, *, dtype: Type[numpy.object_]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[None], /):
    """
    usage.matplotlib: 2
    usage.scipy: 1
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[List[int]], /, *, dtype: Literal["int"]):
    """
    usage.scipy: 6
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[List[int]], /, *, dtype: Literal["uint"]):
    """
    usage.scipy: 6
    """
    ...


@overload
def array(_0: List[List[int]], /, *, dtype: Type[numpy.uint64]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[List[Union[int, float]]], _1: Literal["f"], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: list, /, *, dtype: Type[numpy.int32]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: int, _1: Literal[">b"], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: int, _1: Literal[">i"], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: numpy.int8, _1: Literal[">b"], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: int, _1: Literal[">q"], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: bytes, /, *, dtype: numpy.dtype):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: int, /, *, dtype: numpy.dtype):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: int, /, *, copy: bool, dtype: Type[numpy.int32]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[Union[float, int, complex]]], /):
    """
    usage.scipy: 3
    """
    ...


@overload
def array(_0: List[List[Union[int, complex]]], /):
    """
    usage.scipy: 11
    """
    ...


@overload
def array(_0: List[List[Union[int, float]]], /, *, dtype: Type[numpy.float32]):
    """
    usage.scipy: 6
    usage.sklearn: 2
    """
    ...


@overload
def array(_0: List[List[Union[int, complex, float]]], /):
    """
    usage.scipy: 4
    """
    ...


@overload
def array(_0: List[List[complex]], /):
    """
    usage.scipy: 23
    usage.sklearn: 2
    """
    ...


@overload
def array(_0: List[List[Union[float, complex]]], /):
    """
    usage.scipy: 6
    """
    ...


@overload
def array(_0: List[List[Union[complex, float]]], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[Union[int, complex]]], _1: Literal["D"], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[int], _1: Literal["D"], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[Union[float, complex, int]]], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[Union[complex, int]]], /):
    """
    usage.scipy: 10
    """
    ...


@overload
def array(
    _0: Tuple[Tuple[int, int], Tuple[int, int]], /, *, dtype: Type[numpy.float32]
):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(
    _0: Tuple[Tuple[int, int], Tuple[int, int]], /, *, dtype: Type[numpy.float64]
):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[List[int]], /, *, dtype: Type[numpy.float128]):
    """
    usage.scipy: 3
    """
    ...


@overload
def array(
    _0: Tuple[Tuple[int, int], Tuple[int, int]], /, *, dtype: Type[numpy.float128]
):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: Tuple[int, int], /, *, dtype: Type[numpy.float128]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[List[Union[complex, int]]], /, *, dtype: Type[numpy.complex64]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[List[Union[complex, int]]], /, *, dtype: Type[numpy.complex128]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[List[Union[complex, int]]], /, *, dtype: Type[numpy.complex256]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Tuple[Tuple[int, int], Tuple[int, int]], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[int], /, *, dtype: Literal["e"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[int], /, *, dtype: Literal["f"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[int], /, *, dtype: Literal["d"]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[int], /, *, dtype: Literal["g"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[int], /, *, dtype: Literal["F"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[int], /, *, dtype: Literal["D"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[int], /, *, dtype: Literal["G"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[complex], /, *, dtype: Literal["F"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[complex], /, *, dtype: Literal["D"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[complex], /, *, dtype: Literal["G"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Union[int, float]], /, *, dtype: Type[numpy.float32]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[List[int]]], _1: Literal["d"], /):
    """
    usage.scipy: 3
    """
    ...


@overload
def array(_0: List[List[List[Union[float, int]]]], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[complex], _1: Type[numpy.complex64], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[Union[float, int]], _1: Type[numpy.float64], /):
    """
    usage.matplotlib: 1
    usage.scipy: 3
    """
    ...


@overload
def array(_0: List[Union[float, int]], _1: Type[numpy.float32], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[complex], _1: Type[numpy.complex128], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[List[int]], _1: Literal["d"], /):
    """
    usage.scipy: 4
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, dtype: Literal["D"]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: Tuple[List[int], List[int], List[int]], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: int, /, *, dtype: Literal["d"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[Union[int, float]]], /, *, order: Literal["C"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[Union[int, float]]], /, *, order: Literal["F"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, order: Literal["C"]):
    """
    usage.matplotlib: 2
    usage.scipy: 1
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, order: Literal["F"]):
    """
    usage.scipy: 1
    usage.sklearn: 3
    """
    ...


@overload
def array(_0: List[float], _1: Literal["F"], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, dtype: Literal["F"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: scipy.linalg._testutils._FakeMatrix, /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: scipy.linalg._testutils._FakeMatrix2, /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[List[Union[complex, int]]]], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Union[float, complex]], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, dtype: Type[numpy.complex64]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, dtype: Type[numpy.complex128]):
    """
    usage.scipy: 3
    """
    ...


@overload
def array(_0: List[int], _1: numpy.dtype, /):
    """
    usage.scipy: 12
    """
    ...


@overload
def array(_0: List[List[int]], _1: numpy.dtype, /):
    """
    usage.scipy: 8
    """
    ...


@overload
def array(_0: float, _1: Type[numpy.float32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: float, _1: Type[numpy.float64], /):
    """
    usage.scipy: 3
    """
    ...


@overload
def array(_0: float, _1: Type[numpy.complex64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: float, _1: Type[numpy.complex128], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: int, /, *, dtype: Type[numpy.float32]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: float, /, *, dtype: Type[numpy.float32]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: float, /, *, dtype: Type[numpy.float64]):
    """
    usage.scipy: 2
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: int, /, *, dtype: Type[numpy.complex64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: complex, /, *, dtype: Type[numpy.complex64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: float, /, *, dtype: Type[numpy.complex64]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: int, /, *, dtype: Type[numpy.complex128]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: complex, /, *, dtype: Type[numpy.complex128]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: float, /, *, dtype: Type[numpy.complex128]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[List[int]], /, *, dtype: Type[numpy.complex128]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[int]], /, *, dtype: Type[numpy.float64], order: Literal["C"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: List[List[int]], /, *, dtype: Type[numpy.complex128], order: Literal["C"]
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[Union[complex, float]]], /, *, dtype: Type[numpy.complex64]):
    """
    usage.scipy: 4
    """
    ...


@overload
def array(_0: List[Union[complex, float]], /, *, dtype: Type[numpy.complex64]):
    """
    usage.scipy: 4
    """
    ...


@overload
def array(_0: List[complex], /, *, dtype: Type[numpy.complex64]):
    """
    usage.scipy: 6
    """
    ...


@overload
def array(_0: List[List[Union[complex, float]]], /, *, dtype: Type[numpy.complex128]):
    """
    usage.scipy: 4
    """
    ...


@overload
def array(_0: List[Union[complex, float]], /, *, dtype: Type[numpy.complex128]):
    """
    usage.scipy: 4
    """
    ...


@overload
def array(_0: List[complex], /, *, dtype: Type[numpy.complex128]):
    """
    usage.scipy: 6
    """
    ...


@overload
def array(_0: List[float], /, *, dtype: Type[numpy.complex64]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[float], /, *, dtype: Type[numpy.complex128]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[List[Union[float, int]]], /, *, dtype: Type[numpy.float64]):
    """
    usage.matplotlib: 1
    usage.scipy: 1
    usage.sklearn: 2
    """
    ...


@overload
def array(_0: List[List[complex]], /, *, dtype: Type[numpy.complex64]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[List[complex]], /, *, dtype: Type[numpy.complex128]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: int, _1: Literal["f"], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: int, _1: Literal["d"], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: int, _1: Literal["F"], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: int, _1: Literal["D"], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[List[float]], /, *, dtype: Type[numpy.complex64]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[List[float]], /, *, dtype: Type[numpy.complex128]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[numpy.float64], /, *, dtype: Type[numpy.float32]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[numpy.float64], /, *, dtype: Type[numpy.float64]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[numpy.complex128], /, *, dtype: Type[numpy.complex64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[numpy.complex128], /, *, dtype: Type[numpy.complex128]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: list, /, *, dtype: Type[numpy.float32]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[List[numpy.complex128]], /, *, dtype: Literal["D"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: Tuple[List[float], List[float], List[float], List[float], List[float]], /
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[numpy.complex128]], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[int]], /, *, dtype: Type[complex]):
    """
    usage.scipy: 15
    """
    ...


@overload
def array(_0: List[List[Union[int, float, numpy.float64]]], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[float]], /, *, dtype: Type[float]):
    """
    usage.scipy: 11
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[List[int]], _1: Literal["f"], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: list, /, *, dtype: Type[float]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: list, /, *, dtype: numpy.dtype):
    """
    usage.dask: 7
    usage.scipy: 6
    """
    ...


@overload
def array(_0: Tuple[int, int], _1: Type[float], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: bool, /, *, dtype: Type[bool]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[int]], _1: Type[numpy.int8], /):
    """
    usage.scipy: 105
    """
    ...


@overload
def array(_0: List[List[int]], _1: Type[numpy.int16], /):
    """
    usage.scipy: 96
    """
    ...


@overload
def array(_0: List[List[int]], _1: Type[numpy.uint16], /):
    """
    usage.scipy: 96
    """
    ...


@overload
def array(_0: List[List[int]], _1: Type[numpy.int32], /):
    """
    usage.dask: 1
    usage.scipy: 102
    """
    ...


@overload
def array(_0: List[List[int]], _1: Type[numpy.uint32], /):
    """
    usage.scipy: 96
    """
    ...


@overload
def array(_0: List[List[int]], _1: Type[numpy.int64], /):
    """
    usage.scipy: 96
    """
    ...


@overload
def array(_0: List[List[int]], _1: Type[numpy.uint64], /):
    """
    usage.scipy: 96
    """
    ...


@overload
def array(_0: List[List[int]], _1: Type[numpy.float64], /):
    """
    usage.scipy: 105
    """
    ...


@overload
def array(_0: list, _1: Type[numpy.int8], /):
    """
    usage.scipy: 4
    """
    ...


@overload
def array(_0: list, _1: Type[numpy.uint8], /):
    """
    usage.scipy: 4
    """
    ...


@overload
def array(_0: list, _1: Type[numpy.int16], /):
    """
    usage.scipy: 4
    """
    ...


@overload
def array(_0: list, _1: Type[numpy.uint16], /):
    """
    usage.scipy: 4
    """
    ...


@overload
def array(_0: list, _1: Type[numpy.int32], /):
    """
    usage.scipy: 4
    """
    ...


@overload
def array(_0: list, _1: Type[numpy.uint32], /):
    """
    usage.scipy: 4
    """
    ...


@overload
def array(_0: list, _1: Type[numpy.int64], /):
    """
    usage.scipy: 4
    """
    ...


@overload
def array(_0: list, _1: Type[numpy.uint64], /):
    """
    usage.scipy: 4
    """
    ...


@overload
def array(_0: list, _1: Type[numpy.float32], /):
    """
    usage.scipy: 4
    """
    ...


@overload
def array(_0: list, _1: Type[numpy.float64], /):
    """
    usage.scipy: 4
    """
    ...


@overload
def array(_0: List[int], _1: Type[numpy.int8], /):
    """
    usage.scipy: 12
    """
    ...


@overload
def array(_0: List[int], _1: Type[numpy.int16], /):
    """
    usage.scipy: 11
    """
    ...


@overload
def array(_0: List[int], _1: Type[numpy.uint16], /):
    """
    usage.scipy: 11
    """
    ...


@overload
def array(_0: List[int], _1: Type[numpy.int32], /):
    """
    usage.scipy: 12
    """
    ...


@overload
def array(_0: List[int], _1: Type[numpy.uint32], /):
    """
    usage.scipy: 11
    """
    ...


@overload
def array(_0: List[int], _1: Type[numpy.int64], /):
    """
    usage.scipy: 18
    """
    ...


@overload
def array(_0: List[int], _1: Type[numpy.uint64], /):
    """
    usage.scipy: 11
    """
    ...


@overload
def array(_0: list, _1: Type[bool], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[int], _1: Type[bool], /):
    """
    usage.scipy: 14
    """
    ...


@overload
def array(_0: List[float], _1: Type[numpy.int8], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[float], _1: Type[numpy.uint8], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[float], _1: Type[numpy.int16], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[float], _1: Type[numpy.uint16], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[float], _1: Type[numpy.int32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[float], _1: Type[numpy.uint32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[float], _1: Type[numpy.int64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[float], _1: Type[numpy.uint64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[float], _1: Type[numpy.float32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[float], _1: Type[numpy.float64], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: Tuple[int, int, int], _1: Type[float], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[List[int]]], /, *, dtype: Type[numpy.float64]):
    """
    usage.scipy: 4
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, copy: bool, dtype: Type[numpy.int64]):
    """
    usage.scipy: 26
    """
    ...


@overload
def array(_0: numpy.ndarray, _1: Type[numpy.float64], /):
    """
    usage.matplotlib: 4
    usage.scipy: 1
    """
    ...


@overload
def array(_0: int, _1: Type[int], /):
    """
    usage.scipy: 10
    """
    ...


@overload
def array(_0: float, _1: Type[float], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: int, _1: Type[float], /):
    """
    usage.scipy: 10
    """
    ...


@overload
def array(_0: Tuple[float, int], /):
    """
    usage.matplotlib: 1
    usage.scipy: 4
    """
    ...


@overload
def array(_0: List[Tuple[float, float]], /, *, dtype: Literal["float"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Tuple[int, int]], /, *, dtype: Literal["float"]):
    """
    usage.scipy: 6
    """
    ...


@overload
def array(_0: List[Tuple[int, ...]], /, *, dtype: Literal["float"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Tuple[numpy.int64, numpy.int64]], /, *, dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Tuple[numpy.float64, numpy.float64]], /, *, dtype: Literal["float"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Tuple[float, float, float, float, float, float, float, float], /):
    """
    usage.scipy: 4
    """
    ...


@overload
def array(
    _0: Tuple[float, float, float, float, float, float, float, float, float, float], /
):
    """
    usage.scipy: 4
    usage.sklearn: 2
    """
    ...


@overload
def array(_0: int, /, *, copy: bool, dtype: Type[numpy.float64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[int]], /, *, copy: bool, dtype: Type[float]):
    """
    usage.scipy: 16
    """
    ...


@overload
def array(_0: List[int], /, *, copy: bool, dtype: Type[float]):
    """
    usage.scipy: 7
    """
    ...


@overload
def array(_0: Tuple[float, float], /, *, dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, copy: bool, dtype: Type[float]):
    """
    usage.scipy: 6
    """
    ...


@overload
def array(
    _0: List[Tuple[Union[float, None], Union[float, int]]], /, *, dtype: Type[float]
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[int], /, *, copy: bool, dtype: Type[numpy.float64]):
    """
    usage.scipy: 8
    """
    ...


@overload
def array(_0: List[List[int]], /, *, copy: bool, dtype: Type[numpy.float64]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: Literal["hello"], /, *, copy: bool, dtype: Type[numpy.float64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Literal["hello"], /, *, copy: bool, dtype: Type[float]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: Literal["hello"], /, *, dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Literal["hi"], /, *, dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Literal["hi"]], /, *, dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Tuple[int, Literal[""]]], /, *, dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Tuple[int, Union[int, Literal[""]]]], /, *, dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Tuple[int, Literal["2020-02-29"]]], /, *, dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[List[int]]], /, *, dtype: Type[float]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[Union[None, int]], /, *, copy: bool, dtype: Type[numpy.float64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Union[int, float]], /, *, copy: bool, dtype: Type[numpy.float64]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[Union[float, int]], /, *, copy: bool, dtype: Type[numpy.float64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[Union[int, None]]], /, *, copy: bool, dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Union[int, float]], /, *, copy: bool, dtype: Type[float]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[List[Union[int, float]]], /, *, copy: bool, dtype: Type[float]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[Union[float, int]], /, *, copy: bool, dtype: Type[float]):
    """
    usage.scipy: 3
    """
    ...


@overload
def array(_0: Tuple[int, float], /, *, dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: int, /, *, copy: bool, dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Tuple[int, int], /, *, dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Tuple[int, int, int], /, *, dtype: Type[float]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[Tuple[int, int, int]], /, *, dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Tuple[int, ...]], /, *, dtype: Type[float]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[Tuple[int, int, int, int]], /, *, dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Tuple[int, None]], /, *, dtype: Type[float]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[Tuple[None, int]], /, *, dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Tuple[Union[None, float], None]], /, *, dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: List[Tuple[Union[None, float], Union[None, float]]], /, *, dtype: Type[float]
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: numpy.matrix, /):
    """
    usage.scipy: 9
    usage.sklearn: 4
    """
    ...


@overload
def array(_0: scipy.optimize.nonlin.LowRankMatrix, /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Tuple[int, int]], _1: Type[float], /):
    """
    usage.scipy: 4
    """
    ...


@overload
def array(_0: List[List[numpy.float64]], _1: Type[float], /):
    """
    usage.scipy: 3
    """
    ...


@overload
def array(_0: List[Tuple[None, None]], _1: Type[float], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[Union[numpy.float64, float]], /):
    """
    usage.matplotlib: 15
    usage.scipy: 10
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Tuple[int, float]], _1: Type[float], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Tuple[numpy.int64, numpy.int64], /, *, dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Tuple[int, numpy.int64], /, *, dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Tuple[numpy.int64, int], /, *, dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Tuple[numpy.float64, numpy.float64], /, *, dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[scipy.optimize._shgo_lib.triangulation.Vertex], /):
    """
    usage.scipy: 3
    """
    ...


@overload
def array(_0: Tuple[numpy.int64], /, *, dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Tuple[numpy.float64], /, *, dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Tuple[numpy.float64], /):
    """
    usage.dask: 2
    usage.scipy: 2
    """
    ...


@overload
def array(_0: Tuple[numpy.int64], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[Tuple[float, float]], _1: Type[float], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: Tuple[
        numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64
    ],
    /,
    *,
    dtype: Type[float],
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: Tuple[int, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64],
    /,
    *,
    dtype: Type[float],
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: Tuple[int, int, numpy.int64, numpy.int64, numpy.int64, numpy.int64],
    /,
    *,
    dtype: Type[float],
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: Tuple[int, int, int, numpy.int64, numpy.int64, numpy.int64],
    /,
    *,
    dtype: Type[float],
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: Tuple[int, int, int, int, numpy.int64, numpy.int64], /, *, dtype: Type[float]
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Tuple[int, int, int, int, int, numpy.int64], /, *, dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Tuple[int, int, int, int, int, int], /, *, dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: Tuple[
        numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64, numpy.int64
    ],
    /,
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: Tuple[
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
    ],
    /,
    *,
    dtype: Type[float],
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Tuple[int, int, int, int, int, numpy.int64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Tuple[int, int, int, numpy.int64, numpy.int64, numpy.int64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: int, /, *, dtype: Literal["uint64"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Tuple[int, numpy.int64], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: Tuple[numpy.int64, int], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[Tuple[int, ...]], _1: Type[float], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Tuple[numpy.int64, None]], _1: Type[float], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Tuple[numpy.int64, numpy.int64]], _1: Type[float], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: Tuple[Tuple[int, None], Tuple[int, None], Tuple[int, None]], _1: Type[float], /
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[Union[numpy.float64, int, float]]], /):
    """
    usage.scipy: 4
    """
    ...


@overload
def array(_0: Tuple[Tuple[None, None], Tuple[int, None]], /, *, dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[numpy.float64], /, *, copy: bool):
    """
    usage.scipy: 4
    """
    ...


@overload
def array(_0: List[float], /, *, copy: bool, dtype: Type[numpy.float64]):
    """
    usage.scipy: 5
    """
    ...


@overload
def array(_0: List[List[float]], /, *, copy: bool, dtype: Type[float]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[float], /, *, copy: bool, dtype: Type[float]):
    """
    usage.scipy: 3
    """
    ...


@overload
def array(
    _0: List[Tuple[Union[int, float], Union[float, int]]], /, *, dtype: Type[float]
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Tuple[float, None], /, *, dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Tuple[None, float], /, *, dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Tuple[float, int], /, *, dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Tuple[Tuple[float, float], Tuple[int, float]], /, *, dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Tuple[int, Union[int, None]]], /, *, dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: List[Tuple[Union[int, None], Union[int, None]]], /, *, dtype: Type[float]
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Union[float, numpy.float64]], /, *, copy: bool):
    """
    usage.scipy: 6
    """
    ...


@overload
def array(_0: Tuple[None, None], /, *, dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Tuple[Union[None, int], None]], /, *, dtype: Type[float]):
    """
    usage.scipy: 3
    """
    ...


@overload
def array(
    _0: List[Tuple[Union[None, int], Union[None, int]]], /, *, dtype: Type[float]
):
    """
    usage.scipy: 3
    """
    ...


@overload
def array(_0: List[List[Union[float, int]]], /, *, copy: bool, dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Tuple[None, None]], /, *, dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Tuple[Union[int, None], None]], /, *, dtype: Type[float]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[Union[numpy.float64, float]], /, *, copy: bool):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Tuple[int, Union[None, int]]], /, *, dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: List[Tuple[Union[None, int, float], Union[int, float, None]]],
    /,
    *,
    dtype: Type[float],
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: List[Tuple[Union[None, int, float], Union[None, float]]],
    /,
    *,
    dtype: Type[float],
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: scipy.optimize.nonlin.BroydenFirst, /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: scipy.optimize.nonlin.BroydenSecond, /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: scipy.optimize.nonlin.DiagBroyden, /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: scipy.optimize.nonlin.LinearMixing, /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: scipy.optimize.nonlin.ExcitingMixing, /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[numpy.float64], _1: Type[float], /):
    """
    usage.scipy: 4
    """
    ...


@overload
def array(_0: Tuple[Tuple[float, None], Tuple[None, float]], _1: Type[float], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Tuple[Union[float, int], float]], _1: Type[float], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Tuple[Tuple[int, None], Tuple[int, None]], _1: Type[float], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Tuple[Tuple[int, int], Tuple[int, int]], _1: Type[float], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Tuple[Tuple[float, int], Tuple[float, int]], _1: Type[float], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Tuple[Tuple[int, float], Tuple[int, int]], _1: Type[float], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Tuple[None, int]], _1: Type[float], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Tuple[int, None]], _1: Type[float], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Tuple[Union[float, int], int]], _1: Type[float], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: Tuple[Tuple[int, int], Tuple[int, int], Tuple[int, int]], _1: Type[float], /
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Union[float, numpy.float64]], /):
    """
    usage.matplotlib: 4
    usage.scipy: 5
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[float], /, *, copy: bool):
    """
    usage.scipy: 5
    """
    ...


@overload
def array(_0: List[Union[int, float]], /, *, copy: bool):
    """
    usage.matplotlib: 1
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[int], /, *, copy: bool):
    """
    usage.dask: 4
    usage.scipy: 6
    """
    ...


@overload
def array(_0: List[complex], /, *, copy: bool):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[float], _1: Literal["f"], /):
    """
    usage.scipy: 9
    """
    ...


@overload
def array(_0: List[Union[complex, numpy.complex128]], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: numpy.ndarray, _1: Type[complex], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Tuple[float, float, float, float], /, *, copy: bool):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[Union[numpy.int64, int]]], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[List[numpy.int64]], /):
    """
    usage.dask: 1
    usage.matplotlib: 1
    usage.scipy: 1
    usage.sklearn: 2
    """
    ...


@overload
def array(_0: Tuple[complex, complex, int, int], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: Tuple[float, float, float, float], /):
    """
    usage.dask: 1
    usage.matplotlib: 4
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Union[List[int], int]], /, *, dtype: Type[object]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[int]], /, *, dtype: Type[object]):
    """
    usage.scipy: 2
    usage.sklearn: 2
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, dtype: Type[bool], order: Literal["c"]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: list, /, *, dtype: Type[numpy.int64]):
    """
    usage.scipy: 3
    """
    ...


@overload
def array(_0: Tuple[float], /, *, dtype: Type[numpy.float64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Tuple[int], /, *, dtype: Type[numpy.int64]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: Tuple[float, float], /, *, dtype: Type[numpy.float64]):
    """
    usage.scipy: 1
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[List[List[complex]]], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[decimal.Decimal], /, *, dtype: Type[object]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[int], _1: Literal["float"], /):
    """
    usage.scipy: 5
    """
    ...


@overload
def array(_0: List[int], _1: Literal["complex"], /):
    """
    usage.scipy: 5
    """
    ...


@overload
def array(_0: numpy.ndarray, _1: numpy.dtype, /, *, copy: bool):
    """
    usage.scipy: 12
    """
    ...


@overload
def array(_0: List[int], _1: numpy.dtype, /, *, copy: bool):
    """
    usage.scipy: 36
    """
    ...


@overload
def array(_0: List[float], _1: numpy.dtype, /, *, copy: bool):
    """
    usage.scipy: 6
    """
    ...


@overload
def array(_0: List[Union[float, int]], _1: numpy.dtype, /, *, copy: bool):
    """
    usage.scipy: 12
    """
    ...


@overload
def array(_0: List[List[int]], _1: numpy.dtype, /, *, copy: bool):
    """
    usage.scipy: 72
    """
    ...


@overload
def array(_0: List[List[List[int]]], _1: numpy.dtype, /, *, copy: bool):
    """
    usage.scipy: 24
    """
    ...


@overload
def array(_0: list, _1: numpy.dtype, /, *, copy: bool):
    """
    usage.scipy: 6
    """
    ...


@overload
def array(_0: List[List[List[float]]], /, *, dtype: Type[numpy.uint8]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[List[float]]], /, *, dtype: Type[numpy.int8]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[List[float]]], /, *, dtype: Type[numpy.uint16]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[List[float]]], /, *, dtype: Type[numpy.int16]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[List[float]]], /, *, dtype: Type[numpy.uint64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[List[float]]], /, *, dtype: Type[int]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[List[float]]], /, *, dtype: Type[numpy.ulonglong]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[List[float]]], /, *, dtype: Type[numpy.float32]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[List[float]]], /, *, dtype: Type[numpy.float64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[List[float]]], /, *, dtype: Type[numpy.float128]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[List[float]]], /, *, dtype: Type[decimal.Decimal]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[complex], /, *, dtype: Type[numpy.complex256]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: numpy.ndarray, _1: numpy.dtype, /):
    """
    usage.scipy: 9
    """
    ...


@overload
def array(_0: numpy.ndarray, _1: numpy.dtype, /, *, order: Literal["C"]):
    """
    usage.scipy: 14
    """
    ...


@overload
def array(_0: List[Union[numpy.complex128, int]], /):
    """
    usage.scipy: 3
    """
    ...


@overload
def array(_0: List[Union[numpy.int64, int]], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[decimal.Decimal], /):
    """
    usage.matplotlib: 2
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[decimal.Decimal], _1: Type[float], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: numpy.ndarray, _1: Type[numpy.complex128], /):
    """
    usage.scipy: 14
    """
    ...


@overload
def array(_0: numpy.complex128, /):
    """
    usage.dask: 4
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[int]], /, *, dtype: Literal["f"]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[List[int]], /, *, dtype: Literal["d"]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[List[int]], /, *, dtype: Literal["g"]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[List[int]], /, *, dtype: Literal["F"]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[List[int]], /, *, dtype: Literal["D"]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[List[int]], /, *, dtype: Literal["G"]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[List[int]], /, *, dtype: Literal["O"]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[List[float]], _1: numpy.dtype, /):
    """
    usage.scipy: 5
    """
    ...


@overload
def array(
    _0: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray], /, *, dtype: Type[object]
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[List[int]]], /, *, dtype: Type[int]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[List[int]]], /, *, dtype: Type[complex]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[int], /, *, copy: bool, dtype: Type[numpy.int32]):
    """
    usage.scipy: 17
    """
    ...


@overload
def array(_0: List[int], /, *, copy: bool, dtype: None):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[Tuple[int, int]], /, *, dtype: Type[numpy.int32]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[int]], /, *, copy: bool, dtype: None):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray],
    /,
    *,
    copy: bool,
    dtype: None,
):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: Tuple[int, int, int], /, *, copy: bool, dtype: Type[numpy.int32]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[Union[complex, int]]], _1: Type[complex], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[Union[int, complex]]], _1: Type[complex], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: numpy.ndarray, /, *, copy: bool, dtype: Type[numpy.float64], order: Literal["C"]
):
    """
    usage.scipy: 11
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, dtype: Literal["d"]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[numpy.ndarray], /, *, copy: bool, dtype: None):
    """
    usage.scipy: 3
    """
    ...


@overload
def array(_0: List[List[Union[int, float, complex]]], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[Union[complex, int]]], /, *, dtype: Type[complex]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[numpy.complex128], /, *, dtype: Type[complex]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: int, /, *, copy: bool, dtype: numpy.dtype, ndmin: int):
    """
    usage.scipy: 4
    """
    ...


@overload
def array(_0: numpy.float64, /, *, copy: bool, dtype: numpy.dtype, ndmin: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: numpy.complex128, /, *, copy: bool, dtype: numpy.dtype, ndmin: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[int]], /, *, dtype: Type[numpy.int16]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[Union[numpy.float64, int]]], /, *, dtype: Type[float]):
    """
    usage.scipy: 4
    """
    ...


@overload
def array(_0: List[List[numpy.float64]], /, *, dtype: Type[float]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[List[Union[int, float]]], /, *, dtype: Type[float]):
    """
    usage.scipy: 1
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, copy: bool, dtype: numpy.dtype, ndmin: int):
    """
    usage.matplotlib: 2
    usage.scipy: 21
    """
    ...


@overload
def array(_0: List[List[Union[complex, int, float]]], /):
    """
    usage.scipy: 4
    """
    ...


@overload
def array(
    _0: numpy.ndarray, /, *, copy: bool, dtype: Type[numpy.bool_], order: Literal["C"]
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: numpy.ndarray,
    /,
    *,
    copy: bool,
    dtype: Type[numpy.complex128],
    order: Literal["C"],
):
    """
    usage.scipy: 13
    """
    ...


@overload
def array(_0: List[List[int]], /, *, dtype: numpy.dtype):
    """
    usage.dask: 4
    usage.scipy: 30
    usage.sklearn: 3
    """
    ...


@overload
def array(_0: numpy.bool_, /, *, copy: bool, dtype: numpy.dtype, ndmin: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: numpy.int8, /, *, copy: bool, dtype: numpy.dtype, ndmin: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: numpy.uint8, /, *, copy: bool, dtype: numpy.dtype, ndmin: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: numpy.int16, /, *, copy: bool, dtype: numpy.dtype, ndmin: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: numpy.uint16, /, *, copy: bool, dtype: numpy.dtype, ndmin: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: numpy.int32, /, *, copy: bool, dtype: numpy.dtype, ndmin: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: numpy.uint32, /, *, copy: bool, dtype: numpy.dtype, ndmin: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: numpy.int64, /, *, copy: bool, dtype: numpy.dtype, ndmin: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: numpy.uint64, /, *, copy: bool, dtype: numpy.dtype, ndmin: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: numpy.longlong, /, *, copy: bool, dtype: numpy.dtype, ndmin: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: numpy.ulonglong, /, *, copy: bool, dtype: numpy.dtype, ndmin: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: numpy.float32, /, *, copy: bool, dtype: numpy.dtype, ndmin: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: numpy.float128, /, *, copy: bool, dtype: numpy.dtype, ndmin: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: numpy.complex64, /, *, copy: bool, dtype: numpy.dtype, ndmin: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: numpy.complex256, /, *, copy: bool, dtype: numpy.dtype, ndmin: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: numpy.ndarray, /, *, copy: bool, dtype: Type[numpy.int8], order: Literal["C"]
):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(
    _0: numpy.ndarray, /, *, copy: bool, dtype: Type[numpy.uint8], order: Literal["C"]
):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(
    _0: numpy.ndarray, /, *, copy: bool, dtype: Type[numpy.int16], order: Literal["C"]
):
    """
    usage.scipy: 4
    """
    ...


@overload
def array(
    _0: numpy.ndarray, /, *, copy: bool, dtype: Type[numpy.uint16], order: Literal["C"]
):
    """
    usage.scipy: 3
    """
    ...


@overload
def array(
    _0: numpy.ndarray, /, *, copy: bool, dtype: Type[numpy.int32], order: Literal["C"]
):
    """
    usage.scipy: 6
    """
    ...


@overload
def array(
    _0: numpy.ndarray, /, *, copy: bool, dtype: Type[numpy.uint32], order: Literal["C"]
):
    """
    usage.scipy: 4
    """
    ...


@overload
def array(
    _0: numpy.ndarray, /, *, copy: bool, dtype: Type[numpy.uint64], order: Literal["C"]
):
    """
    usage.scipy: 5
    """
    ...


@overload
def array(
    _0: numpy.ndarray, /, *, copy: bool, dtype: Type[numpy.float32], order: Literal["C"]
):
    """
    usage.scipy: 6
    """
    ...


@overload
def array(
    _0: numpy.ndarray,
    /,
    *,
    copy: bool,
    dtype: Type[numpy.float128],
    order: Literal["C"],
):
    """
    usage.scipy: 12
    """
    ...


@overload
def array(
    _0: numpy.ndarray,
    /,
    *,
    copy: bool,
    dtype: Type[numpy.complex64],
    order: Literal["C"],
):
    """
    usage.scipy: 7
    """
    ...


@overload
def array(
    _0: numpy.ndarray,
    /,
    *,
    copy: bool,
    dtype: Type[numpy.complex256],
    order: Literal["C"],
):
    """
    usage.scipy: 15
    """
    ...


@overload
def array(
    _0: numpy.ndarray, /, *, copy: bool, dtype: Type[numpy.bool_], order: Literal["F"]
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: numpy.ndarray, /, *, copy: bool, dtype: Type[numpy.int64], order: Literal["F"]
):
    """
    usage.scipy: 8
    """
    ...


@overload
def array(
    _0: numpy.ndarray, /, *, copy: bool, dtype: Type[numpy.float64], order: Literal["F"]
):
    """
    usage.scipy: 11
    """
    ...


@overload
def array(
    _0: numpy.ndarray,
    /,
    *,
    copy: bool,
    dtype: Type[numpy.complex128],
    order: Literal["F"],
):
    """
    usage.scipy: 13
    """
    ...


@overload
def array(
    _0: numpy.ndarray, /, *, copy: bool, dtype: Type[numpy.int8], order: Literal["F"]
):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(
    _0: numpy.ndarray, /, *, copy: bool, dtype: Type[numpy.uint8], order: Literal["F"]
):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(
    _0: numpy.ndarray, /, *, copy: bool, dtype: Type[numpy.int16], order: Literal["F"]
):
    """
    usage.scipy: 4
    """
    ...


@overload
def array(
    _0: numpy.ndarray, /, *, copy: bool, dtype: Type[numpy.uint16], order: Literal["F"]
):
    """
    usage.scipy: 3
    """
    ...


@overload
def array(
    _0: numpy.ndarray, /, *, copy: bool, dtype: Type[numpy.int32], order: Literal["F"]
):
    """
    usage.scipy: 6
    """
    ...


@overload
def array(
    _0: numpy.ndarray, /, *, copy: bool, dtype: Type[numpy.uint32], order: Literal["F"]
):
    """
    usage.scipy: 4
    """
    ...


@overload
def array(
    _0: numpy.ndarray, /, *, copy: bool, dtype: Type[numpy.uint64], order: Literal["F"]
):
    """
    usage.scipy: 5
    """
    ...


@overload
def array(
    _0: numpy.ndarray, /, *, copy: bool, dtype: Type[numpy.float32], order: Literal["F"]
):
    """
    usage.scipy: 6
    """
    ...


@overload
def array(
    _0: numpy.ndarray,
    /,
    *,
    copy: bool,
    dtype: Type[numpy.float128],
    order: Literal["F"],
):
    """
    usage.scipy: 12
    """
    ...


@overload
def array(
    _0: numpy.ndarray,
    /,
    *,
    copy: bool,
    dtype: Type[numpy.complex64],
    order: Literal["F"],
):
    """
    usage.scipy: 7
    """
    ...


@overload
def array(
    _0: numpy.ndarray,
    /,
    *,
    copy: bool,
    dtype: Type[numpy.complex256],
    order: Literal["F"],
):
    """
    usage.scipy: 15
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, copy: bool, dtype: Type[numpy.complex128]):
    """
    usage.scipy: 14
    """
    ...


@overload
def array(_0: int, /, *, dtype: numpy.dtype, ndmin: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, copy: bool, dtype: Type[numpy.bool_]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, copy: bool, dtype: Type[numpy.int8]):
    """
    usage.scipy: 3
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, copy: bool, dtype: Type[numpy.uint8]):
    """
    usage.scipy: 3
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, copy: bool, dtype: Type[numpy.int16]):
    """
    usage.scipy: 5
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, copy: bool, dtype: Type[numpy.uint16]):
    """
    usage.scipy: 4
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, copy: bool, dtype: Type[numpy.uint32]):
    """
    usage.scipy: 5
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, copy: bool, dtype: Type[numpy.uint64]):
    """
    usage.scipy: 6
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, copy: bool, dtype: Type[numpy.float32]):
    """
    usage.scipy: 7
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, copy: bool, dtype: Type[numpy.float128]):
    """
    usage.scipy: 13
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, copy: bool, dtype: Type[numpy.complex64]):
    """
    usage.scipy: 8
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, copy: bool, dtype: Type[numpy.complex256]):
    """
    usage.scipy: 16
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, copy: bool, dtype: Type[numpy.ulonglong]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, copy: bool, dtype: Type[numpy.longlong]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, copy: bool, dtype: Literal["int16"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, copy: bool, dtype: Type[bool]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[int], /, *, copy: bool, dtype: Type[numpy.int64]):
    """
    usage.scipy: 13
    """
    ...


@overload
def array(_0: int, /, *, copy: bool, dtype: Type[numpy.int64]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[Union[int, complex]], /, *, dtype: Type[complex]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[int], /, *, dtype: Literal["int8"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[list], /, *, dtype: Type[object]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[int], /, *, dtype: Type[bool]):
    """
    usage.scipy: 28
    """
    ...


@overload
def array(_0: List[List[Union[int, float]]], /, *, dtype: Type[numpy.float64]):
    """
    usage.scipy: 2
    usage.sklearn: 2
    """
    ...


@overload
def array(_0: List[List[Union[int, float]]], /, *, dtype: Type[numpy.int32]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[float], /, *, dtype: Type[numpy.int32]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[List[Union[int, float]]], /, *, dtype: Type[numpy.int8]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[float], /, *, dtype: Type[numpy.int8]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[List[Union[int, float]]], /, *, dtype: Type[bool]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[float], /, *, dtype: Type[bool]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[Literal["spam", "eggs"]], /, *, dtype: Literal["|S4"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Literal["eggs", "spam"]], /, *, dtype: Literal["|S4"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[float]], /, *, dtype: Literal["float64"]):
    """
    usage.scipy: 1
    usage.sklearn: 2
    """
    ...


@overload
def array(_0: List[Tuple[int, Union[int, float]]], /, *, dtype: Type[numpy.float64]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(
    _0: List[List[Union[numpy.float64, float, int]]], /, *, dtype: Type[numpy.float64]
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Tuple[Union[int, float], Union[int, float], Union[int, float]]], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Tuple[float, float, float], /, *, dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[Union[numpy.float64, float, int]]], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Tuple[numpy.float64, numpy.float64, numpy.float64]], /):
    """
    usage.matplotlib: 4
    usage.scipy: 10
    usage.sklearn: 4
    """
    ...


@overload
def array(_0: List[float], _1: Literal["d"], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[numpy.float64], _1: Literal["d"], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[List[Union[float, numpy.complex128, complex]]], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(
    _0: List[Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray]], /
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Tuple[numpy.float64, numpy.float64, int, int, numpy.float64]], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: List[
        Tuple[
            Union[int, complex, float, numpy.float64],
            int,
            Union[int, float, complex, numpy.float64],
        ]
    ],
    /,
    *,
    dtype: Type[numpy.complex128],
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, dtype: Literal["complex128"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, dtype: Literal["f4"]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, dtype: Literal["f8"]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: int, /, *, dtype: Type[numpy.float128]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Union[int, float, numpy.float64]], /):
    """
    usage.scipy: 3
    """
    ...


@overload
def array(_0: List[Union[float, int, numpy.float64]], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: numpy.ndarray, _1: Type[float], /):
    """
    usage.matplotlib: 4
    usage.scipy: 4
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Union[float, numpy.float64, int]], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: Tuple[numpy.float64, float, float], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Tuple[numpy.float64, float, numpy.float64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Tuple[numpy.float64, numpy.float64, float], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Tuple[float, numpy.float64, numpy.float64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Tuple[float, float, numpy.float64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Tuple[float, numpy.float64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Tuple[int, int, int, int, int, int, int, int, int, int], /):
    """
    usage.scipy: 12
    """
    ...


@overload
def array(_0: List[int], /, *, dtype: Literal["uint8"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[float], /, *, copy: bool, ndmin: int):
    """
    usage.scipy: 7
    """
    ...


@overload
def array(_0: List[int], /, *, dtype: None):
    """
    usage.scipy: 4
    """
    ...


@overload
def array(_0: int, _1: Type[numpy.float64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: int, _1: Type[numpy.int64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Union[float, int]], /, *, copy: bool, ndmin: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: numpy.float64, /, *, copy: bool, ndmin: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[numpy.float64], /, *, dtype: Type[float]):
    """
    usage.scipy: 9
    """
    ...


@overload
def array(_0: List[Union[numpy.float64, int]], /, *, dtype: Type[float]):
    """
    usage.scipy: 8
    """
    ...


@overload
def array(_0: List[int], _1: Literal["d"], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[List[Union[int, float]]], _1: Literal["d"], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: int, /, *, ndmin: int):
    """
    usage.scipy: 5
    """
    ...


@overload
def array(_0: Tuple[float, float], /, *, copy: bool, dtype: Type[numpy.float64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Tuple[int], /, *, copy: bool, dtype: Type[numpy.float64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[float]], /, *, copy: bool, dtype: Type[numpy.float64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[List[int]]], /, *, copy: bool, dtype: Type[numpy.int64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[List[List[int]]]], /, *, copy: bool, dtype: Type[numpy.int64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: Tuple[float, float, float], /, *, copy: bool, dtype: Type[numpy.float64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[int]], /, *, copy: bool, dtype: Type[numpy.int64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: Tuple[float, float, float, float], /, *, copy: bool, dtype: Type[numpy.float64]
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[List[Union[float, int, numpy.float64]]], /, *, dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Union[float, int]], /, *, dtype: Literal["object"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[int], _1: Type[numpy.complex64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[int], /, *, dtype: Type[numpy.complex64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[int], _1: Type[numpy.complex128], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[int], /, *, dtype: Type[numpy.complex128]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: List[Tuple[int, int]], _1: List[Tuple[Literal[""], Literal["i"]]], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(
    _0: List[List[Literal["Oxidation", "Polymerization", "Reduction"]]],
    /,
    *,
    dtype: Type[object],
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(
    _0: List[List[Union[Literal["Oxidation", "Polymerization", "Reduction"], float]]],
    /,
    *,
    dtype: Type[object],
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array(_0: scipy.stats.stats.KstestResult, /):
    """
    usage.scipy: 3
    """
    ...


@overload
def array(_0: List[numpy.ndarray], /, *, dtype: Type[object]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: List[List[int]], /, *, dtype: None):
    """
    usage.scipy: 2
    """
    ...


@overload
def array(_0: Tuple[int, int, int, float], /, *, dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: Tuple[int, int, float], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: Tuple[numpy.float64, numpy.float64, numpy.float64, float], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: Tuple[int, int, numpy.float64, numpy.float64], /, *, dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: Tuple[int, int, int, int], /, *, dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[List[Union[numpy.float64, float]]], _1: Type[float], /):
    """
    usage.matplotlib: 5
    """
    ...


@overload
def array(_0: List[List[Union[float, numpy.float64]]], _1: Type[float], /):
    """
    usage.matplotlib: 7
    """
    ...


@overload
def array(_0: Tuple[int, int, float, float], /, *, dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(
    _0: Tuple[numpy.float64, numpy.float64, numpy.float64, numpy.float64],
    /,
    *,
    dtype: Type[float],
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: Tuple[float, float, float, float], /, *, dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(
    _0: List[Tuple[numpy.float64, numpy.float64, numpy.float64, int]],
    _1: Type[float],
    /,
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Tuple[Union[int, float], Union[float, int]]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: Tuple[numpy.float64, numpy.float64, numpy.float64, int], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[List[Union[float, numpy.float64]]], /, *, dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: matplotlib.backends._backend_agg.BufferRegion, /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, copy: bool, subok: bool):
    """
    usage.matplotlib: 14
    """
    ...


@overload
def array(_0: List[Tuple[numpy.float64, int, int]], /):
    """
    usage.matplotlib: 4
    """
    ...


@overload
def array(_0: numpy.ma.core.MaskedArray, /, *, copy: bool):
    """
    usage.matplotlib: 5
    """
    ...


@overload
def array(_0: List[List[Union[int, float]]], _1: Type[float], /):
    """
    usage.matplotlib: 3
    """
    ...


@overload
def array(_0: List[Tuple[Union[float, numpy.float64], float]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[List[Union[float, int]]], _1: Type[float], /):
    """
    usage.matplotlib: 3
    """
    ...


@overload
def array(_0: List[Tuple[float, float, float, float]], _1: Type[float], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(
    _0: List[Tuple[numpy.float64, numpy.float64, numpy.float64, float]],
    _1: Type[float],
    /,
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: Tuple[numpy.ndarray, numpy.ndarray], /, *, dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Union[List[numpy.float64], numpy.ndarray]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: Tuple[numpy.float64, numpy.float64, numpy.float64, numpy.float64], /):
    """
    usage.dask: 2
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: numpy.ma.core.MaskedArray, /, *, dtype: Type[numpy.float32]):
    """
    usage.matplotlib: 3
    """
    ...


@overload
def array(
    _0: Tuple[
        Tuple[float, int, int],
        Tuple[float, int, int],
        Tuple[float, int, int],
        Tuple[float, int, int],
        Tuple[int, float, float],
    ],
    /,
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(
    _0: Tuple[
        Tuple[float, int, int],
        Tuple[float, int, int],
        Tuple[float, int, int],
        Tuple[float, int, int],
        Tuple[float, int, int],
        Tuple[int, int, int],
    ],
    /,
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(
    _0: Tuple[
        Tuple[float, float, float],
        Tuple[float, int, int],
        Tuple[float, int, int],
        Tuple[float, int, int],
        Tuple[int, int, int],
    ],
    /,
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(
    _0: Tuple[numpy.int64, numpy.int64, numpy.float64, numpy.int64],
    /,
    *,
    dtype: Type[float],
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(
    _0: Tuple[numpy.float64, numpy.int64, numpy.float64, numpy.float64],
    /,
    *,
    dtype: Type[float],
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(
    _0: Tuple[numpy.int64, numpy.float64, numpy.float64, numpy.float64],
    /,
    *,
    dtype: Type[float],
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[numpy.ndarray], _1: Type[float], /):
    """
    usage.matplotlib: 5
    """
    ...


@overload
def array(_0: Tuple[float, float, int], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(
    _0: List[Tuple[numpy.float64, numpy.float64, numpy.float64, numpy.float64]],
    _1: Type[float],
    /,
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Literal["k", "w"]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Tuple[numpy.float64, numpy.float64, numpy.float64, int]], /):
    """
    usage.matplotlib: 9
    """
    ...


@overload
def array(_0: numpy.ma.core.MaskedArray, /, *, dtype: Type[numpy.float64]):
    """
    usage.matplotlib: 3
    """
    ...


@overload
def array(_0: List[List[int]], /, *, copy: bool, subok: bool):
    """
    usage.matplotlib: 3
    """
    ...


@overload
def array(_0: List[List[Union[float, numpy.float64, int]]], /):
    """
    usage.matplotlib: 1
    usage.sklearn: 1
    """
    ...


@overload
def array(
    _0: List[Tuple[int, int]],
    /,
    *,
    dtype: List[Tuple[Literal["ones", "twos"], Type[float]]],
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[List[Union[float, numpy.float64]]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: numpy.ma.core.MaskedArray, /, *, copy: bool, subok: bool):
    """
    usage.matplotlib: 3
    """
    ...


@overload
def array(
    _0: Tuple[Tuple[numpy.float64, numpy.float64, numpy.float64, numpy.float64]], /
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(
    _0: List[Tuple[numpy.float64, numpy.float64, numpy.float64, numpy.float64]], /
):
    """
    usage.matplotlib: 5
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Tuple[Union[int, numpy.float64], Union[float, int]]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Tuple[Union[int, numpy.float64], Union[numpy.float64, int]]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[float], /, *, copy: bool, subok: bool):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Union[float, int]], /, *, copy: bool, subok: bool):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Literal["w", "b"]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: Tuple[int, float, float, float], /, *, dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(
    _0: Tuple[numpy.float64, numpy.int64, numpy.float64, numpy.int64],
    /,
    *,
    dtype: Type[float],
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(
    _0: Tuple[numpy.int64, numpy.float64, numpy.int64, numpy.float64],
    /,
    *,
    dtype: Type[float],
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: Tuple[Tuple[float, int, int], Tuple[float, int, int]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Tuple[numpy.float64, numpy.float64, numpy.float64, float]], /):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def array(_0: List[Literal["y"]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Literal["c"]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Literal["lime", "b", "y", "r"]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(
    _0: List[
        Tuple[
            Union[numpy.float64, float],
            Union[numpy.float64, float],
            Union[numpy.float64, float],
            Union[int, float],
        ]
    ],
    /,
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Literal["0.8", "0.7", "0.6", "0.5"]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Tuple[float, float, float, float]], /):
    """
    usage.matplotlib: 7
    """
    ...


@overload
def array(_0: List[Union[Literal["lime", "b", "y"], Tuple[int, int, int]]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Literal["rgby"]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Literal["none", "b", "g", "r"]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Literal["jaune"]], /):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def array(_0: List[Literal["0.7", "0.6", "0.4", "0.5"]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Literal["C5", "0.6", "red", "0.5"]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(
    _0: List[
        Tuple[
            Union[float, numpy.float64],
            Union[float, numpy.float64],
            Union[float, numpy.float64],
            Union[float, int],
        ]
    ],
    /,
):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def array(_0: List[Union[Literal["C5", "0.6", "0.5"], float]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Union[Literal["0.0", "red"], List[Union[int, float]]]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Union[Literal["C5", "0.0", "red"], List[Union[int, float]]]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Union[List[Union[int, float]], Literal["C5", "0.0", "red"]]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Union[Literal["jaune", "red"], List[Union[int, float]]]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Union[Literal["jaune", "0.0", "red"], List[Union[int, float]]]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(
    _0: List[Union[Literal["jaune", "C5", "0.0", "red"], List[Union[int, float]]]], /
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Literal["g", "b"]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Union[numpy.int64, numpy.float64]], /):
    """
    usage.matplotlib: 2
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: Tuple[int, int, int, float], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: None, /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Literal["bLacK", "tab:cyan", "tab:pink", "tab:orange"]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(
    _0: Tuple[
        Literal["tab:orange"],
        Literal["tab:pink"],
        Literal["tab:cyan"],
        Literal["bLacK"],
    ],
    /,
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Union[Tuple[Union[int, float], ...], Literal["C0", "red"]]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Literal["b", "r"]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Union[float, int]], _1: Type[float], /):
    """
    usage.matplotlib: 3
    """
    ...


@overload
def array(
    _0: Tuple[numpy.uint8, numpy.int64, numpy.float64, numpy.int64],
    /,
    *,
    dtype: Type[float],
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: Tuple[float, int, float, float], /, *, dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: Tuple[int, int, float, int], /, *, dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: Tuple[int, float, int, float], /, *, dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: Tuple[float, int, float, int], /, *, dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(
    _0: List[
        Literal[
            "2017-01-05T00:00:00",
            "2017-01-04T00:00:00",
            "2017-01-03T00:00:00",
            "2017-01-02T00:00:00",
            "2017-01-01T00:00:00",
        ]
    ],
    /,
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Tuple[int, Union[int, float]]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Tuple[float, int, int]], /):
    """
    usage.matplotlib: 3
    """
    ...


@overload
def array(_0: List[List[float]], /, *, copy: bool, subok: bool):
    """
    usage.matplotlib: 3
    """
    ...


@overload
def array(_0: Tuple[float, float, float, int], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: Tuple[Tuple[numpy.float64], Tuple[int]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: Tuple[Tuple[int], Tuple[numpy.float64]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: Tuple[Tuple[int], Tuple[int]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: Tuple[Tuple[numpy.float64], Tuple[int, float]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(
    _0: Tuple[float, numpy.float64, float, numpy.float64], /, *, dtype: Type[float]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: Tuple[float, int, float, numpy.float64], /, *, dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: Tuple[List[int]], /, *, dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Literal["hello world"]], /, *, dtype: Type[object]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def array(_0: List[Literal["Здравствуйте мир"]], /, *, dtype: Type[object]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def array(
    _0: List[Literal["мир", "3.14", "B", "np.nan", "A"]], /, *, dtype: Type[object]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Literal["d", "a"]], /, *, dtype: Type[object]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Literal["e", "d", "b"]], /, *, dtype: Type[object]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(
    _0: Tuple[List[Literal["hello world"]], List[int]], /, *, dtype: Type[object]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(
    _0: Tuple[List[Literal["Здравствуйте мир"]], List[int]], /, *, dtype: Type[object]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(
    _0: Tuple[List[Literal["мир", "3.14", "B", "np.nan", "A"]], List[int]],
    /,
    *,
    dtype: Type[object],
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, dtype: Type[object]):
    """
    usage.matplotlib: 20
    """
    ...


@overload
def array(_0: List[Literal["2", "1"]], /, *, dtype: Type[object]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: Literal["hi"], /, *, dtype: Type[object]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: Literal["мир"], /, *, dtype: Type[object]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Union[float, Literal["A"]]], /, *, dtype: Type[object]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def array(_0: List[Union[int, Literal["42"]]], /, *, dtype: Type[object]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def array(_0: List[Literal["a"]], /, *, dtype: Type[object]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Literal["hi", "world", "hello"]], /, *, dtype: Type[object]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def array(_0: List[Literal["привет", "Здравствуйте"]], /, *, dtype: Type[object]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def array(_0: List[Literal["3", "11", "1"]], /, *, dtype: Type[object]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def array(_0: List[Literal["world", "happy", "hello"]], /, *, dtype: Type[object]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def array(_0: List[Literal["fun", "is", "Python"]], /, *, dtype: Type[object]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def array(_0: List[Literal["b", "a"]], /, *, dtype: Type[object]):
    """
    usage.dask: 1
    usage.matplotlib: 2
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["g", "e"]], /, *, dtype: Type[object]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def array(_0: List[Literal["d", "b", "a"]], /, *, dtype: Type[object]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Literal["b", "a", "f"]], /, *, dtype: Type[object]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Literal["d", "c", "b"]], /, *, dtype: Type[object]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Literal["d", "e", "g"]], /, *, dtype: Type[object]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Union[int, Literal["1"]]], /, *, dtype: Type[object]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Union[float, Literal["12"]]], /, *, dtype: Type[object]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Literal["b", "g", "r"]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: numpy.float64, /, *, copy: bool):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Literal["4", "3", "2", "1", "0"]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Literal["red"]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Literal["500.00", "400.00", "300.00", "200.00", "100.00"]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Literal["260", "55.4"]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Literal["none"]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Literal["black"]], /):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def array(_0: numpy.int64, /, *, copy: bool):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: matplotlib.transforms.Bbox, /):
    """
    usage.matplotlib: 3
    """
    ...


@overload
def array(_0: List[Literal["c", "b", "g", "r"]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[List[numpy.int16]], /, *, copy: bool, subok: bool):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Union[float, int]], /, *, copy: bool):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Union[float, int]], /, *, dtype: Literal["f2"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Union[float, int]], /, *, dtype: Literal["f4"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Union[float, int]], /, *, dtype: Literal["f8"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: float, /, *, copy: bool):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: int, /, *, copy: bool):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[float], /, *, dtype: Type[numpy.float128]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Literal["yellow", "blue", "green"]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Union[Tuple[Union[int, float], ...], Literal["blue", "red"]]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(
    _0: Tuple[
        Tuple[float, float, float],
        Tuple[float, float, float],
        Tuple[float, float, float],
        Tuple[float, float, float],
        Tuple[float, float, float],
        Tuple[float, float, float],
        Tuple[float, float, float],
    ],
    /,
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(
    _0: Tuple[
        Tuple[float, float, float],
        Tuple[float, float, float],
        Tuple[float, float, float],
        Tuple[float, float, float],
        Tuple[float, float, float],
        Tuple[float, float, float],
        Tuple[float, float, float],
        Tuple[float, float, float],
        Tuple[float, float, float],
        Tuple[float, float, float],
    ],
    /,
):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def array(
    _0: Tuple[
        Tuple[float, float, float],
        Tuple[float, float, float],
        Tuple[float, float, float],
    ],
    /,
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: Tuple[Tuple[float, float, float], Tuple[float, float, float]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: Tuple[numpy.float64, numpy.float64, numpy.float64], /):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def array(
    _0: Tuple[
        Tuple[float, float, float],
        Tuple[float, float, float],
        Tuple[float, float, float],
        Tuple[float, float, float],
        Tuple[float, float, float],
        Tuple[float, float, float],
        Tuple[float, float, float],
        Tuple[float, float, float],
    ],
    /,
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(
    _0: Tuple[
        Tuple[float, float, float],
        Tuple[float, float, float],
        Tuple[float, float, float],
        Tuple[float, float, float],
        Tuple[float, float, float],
        Tuple[float, float, float],
        Tuple[float, float, float],
        Tuple[float, float, float],
        Tuple[float, float, float],
    ],
    /,
):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def array(
    _0: Tuple[
        Tuple[float, float, float],
        Tuple[float, float, float],
        Tuple[float, float, float],
        Tuple[float, float, float],
    ],
    /,
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Tuple[float, numpy.float64, numpy.float64]], /):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def array(_0: Tuple[Tuple[int, int, int], Tuple[int, int, int]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Tuple[float, Union[float, int], Union[float, int]]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Tuple[float, Union[int, float], Union[int, float]]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Literal[".8", ".5", ".2"]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: numpy.ma.core.MaskedArray, /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: object, /, *, copy: bool, subok: bool):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Tuple[float, float]], /):
    """
    usage.matplotlib: 2
    usage.sklearn: 2
    """
    ...


@overload
def array(_0: List[Literal["r", "g"]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Literal["blue", "pink", "yellow"]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Literal["blue", "pink", "yellow", "red"]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Literal["y", "g", "r"]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Literal["w", "k"]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Literal["--", "-"]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(
    _0: List[
        Literal["2017-01-03T00:00:00", "2017-01-02T00:00:00", "2017-01-01T00:00:00"]
    ],
    /,
    *,
    dtype: Literal["datetime64[ns]"],
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: Literal["2017-01-01T00:01:01"], /, *, dtype: Literal["datetime64[s]"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(
    _0: List[Literal["2017-01-01T01:01:01", "2017-01-01T00:01:01"]],
    /,
    *,
    dtype: Literal["datetime64[s]"],
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(
    _0: List[
        List[
            Literal[
                "2017-01-01T01:01:01",
                "2017-01-01T00:01:01",
                "2017-01-01T03:01:01",
                "2017-01-01T02:01:01",
            ]
        ]
    ],
    /,
    *,
    dtype: Literal["datetime64[s]"],
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: Literal["2017-01-01T00:01:01"], /, *, dtype: Literal["datetime64[us]"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(
    _0: List[Literal["2017-01-01T01:01:01", "2017-01-01T00:01:01"]],
    /,
    *,
    dtype: Literal["datetime64[us]"],
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(
    _0: List[
        List[
            Literal[
                "2017-01-01T01:01:01",
                "2017-01-01T00:01:01",
                "2017-01-01T03:01:01",
                "2017-01-01T02:01:01",
            ]
        ]
    ],
    /,
    *,
    dtype: Literal["datetime64[us]"],
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: Literal["2017-01-01T00:01:01"], /, *, dtype: Literal["datetime64[ms]"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(
    _0: List[Literal["2017-01-01T01:01:01", "2017-01-01T00:01:01"]],
    /,
    *,
    dtype: Literal["datetime64[ms]"],
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(
    _0: List[
        List[
            Literal[
                "2017-01-01T01:01:01",
                "2017-01-01T00:01:01",
                "2017-01-01T03:01:01",
                "2017-01-01T02:01:01",
            ]
        ]
    ],
    /,
    *,
    dtype: Literal["datetime64[ms]"],
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: Literal["2017-01-01T00:01:01"], /, *, dtype: Literal["datetime64[ns]"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(
    _0: List[Literal["2017-01-01T01:01:01", "2017-01-01T00:01:01"]],
    /,
    *,
    dtype: Literal["datetime64[ns]"],
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(
    _0: List[
        List[
            Literal[
                "2017-01-01T01:01:01",
                "2017-01-01T00:01:01",
                "2017-01-01T03:01:01",
                "2017-01-01T02:01:01",
            ]
        ]
    ],
    /,
    *,
    dtype: Literal["datetime64[ns]"],
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(
    _0: List[Literal["NaT", "2017-01-01T00:01:01"]],
    /,
    *,
    dtype: Literal["datetime64[s]"],
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(
    _0: List[Literal["NaT", "2017-01-01T00:01:01"]],
    /,
    *,
    dtype: Literal["datetime64[us]"],
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(
    _0: List[Literal["NaT", "2017-01-01T00:01:01"]],
    /,
    *,
    dtype: Literal["datetime64[ms]"],
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(
    _0: List[Literal["NaT", "2017-01-01T00:01:01"]],
    /,
    *,
    dtype: Literal["datetime64[ns]"],
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Tuple[int, ...]], /):
    """
    usage.matplotlib: 4
    """
    ...


@overload
def array(_0: Tuple[numpy.float64, float], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: Tuple[List[float]], /, *, dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: numpy.ndarray, _1: Type[numpy.float32], /):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def array(_0: List[List[Union[int, float]]], /, *, copy: bool, subok: bool):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[List[Union[int, float]]], /, *, dtype: Type[numpy.uint64]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[list], /, *, copy: bool, subok: bool):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[List[Union[float, int, numpy.float64]]], _1: Type[float], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: float, /, *, dtype: numpy.dtype):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: Tuple[int, int, float, numpy.float64], /, *, dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Literal["k"]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Literal["white"]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: Tuple[List[numpy.float64], List[numpy.float64]], /):
    """
    usage.matplotlib: 8
    """
    ...


@overload
def array(_0: List[Union[int, float]], _1: Type[numpy.float64], /):
    """
    usage.matplotlib: 4
    """
    ...


@overload
def array(_0: numpy.ma.core.MaskedArray, /, *, dtype: numpy.dtype):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(
    _0: Tuple[
        List[Union[numpy.float64, float]],
        List[Union[numpy.float64, float]],
        List[Union[numpy.float64, float]],
        List[Union[numpy.float64, float]],
        List[Union[numpy.float64, float]],
        List[Union[numpy.float64, float]],
        List[Union[numpy.float64, float]],
        List[Union[numpy.float64, float]],
        List[numpy.float64],
        List[Union[numpy.float64, float]],
    ],
    /,
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(
    _0: Tuple[
        List[Union[numpy.float64, float]],
        List[Union[numpy.float64, float]],
        List[Union[numpy.float64, float]],
        List[float],
        List[float],
        List[float],
        List[float],
        List[float],
        List[Union[numpy.float64, float]],
        List[Union[numpy.float64, float]],
    ],
    /,
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(
    _0: Tuple[numpy.float64, int, numpy.float64, numpy.float64],
    /,
    *,
    dtype: Type[float],
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(
    _0: Tuple[int, numpy.float64, float, numpy.float64], /, *, dtype: Type[float]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Tuple[Union[int, float], Union[numpy.float64, int]]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: Tuple[float, float, int, float], /, *, dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: Tuple[float, float, int, int], /, *, dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, dtype: Type[numpy.int32], order: Literal["C"]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def array(_0: List[Tuple[int, Union[float, int]]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[List[int]], /, *, dtype: Type[numpy.int32], order: Literal["C"]):
    """
    usage.matplotlib: 3
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, copy: bool, order: Literal["F"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: list, /, *, dtype: Literal["datetime64[ns]"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Tuple[int, int, int, int]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(
    _0: List[
        Tuple[
            Union[int, float], Union[float, int], Union[int, float], Union[float, int]
        ]
    ],
    /,
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(
    _0: List[
        Tuple[
            Union[float, numpy.float64],
            Union[float, numpy.float64],
            Union[float, numpy.float64],
            Union[float, numpy.float64],
        ]
    ],
    /,
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(
    _0: List[
        Tuple[
            Union[numpy.float64, float],
            Union[numpy.float64, float],
            Union[numpy.float64, float],
            Union[numpy.float64, float],
        ]
    ],
    /,
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Literal["r", "c"]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Literal["g", "c"]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Literal["b", "c"]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Literal["y", "c"]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: List[Literal["b"]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: Tuple[float, float, int, float], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: Tuple[int, float, float, float], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array(_0: Literal["df"], /):
    """
    usage.sample-usage: 1
    """
    ...


@overload
def array(_0: List[numpy.int64], /, *, dtype: numpy.dtype):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: List[Literal["cc", "bb", "aa"]], /):
    """
    usage.dask: 1
    """
    ...


@overload
def array(
    _0: List[Tuple[int, float]],
    /,
    *,
    dtype: List[Tuple[Literal["a", "b"], Literal["i4", "f4"]]],
):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: List[dask.array.core.Array], /, *, dtype: Literal["O"]):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: List[int], /, *, dtype: Literal["i8"]):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: List[List[int]], /, *, dtype: Literal["u4"]):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: numpy.uint32, /):
    """
    usage.dask: 3
    """
    ...


@overload
def array(_0: List[int], /, *, dtype: Literal["u4"]):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: numpy.int8, /):
    """
    usage.dask: 3
    """
    ...


@overload
def array(_0: List[List[Literal["b", "a", "d", "c"]]], /):
    """
    usage.dask: 1
    usage.sklearn: 1
    """
    ...


@overload
def array(
    _0: List[Tuple[Literal["a"], int]],
    /,
    *,
    dtype: List[Tuple[Literal["text", "numbers"], Literal["S1", "i4"]]],
):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: memoryview, /):
    """
    usage.dask: 3
    """
    ...


@overload
def array(_0: complex, /):
    """
    usage.dask: 2
    """
    ...


@overload
def array(_0: numpy.bytes_, /):
    """
    usage.dask: 3
    """
    ...


@overload
def array(_0: Literal["1"], /):
    """
    usage.dask: 2
    """
    ...


@overload
def array(_0: numpy.str_, /):
    """
    usage.dask: 3
    """
    ...


@overload
def array(_0: numpy.uint8, /):
    """
    usage.dask: 3
    """
    ...


@overload
def array(_0: numpy.ulonglong, /):
    """
    usage.dask: 3
    """
    ...


@overload
def array(_0: numpy.longlong, /):
    """
    usage.dask: 3
    """
    ...


@overload
def array(_0: numpy.void, /):
    """
    usage.dask: 3
    """
    ...


@overload
def array(_0: numpy.complex256, /):
    """
    usage.dask: 3
    """
    ...


@overload
def array(_0: numpy.float128, /):
    """
    usage.dask: 3
    """
    ...


@overload
def array(_0: numpy.uint64, /):
    """
    usage.dask: 3
    """
    ...


@overload
def array(_0: numpy.uint16, /):
    """
    usage.dask: 3
    """
    ...


@overload
def array(_0: numpy.float16, /):
    """
    usage.dask: 3
    """
    ...


@overload
def array(_0: List[Literal["2000-01-01"]], /, *, dtype: Literal["datetime64"]):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: list, /, *, copy: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: List[int], /, *, dtype: Literal["u8"]):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: List[List[int]], /, *, copy: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: List[bool], /, *, copy: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: List[numpy.timedelta64], /):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: List[List[dask.delayed.Delayed]], /, *, dtype: Type[object]):
    """
    usage.dask: 3
    """
    ...


@overload
def array(_0: dask.delayed.Delayed, /, *, dtype: Type[object]):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: List[Literal["abc", "a"]], /, *, dtype: Type[object]):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: List[Tuple[str, int]], /, *, dtype: Type[object]):
    """
    usage.dask: 4
    """
    ...


@overload
def array(_0: List[List[Tuple[str, int, int]]], /, *, dtype: Type[object]):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: List[List[List[Tuple[str, int, int, int]]]], /, *, dtype: Type[object]):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: Literal["foo"], /):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: List[Literal["ccc", "bb", "a"]], /, *, dtype: Type[object]):
    """
    usage.dask: 2
    """
    ...


@overload
def array(_0: float, /, *, dtype: Literal["f"]):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: Tuple[int, int], /, *, dtype: Literal["O"]):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: Tuple[int], /, *, dtype: Literal["O"]):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: int, /, *, dtype: Literal["O"]):
    """
    usage.dask: 1
    """
    ...


@overload
def array(
    _0: Tuple[
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
    ],
    /,
):
    """
    usage.dask: 2
    """
    ...


@overload
def array(
    _0: Tuple[
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
    ],
    /,
):
    """
    usage.dask: 2
    """
    ...


@overload
def array(_0: List[Literal["e", "d", "a"]], /):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: List[Literal["e", "d", "a"]], /, *, dtype: numpy.dtype):
    """
    usage.dask: 1
    """
    ...


@overload
def array(
    _0: Tuple[numpy.str_, numpy.str_, numpy.str_, numpy.str_, numpy.str_, numpy.str_], /
):
    """
    usage.dask: 1
    """
    ...


@overload
def array(
    _0: Tuple[
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
    ],
    /,
):
    """
    usage.dask: 2
    """
    ...


@overload
def array(_0: List[int], /, *, dtype: Literal["f8"]):
    """
    usage.dask: 2
    """
    ...


@overload
def array(_0: float, /, *, dtype: Literal["O"]):
    """
    usage.dask: 2
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, dtype: Literal["i8"], ndmin: int):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: List[int], /, *, dtype: Literal["O"]):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: int, /, *, dtype: Type[int]):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: dask.array.core.Array, /, *, copy: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: Tuple[numpy.float64, numpy.float64], /, *, dtype: Literal["O"]):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: Tuple[dask.array.core.Array, numpy.float64], /, *, dtype: Literal["O"]):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: List[dask.delayed.Delayed], /, *, dtype: Type[object]):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: List[Literal["foo"]], /, *, dtype: numpy.dtype):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: List[numpy.datetime64], /, *, dtype: numpy.dtype):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: List[int], /, *, dtype: Type[numpy.object_]):
    """
    usage.dask: 2
    """
    ...


@overload
def array(_0: List[Tuple[int, int]], /, *, dtype: List[Tuple[Literal["a", "b"], type]]):
    """
    usage.dask: 1
    """
    ...


@overload
def array(
    _0: List[Tuple[int, int]],
    /,
    *,
    dtype: List[Tuple[Literal["a", "b"], Literal["i4"]]],
):
    """
    usage.dask: 1
    """
    ...


@overload
def array(
    _0: List[Tuple[int, Literal["a", "b"]]],
    /,
    *,
    dtype: List[Tuple[Literal["a", "b"], Literal["i4", "object"]]],
):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: numpy.record, /):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: List[numpy.bool_], /, *, dtype: numpy.dtype):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: List[numpy.timedelta64], /, *, dtype: numpy.dtype):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: List[numpy.int32], /, *, dtype: numpy.dtype):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: pandas.core.indexes.numeric.Int64Index, /):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: List[float], /, *, dtype: Literal["f4"]):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: List[Literal["B", "A", "C"]], /):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: List[numpy.float32], /, *, dtype: numpy.dtype):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: List[Literal["1", "0"]], /):
    """
    usage.dask: 1
    usage.sklearn: 2
    """
    ...


@overload
def array(_0: List[Literal["2"]], /):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: List[Literal["1"]], /):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: List[Literal["2", "1", "0"]], /):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: List[Literal["3", "2"]], /):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: List[Literal["1", "2"]], /):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: List[Literal["3"]], /):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: List[Union[float, int, Literal["2", "1.0"]]], /):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: pandas.core.series.Series, /):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: pandas.core.frame.DataFrame, /):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: List[Literal["2000-01-01T12:00:00"]], /, *, dtype: Literal["M8[ns]"]):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: float, /, *, dtype: Literal["f8"]):
    """
    usage.dask: 1
    """
    ...


@overload
def array(
    _0: List[Tuple[int, int]],
    /,
    *,
    dtype: List[Tuple[Literal["a", "b"], Literal["i4", "i8"]]],
):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: List[Literal["aaa", "aa", "a"]], /, *, dtype: Type[object]):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: List[Union[Literal["aaa", "a"], None]], /, *, dtype: Type[object]):
    """
    usage.dask: 1
    """
    ...


@overload
def array(
    _0: List[Tuple[int, Union[Literal["a", "aaa"], None]]], /, *, dtype: Type[object]
):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: List[Union[float, Literal["José", "foo"]]], /, *, dtype: Literal["O"]):
    """
    usage.dask: 1
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, dtype: None, order: Literal["C"]):
    """
    usage.sklearn: 3
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, dtype: None, order: None):
    """
    usage.sklearn: 9
    """
    ...


@overload
def array(_0: List[int], /, *, dtype: Type[numpy.int64], order: Literal["C"]):
    """
    usage.sklearn: 14
    """
    ...


@overload
def array(_0: list, /, *, dtype: Type[numpy.int64], order: Literal["C"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Tuple[numpy.int64, Union[int, numpy.int64]]], /):
    """
    usage.sklearn: 3
    """
    ...


@overload
def array(_0: List[Tuple[numpy.int64, Union[numpy.int64, int]]], /):
    """
    usage.sklearn: 9
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, dtype: Type[numpy.float32], order: Literal["C"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["virginica", "versicolor", "setosa"]], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(
    _0: List[Tuple[numpy.float64, numpy.float64]], /, *, dtype: Type[numpy.float32]
):
    """
    usage.sklearn: 3
    """
    ...


@overload
def array(_0: List[Literal["b", "a"]], /, *, dtype: numpy.dtype):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(
    _0: List[List[Union[Literal["a", "b"], int, bool]]], /, *, dtype: Literal["O"]
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[List[Literal["b", "a", "B", "A"]]], /, *, dtype: Type[object]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["B", "A"]], /, *, dtype: numpy.dtype):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[List[Dict[Literal["c", "b", "a"], int]]], /, *, dtype: Type[object]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def array(_0: List[float], /, *, dtype: Type[float]):
    """
    usage.sklearn: 3
    """
    ...


@overload
def array(_0: List[Literal["two", "one"]], /, *, dtype: numpy.dtype):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["middle", "low", "high"]], /, *, dtype: numpy.dtype):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["z"]], /, *, dtype: numpy.dtype):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["x1_z", "x0_b", "x0_a"]], /, *, dtype: Type[object]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[List[numpy.ndarray]], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: Tuple[float, float, float, float, float], /):
    """
    usage.sklearn: 2
    """
    ...


@overload
def array(
    _0: List[
        Tuple[numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64]
    ],
    /,
):
    """
    usage.sklearn: 2
    """
    ...


@overload
def array(
    _0: List[
        Union[
            numpy.ndarray,
            Tuple[
                numpy.float64,
                numpy.float64,
                numpy.float64,
                numpy.float64,
                numpy.float64,
            ],
        ]
    ],
    /,
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, dtype: Type[numpy.float64], order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["class_2", "class_1", "class_0"]], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["benign", "malignant"]], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(
    _0: List[List[Union[float, Literal["Iris-setosa"]]]], /, *, dtype: Literal["O"]
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["Iris-setosa"]], /, *, dtype: Literal["O"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[List[Union[str, float, None]]], /, *, dtype: Literal["O"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[None], /, *, dtype: Literal["O"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["C"]], /, *, dtype: Literal["O"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["A", "R"]], /, *, dtype: Literal["O"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Union[None, Literal["T"]]], /, *, dtype: Literal["O"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Union[Literal["S"], None]], /, *, dtype: Literal["O"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Union[Literal["3", "2"], None]], /, *, dtype: Literal["O"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Union[Literal["N"], None]], /, *, dtype: Literal["O"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["E", "D", "G"]], /, *, dtype: Literal["O"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Union[None, Literal["Y"]]], /, *, dtype: Literal["O"]):
    """
    usage.sklearn: 5
    """
    ...


@overload
def array(_0: List[Union[None, Literal["B", "M"]]], /, *, dtype: Literal["O"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["SHEET", "COIL"]], /, *, dtype: Literal["O"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["0"]], /, *, dtype: Literal["O"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["3"]], /, *, dtype: Literal["O"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(
    _0: List[List[Union[Literal["adviser", "amdahl"], float]]],
    /,
    *,
    dtype: Literal["O"],
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["amdahl", "adviser"]], /, *, dtype: Literal["O"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[List[float]], /, *, dtype: Literal["O"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["FALSE", "TRUE"]], /, *, dtype: Literal["O"]):
    """
    usage.sklearn: 3
    """
    ...


@overload
def array(_0: List[Literal["TRUE", "FALSE"]], /, *, dtype: Literal["O"]):
    """
    usage.sklearn: 3
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, dtype: None, order: Literal["F"]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def array(
    _0: Tuple[float, float, float, float, float, float, float, float, float, float],
    /,
    *,
    dtype: Type[numpy.float64],
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: Tuple[int, int, int], /, *, dtype: Type[int]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["x"]], /, *, dtype: Type[object]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["y", "x"]], /, *, dtype: numpy.dtype):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[bool], /, *, dtype: Type[numpy.uint8]):
    """
    usage.sklearn: 6
    """
    ...


@overload
def array(
    _0: List[importlib._bootstrap.MonotonicConstraint], /, *, dtype: Type[numpy.int8]
):
    """
    usage.sklearn: 6
    """
    ...


@overload
def array(_0: Tuple[int, int, int, int, int], /, *, dtype: Type[int]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[List[Union[int, float, None]]], /):
    """
    usage.sklearn: 2
    """
    ...


@overload
def array(_0: sklearn.utils.estimator_checks._NotAnArray, /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["two", "three", "one"]], /, *, dtype: numpy.dtype):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[numpy.int32], /):
    """
    usage.sklearn: 3
    """
    ...


@overload
def array(_0: List[Literal["beer", "pizza"]], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["sklearn", "scipy", "numpy"]], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, dtype: Type[float], order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(
    _0: List[List[Union[Literal["b", "a", "e", "h", "g"], int]]], /, *, dtype: None
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(
    _0: List[List[Union[Literal["b", "a", "e", "h", "g"], int]]],
    /,
    *,
    dtype: Type[object],
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(
    _0: List[List[Union[Literal["b", "a", "e", "h", "g"], int]]], /, *, dtype: Type[str]
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[List[Union[float, str]]], /, *, dtype: Type[str]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[List[Union[float, str]]], /, *, dtype: numpy.dtype):
    """
    usage.sklearn: 2
    """
    ...


@overload
def array(_0: List[List[Union[None, str]]], /, *, dtype: Type[object]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[List[str]], /, *, dtype: Type[object]):
    """
    usage.sklearn: 8
    """
    ...


@overload
def array(_0: List[List[Union[float, str]]], /, *, dtype: Type[object]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[List[Union[int, str]]], /, *, dtype: Type[object]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[List[Union[str, None]]], /, *, dtype: Type[object]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[List[Union[str, float]]], /, *, dtype: Type[object]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[List[Union[str, int]]], /, *, dtype: Type[object]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[List[Literal["c", "b", "a"]]], /, *, dtype: Type[object]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[List[int]], /, *, order: Literal["C"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[int], /, *, order: Literal["C"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[int], /, *, order: Literal["F"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[numpy.str_], /):
    """
    usage.sklearn: 4
    """
    ...


@overload
def array(_0: List[Literal["not-setosa", "setosa"]], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[numpy.float32], /):
    """
    usage.sklearn: 2
    """
    ...


@overload
def array(
    _0: Tuple[int, int, int, int, int, int, int, int, int, int], /, *, dtype: Type[int]
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(
    _0: Tuple[float, float, float, float, float, float, float, float, float],
    /,
    *,
    dtype: Type[numpy.float64],
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["three", "two", "one"]], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, dtype: Literal["float"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["1-a", "0-a"]], /, *, dtype: Type[object]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["1-a", "0-a"]], /, *, dtype: numpy.dtype):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["red", "green", "blue"]], /):
    """
    usage.sklearn: 2
    """
    ...


@overload
def array(_0: List[Literal["red¢", "green¢", "blue¢"]], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["cat", "bird", "ant"]], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["yes", "no"]], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["spam", "ham"]], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["ham", "spam"]], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: numpy.ndarray, _1: Type[int], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["spam", "eggs"]], /):
    """
    usage.sklearn: 4
    """
    ...


@overload
def array(_0: List[Literal["spam", "eggs"]], /, *, dtype: numpy.dtype):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[List[int]], /, *, dtype: Literal["object"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["b", "a"]], /, *, dtype: Literal["<U1"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[bytes], /, *, dtype: Literal["<S1"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: Tuple[float, float, float, float], /, *, dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: Tuple[int, int], /, *, dtype: Type[int]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(
    _0: Tuple[float, float, float, float, float, float],
    /,
    *,
    dtype: Type[numpy.float64],
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(
    _0: Tuple[float, float, float, float, float], /, *, dtype: Type[numpy.float64]
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: Tuple[float, float, float], /, *, dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["2", "0", "1"]], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["0 1", "1 0"]], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["0 1", "1 1"]], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[sklearn.linear_model._ridge.Ridge], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: Tuple[List[float], List[float]], /):
    """
    usage.sklearn: 3
    """
    ...


@overload
def array(_0: List[Literal["d", "c", "b", "a"]], /):
    """
    usage.sklearn: 2
    """
    ...


@overload
def array(_0: List[List[Literal["a", "b"]]], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["4444", "333", "22", "11111111"]], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["22", "55555"]], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["Male", "Female"]], /, *, dtype: numpy.dtype):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["girl", "boy"]], /, *, dtype: numpy.dtype):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[List[Literal["dat2", "c❤t1"]]], /, *, dtype: Type[object]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["dat2", "c❤t1"]], /, *, dtype: numpy.dtype):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["x0_dat2", "x0_c❤t1"]], /, *, dtype: Type[object]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["n👍me_dat2", "n👍me_c❤t1"]], /, *, dtype: Type[object]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[List[Union[Literal["def", "abc"], int]]], /):
    """
    usage.sklearn: 2
    """
    ...


@overload
def array(_0: List[Literal["def", "abc"]], /, *, dtype: numpy.dtype):
    """
    usage.sklearn: 2
    """
    ...


@overload
def array(_0: List[Literal["cat"]], /, *, dtype: numpy.dtype):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[List[Union[Literal["def", "abc"], int]]], /, *, dtype: Type[object]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def array(
    _0: List[List[Union[Literal["Male", "Female"], int]]], /, *, dtype: Type[object]
):
    """
    usage.sklearn: 2
    """
    ...


@overload
def array(_0: List[Union[None, int]], /, *, dtype: Type[object]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(
    _0: List[Literal["x1_3", "x1_2", "x1_1", "x0_Male"]], /, *, dtype: Type[object]
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["x1_3", "x1_2", "x0_Male"]], /, *, dtype: Type[object]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(
    _0: List[Literal["x1_3", "x1_2", "x1_1", "x0_Male", "x0_Female"]],
    /,
    *,
    dtype: Type[object],
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["c", "b", "a"]], /, *, dtype: numpy.dtype):
    """
    usage.sklearn: 2
    """
    ...


@overload
def array(_0: List[List[Literal["b", "a"]]], /, *, dtype: Type[object]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["c", "a", "b"]], /, *, dtype: numpy.dtype):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[List[Union[Literal["b", "a"], int]]], /, *, dtype: Type[object]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["c", "b"]], /, *, dtype: numpy.dtype):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["x2_b", "x0_c"]], /, *, dtype: Type[object]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Union[int, None]], /, *, dtype: Type[object]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def array(_0: List[Literal["x2_b", "x1_2", "x0_c"]], /, *, dtype: Type[object]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[numpy.int64], /, *, dtype: Type[object]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def array(_0: List[Literal["x2_a", "x0_b"]], /, *, dtype: Type[object]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Union[int, None]], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["yes", "no"]], /, *, dtype: numpy.dtype):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Union[None, int]], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["true", "false"]], /, *, dtype: numpy.dtype):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["a"]], /, *, dtype: numpy.dtype):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[List[Union[Literal["abc", "def"], int]]], /, *, dtype: Type[object]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def array(_0: List[List[Literal["Low", "Medium", "High"]]], /, *, dtype: Type[object]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[List[int]], /, *, dtype: Literal["float64"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(
    _0: List[List[Union[int, Literal["a", "b"]]]], /, *, dtype: Literal["object"]
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["c", "a"]], /, *, dtype: numpy.dtype):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["pos"]], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["pos", "neg"]], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["spam", "ham", "eggs", "0"]], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["e", "d", "b"]], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["orange", "apple"]], /, *, dtype: Literal["str"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["orange", "apple"]], /, *, dtype: Literal["object"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["orange", "apple"]], /, *, dtype: numpy.dtype):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["d", "c", "b", "a"]], /, *, dtype: Type[object]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["two", "one"]], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["two", "three", "one"]], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, dtype: numpy.dtype, ndmin: int):
    """
    usage.sklearn: 2
    """
    ...


@overload
def array(_0: numpy.float64, /, *, dtype: numpy.dtype, ndmin: int):
    """
    usage.sklearn: 2
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, dtype: Type[numpy.float64], order: Literal["F"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(
    _0: List[
        Tuple[numpy.float32, numpy.float32, numpy.float32, numpy.float32, numpy.float32]
    ],
    /,
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Tuple[numpy.float64]], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["b", "a"]], /):
    """
    usage.sklearn: 2
    """
    ...


@overload
def array(_0: List[Literal["one"]], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[List[List[Literal["baz", "bar", "foo"]]]], /):
    """
    usage.sklearn: 2
    """
    ...


@overload
def array(_0: List[Literal["spam", "ham", "eggs"]], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["a"]], /):
    """
    usage.sklearn: 2
    """
    ...


@overload
def array(_0: List[Literal["a", "b"]], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["d", "e", "f"]], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[List[Union[int, float]]], /, *, dtype: Type[object]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[List[Union[Literal["a"], float]]], /, *, dtype: Type[object]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[numpy.int8], /):
    """
    usage.sklearn: 2
    """
    ...


@overload
def array(_0: List[numpy.uint8], /):
    """
    usage.sklearn: 2
    """
    ...


@overload
def array(_0: List[Literal["def", "abc"]], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["1", "a"]], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["2", "1", "z"]], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[Literal["1 0", "0 1", "0 0", "1 1"]], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(
    _0: List[List[Union[Literal["a", "b", "c"], int]]], /, *, dtype: Type[object]
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(
    _0: List[List[Union[Literal["c", "b", "a"], int]]], /, *, dtype: Type[object]
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[List[Union[Literal["b", "a"], float]]], /, *, dtype: Type[object]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, dtype: Type[int], order: Literal["C"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, dtype: Type[int], order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, dtype: Type[int], order: Literal["F"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: numpy.ndarray, /, *, dtype: Type[float], order: Literal["C"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[List[Literal["12", "11", "xx", "13"]]], /, *, dtype: Literal["U"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[List[Literal["12", "11", "xx", "13"]]], /, *, dtype: Literal["S"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: List[List[bytes]], /, *, dtype: Literal["V1"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array(_0: Tuple[int, complex], /):
    """
    usage.sklearn: 1
    """
    ...


def array(
    _0: object,
    _1: object = ...,
    /,
    *,
    dtype: object = ...,
    copy: bool = ...,
    ndmin: int = ...,
    order: Union[None, Literal["C", "F", "c", "K"]] = ...,
    subok: bool = ...,
):
    """
    usage.dask: 495
    usage.matplotlib: 812
    usage.pandas: 6865
    usage.sample-usage: 3
    usage.scipy: 7120
    usage.skimage: 927
    usage.sklearn: 2254
    usage.xarray: 665
    """
    ...


def array2string(a: numpy.ndarray, separator: Literal[", "]):
    """
    usage.skimage: 1
    """
    ...


@overload
def array_equal(a1: List[int], a2: numpy.ndarray):
    """
    usage.skimage: 1
    """
    ...


@overload
def array_equal(a1: numpy.ndarray, a2: numpy.ndarray):
    """
    usage.dask: 4
    usage.matplotlib: 1
    usage.scipy: 36
    usage.skimage: 2
    usage.sklearn: 13
    usage.xarray: 1
    """
    ...


@overload
def array_equal(a1: Tuple[float, float, float], a2: Tuple[int, int, int]):
    """
    usage.skimage: 1
    """
    ...


@overload
def array_equal(a1: numpy.ndarray, a2: Tuple[int, int, int]):
    """
    usage.skimage: 1
    usage.xarray: 1
    """
    ...


@overload
def array_equal(a1: numpy.ndarray, a2: Tuple[int, int]):
    """
    usage.xarray: 1
    """
    ...


@overload
def array_equal(
    a1: Union[
        numpy.ndarray,
        int,
        pandas.core.series.Series,
        List[Union[float, bool, numpy.int32, int]],
    ],
    a2: Union[numpy.ndarray, pandas.core.series.Series],
):
    """
    usage.pandas: 142
    """
    ...


@overload
def array_equal(a1: Tuple[float, float], a2: list):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: Tuple[float, float], a2: List[list]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: List[Tuple[Union[float, None], Union[float, int]]], a2: list):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: List[Tuple[Union[float, None], Union[float, int]]], a2: List[list]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: List[Tuple[int, int]], a2: list):
    """
    usage.scipy: 4
    """
    ...


@overload
def array_equal(a1: List[Tuple[int, int]], a2: List[list]):
    """
    usage.scipy: 4
    """
    ...


@overload
def array_equal(a1: List[List[int]], a2: list):
    """
    usage.scipy: 2
    """
    ...


@overload
def array_equal(a1: List[List[int]], a2: List[list]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array_equal(a1: Literal["hello"], a2: list):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: Literal["hello"], a2: List[list]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: Literal["hi"], a2: list):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: Literal["hi"], a2: List[list]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: List[Literal["hi"]], a2: list):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: List[Literal["hi"]], a2: List[list]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: List[Tuple[int, Literal[""]]], a2: list):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: List[Tuple[int, Literal[""]]], a2: List[list]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: List[Tuple[int, Union[int, Literal[""]]]], a2: list):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: List[Tuple[int, Union[int, Literal[""]]]], a2: List[list]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: List[Tuple[int, Literal["2020-02-29"]]], a2: list):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: List[Tuple[int, Literal["2020-02-29"]]], a2: List[list]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: List[List[List[int]]], a2: list):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: List[List[List[int]]], a2: List[list]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: Tuple[int, int], a2: list):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: Tuple[int, int], a2: List[list]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: Tuple[int, int, int], a2: list):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: Tuple[int, int, int], a2: List[list]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: List[Tuple[int, int, int]], a2: list):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: List[Tuple[int, int, int]], a2: List[list]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: List[Tuple[int, ...]], a2: list):
    """
    usage.scipy: 2
    """
    ...


@overload
def array_equal(a1: List[Tuple[int, ...]], a2: List[list]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array_equal(a1: List[Tuple[int, int, int, int]], a2: list):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: List[Tuple[int, int, int, int]], a2: List[list]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: list, a2: list):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: List[list], a2: list):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: List[list], a2: List[list]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: List[Tuple[int, None]], a2: list):
    """
    usage.scipy: 2
    """
    ...


@overload
def array_equal(a1: List[Tuple[int, None]], a2: List[list]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array_equal(a1: List[Tuple[None, int]], a2: list):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: List[Tuple[None, int]], a2: List[list]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: List[Tuple[Union[None, float], None]], a2: list):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: List[Tuple[Union[None, float], None]], a2: List[list]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: List[Tuple[Union[None, float], Union[None, float]]], a2: list):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(
    a1: List[Tuple[Union[None, float], Union[None, float]]], a2: List[list]
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: Tuple[Tuple[None, None], Tuple[int, None]], a2: list):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: Tuple[Tuple[None, None], Tuple[int, None]], a2: List[list]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: List[Tuple[Union[int, float], Union[float, int]]], a2: list):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: List[Tuple[Union[int, float], Union[float, int]]], a2: List[list]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: Tuple[float, None], a2: list):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: Tuple[float, None], a2: List[list]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: Tuple[None, float], a2: list):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: Tuple[None, float], a2: List[list]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: Tuple[float, int], a2: list):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: Tuple[float, int], a2: List[list]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: Tuple[Tuple[float, float], Tuple[int, float]], a2: list):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: Tuple[Tuple[float, float], Tuple[int, float]], a2: List[list]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: List[Tuple[int, Union[int, None]]], a2: list):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: List[Tuple[int, Union[int, None]]], a2: List[list]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: List[Tuple[Union[int, None], Union[int, None]]], a2: list):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: List[Tuple[Union[int, None], Union[int, None]]], a2: List[list]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: Tuple[None, None], a2: list):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: Tuple[None, None], a2: List[list]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: List[Tuple[Union[None, int], None]], a2: list):
    """
    usage.scipy: 3
    """
    ...


@overload
def array_equal(a1: List[Tuple[Union[None, int], None]], a2: List[list]):
    """
    usage.scipy: 3
    """
    ...


@overload
def array_equal(a1: List[Tuple[Union[None, int], Union[None, int]]], a2: list):
    """
    usage.scipy: 3
    """
    ...


@overload
def array_equal(a1: List[Tuple[Union[None, int], Union[None, int]]], a2: List[list]):
    """
    usage.scipy: 3
    """
    ...


@overload
def array_equal(a1: numpy.ndarray, a2: list):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: numpy.ndarray, a2: List[list]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: List[Tuple[None, None]], a2: list):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: List[Tuple[None, None]], a2: List[list]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: List[Tuple[Union[int, None], None]], a2: list):
    """
    usage.scipy: 2
    """
    ...


@overload
def array_equal(a1: List[Tuple[Union[int, None], None]], a2: List[list]):
    """
    usage.scipy: 2
    """
    ...


@overload
def array_equal(a1: List[Tuple[int, Union[None, int]]], a2: list):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: List[Tuple[int, Union[None, int]]], a2: List[list]):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(
    a1: List[Tuple[Union[None, int, float], Union[int, float, None]]], a2: list
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(
    a1: List[Tuple[Union[None, int, float], Union[int, float, None]]], a2: List[list]
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: List[Tuple[Union[None, int, float], Union[None, float]]], a2: list):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(
    a1: List[Tuple[Union[None, int, float], Union[None, float]]], a2: List[list]
):
    """
    usage.scipy: 1
    """
    ...


@overload
def array_equal(a1: None, a2: None):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def array_equal(a1: numpy.ndarray, a2: List[numpy.float64]):
    """
    usage.sklearn: 6
    """
    ...


@overload
def array_equal(a1: numpy.ndarray, a2: List[int]):
    """
    usage.sklearn: 11
    """
    ...


@overload
def array_equal(a1: List[float], a2: List[float]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array_equal(a1: numpy.ndarray, a2: List[numpy.float32]):
    """
    usage.sklearn: 2
    """
    ...


def array_equal(
    a1: object,
    a2: Union[
        numpy.ndarray,
        pandas.core.series.Series,
        List[Union[list, float, int, numpy.float64, numpy.float32]],
        None,
        Tuple[int, ...],
    ],
):
    """
    usage.dask: 4
    usage.matplotlib: 2
    usage.pandas: 142
    usage.scipy: 135
    usage.skimage: 5
    usage.sklearn: 33
    usage.xarray: 3
    """
    ...


def array_equiv(a1: numpy.ndarray, a2: numpy.ndarray):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array_split(
    ary: Union[pandas.core.series.Series, pandas.core.frame.DataFrame],
    indices_or_sections: int,
):
    """
    usage.pandas: 4
    """
    ...


@overload
def array_split(ary: numpy.ndarray, indices_or_sections: int):
    """
    usage.sklearn: 2
    """
    ...


@overload
def array_split(ary: List[Tuple[int, int]], indices_or_sections: int):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array_split(ary: List[Tuple[int]], indices_or_sections: int):
    """
    usage.sklearn: 2
    """
    ...


@overload
def array_split(ary: List[numpy.ndarray], indices_or_sections: int):
    """
    usage.sklearn: 1
    """
    ...


@overload
def array_split(ary: List[Tuple[int, ...]], indices_or_sections: int):
    """
    usage.sklearn: 1
    """
    ...


def array_split(
    ary: Union[
        numpy.ndarray,
        pandas.core.frame.DataFrame,
        pandas.core.series.Series,
        List[Union[numpy.ndarray, Tuple[int, ...]]],
    ],
    indices_or_sections: int,
):
    """
    usage.pandas: 4
    usage.sklearn: 7
    """
    ...


@overload
def asanyarray(a: numpy.ndarray):
    """
    usage.dask: 16
    usage.matplotlib: 18
    usage.scipy: 86
    usage.skimage: 33
    usage.sklearn: 28
    """
    ...


@overload
def asanyarray(a: List[int]):
    """
    usage.dask: 9
    usage.matplotlib: 6
    usage.scipy: 19
    usage.skimage: 4
    usage.sklearn: 1
    """
    ...


@overload
def asanyarray(a: List[Union[float, int]]):
    """
    usage.dask: 2
    usage.skimage: 4
    """
    ...


@overload
def asanyarray(a: List[float]):
    """
    usage.matplotlib: 5
    usage.scipy: 10
    usage.skimage: 1
    """
    ...


@overload
def asanyarray(a: Tuple[int, int, int]):
    """
    usage.dask: 1
    usage.skimage: 1
    """
    ...


@overload
def asanyarray(a: numpy.ndarray, dtype: Type[bool]):
    """
    usage.skimage: 4
    """
    ...


@overload
def asanyarray(a: Tuple[int, int]):
    """
    usage.matplotlib: 1
    usage.skimage: 1
    """
    ...


@overload
def asanyarray(a: float):
    """
    usage.dask: 1
    usage.matplotlib: 1
    usage.scipy: 1
    usage.xarray: 1
    """
    ...


@overload
def asanyarray(a: object, dtype: Union[Literal["int64"], type] = ...):
    """
    usage.pandas: 42
    """
    ...


@overload
def asanyarray(a: int):
    """
    usage.dask: 1
    usage.matplotlib: 1
    usage.scipy: 6
    """
    ...


@overload
def asanyarray(a: Literal["Hello"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asanyarray(a: Literal["World"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asanyarray(a: Literal["Hello, world"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asanyarray(a: list):
    """
    usage.dask: 2
    usage.matplotlib: 4
    usage.scipy: 3
    """
    ...


@overload
def asanyarray(a: Tuple[None, ...]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asanyarray(a: Literal["a string"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asanyarray(a: object):
    """
    usage.scipy: 1
    """
    ...


@overload
def asanyarray(a: numpy.float64):
    """
    usage.matplotlib: 3
    usage.scipy: 3
    usage.sklearn: 1
    """
    ...


@overload
def asanyarray(a: numpy.bytes_):
    """
    usage.scipy: 2
    """
    ...


@overload
def asanyarray(a: List[List[float]]):
    """
    usage.matplotlib: 1
    usage.scipy: 1
    """
    ...


@overload
def asanyarray(a: Literal["my name"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asanyarray(a: Literal["test_str"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asanyarray(a: numpy.int32):
    """
    usage.scipy: 2
    """
    ...


@overload
def asanyarray(a: numpy.matrix):
    """
    usage.scipy: 9
    """
    ...


@overload
def asanyarray(a: List[int], dtype: Type[numpy.int64]):
    """
    usage.scipy: 5
    """
    ...


@overload
def asanyarray(a: numpy.int64):
    """
    usage.matplotlib: 1
    usage.scipy: 2
    """
    ...


@overload
def asanyarray(a: List[List[int]]):
    """
    usage.scipy: 3
    """
    ...


@overload
def asanyarray(a: scipy.sparse.tests.test_base.BinopTester):
    """
    usage.scipy: 1
    """
    ...


@overload
def asanyarray(a: scipy.sparse.tests.test_base.BinopTester_with_shape):
    """
    usage.scipy: 1
    """
    ...


@overload
def asanyarray(a: numpy.int8):
    """
    usage.scipy: 2
    """
    ...


@overload
def asanyarray(a: List[bool]):
    """
    usage.dask: 8
    usage.scipy: 1
    """
    ...


@overload
def asanyarray(a: List[List[bool]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asanyarray(a: numpy.bool_):
    """
    usage.scipy: 1
    """
    ...


@overload
def asanyarray(a: Tuple[List[float], List[float]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asanyarray(a: numpy.int16):
    """
    usage.scipy: 1
    """
    ...


@overload
def asanyarray(a: numpy.uint8):
    """
    usage.scipy: 1
    """
    ...


@overload
def asanyarray(a: numpy.uint16):
    """
    usage.scipy: 1
    """
    ...


@overload
def asanyarray(a: numpy.uint32):
    """
    usage.scipy: 1
    """
    ...


@overload
def asanyarray(a: numpy.uint64):
    """
    usage.scipy: 1
    """
    ...


@overload
def asanyarray(a: numpy.float32):
    """
    usage.scipy: 1
    """
    ...


@overload
def asanyarray(a: numpy.complex64):
    """
    usage.scipy: 1
    """
    ...


@overload
def asanyarray(a: numpy.complex128):
    """
    usage.scipy: 1
    """
    ...


@overload
def asanyarray(a: numpy.float16):
    """
    usage.scipy: 1
    """
    ...


@overload
def asanyarray(a: numpy.float128):
    """
    usage.scipy: 1
    """
    ...


@overload
def asanyarray(a: numpy.ma.core.MaskedArray):
    """
    usage.matplotlib: 14
    usage.scipy: 5
    usage.sklearn: 1
    """
    ...


@overload
def asanyarray(
    a: Tuple[
        numpy.int64,
        numpy.int64,
        numpy.int64,
        numpy.int64,
        numpy.int64,
        numpy.int64,
        numpy.int64,
        numpy.int64,
        numpy.int64,
        numpy.int64,
    ]
):
    """
    usage.scipy: 1
    """
    ...


@overload
def asanyarray(a: str):
    """
    usage.scipy: 1
    """
    ...


@overload
def asanyarray(a: Tuple[float, float]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def asanyarray(a: List[List[numpy.float64]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asanyarray(a: List[numpy.float64]):
    """
    usage.matplotlib: 7
    """
    ...


@overload
def asanyarray(a: Tuple[numpy.float64, numpy.float64]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def asanyarray(
    a: Tuple[Tuple[numpy.float64, numpy.float64], Tuple[numpy.float64, numpy.float64]]
):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def asanyarray(a: Tuple[Tuple[float, float], Tuple[float, float]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asanyarray(a: Tuple[Tuple[int, int], Tuple[float, float]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asanyarray(a: Tuple[Tuple[float, int], Tuple[float, int]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asanyarray(a: Tuple[Tuple[float, int], Tuple[float, float]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asanyarray(a: List[Tuple[float, float]], dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asanyarray(a: Tuple[float, int]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asanyarray(a: Tuple[int, float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asanyarray(a: numpy.ndarray, dtype: Type[float]):
    """
    usage.matplotlib: 6
    """
    ...


@overload
def asanyarray(a: List[numpy.ndarray]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def asanyarray(a: List[Literal["lime", "b", "y", "r"]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asanyarray(a: numpy.ma.core.MaskedArray, dtype: Type[float]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def asanyarray(a: List[Union[float, int]], dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asanyarray(a: List[int], dtype: Type[float]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def asanyarray(a: int, dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asanyarray(a: List[List[Union[int, float]]], dtype: Type[float]):
    """
    usage.matplotlib: 7
    """
    ...


@overload
def asanyarray(a: List[Literal["0.8", "0.7", "0.6", "0.5"]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asanyarray(
    a: List[Union[Literal["lime", "b", "y"], Tuple[int, int, int]]], dtype: Type[float]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asanyarray(a: List[float], dtype: Type[float]):
    """
    usage.matplotlib: 3
    """
    ...


@overload
def asanyarray(a: List[List[int]], dtype: Type[float]):
    """
    usage.matplotlib: 5
    """
    ...


@overload
def asanyarray(
    a: List[Union[Literal["0.0", "red"], List[Union[int, float]]]], dtype: Type[float]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asanyarray(
    a: List[Union[Literal["C5", "0.0", "red"], List[Union[int, float]]]],
    dtype: Type[float],
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asanyarray(
    a: List[Union[List[Union[int, float]], Literal["C5", "0.0", "red"]]],
    dtype: Type[float],
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asanyarray(
    a: List[Union[Literal["jaune", "red"], List[Union[int, float]]]], dtype: Type[float]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asanyarray(
    a: List[Union[Literal["jaune", "0.0", "red"], List[Union[int, float]]]],
    dtype: Type[float],
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asanyarray(
    a: List[Union[Literal["jaune", "C5", "0.0", "red"], List[Union[int, float]]]],
    dtype: Type[float],
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asanyarray(a: Tuple[float, float, float], dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asanyarray(a: List[Tuple[float, float, float]], dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asanyarray(a: List[Tuple[int, int]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asanyarray(a: list, dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asanyarray(a: List[Tuple[numpy.float64, numpy.float64]], dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asanyarray(a: List[numpy.ndarray], dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asanyarray(a: List[Tuple[int, int]], dtype: Type[float]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def asanyarray(a: range, dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asanyarray(a: List[Union[int, float]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asanyarray(a: List[Tuple[float, numpy.float64]], dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asanyarray(a: Tuple[Tuple[int, float], Tuple[float, float]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asanyarray(a: List[Tuple[float, int]], dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asanyarray(a: List[Tuple[int, float]], dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asanyarray(a: List[List[float]], dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asanyarray(a: List[Union[numpy.float64, float]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asanyarray(a: List[Union[float, numpy.float64]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asanyarray(a: List[Union[numpy.float64, int]]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def asanyarray(a: List[Union[int, numpy.float64]]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def asanyarray(a: pandas.core.frame.DataFrame):
    """
    usage.dask: 1
    """
    ...


@overload
def asanyarray(a: pandas.core.series.Series):
    """
    usage.dask: 2
    """
    ...


@overload
def asanyarray(a: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def asanyarray(a: Literal["Hello!"]):
    """
    usage.dask: 1
    """
    ...


@overload
def asanyarray(a: List[Dict[Literal["max_depth"], int]]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asanyarray(a: List[Dict[Literal["max_depth", "min_samples_split"], int]]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asanyarray(a: List[Literal["3", "2", "1"]]):
    """
    usage.sklearn: 1
    """
    ...


def asanyarray(
    a: object,
    dtype: Union[
        Type[float], type, Type[bool], Type[numpy.int64], Literal["int64"]
    ] = ...,
):
    """
    usage.dask: 45
    usage.matplotlib: 135
    usage.pandas: 42
    usage.scipy: 185
    usage.skimage: 48
    usage.sklearn: 34
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[int]):
    """
    usage.dask: 14
    usage.matplotlib: 42
    usage.scipy: 346
    usage.skimage: 12
    usage.sklearn: 86
    usage.xarray: 42
    """
    ...


@overload
def asarray(a: List[Union[float, int]]):
    """
    usage.matplotlib: 12
    usage.scipy: 27
    usage.skimage: 2
    usage.sklearn: 4
    usage.xarray: 11
    """
    ...


@overload
def asarray(a: numpy.ndarray):
    """
    usage.dask: 12
    usage.matplotlib: 96
    usage.scipy: 1354
    usage.skimage: 43
    usage.sklearn: 267
    usage.xarray: 229
    """
    ...


@overload
def asarray(a: float):
    """
    usage.dask: 1
    usage.matplotlib: 8
    usage.scipy: 56
    usage.skimage: 2
    usage.sklearn: 4
    usage.xarray: 5
    """
    ...


@overload
def asarray(a: List[float]):
    """
    usage.dask: 2
    usage.matplotlib: 30
    usage.scipy: 153
    usage.skimage: 6
    usage.sklearn: 41
    usage.xarray: 17
    """
    ...


@overload
def asarray(a: Tuple[float, float]):
    """
    usage.matplotlib: 2
    usage.scipy: 4
    usage.skimage: 1
    usage.xarray: 2
    """
    ...


@overload
def asarray(a: Tuple[Tuple[int, int, int], Tuple[int, float, int]]):
    """
    usage.skimage: 1
    """
    ...


@overload
def asarray(a: List[Union[int, float]]):
    """
    usage.matplotlib: 15
    usage.scipy: 35
    usage.skimage: 1
    usage.sklearn: 4
    usage.xarray: 19
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: Type[numpy.float64]):
    """
    usage.matplotlib: 13
    usage.scipy: 50
    usage.skimage: 2
    usage.sklearn: 15
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: int):
    """
    usage.dask: 3
    usage.matplotlib: 4
    usage.scipy: 69
    usage.skimage: 3
    usage.sklearn: 4
    usage.xarray: 6
    """
    ...


@overload
def asarray(a: Tuple[float, float, float], dtype: numpy.dtype):
    """
    usage.skimage: 1
    """
    ...


@overload
def asarray(a: Tuple[float, float, float], dtype: Type[float]):
    """
    usage.skimage: 1
    """
    ...


@overload
def asarray(a: Tuple[float, float, float]):
    """
    usage.scipy: 8
    usage.skimage: 8
    usage.sklearn: 2
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: imageio.core.util.Array):
    """
    usage.skimage: 1
    """
    ...


@overload
def asarray(a: List[numpy.int64]):
    """
    usage.matplotlib: 9
    usage.scipy: 6
    usage.skimage: 2
    usage.sklearn: 4
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Tuple[int, int]):
    """
    usage.dask: 4
    usage.matplotlib: 6
    usage.scipy: 9
    usage.skimage: 16
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: Tuple[int, int, int]):
    """
    usage.dask: 3
    usage.scipy: 8
    usage.skimage: 14
    usage.sklearn: 3
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Tuple[float, int]):
    """
    usage.skimage: 2
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: Type[numpy.uint8]):
    """
    usage.matplotlib: 4
    usage.skimage: 1
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: Type[numpy.uint16]):
    """
    usage.skimage: 1
    """
    ...


@overload
def asarray(a: List[Tuple[numpy.ndarray, numpy.ndarray]]):
    """
    usage.skimage: 3
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: Type[float]):
    """
    usage.matplotlib: 13
    usage.scipy: 68
    usage.skimage: 4
    """
    ...


@overload
def asarray(a: List[Union[int, float]], dtype: Type[float]):
    """
    usage.scipy: 9
    usage.skimage: 2
    """
    ...


@overload
def asarray(a: List[int], dtype: Type[float]):
    """
    usage.matplotlib: 5
    usage.scipy: 36
    usage.skimage: 4
    """
    ...


@overload
def asarray(a: List[Union[float, int]], dtype: Type[float]):
    """
    usage.scipy: 12
    usage.skimage: 1
    """
    ...


@overload
def asarray(a: List[List[int]]):
    """
    usage.dask: 2
    usage.matplotlib: 5
    usage.scipy: 180
    usage.skimage: 7
    usage.sklearn: 45
    usage.xarray: 21
    """
    ...


@overload
def asarray(a: Tuple[int, int], dtype: Type[float]):
    """
    usage.matplotlib: 1
    usage.skimage: 4
    """
    ...


@overload
def asarray(a: Tuple[numpy.float64, numpy.float64], dtype: Type[float]):
    """
    usage.matplotlib: 1
    usage.skimage: 2
    """
    ...


@overload
def asarray(a: Tuple[numpy.float64, numpy.float64]):
    """
    usage.dask: 2
    usage.scipy: 2
    usage.skimage: 1
    """
    ...


@overload
def asarray(a: Tuple[float, float, float], dtype: Type[numpy.float64]):
    """
    usage.skimage: 2
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: Type[numpy.float32]):
    """
    usage.matplotlib: 1
    usage.scipy: 6
    usage.skimage: 2
    usage.sklearn: 7
    """
    ...


@overload
def asarray(a: List[List[int]], dtype: Type[numpy.uint8]):
    """
    usage.skimage: 1
    """
    ...


@overload
def asarray(a: numpy.float64):
    """
    usage.dask: 1
    usage.scipy: 44
    usage.skimage: 1
    usage.sklearn: 1
    usage.xarray: 2
    """
    ...


@overload
def asarray(a: range):
    """
    usage.dask: 1
    usage.matplotlib: 6
    usage.skimage: 2
    usage.sklearn: 2
    usage.xarray: 12
    """
    ...


@overload
def asarray(a: Tuple[int, int, int, int]):
    """
    usage.dask: 2
    usage.scipy: 4
    usage.skimage: 9
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: Literal["uint8"]):
    """
    usage.skimage: 2
    """
    ...


@overload
def asarray(a: List[Tuple[Union[int, float], Union[int, float], Union[float, int]]]):
    """
    usage.skimage: 2
    """
    ...


@overload
def asarray(a: List[Tuple[Union[int, float], Union[float, int], Union[int, float]]]):
    """
    usage.skimage: 2
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: numpy.dtype):
    """
    usage.dask: 1
    usage.scipy: 142
    usage.skimage: 15
    usage.sklearn: 15
    usage.xarray: 45
    """
    ...


@overload
def asarray(a: Tuple[int, int, int, int, int]):
    """
    usage.dask: 2
    usage.skimage: 1
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: Type[bool]):
    """
    usage.matplotlib: 7
    usage.scipy: 12
    usage.skimage: 1
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Tuple[int, int, int], dtype: Type[float]):
    """
    usage.skimage: 2
    """
    ...


@overload
def asarray(a: List[numpy.float64]):
    """
    usage.matplotlib: 45
    usage.scipy: 47
    usage.skimage: 1
    usage.sklearn: 22
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: Type[numpy.float64], order: Literal["C"]):
    """
    usage.scipy: 2
    usage.skimage: 2
    usage.sklearn: 17
    """
    ...


@overload
def asarray(a: numpy.ma.core.MaskedArray):
    """
    usage.matplotlib: 9
    usage.scipy: 4
    usage.skimage: 2
    usage.xarray: 2
    """
    ...


@overload
def asarray(a: List[numpy.ndarray]):
    """
    usage.matplotlib: 10
    usage.scipy: 47
    usage.skimage: 2
    usage.sklearn: 52
    usage.xarray: 5
    """
    ...


@overload
def asarray(a: numpy.ndarray, order: Literal["C"]):
    """
    usage.skimage: 1
    usage.sklearn: 16
    """
    ...


@overload
def asarray(a: Tuple[int], dtype: Type[float]):
    """
    usage.matplotlib: 1
    usage.skimage: 2
    """
    ...


@overload
def asarray(a: Tuple[int]):
    """
    usage.matplotlib: 2
    usage.scipy: 3
    usage.skimage: 7
    usage.sklearn: 2
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Tuple[int, int, int, int], dtype: Type[float]):
    """
    usage.matplotlib: 1
    usage.skimage: 2
    """
    ...


@overload
def asarray(a: Tuple[int, int], dtype: numpy.dtype):
    """
    usage.skimage: 1
    """
    ...


@overload
def asarray(a: List[int], dtype: numpy.dtype):
    """
    usage.scipy: 21
    usage.skimage: 2
    """
    ...


@overload
def asarray(a: Tuple[numpy.int64, numpy.int64], dtype: Type[float]):
    """
    usage.skimage: 1
    """
    ...


@overload
def asarray(a: Tuple[numpy.int64, numpy.int64]):
    """
    usage.skimage: 1
    """
    ...


@overload
def asarray(a: Tuple[numpy.int64, numpy.int64, numpy.int64], dtype: Type[float]):
    """
    usage.skimage: 1
    """
    ...


@overload
def asarray(a: Tuple[numpy.int64, numpy.int64, numpy.int64]):
    """
    usage.dask: 2
    usage.skimage: 1
    """
    ...


@overload
def asarray(
    a: Tuple[numpy.int64, numpy.int64, numpy.int64, numpy.int64], dtype: Type[float]
):
    """
    usage.skimage: 1
    """
    ...


@overload
def asarray(a: Tuple[numpy.float64], dtype: Type[float]):
    """
    usage.matplotlib: 1
    usage.skimage: 1
    """
    ...


@overload
def asarray(a: Tuple[numpy.float64, numpy.float64, numpy.float64], dtype: Type[float]):
    """
    usage.skimage: 1
    """
    ...


@overload
def asarray(
    a: Tuple[numpy.float64, numpy.float64, numpy.float64, numpy.float64],
    dtype: Type[float],
):
    """
    usage.skimage: 1
    """
    ...


@overload
def asarray(a: Tuple[int, int, int, int, int], dtype: Type[float]):
    """
    usage.skimage: 1
    """
    ...


@overload
def asarray(
    a: Tuple[numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64],
    dtype: Type[float],
):
    """
    usage.skimage: 1
    """
    ...


@overload
def asarray(a: List[Literal["foooofooofommmfoo", "foofoo", "foo"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["MMM_", "fOOomMm__fOo", "xYz", "Foo"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[bool]):
    """
    usage.dask: 1
    usage.scipy: 1
    usage.sklearn: 5
    usage.xarray: 11
    """
    ...


@overload
def asarray(a: List[Literal["foo", "bar_foo", "nom", "foo_nom", "om"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["SOme word"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["Some word"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["some word"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["soME WORD"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["Some Word"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["SOME WORD"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["fooBAD__barBAD"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["foobar"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["foobarBAD"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[str]):
    """
    usage.matplotlib: 47
    usage.sklearn: 3
    usage.xarray: 14
    """
    ...


@overload
def asarray(a: List[Literal["foObaD__baRbaD"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["Foo Bar Baz"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["bAR"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["abcd,à"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["abcd, à"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["fooBAD__barBAD__bad"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["foo", "f.o"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["bao"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["foo", "bao"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["d", "c", "b", "a"]]):
    """
    usage.sklearn: 3
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["ddd", "ccc", "bbb", "aaa"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["foo", "fooBAD__barBAD"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["fooooooo", "fooooo", "fooo", "foo"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["XXX", "EFGHEF", "DEFGHIJEF", "BCDEFEF", "ABCDEFG"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["EFGHEF", "DEFGHIJEF", "BCDEFEF", "ABCDEFG"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["eeeee", "c", "b", "a"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["eeeee", "    c", "    b", "    a"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["eeeee", "c    ", "b    ", "a    "]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["eeeee", "  c  ", "  b  ", "  a  "]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["eeeee", "XXXXc", "XXXXb", "XXXXa"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["eeeee", "cXXXX", "bXXXX", "aXXXX"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["eeeee", "XXcXX", "XXbXX", "XXaXX"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["cdefggg", "cdddfg", "abcc", "abcdefg"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["edefggg", "edddfg", "cdee", "cdedefg"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["eeeeee", "ddddd", "cccc", "bb", "a"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["eeeeee", "ddddd", "Xcccc", "XXbbX", "XXaXX"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["eeeeee", "ddddd", "ccccX", "bbXXX", "aXXXX"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["eeeeee", "ddddd", "Xcccc", "XXXbb", "XXXXa"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["45678", "333", "aaa", "22", "1"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["45678", "00333", "00aaa", "00022", "00001"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["45678", "333", "aaa", "022", "001"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["aabazqux", "aabartwo", "aafootwo"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["baz", "bar", "foo"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal[""]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["xuqzabaa", "owtrabaa", "owtoofaa"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["aqx", "ato", "oto"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["aba", "ofa"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[bytes]):
    """
    usage.xarray: 3
    """
    ...


@overload
def asarray(a: List[Literal["", "evenlongerthanthat", "a bit longer", "short"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["", "evnlongerthanthat", "a it longer", "shrt"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["z", "evznlongerthanthat", "a zit longer", "shzrt"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["z", "evzenlongerthanthat", "a zbit longer", "shzort"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["z", "evenlongerthanthaz", "a bit longez", "shorz"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["z", "zat", "zer", "zrt"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["z", "evenlozerthanthat", "a bit znger", "shortz"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["z", "evenlongzerthanthat", "a zit longer", "zrt"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["cc  ", " bb \n", "  aa   "]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["cc", "bb", "aa"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["cc  ", "bb \n", "aa   "]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["cc", " bb", "  aa"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["LDFJH xx", "xx BNSD", "xxABCxx"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["LDFJH ", " BNSD", "ABC"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["LDFJH xx", " BNSD", "ABCxx"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["LDFJH ", "xx BNSD", "xxABC"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["¬€耀 abadcafe", "  pre  "]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["¬€耀 ab\nadcafe", "  pre"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["f_g_h", "c_d_e", "a_b_c"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["g", "d", "b"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["11_12", "6_7_8_9_10", "1_2_3_4_5"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["", "_"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["", "8", "_"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["aä", "b", "a"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["a\x9d", "b", "a"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["a", "b"]]):
    """
    usage.sklearn: 3
    usage.xarray: 2
    """
    ...


@overload
def asarray(a: xarray.core.indexing.PandasIndexAdapter):
    """
    usage.xarray: 5
    """
    ...


@overload
def asarray(a: bytes):
    """
    usage.scipy: 2
    usage.xarray: 3
    """
    ...


@overload
def asarray(a: Literal["foobar"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: xarray.core.indexing.ImplicitToExplicitIndexingAdapter):
    """
    usage.xarray: 3
    """
    ...


@overload
def asarray(a: xarray.core.indexing.LazilyOuterIndexedArray, dtype: None):
    """
    usage.xarray: 2
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: None):
    """
    usage.xarray: 62
    """
    ...


@overload
def asarray(a: xarray.core.indexing.LazilyOuterIndexedArray):
    """
    usage.xarray: 7
    """
    ...


@overload
def asarray(a: xarray.coding.variables._ElementwiseFunctionArray, dtype: None):
    """
    usage.xarray: 2
    """
    ...


@overload
def asarray(a: xarray.core.indexing.MemoryCachedArray):
    """
    usage.xarray: 2
    """
    ...


@overload
def asarray(a: xarray.core.indexing.CopyOnWriteArray):
    """
    usage.xarray: 3
    """
    ...


@overload
def asarray(a: xarray.core.indexing.NumpyIndexingAdapter, dtype: None):
    """
    usage.xarray: 3
    """
    ...


@overload
def asarray(a: Literal["foobar"], dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: xarray.core.variable.Variable):
    """
    usage.xarray: 10
    """
    ...


@overload
def asarray(a: pandas.core.series.Series):
    """
    usage.dask: 3
    usage.sklearn: 7
    usage.xarray: 3
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: Type[numpy.bytes_]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Literal[""]):
    """
    usage.scipy: 1
    usage.sklearn: 1
    usage.xarray: 3
    """
    ...


@overload
def asarray(a: List[Literal["cdef", "ab"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: xarray.core.indexing.NumpyIndexingAdapter):
    """
    usage.xarray: 3
    """
    ...


@overload
def asarray(a: numpy.datetime64):
    """
    usage.xarray: 4
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: Literal["datetime64[ns]"]):
    """
    usage.xarray: 7
    """
    ...


@overload
def asarray(a: List[cftime._cftime.DatetimeNoLeap]):
    """
    usage.xarray: 4
    """
    ...


@overload
def asarray(a: cftime._cftime.DatetimeNoLeap):
    """
    usage.xarray: 2
    """
    ...


@overload
def asarray(a: List[cftime._cftime.Datetime360Day]):
    """
    usage.xarray: 4
    """
    ...


@overload
def asarray(a: cftime._cftime.Datetime360Day):
    """
    usage.xarray: 3
    """
    ...


@overload
def asarray(a: List[cftime._cftime.DatetimeJulian]):
    """
    usage.xarray: 4
    """
    ...


@overload
def asarray(a: cftime._cftime.DatetimeJulian):
    """
    usage.xarray: 2
    """
    ...


@overload
def asarray(a: List[cftime._cftime.DatetimeAllLeap]):
    """
    usage.xarray: 4
    """
    ...


@overload
def asarray(a: cftime._cftime.DatetimeAllLeap):
    """
    usage.xarray: 3
    """
    ...


@overload
def asarray(a: List[cftime._cftime.DatetimeGregorian]):
    """
    usage.xarray: 5
    """
    ...


@overload
def asarray(a: cftime._cftime.DatetimeGregorian):
    """
    usage.xarray: 3
    """
    ...


@overload
def asarray(a: List[cftime._cftime.DatetimeProlepticGregorian]):
    """
    usage.xarray: 4
    """
    ...


@overload
def asarray(a: cftime._cftime.DatetimeProlepticGregorian):
    """
    usage.xarray: 3
    """
    ...


@overload
def asarray(a: numpy.timedelta64):
    """
    usage.xarray: 3
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: Literal["timedelta64[ns]"]):
    """
    usage.xarray: 9
    """
    ...


@overload
def asarray(a: str):
    """
    usage.xarray: 2
    """
    ...


@overload
def asarray(a: Literal["y"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Literal["z"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: xarray.core.indexing.LazilyOuterIndexedArray, dtype: numpy.dtype):
    """
    usage.xarray: 5
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: Type[numpy.int64]):
    """
    usage.scipy: 46
    usage.sklearn: 7
    usage.xarray: 6
    """
    ...


@overload
def asarray(a: xarray.core.indexing.LazilyVectorizedIndexedArray, dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: xarray.core.indexing.LazilyVectorizedIndexedArray):
    """
    usage.xarray: 2
    """
    ...


@overload
def asarray(a: Literal["a"], dtype: numpy.dtype):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: numpy.int64, dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: numpy.float64, dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: xarray.core.variable.IndexVariable):
    """
    usage.xarray: 5
    """
    ...


@overload
def asarray(a: numpy.bytes_):
    """
    usage.scipy: 1
    usage.xarray: 2
    """
    ...


@overload
def asarray(a: xarray.core.indexing.NumpyIndexingAdapter, dtype: numpy.dtype):
    """
    usage.xarray: 3
    """
    ...


@overload
def asarray(a: List[int], dtype: Literal["i1"]):
    """
    usage.xarray: 3
    """
    ...


@overload
def asarray(a: numpy.int8):
    """
    usage.scipy: 4
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: xarray.coding.variables._ElementwiseFunctionArray, dtype: numpy.dtype):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: numpy.int16):
    """
    usage.scipy: 1
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Literal["lon lat"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Literal["lon"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["time"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["dim2"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["dim3"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Literal["numbers"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["var1"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["var2"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["var3"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["numbers"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["var9", "var2"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["b", "a"]]):
    """
    usage.sklearn: 14
    usage.xarray: 7
    """
    ...


@overload
def asarray(a: Literal["XXX"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["strings", "of", "list"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["one element"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Literal["one string"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: xarray.core.indexing.CopyOnWriteArray, dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: dask.array.core.Array):
    """
    usage.dask: 2
    usage.xarray: 5
    """
    ...


@overload
def asarray(a: numpy.bytes_, dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: numpy.str_, dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["áó"]]):
    """
    usage.xarray: 2
    """
    ...


@overload
def asarray(a: numpy.int64, dtype: numpy.dtype):
    """
    usage.scipy: 4
    usage.sklearn: 1
    usage.xarray: 3
    """
    ...


@overload
def asarray(a: xarray.backends.scipy_.ScipyArrayWrapper, dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: numpy.int32, dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Literal["bar"]):
    """
    usage.xarray: 2
    """
    ...


@overload
def asarray(a: xarray.core.indexing.MemoryCachedArray, dtype: None):
    """
    usage.xarray: 2
    """
    ...


@overload
def asarray(a: numpy.int64):
    """
    usage.dask: 1
    usage.matplotlib: 1
    usage.scipy: 12
    usage.xarray: 4
    """
    ...


@overload
def asarray(a: Literal["foo"]):
    """
    usage.scipy: 3
    usage.xarray: 3
    """
    ...


@overload
def asarray(a: pydap.model.BaseType):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: numpy.float64, dtype: numpy.dtype):
    """
    usage.scipy: 8
    usage.sklearn: 2
    usage.xarray: 3
    """
    ...


@overload
def asarray(a: pydap.model.BaseType, dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Literal["k"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: PseudoNetCDF.core._variables.PseudoNetCDFMaskedVariable):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: PseudoNetCDF.core._variables.PseudoNetCDFVariable):
    """
    usage.xarray: 2
    """
    ...


@overload
def asarray(a: Tuple[Literal["float32"], Literal["float32"], Literal["float32"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Tuple[float, float, float, float, float, float]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Tuple[Literal["float32"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: numpy.float32, dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: numpy.float32):
    """
    usage.scipy: 2
    usage.sklearn: 2
    usage.xarray: 2
    """
    ...


@overload
def asarray(a: float, dtype: numpy.dtype):
    """
    usage.scipy: 1
    usage.sklearn: 2
    usage.xarray: 2
    """
    ...


@overload
def asarray(a: Literal["test"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Literal["This is a string"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Literal["x"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: numpy.bool_):
    """
    usage.dask: 1
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Literal["0001"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: xarray.coding.cftimeindex.CFTimeIndex):
    """
    usage.xarray: 4
    """
    ...


@overload
def asarray(a: xarray.coding.variables._ElementwiseFunctionArray):
    """
    usage.xarray: 2
    """
    ...


@overload
def asarray(a: xarray.coding.strings.StackedBytesArray):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: pandas.core.indexes.datetimes.DatetimeIndex):
    """
    usage.xarray: 12
    """
    ...


@overload
def asarray(a: datetime.timedelta):
    """
    usage.xarray: 2
    """
    ...


@overload
def asarray(a: numpy.int32):
    """
    usage.scipy: 2
    usage.sklearn: 1
    usage.xarray: 3
    """
    ...


@overload
def asarray(a: pandas.core.indexes.timedeltas.TimedeltaIndex):
    """
    usage.xarray: 4
    """
    ...


@overload
def asarray(a: xarray.core.indexing.PandasIndexAdapter, dtype: None):
    """
    usage.xarray: 2
    """
    ...


@overload
def asarray(a: List[Literal["Bob", "Alice"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["Daniel", "Caroline"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["run9", "run8"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["run11", "run10"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["2001-03-07T00:00:00", "2000-03-06T00:00:00"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["1999-02-04T00:00:00", "1999-01-01T00:00:00"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["var2", "var1"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[List[Union[float, int]]]):
    """
    usage.scipy: 7
    usage.sklearn: 1
    usage.xarray: 11
    """
    ...


@overload
def asarray(a: List[Literal["b", "c", "a"]]):
    """
    usage.sklearn: 4
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[List[Union[int, float]]]):
    """
    usage.scipy: 14
    usage.sklearn: 1
    usage.xarray: 11
    """
    ...


@overload
def asarray(a: Literal["b"], dtype: numpy.dtype):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["a"]]):
    """
    usage.sklearn: 5
    usage.xarray: 4
    """
    ...


@overload
def asarray(a: List[Literal["c", "b"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["c", "b", "a"]]):
    """
    usage.sklearn: 5
    usage.xarray: 4
    """
    ...


@overload
def asarray(a: list, dtype: numpy.dtype):
    """
    usage.scipy: 4
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: list):
    """
    usage.matplotlib: 10
    usage.scipy: 63
    usage.sklearn: 6
    usage.xarray: 5
    """
    ...


@overload
def asarray(a: List[list]):
    """
    usage.matplotlib: 2
    usage.scipy: 4
    usage.sklearn: 2
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: xarray.core.dataarray.DataArray):
    """
    usage.xarray: 8
    """
    ...


@overload
def asarray(a: List[Literal["c"]]):
    """
    usage.xarray: 2
    """
    ...


@overload
def asarray(a: List[List[Literal["e", "d"]]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Literal["a"]):
    """
    usage.xarray: 2
    """
    ...


@overload
def asarray(a: Literal["c"]):
    """
    usage.xarray: 2
    """
    ...


@overload
def asarray(a: Literal["d"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["d"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["e", "d"]]):
    """
    usage.xarray: 2
    """
    ...


@overload
def asarray(a: List[Literal["C", "B", "A"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Literal["b"]):
    """
    usage.xarray: 3
    """
    ...


@overload
def asarray(a: List[float], dtype: Literal["float32"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[float], dtype: numpy.dtype):
    """
    usage.xarray: 3
    """
    ...


@overload
def asarray(a: List[float], dtype: Literal["float16"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["ba", "ab"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: bool):
    """
    usage.xarray: 2
    """
    ...


@overload
def asarray(a: bool, dtype: numpy.dtype):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Tuple[Literal["a", "b"], int, int]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: complex):
    """
    usage.scipy: 5
    usage.sklearn: 1
    usage.xarray: 2
    """
    ...


@overload
def asarray(a: List[Literal["south", "north"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["ef", "cd", "ab"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Literal["ab"], dtype: numpy.dtype):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Literal["ef"], dtype: numpy.dtype):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[List[List[float]]]):
    """
    usage.scipy: 1
    usage.xarray: 2
    """
    ...


@overload
def asarray(a: List[List[float]]):
    """
    usage.matplotlib: 6
    usage.scipy: 47
    usage.sklearn: 14
    usage.xarray: 6
    """
    ...


@overload
def asarray(a: List[List[List[List[float]]]]):
    """
    usage.scipy: 1
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: pandas.core.indexes.numeric.Int64Index):
    """
    usage.sklearn: 2
    usage.xarray: 2
    """
    ...


@overload
def asarray(a: numpy.float16):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: float, dtype: Type[numpy.float64]):
    """
    usage.scipy: 1
    usage.xarray: 2
    """
    ...


@overload
def asarray(a: List[float], dtype: Type[numpy.float64]):
    """
    usage.matplotlib: 12
    usage.scipy: 10
    usage.sklearn: 8
    usage.xarray: 5
    """
    ...


@overload
def asarray(a: int, dtype: numpy.dtype):
    """
    usage.scipy: 17
    usage.sklearn: 1
    usage.xarray: 2
    """
    ...


@overload
def asarray(a: Literal["c"], dtype: numpy.dtype):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[List[List[int]]]):
    """
    usage.scipy: 8
    usage.xarray: 4
    """
    ...


@overload
def asarray(a: pandas.core.arrays.categorical.Categorical):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: pandas.core.arrays.interval.IntervalArray, dtype: numpy.dtype):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["f", "e", "d", "c"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: pandas.core.arrays.categorical.Categorical, dtype: numpy.dtype):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Union[str, None]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: numpy.ma.core.MaskedArray, dtype: numpy.dtype):
    """
    usage.xarray: 2
    """
    ...


@overload
def asarray(a: Literal["4"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Literal["four"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["2000-01-03", "2000-01-02", "2000-01-01"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Literal["2000-01-01"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Literal["2000-01-02"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Literal["2000-01-03"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["y", "x"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[List[bool]]):
    """
    usage.dask: 1
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["d", "b", "a"]]):
    """
    usage.sklearn: 6
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["a", "b", "c"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["ba®"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: None):
    """
    usage.scipy: 2
    usage.sklearn: 3
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Literal["hello"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Literal["2000-01-01T12:00:00"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: object):
    """
    usage.dask: 1
    usage.matplotlib: 1
    usage.scipy: 2
    usage.xarray: 7
    """
    ...


@overload
def asarray(a: xarray.core.dataset.Dataset):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: pandas._libs.tslibs.timedeltas.Timedelta):
    """
    usage.xarray: 2
    """
    ...


@overload
def asarray(a: List[Literal["foo"]]):
    """
    usage.scipy: 1
    usage.sklearn: 1
    usage.xarray: 3
    """
    ...


@overload
def asarray(a: xarray.core.variable.Variable, dtype: numpy.dtype):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: pandas.core.indexes.base.Index):
    """
    usage.dask: 4
    usage.sklearn: 3
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: xarray.tests.InaccessibleArray):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["n", "m", "l"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["b"]]):
    """
    usage.xarray: 2
    """
    ...


@overload
def asarray(a: List[Literal["w", "v", "u"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["notfound", "var1"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["foo", "x"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["time.dayofyear"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["B", "A"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["joaquin", "manolo"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["t.day", "t"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: xarray.core.dtypes.AlwaysGreaterThan):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: xarray.core.dtypes.AlwaysLessThan):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: numpy.uint64):
    """
    usage.scipy: 1
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Union[complex, int]]):
    """
    usage.scipy: 9
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: numpy.complex128):
    """
    usage.scipy: 7
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["bar"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["b", "a", "c"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["precipitation"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["temperature_10", "temperature_0"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["temperature_10"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["temperature_0"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["d", "c", "b"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Literal["uni"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["time", "y", "x"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["2000-01-03T00:00:00", "2000-01-01T00:00:00"]]):
    """
    usage.xarray: 2
    """
    ...


@overload
def asarray(a: List[int], dtype: Type[numpy.float64]):
    """
    usage.matplotlib: 12
    usage.scipy: 20
    usage.sklearn: 2
    usage.xarray: 2
    """
    ...


@overload
def asarray(a: int, dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[numpy.datetime64]):
    """
    usage.matplotlib: 1
    usage.xarray: 2
    """
    ...


@overload
def asarray(a: List[Tuple[int]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["2000-01-02T12:00", "2000-01-01T12:00"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["2000-01-01T12:00"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Literal["2000-01-01T12:00"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(
    a: List[Literal["2000-01-03T12:00", "2000-01-02T12:00", "2000-01-01T12:00"]]
):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["0002-05-01"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Literal["one"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["var3", "var1"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: pandas.core.indexes.numeric.Float64Index):
    """
    usage.xarray: 2
    """
    ...


@overload
def asarray(a: numpy.str_):
    """
    usage.xarray: 2
    """
    ...


@overload
def asarray(a: Literal["d"], dtype: numpy.dtype):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: str, dtype: numpy.dtype):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Literal["col0"], dtype: numpy.dtype):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Literal["row0"], dtype: numpy.dtype):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Literal["col1"], dtype: numpy.dtype):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Literal["col2"], dtype: numpy.dtype):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Literal["row1"], dtype: numpy.dtype):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Literal["one"], dtype: numpy.dtype):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Literal["two"], dtype: numpy.dtype):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Literal["three"], dtype: numpy.dtype):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Literal["five"], dtype: numpy.dtype):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Literal["A"], dtype: numpy.dtype):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Literal["B"], dtype: numpy.dtype):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Literal["C"], dtype: numpy.dtype):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Literal["C++"], dtype: numpy.dtype):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: sparse._coo.core.COO):
    """
    usage.xarray: 2
    """
    ...


@overload
def asarray(a: List[Literal["e", "d", "b", "a"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["bar", "foo"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[List[List[List[int]]]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: list):
    """
    usage.matplotlib: 2
    usage.xarray: 2
    """
    ...


@overload
def asarray(a: List[numpy.int32]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[numpy.float32]):
    """
    usage.matplotlib: 1
    usage.sklearn: 1
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["2000-01-01T00:00:00"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[numpy.timedelta64]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: numpy.datetime64, dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["2", "1", "0"]]):
    """
    usage.sklearn: 3
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["4", "3"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["two"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Union[float, complex, int]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Literal["2000-01-01T00:00:00"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Literal["six"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Literal["tmax"]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Literal["tmax"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: object):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: List[Union[int, float]], dtype: Type[numpy.float64]):
    """
    usage.matplotlib: 2
    usage.scipy: 1
    usage.sklearn: 3
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: Literal["foo"], dtype: numpy.dtype):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: pandas.core.frame.DataFrame):
    """
    usage.dask: 3
    usage.sklearn: 1
    usage.xarray: 2
    """
    ...


@overload
def asarray(a: xarray.core.indexing.DaskIndexingAdapter, dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: dask.array.core.Array, dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def asarray(a: object, dtype: Union[str, numpy.dtype, None, type] = ...):
    """
    usage.pandas: 3941
    """
    ...


@overload
def asarray(a: numpy.ndarray, order: Literal["c"]):
    """
    usage.scipy: 57
    """
    ...


@overload
def asarray(a: list, dtype: Type[numpy.float64], order: Literal["c"]):
    """
    usage.scipy: 2
    """
    ...


@overload
def asarray(a: List[List[int]], dtype: Type[numpy.float64], order: Literal["c"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: Type[numpy.float64], order: Literal["c"]):
    """
    usage.scipy: 20
    """
    ...


@overload
def asarray(a: List[int], order: Literal["c"]):
    """
    usage.scipy: 5
    """
    ...


@overload
def asarray(a: list, order: Literal["c"]):
    """
    usage.scipy: 2
    """
    ...


@overload
def asarray(a: List[List[Union[float, int]]], dtype: Type[numpy.float64]):
    """
    usage.scipy: 21
    """
    ...


@overload
def asarray(a: List[List[Union[float, int]]], dtype: Type[int]):
    """
    usage.scipy: 2
    """
    ...


@overload
def asarray(a: List[List[Union[int, float]]], dtype: Type[numpy.float64]):
    """
    usage.scipy: 4
    """
    ...


@overload
def asarray(a: List[List[int]], order: Literal["c"]):
    """
    usage.scipy: 3
    """
    ...


@overload
def asarray(a: List[Union[int, complex]]):
    """
    usage.scipy: 7
    """
    ...


@overload
def asarray(a: scipy.fft._pocketfft.tests.test_basic.FakeArray):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: scipy.fft._pocketfft.tests.test_basic.FakeArray2):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: scipy.fftpack.tests.test_basic.FakeArray):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: scipy.fftpack.tests.test_basic.FakeArray2):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: Type[complex]):
    """
    usage.scipy: 11
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: Type[numpy.int32]):
    """
    usage.matplotlib: 5
    usage.scipy: 45
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: List[float], dtype: Type[float]):
    """
    usage.matplotlib: 5
    usage.scipy: 17
    """
    ...


@overload
def asarray(a: List[int], dtype: Type[complex]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: List[float], dtype: Type[complex]):
    """
    usage.scipy: 2
    """
    ...


@overload
def asarray(a: float, dtype: Type[float]):
    """
    usage.scipy: 16
    """
    ...


@overload
def asarray(a: List[numpy.float64], dtype: Type[numpy.float64]):
    """
    usage.scipy: 5
    """
    ...


@overload
def asarray(a: List[List[numpy.ndarray]]):
    """
    usage.scipy: 4
    """
    ...


@overload
def asarray(a: List[None]):
    """
    usage.dask: 2
    usage.matplotlib: 2
    usage.scipy: 2
    usage.sklearn: 3
    """
    ...


@overload
def asarray(a: Tuple[None, ...]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: Tuple[int, int], dtype: Type[numpy.int32]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: Tuple[int, int, int], dtype: Type[numpy.int32]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: Tuple[Tuple[float, float, float]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: Tuple[float, float, float, float]):
    """
    usage.dask: 2
    usage.matplotlib: 2
    usage.scipy: 2
    """
    ...


@overload
def asarray(a: List[Tuple[float, float, float, float]]):
    """
    usage.scipy: 2
    """
    ...


@overload
def asarray(a: numpy.matrix):
    """
    usage.dask: 1
    usage.scipy: 106
    usage.sklearn: 15
    """
    ...


@overload
def asarray(a: List[Union[complex, float]]):
    """
    usage.scipy: 5
    """
    ...


@overload
def asarray(a: List[numpy.ndarray], dtype: Type[numpy.float64]):
    """
    usage.scipy: 3
    """
    ...


@overload
def asarray(a: Literal["SchrÃ¶dinger"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: numpy.void):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: numpy.uint8):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: numpy.complex64):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: numpy.uint16):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: numpy.uint32):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: List[List[Union[int, complex]]]):
    """
    usage.scipy: 22
    """
    ...


@overload
def asarray(a: Literal["Created for a test"], dtype: Literal["S"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: str, dtype: Literal["S"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: bytes, dtype: Literal["S"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: int, dtype: Literal[">i"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: numpy.int32, dtype: Literal[">i"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: Literal["b"], dtype: Literal["S"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: Literal["d"], dtype: Literal["S"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: Literal["metres"], dtype: Literal["S"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: Literal["floats"], dtype: Literal["S"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: Literal["was here"], dtype: Literal["S"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: Literal[">d"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: float, dtype: Literal[">f"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: Type[numpy.float128]):
    """
    usage.scipy: 4
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: Type[numpy.complex64]):
    """
    usage.scipy: 4
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: Type[numpy.complex128]):
    """
    usage.scipy: 6
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: Type[numpy.complex256]):
    """
    usage.scipy: 4
    """
    ...


@overload
def asarray(a: Tuple[int, numpy.longlong]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: List[List[Union[complex, int]]]):
    """
    usage.scipy: 5
    """
    ...


@overload
def asarray(a: List[List[Union[complex, float, int]]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: List[List[complex]]):
    """
    usage.scipy: 8
    """
    ...


@overload
def asarray(a: List[List[numpy.complex128]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: Type[numpy.complex128], order: Literal["c"]):
    """
    usage.scipy: 2
    """
    ...


@overload
def asarray(a: List[numpy.uint8], dtype: Type[numpy.float64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: List[numpy.uint16], dtype: Type[numpy.float64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: List[numpy.uint32], dtype: Type[numpy.float64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: List[numpy.uint64], dtype: Type[numpy.float64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: List[numpy.int8], dtype: Type[numpy.float64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: List[numpy.int16], dtype: Type[numpy.float64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: List[numpy.int32], dtype: Type[numpy.float64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: List[numpy.int64], dtype: Type[numpy.float64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: List[numpy.float32], dtype: Type[numpy.float64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: List[List[int]], dtype: Type[bool]):
    """
    usage.scipy: 6
    """
    ...


@overload
def asarray(a: List[List[int]], dtype: Type[numpy.float64]):
    """
    usage.scipy: 5
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: List[List[float]], dtype: Type[numpy.float64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: List[int], dtype: Type[bool]):
    """
    usage.matplotlib: 1
    usage.scipy: 2
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: Type[numpy.int8]):
    """
    usage.scipy: 2
    """
    ...


@overload
def asarray(a: numpy.bool_, dtype: Type[bool]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: List[int], dtype: Type[numpy.int32]):
    """
    usage.scipy: 2
    usage.sklearn: 20
    """
    ...


@overload
def asarray(a: bool, dtype: Type[bool]):
    """
    usage.matplotlib: 1
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: List[bool], dtype: Type[bool]):
    """
    usage.dask: 1
    usage.matplotlib: 3
    usage.scipy: 3
    """
    ...


@overload
def asarray(a: List[List[scipy.sparse.csr.csr_matrix]], dtype: Literal["object"]):
    """
    usage.scipy: 6
    """
    ...


@overload
def asarray(a: int, dtype: Type[float]):
    """
    usage.scipy: 15
    """
    ...


@overload
def asarray(
    a: List[
        List[
            Union[
                scipy.sparse.dia.dia_matrix,
                scipy.sparse.csc.csc_matrix,
                scipy.sparse.csr.csr_matrix,
                None,
            ]
        ]
    ],
    dtype: Literal["object"],
):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(
    a: List[Tuple[scipy.sparse.dia.dia_matrix, scipy.sparse.csc.csc_matrix]],
    dtype: Literal["object"],
):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: Literal["d"]):
    """
    usage.scipy: 2
    """
    ...


@overload
def asarray(a: List[Union[numpy.float64, int]]):
    """
    usage.scipy: 8
    """
    ...


@overload
def asarray(a: Literal["auto"], dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: None, dtype: Type[float]):
    """
    usage.scipy: 2
    """
    ...


@overload
def asarray(a: complex, dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(
    a: List[Tuple[scipy.sparse.csr.csr_matrix, scipy.sparse.csr.csr_matrix]],
    dtype: Literal["object"],
):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(
    a: List[List[Union[scipy.sparse.dia.dia_matrix, scipy.sparse.csr.csr_matrix]]],
    dtype: Literal["object"],
):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(
    a: List[Tuple[scipy.sparse.dia.dia_matrix, scipy.sparse.csr.csr_matrix]],
    dtype: Literal["object"],
):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: Literal["D"]):
    """
    usage.scipy: 4
    """
    ...


@overload
def asarray(a: List[List[int]], dtype: Type[float]):
    """
    usage.matplotlib: 6
    usage.scipy: 11
    """
    ...


@overload
def asarray(
    a: List[
        List[
            Union[
                scipy.sparse.dia.dia_matrix,
                scipy.sparse.csr.csr_matrix,
                scipy.sparse.csc.csc_matrix,
                None,
            ]
        ]
    ],
    dtype: Literal["object"],
):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: List[Union[numpy.float64, float]]):
    """
    usage.matplotlib: 2
    usage.scipy: 6
    usage.sklearn: 3
    """
    ...


@overload
def asarray(a: List[Union[float, numpy.float64]]):
    """
    usage.matplotlib: 4
    usage.scipy: 8
    """
    ...


@overload
def asarray(a: List[Union[int, float, numpy.float64]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: List[Union[float, numpy.float64, int]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: List[Union[int, numpy.float64]]):
    """
    usage.scipy: 4
    """
    ...


@overload
def asarray(a: List[Union[float, int, numpy.float64]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: List[numpy.ndarray], dtype: numpy.dtype):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: list, dtype: Type[complex]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: List[complex]):
    """
    usage.scipy: 17
    """
    ...


@overload
def asarray(a: Tuple[int, int, int, int, int, int]):
    """
    usage.dask: 1
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: Tuple[float, float, float, float, int]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: Tuple[complex, complex, complex, int]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: Tuple[complex, complex, complex, complex]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: List[int], dtype: Type[numpy.float64], order: Literal["C"]):
    """
    usage.scipy: 5
    usage.sklearn: 7
    """
    ...


@overload
def asarray(a: list, dtype: Type[numpy.float64], order: Literal["C"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: List[List[int]], dtype: Type[numpy.float64], order: Literal["C"]):
    """
    usage.scipy: 1
    usage.sklearn: 10
    """
    ...


@overload
def asarray(a: int, dtype: Type[numpy.float64], order: Literal["C"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(
    a: Tuple[float, float, float, float, int, float, int],
    dtype: Type[numpy.float64],
    order: Literal["C"],
):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(
    a: Tuple[int, int, int, int, int], dtype: Type[numpy.float64], order: Literal["C"]
):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(
    a: List[Union[int, float]], dtype: Type[numpy.float64], order: Literal["C"]
):
    """
    usage.scipy: 1
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Tuple[int], dtype: Type[numpy.int64]):
    """
    usage.scipy: 2
    """
    ...


@overload
def asarray(a: Tuple[int, int], dtype: Type[numpy.int64]):
    """
    usage.scipy: 2
    """
    ...


@overload
def asarray(a: List[Union[float, None]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: List[decimal.Decimal]):
    """
    usage.scipy: 4
    """
    ...


@overload
def asarray(a: List[numpy.complex128]):
    """
    usage.scipy: 12
    """
    ...


@overload
def asarray(a: List[Union[float, complex]]):
    """
    usage.scipy: 3
    """
    ...


@overload
def asarray(a: List[Union[complex, float, int]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: Tuple[int, int, int], dtype: Type[numpy.int64]):
    """
    usage.scipy: 2
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: Literal["f"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: Literal["F"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: Tuple[Tuple[int]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: List[List[numpy.float64]]):
    """
    usage.matplotlib: 1
    usage.scipy: 1
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: Tuple[Tuple[complex]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: numpy.complex128, dtype: numpy.dtype):
    """
    usage.scipy: 2
    """
    ...


@overload
def asarray(a: List[List[Union[complex, int, float]]]):
    """
    usage.scipy: 5
    """
    ...


@overload
def asarray(a: numpy.bool_, dtype: numpy.dtype):
    """
    usage.scipy: 2
    """
    ...


@overload
def asarray(a: numpy.int8, dtype: numpy.dtype):
    """
    usage.scipy: 2
    """
    ...


@overload
def asarray(a: complex, dtype: numpy.dtype):
    """
    usage.scipy: 12
    """
    ...


@overload
def asarray(a: numpy.uint8, dtype: numpy.dtype):
    """
    usage.scipy: 2
    """
    ...


@overload
def asarray(a: numpy.int16, dtype: numpy.dtype):
    """
    usage.scipy: 2
    """
    ...


@overload
def asarray(a: numpy.uint16, dtype: numpy.dtype):
    """
    usage.scipy: 2
    """
    ...


@overload
def asarray(a: numpy.int32, dtype: numpy.dtype):
    """
    usage.scipy: 2
    """
    ...


@overload
def asarray(a: numpy.uint32, dtype: numpy.dtype):
    """
    usage.scipy: 2
    """
    ...


@overload
def asarray(a: numpy.uint64, dtype: numpy.dtype):
    """
    usage.scipy: 2
    """
    ...


@overload
def asarray(a: numpy.longlong, dtype: numpy.dtype):
    """
    usage.scipy: 2
    """
    ...


@overload
def asarray(a: numpy.ulonglong, dtype: numpy.dtype):
    """
    usage.scipy: 2
    """
    ...


@overload
def asarray(a: numpy.float32, dtype: numpy.dtype):
    """
    usage.scipy: 2
    """
    ...


@overload
def asarray(a: numpy.float128, dtype: numpy.dtype):
    """
    usage.scipy: 2
    """
    ...


@overload
def asarray(a: numpy.complex64, dtype: numpy.dtype):
    """
    usage.scipy: 2
    """
    ...


@overload
def asarray(a: numpy.complex256, dtype: numpy.dtype):
    """
    usage.scipy: 2
    """
    ...


@overload
def asarray(a: range, dtype: numpy.dtype):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: numpy.matrix, dtype: numpy.dtype):
    """
    usage.scipy: 2
    """
    ...


@overload
def asarray(a: List[List[int]], dtype: numpy.dtype):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: List[List[scipy.sparse.coo.coo_matrix]], dtype: Literal["object"]):
    """
    usage.scipy: 3
    """
    ...


@overload
def asarray(a: List[List[scipy.sparse.csc.csc_matrix]], dtype: Literal["object"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(
    a: List[List[Union[scipy.sparse.coo.coo_matrix, None]]], dtype: Literal["object"]
):
    """
    usage.scipy: 3
    """
    ...


@overload
def asarray(
    a: List[List[Union[None, scipy.sparse.coo.coo_matrix]]], dtype: Literal["object"]
):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: List[List[None]], dtype: Literal["object"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: List[List[Union[float, complex, int]]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: List[List[float]], order: Literal["c"]):
    """
    usage.scipy: 2
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: None, order: Literal["c"]):
    """
    usage.scipy: 10
    """
    ...


@overload
def asarray(a: Tuple[List[float], List[float]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: List[int], dtype: None, order: Literal["c"]):
    """
    usage.scipy: 4
    """
    ...


@overload
def asarray(a: List[bool], dtype: None, order: Literal["c"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: List[int], dtype: Type[numpy.float64], order: Literal["c"]):
    """
    usage.scipy: 3
    """
    ...


@overload
def asarray(a: List[int], dtype: Type[numpy.int8]):
    """
    usage.scipy: 1
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: List[int], dtype: Type[numpy.int16]):
    """
    usage.scipy: 2
    """
    ...


@overload
def asarray(a: List[int], dtype: Type[numpy.int64]):
    """
    usage.scipy: 3
    usage.sklearn: 7
    """
    ...


@overload
def asarray(a: List[int], dtype: Type[numpy.uint8]):
    """
    usage.matplotlib: 4
    usage.scipy: 2
    """
    ...


@overload
def asarray(a: List[int], dtype: Type[numpy.uint16]):
    """
    usage.scipy: 2
    """
    ...


@overload
def asarray(a: List[int], dtype: Type[numpy.uint32]):
    """
    usage.scipy: 2
    """
    ...


@overload
def asarray(a: List[int], dtype: Type[numpy.uint64]):
    """
    usage.scipy: 2
    """
    ...


@overload
def asarray(a: List[int], dtype: Type[numpy.float32]):
    """
    usage.matplotlib: 2
    usage.scipy: 1
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: List[int], dtype: Type[numpy.complex64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: List[int], dtype: Type[numpy.complex128]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: List[int], dtype: Type[numpy.float16]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: List[int], dtype: Type[numpy.float128]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: int, dtype: None, order: Literal["c"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: List[List[int]], dtype: None, order: Literal["c"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: List[Tuple[int, int]], dtype: Type[numpy.float64], order: Literal["c"]):
    """
    usage.scipy: 4
    """
    ...


@overload
def asarray(a: Tuple[int, int, float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: List[Tuple[numpy.int64, numpy.int64]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: List[Tuple[numpy.int64, numpy.int64]], dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: List[List[Union[int, float]]], dtype: Type[float]):
    """
    usage.matplotlib: 3
    usage.scipy: 1
    """
    ...


@overload
def asarray(
    a: Tuple[
        numpy.int64,
        numpy.int64,
        numpy.int64,
        numpy.int64,
        numpy.int64,
        numpy.int64,
        numpy.int64,
        numpy.int64,
        numpy.int64,
        numpy.int64,
    ]
):
    """
    usage.scipy: 3
    """
    ...


@overload
def asarray(a: List[Tuple[int, int, float]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: List[Tuple[Union[int, float], Union[int, float]]], dtype: Type[float]):
    """
    usage.scipy: 2
    """
    ...


@overload
def asarray(a: List[Tuple[Union[int, float], Union[float, numpy.float64]]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: List[Tuple[int, float, float]]):
    """
    usage.scipy: 5
    """
    ...


@overload
def asarray(a: List[Tuple[int, int, int]]):
    """
    usage.scipy: 4
    """
    ...


@overload
def asarray(a: List[Tuple[Union[float, int], float]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: List[Tuple[float, Union[float, int]]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: List[Tuple[float, float]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(
    a: List[
        Tuple[
            Union[int, float, numpy.float64], Union[int, numpy.float64, float, complex]
        ]
    ]
):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: Tuple[numpy.ndarray, numpy.ndarray]):
    """
    usage.matplotlib: 2
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray]):
    """
    usage.scipy: 1
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Union[int, numpy.float64, float]]):
    """
    usage.scipy: 2
    """
    ...


@overload
def asarray(a: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: list, dtype: Type[float]):
    """
    usage.matplotlib: 2
    usage.scipy: 3
    """
    ...


@overload
def asarray(a: scipy.stats.mstats_basic.KendalltauResult):
    """
    usage.scipy: 11
    """
    ...


@overload
def asarray(a: scipy.stats._stats_mstats_common.LinregressResult):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: scipy.stats.mstats_basic.LinregressResult):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: Tuple[numpy.ma.core.MaskedArray, numpy.ma.core.MaskedArray]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: scipy.stats.stats.SkewtestResult):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: scipy.stats.mstats_basic.SkewtestResult):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: scipy.stats.stats.NormaltestResult):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: scipy.stats.mstats_basic.NormaltestResult):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: scipy.stats.stats.KstestResult):
    """
    usage.scipy: 8
    """
    ...


@overload
def asarray(a: List[List[List[int]]], dtype: Type[numpy.int64]):
    """
    usage.scipy: 2
    """
    ...


@overload
def asarray(a: List[List[int]], dtype: Type[numpy.int64]):
    """
    usage.scipy: 2
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Tuple[float, float, float, float], dtype: Type[float]):
    """
    usage.matplotlib: 1
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: Literal["test"], dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: List[Literal["showers", "rain"]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: List[Tuple[int, Union[int, float], bool, float]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(
    a: Tuple[
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
    ]
):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(a: Tuple[int, int, int, int, int, float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray(
    a: Tuple[float, float, float, float, float, float, float, float, float, float]
):
    """
    usage.scipy: 2
    """
    ...


@overload
def asarray(a: List[List[float]], dtype: Type[float]):
    """
    usage.matplotlib: 4
    """
    ...


@overload
def asarray(a: List[numpy.uint8], dtype: Type[numpy.uint8]):
    """
    usage.matplotlib: 9
    """
    ...


@overload
def asarray(a: List[Tuple[float, float]], dtype: Type[float]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def asarray(a: Tuple[float, float], dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: Tuple[int, float], dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: List[List[numpy.float64]], dtype: Type[float]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def asarray(a: Tuple[float], dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(
    a: Tuple[Tuple[numpy.float64, numpy.float64], Tuple[numpy.float64, numpy.float64]]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: List[numpy.ndarray], dtype: Type[float]):
    """
    usage.matplotlib: 6
    """
    ...


@overload
def asarray(a: List[Tuple[numpy.float64, numpy.float64]], dtype: Type[float]):
    """
    usage.matplotlib: 8
    """
    ...


@overload
def asarray(a: List[Tuple[numpy.float64, numpy.float64]]):
    """
    usage.matplotlib: 3
    """
    ...


@overload
def asarray(
    a: List[Union[Tuple[numpy.float64, numpy.float64], numpy.ndarray]],
    dtype: Type[float],
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(
    a: List[Tuple[numpy.float64, Union[float, numpy.float64]]], dtype: Type[float]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(
    a: List[Tuple[numpy.float64, Union[numpy.float64, float]]], dtype: Type[float]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(
    a: List[Tuple[Union[float, numpy.float64], Union[float, numpy.float64]]],
    dtype: Type[float],
):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def asarray(a: List[Tuple[Union[float, numpy.float64], float]], dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(
    a: List[Tuple[Union[numpy.float64, float], Union[float, numpy.float64]]],
    dtype: Type[float],
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: List[Union[List[numpy.float64], numpy.ndarray]], dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: matplotlib.transforms.Bbox):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: Tuple[numpy.float64, numpy.float64, numpy.float64, int]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def asarray(a: numpy.ma.core.MaskedArray, dtype: Type[float]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def asarray(a: Tuple[Tuple[float, float], Tuple[float, float]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: List[Tuple[int, int]], dtype: Type[float]):
    """
    usage.matplotlib: 4
    """
    ...


@overload
def asarray(a: List[decimal.Decimal], dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: Tuple[float]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def asarray(a: Tuple[bool], dtype: Type[bool]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(
    a: Tuple[Tuple[numpy.float64, numpy.float64], Tuple[numpy.float64, numpy.float64]],
    dtype: Type[float],
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(
    a: Tuple[Tuple[numpy.int64, numpy.float64], Tuple[numpy.int64, numpy.float64]],
    dtype: Type[float],
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(
    a: Tuple[Tuple[numpy.int64, numpy.float64], Tuple[numpy.int64, numpy.float64]]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: List[numpy.float64], dtype: Type[float]):
    """
    usage.matplotlib: 8
    """
    ...


@overload
def asarray(
    a: Tuple[Tuple[numpy.float64, int], Tuple[numpy.float64, numpy.float64]],
    dtype: Type[float],
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(
    a: Tuple[Tuple[numpy.int64, numpy.int64], Tuple[numpy.int64, numpy.float64]],
    dtype: Type[float],
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: List[numpy.bool_]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: Tuple[numpy.int64], dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: List[Tuple[float, int]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(
    a: Tuple[Tuple[int, float], Tuple[int, float], Tuple[int, float], Tuple[int, float]]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: List[List[numpy.int64]]):
    """
    usage.matplotlib: 1
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: numpy.ma.core.MaskedArray, dtype: Type[bool]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: Tuple[Tuple[numpy.int64, numpy.int64], Tuple[numpy.int64, numpy.int64]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(
    a: Tuple[Tuple[numpy.float64, numpy.int64], Tuple[numpy.float64, numpy.int64]]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: List[numpy.int64], dtype: Type[float]):
    """
    usage.matplotlib: 5
    """
    ...


@overload
def asarray(a: List[Literal["2018-01-01T00:00:00"]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: List[Tuple[Union[numpy.float64, numpy.ndarray], int]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: List[List[Literal["2017-01-01T00:00:00", "2017-01-02T00:00:00"]]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(
    a: List[
        Literal["2019-03-01T00:00:00", "2019-02-01T00:00:00", "2019-01-01T00:00:00"]
    ]
):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def asarray(a: List[List[str]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: List[Tuple[numpy.float64, numpy.float64, numpy.float64, numpy.float64]]):
    """
    usage.matplotlib: 3
    """
    ...


@overload
def asarray(
    a: Tuple[Tuple[numpy.float64, numpy.int64], Tuple[numpy.float64, numpy.int64]],
    dtype: Type[float],
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(
    a: Tuple[Tuple[numpy.int64, numpy.int64], Tuple[numpy.int64, numpy.int64]],
    dtype: Type[float],
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: List[Union[numpy.float64, float]], dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(
    a: Tuple[Tuple[numpy.int64, int], Tuple[numpy.int64, int]], dtype: Type[float]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: Tuple[Tuple[int, int], Tuple[int, int]], dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: List[Literal["2013-09-28T12:00:00", "2013-09-28T11:00:00"]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(
    a: Tuple[Tuple[numpy.float64, int], Tuple[numpy.float64, int]], dtype: Type[float]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: List[Tuple[numpy.int64, numpy.float64]], dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: List[Tuple[numpy.float64, numpy.int64]], dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(
    a: Tuple[Tuple[int, int], Tuple[int, int], Tuple[int, int], Tuple[int, int]],
    dtype: Type[float],
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(
    a: Tuple[Tuple[numpy.int64, numpy.int64], Tuple[numpy.float64, numpy.int64]],
    dtype: Type[float],
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: Tuple[numpy.float64, numpy.float64, numpy.float64]):
    """
    usage.dask: 2
    usage.matplotlib: 3
    """
    ...


@overload
def asarray(a: List[range]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def asarray(a: List[Tuple[int, int]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: Tuple[Tuple[int, int], Tuple[int, int]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: List[int], dtype: Literal["float"]):
    """
    usage.matplotlib: 8
    """
    ...


@overload
def asarray(a: List[Union[int, float]], dtype: Literal["float"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: List[list]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: list, dtype: Type[bool]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: List[Tuple[numpy.float64, float]], dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: List[Tuple[numpy.int64, float]], dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: List[Union[numpy.float64, numpy.int64]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: List[numpy.float128]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: List[numpy.ma.core.MaskedArray]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: List[Literal["2017-01-01T01:01:01", "2017-01-01T00:01:01"]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(
    a: List[
        List[
            Literal[
                "2017-01-01T01:01:01",
                "2017-01-01T00:01:01",
                "2017-01-01T03:01:01",
                "2017-01-01T02:01:01",
            ]
        ]
    ]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: List[Literal["2009-01-21T00:00:00", "2009-01-20T00:00:00"]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(
    a: Tuple[
        Tuple[int, numpy.float64],
        Tuple[int, numpy.float64],
        Tuple[int, numpy.float64],
        Tuple[int, numpy.float64],
    ]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: List[Literal["2010-01-21T00:00:00", "2000-01-20T00:00:00"]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: List[Tuple[numpy.float64, int]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: List[Literal["2009-01-20T00:00:00"]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: List[Literal["2000-01-20T00:00:00"]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(
    a: Tuple[Literal["2001-01-01T00:00:00+00:00"], Literal["2001-01-01T00:00:01+00:00"]]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(
    a: List[
        Literal[
            "2018-09-30T10:15:00+00:00",
            "2018-09-30T09:45:00+00:00",
            "2018-09-30T09:15:00+00:00",
            "2018-09-30T08:45:00+00:00",
            "2018-09-30T08:15:00+00:00",
        ]
    ]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(
    a: List[
        Literal[
            "1990-01-01T00:20:00+00:00",
            "1990-01-01T00:15:00+00:00",
            "1990-01-01T00:10:00+00:00",
            "1990-01-01T00:05:00+00:00",
            "1990-01-01T00:00:00+00:00",
        ]
    ]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(
    a: Tuple[
        Literal["1990-01-01T00:00:00+00:00"],
        Literal["1990-01-01T00:00:00.001500+00:00"],
    ]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(
    a: List[
        Literal[
            "1997-01-01T00:20:00+00:00",
            "1997-01-01T00:15:00+00:00",
            "1997-01-01T00:10:00+00:00",
            "1997-01-01T00:05:00+00:00",
            "1997-01-01T00:00:00+00:00",
        ]
    ]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(
    a: Tuple[
        Literal["1997-01-01T00:00:00+00:00"],
        Literal["1997-01-01T00:00:00.001500+00:00"],
    ]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(
    a: Tuple[Literal["1997-01-01T00:00:00+00:00"], Literal["1997-01-01T00:00:02+00:00"]]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(
    a: List[
        Literal[
            "1997-01-01T00:20:00-08:00",
            "1997-01-01T00:15:00-08:00",
            "1997-01-01T00:10:00-08:00",
            "1997-01-01T00:05:00-08:00",
            "1997-01-01T00:00:00-08:00",
        ]
    ]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: List[matplotlib.axes._subplots.AxesSubplot]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def asarray(a: List[List[Union[int, numpy.float64]]], dtype: Type[float]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def asarray(a: List[Union[Tuple[int, int], List[int]]], dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: Tuple[Tuple[int, int], Tuple[float, float]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: List[List[Union[float, int]]], dtype: Type[float]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def asarray(a: Tuple[Tuple[float, int], Tuple[float, int]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: List[numpy.uint16]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: List[numpy.ma.core.MaskedConstant]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: List[Tuple[Union[int, float], Union[float, int]]], dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(
    a: List[Union[numpy.ndarray, List[Union[int, numpy.float64]]]], dtype: Type[float]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(
    a: List[Tuple[Union[float, int], Union[numpy.float64, int]]], dtype: Type[float]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: matplotlib.ft2font.FT2Image):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: Tuple[List[int], List[int], List[int]], dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: Tuple[numpy.uint8, numpy.uint8, numpy.uint8], dtype: Type[numpy.uint8]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: List[Tuple[float, int]], dtype: Type[float]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def asarray(a: List[Tuple[int, Union[float, int]]], dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(
    a: Tuple[
        numpy.uint8,
        numpy.uint8,
        numpy.uint8,
        numpy.uint8,
        numpy.uint8,
        numpy.uint8,
        numpy.uint8,
        numpy.uint8,
        numpy.uint8,
        numpy.uint8,
    ],
    dtype: Type[numpy.uint8],
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: List[List[Union[numpy.float64, int]]], dtype: Type[float]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def asarray(a: List[Tuple[Union[float, int], int]], dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: Tuple[int, float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(
    a: List[
        Literal[
            "2018-11-05T00:00:00+00:00",
            "2018-11-04T00:00:00+00:00",
            "2018-11-03T00:00:00+00:00",
        ]
    ]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: List[Literal["aardvark", "hi"]], dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: list, dtype: Type[numpy.float64]):
    """
    usage.matplotlib: 2
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Union[float, int]], dtype: Type[numpy.float64]):
    """
    usage.matplotlib: 2
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[float], dtype: Type[numpy.int32]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: Tuple[int, float, int, float], dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: Tuple[float, int, float, int], dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: numpy.float64, dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(
    a: Tuple[Tuple[int, int], Tuple[int, int], Tuple[int, int], Tuple[int, int]]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: List[Union[numpy.float64, int]], dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(
    a: List[Tuple[Union[numpy.float64, int], Union[numpy.float64, int]]],
    dtype: Type[float],
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def asarray(a: pandas.core.arrays.numpy_.PandasArray):
    """
    usage.dask: 1
    """
    ...


@overload
def asarray(a: Tuple[int], dtype: Type[int]):
    """
    usage.dask: 1
    """
    ...


@overload
def asarray(a: Tuple[int, int], dtype: Type[int]):
    """
    usage.dask: 1
    """
    ...


@overload
def asarray(a: Tuple[int, int, int], dtype: Type[int]):
    """
    usage.dask: 1
    """
    ...


@overload
def asarray(a: numpy.dtype, dtype: numpy.ndarray):
    """
    usage.dask: 1
    """
    ...


@overload
def asarray(a: Tuple[None, None, None, None]):
    """
    usage.dask: 2
    """
    ...


@overload
def asarray(a: Tuple[Literal["a"], Literal["e"], Literal["i"], Literal["j"]]):
    """
    usage.dask: 2
    """
    ...


@overload
def asarray(a: pandas.core.arrays.string_.StringArray):
    """
    usage.dask: 1
    """
    ...


@overload
def asarray(a: pandas.core.arrays.boolean.BooleanArray):
    """
    usage.dask: 1
    """
    ...


@overload
def asarray(a: pandas.core.arrays.integer.IntegerArray):
    """
    usage.dask: 1
    """
    ...


@overload
def asarray(
    a: Tuple[
        pandas._libs.tslibs.timestamps.Timestamp,
        pandas._libs.tslibs.timestamps.Timestamp,
        pandas._libs.tslibs.timestamps.Timestamp,
        pandas._libs.tslibs.timestamps.Timestamp,
    ]
):
    """
    usage.dask: 2
    """
    ...


@overload
def asarray(a: Tuple[None, None]):
    """
    usage.dask: 2
    """
    ...


@overload
def asarray(a: Tuple[None, None, None]):
    """
    usage.dask: 2
    """
    ...


@overload
def asarray(
    a: Tuple[numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64]
):
    """
    usage.dask: 2
    """
    ...


@overload
def asarray(a: Tuple[None, None, None, None, None]):
    """
    usage.dask: 2
    """
    ...


@overload
def asarray(
    a: Tuple[
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
    ]
):
    """
    usage.dask: 2
    """
    ...


@overload
def asarray(a: Tuple[None, None, None, None, None, None]):
    """
    usage.dask: 2
    """
    ...


@overload
def asarray(a: Tuple[numpy.float64, float, numpy.float64]):
    """
    usage.dask: 1
    """
    ...


@overload
def asarray(a: Tuple[numpy.float64, float, float, float, numpy.float64]):
    """
    usage.dask: 1
    """
    ...


@overload
def asarray(a: Tuple[numpy.float64, float, float, float, float, numpy.float64]):
    """
    usage.dask: 1
    """
    ...


@overload
def asarray(
    a: Tuple[
        pandas._libs.tslibs.timestamps.Timestamp,
        pandas._libs.tslibs.timestamps.Timestamp,
    ]
):
    """
    usage.dask: 2
    """
    ...


@overload
def asarray(
    a: Tuple[
        pandas._libs.tslibs.timestamps.Timestamp,
        pandas._libs.tslibs.timestamps.Timestamp,
        pandas._libs.tslibs.timestamps.Timestamp,
    ]
):
    """
    usage.dask: 2
    """
    ...


@overload
def asarray(
    a: Tuple[
        pandas._libs.tslibs.timestamps.Timestamp,
        pandas._libs.tslibs.timestamps.Timestamp,
        pandas._libs.tslibs.timestamps.Timestamp,
        pandas._libs.tslibs.timestamps.Timestamp,
        pandas._libs.tslibs.timestamps.Timestamp,
    ]
):
    """
    usage.dask: 2
    """
    ...


@overload
def asarray(
    a: Tuple[
        pandas._libs.tslibs.timestamps.Timestamp,
        pandas._libs.tslibs.timestamps.Timestamp,
        pandas._libs.tslibs.timestamps.Timestamp,
        pandas._libs.tslibs.timestamps.Timestamp,
        pandas._libs.tslibs.timestamps.Timestamp,
        pandas._libs.tslibs.timestamps.Timestamp,
    ]
):
    """
    usage.dask: 2
    """
    ...


@overload
def asarray(a: Tuple[int, int, int, int, int, int, int, int, int, int]):
    """
    usage.dask: 2
    """
    ...


@overload
def asarray(
    a: Tuple[
        pandas._libs.tslibs.timestamps.Timestamp,
        pandas._libs.tslibs.timestamps.Timestamp,
        pandas._libs.tslibs.timestamps.Timestamp,
        pandas._libs.tslibs.timestamps.Timestamp,
        pandas._libs.tslibs.timestamps.Timestamp,
        pandas._libs.tslibs.timestamps.Timestamp,
        pandas._libs.tslibs.timestamps.Timestamp,
    ]
):
    """
    usage.dask: 2
    """
    ...


@overload
def asarray(a: pandas.tests.extension.decimal.array.DecimalArray):
    """
    usage.dask: 1
    """
    ...


@overload
def asarray(a: Tuple[numpy.datetime64, numpy.datetime64]):
    """
    usage.dask: 2
    """
    ...


@overload
def asarray(a: pandas.core.arrays.sparse.array.SparseArray):
    """
    usage.dask: 1
    """
    ...


@overload
def asarray(a: Tuple[None, None, None, None, None, None, None, None, None, None]):
    """
    usage.dask: 2
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: Type[float], order: None):
    """
    usage.sklearn: 7
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: None, order: None):
    """
    usage.sklearn: 22
    """
    ...


@overload
def asarray(a: List[List[int]], dtype: None, order: None):
    """
    usage.sklearn: 22
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: Type[numpy.float64], order: None):
    """
    usage.sklearn: 9
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: None, order: Literal["C"]):
    """
    usage.sklearn: 3
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: numpy.dtype, order: Literal["C"]):
    """
    usage.sklearn: 5
    """
    ...


@overload
def asarray(a: List[int], dtype: None, order: None):
    """
    usage.sklearn: 10
    """
    ...


@overload
def asarray(a: List[List[float]], dtype: None, order: None):
    """
    usage.sklearn: 19
    """
    ...


@overload
def asarray(a: List[float], dtype: Type[numpy.float64], order: Literal["C"]):
    """
    usage.sklearn: 3
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: Type[numpy.float32], order: Literal["C"]):
    """
    usage.sklearn: 11
    """
    ...


@overload
def asarray(a: List[int], dtype: numpy.dtype, order: Literal["C"]):
    """
    usage.sklearn: 4
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: Type[numpy.float32], order: None):
    """
    usage.sklearn: 7
    """
    ...


@overload
def asarray(a: List[List[float]], dtype: Type[numpy.float64], order: Literal["C"]):
    """
    usage.sklearn: 7
    """
    ...


@overload
def asarray(a: List[Literal["0.2", "1.4", "3.5", "5.1"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["0"], dtype: Type[int]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.2", "1.4", "3.0", "4.9"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.2", "1.3", "3.2", "4.7"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.2", "1.5", "3.1", "4.6"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.2", "1.4", "3.6", "5.0"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.4", "1.7", "3.9", "5.4"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.3", "1.4", "3.4", "4.6"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.2", "1.5", "3.4", "5.0"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.2", "1.4", "2.9", "4.4"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.1", "1.5", "3.1", "4.9"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.2", "1.5", "3.7", "5.4"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.2", "1.6", "3.4", "4.8"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.1", "1.4", "3.0", "4.8"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.1", "1.1", "3.0", "4.3"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.2", "1.2", "4.0", "5.8"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.4", "1.5", "4.4", "5.7"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.4", "1.3", "3.9", "5.4"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.3", "1.4", "3.5", "5.1"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.3", "1.7", "3.8", "5.7"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.3", "1.5", "3.8", "5.1"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.2", "1.7", "3.4", "5.4"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.4", "1.5", "3.7", "5.1"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.2", "1.0", "3.6", "4.6"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.5", "1.7", "3.3", "5.1"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.2", "1.9", "3.4", "4.8"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.2", "1.6", "3.0", "5.0"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.4", "1.6", "3.4", "5.0"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.2", "1.5", "3.5", "5.2"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.2", "1.4", "3.4", "5.2"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.2", "1.6", "3.2", "4.7"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.2", "1.6", "3.1", "4.8"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.4", "1.5", "3.4", "5.4"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.1", "1.5", "4.1", "5.2"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.2", "1.4", "4.2", "5.5"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.2", "1.5", "3.1", "4.9"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.2", "1.2", "3.2", "5.0"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.2", "1.3", "3.5", "5.5"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.1", "1.4", "3.6", "4.9"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.2", "1.3", "3.0", "4.4"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.2", "1.5", "3.4", "5.1"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.3", "1.3", "3.5", "5.0"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.3", "1.3", "2.3", "4.5"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.2", "1.3", "3.2", "4.4"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.6", "1.6", "3.5", "5.0"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.4", "1.9", "3.8", "5.1"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.3", "1.4", "3.0", "4.8"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.2", "1.6", "3.8", "5.1"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.2", "1.4", "3.2", "4.6"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.2", "1.5", "3.7", "5.3"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0.2", "1.4", "3.3", "5.0"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.4", "4.7", "3.2", "7.0"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["1"], dtype: Type[int]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.5", "4.5", "3.2", "6.4"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.5", "4.9", "3.1", "6.9"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.3", "4.0", "2.3", "5.5"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.5", "4.6", "2.8", "6.5"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.3", "4.5", "2.8", "5.7"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.6", "4.7", "3.3", "6.3"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.0", "3.3", "2.4", "4.9"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.3", "4.6", "2.9", "6.6"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.4", "3.9", "2.7", "5.2"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.0", "3.5", "2.0", "5.0"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.5", "4.2", "3.0", "5.9"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.0", "4.0", "2.2", "6.0"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.4", "4.7", "2.9", "6.1"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.3", "3.6", "2.9", "5.6"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.4", "4.4", "3.1", "6.7"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.5", "4.5", "3.0", "5.6"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.0", "4.1", "2.7", "5.8"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.5", "4.5", "2.2", "6.2"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.1", "3.9", "2.5", "5.6"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.8", "4.8", "3.2", "5.9"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.3", "4.0", "2.8", "6.1"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.5", "4.9", "2.5", "6.3"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.2", "4.7", "2.8", "6.1"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.3", "4.3", "2.9", "6.4"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.4", "4.4", "3.0", "6.6"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.4", "4.8", "2.8", "6.8"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.7", "5.0", "3.0", "6.7"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.5", "4.5", "2.9", "6.0"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.0", "3.5", "2.6", "5.7"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.1", "3.8", "2.4", "5.5"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.0", "3.7", "2.4", "5.5"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.2", "3.9", "2.7", "5.8"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.6", "5.1", "2.7", "6.0"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.5", "4.5", "3.0", "5.4"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.6", "4.5", "3.4", "6.0"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.5", "4.7", "3.1", "6.7"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.3", "4.4", "2.3", "6.3"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.3", "4.1", "3.0", "5.6"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.3", "4.0", "2.5", "5.5"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.2", "4.4", "2.6", "5.5"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.4", "4.6", "3.0", "6.1"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.2", "4.0", "2.6", "5.8"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.0", "3.3", "2.3", "5.0"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.3", "4.2", "2.7", "5.6"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.2", "4.2", "3.0", "5.7"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.3", "4.2", "2.9", "5.7"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.3", "4.3", "2.9", "6.2"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.1", "3.0", "2.5", "5.1"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.3", "4.1", "2.8", "5.7"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["2.5", "6.0", "3.3", "6.3"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["2"], dtype: Type[int]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.9", "5.1", "2.7", "5.8"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["2.1", "5.9", "3.0", "7.1"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.8", "5.6", "2.9", "6.3"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["2.2", "5.8", "3.0", "6.5"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["2.1", "6.6", "3.0", "7.6"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.7", "4.5", "2.5", "4.9"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.8", "6.3", "2.9", "7.3"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.8", "5.8", "2.5", "6.7"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["2.5", "6.1", "3.6", "7.2"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["2.0", "5.1", "3.2", "6.5"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.9", "5.3", "2.7", "6.4"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["2.1", "5.5", "3.0", "6.8"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["2.0", "5.0", "2.5", "5.7"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["2.4", "5.1", "2.8", "5.8"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["2.3", "5.3", "3.2", "6.4"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.8", "5.5", "3.0", "6.5"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["2.2", "6.7", "3.8", "7.7"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["2.3", "6.9", "2.6", "7.7"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.5", "5.0", "2.2", "6.0"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["2.3", "5.7", "3.2", "6.9"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["2.0", "4.9", "2.8", "5.6"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["2.0", "6.7", "2.8", "7.7"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.8", "4.9", "2.7", "6.3"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["2.1", "5.7", "3.3", "6.7"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.8", "6.0", "3.2", "7.2"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.8", "4.8", "2.8", "6.2"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.8", "4.9", "3.0", "6.1"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["2.1", "5.6", "2.8", "6.4"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.6", "5.8", "3.0", "7.2"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.9", "6.1", "2.8", "7.4"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["2.0", "6.4", "3.8", "7.9"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["2.2", "5.6", "2.8", "6.4"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.5", "5.1", "2.8", "6.3"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.4", "5.6", "2.6", "6.1"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["2.3", "6.1", "3.0", "7.7"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["2.4", "5.6", "3.4", "6.3"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.8", "5.5", "3.1", "6.4"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.8", "4.8", "3.0", "6.0"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["2.1", "5.4", "3.1", "6.9"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["2.4", "5.6", "3.1", "6.7"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["2.3", "5.1", "3.1", "6.9"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["2.3", "5.9", "3.2", "6.8"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["2.5", "5.7", "3.3", "6.7"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["2.3", "5.2", "3.0", "6.7"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.9", "5.0", "2.5", "6.3"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["2.0", "5.2", "3.0", "6.5"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["2.3", "5.4", "3.4", "6.2"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1.8", "5.1", "3.0", "5.9"]], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[float], dtype: numpy.dtype, order: Literal["C"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[numpy.ndarray], dtype: None, order: None):
    """
    usage.sklearn: 7
    """
    ...


@overload
def asarray(a: List[List[int]], dtype: Type[float], order: None):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(
    a: List[List[Union[int, float, Literal["a", "b"]]]],
    dtype: Type[object],
    order: None,
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: pandas.core.frame.DataFrame, dtype: None, order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[List[int]], dtype: Type[object], order: None):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: pandas.core.series.Series, dtype: None, order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[float], dtype: None, order: None):
    """
    usage.sklearn: 6
    """
    ...


@overload
def asarray(
    a: Tuple[
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
    ]
):
    """
    usage.sklearn: 5
    """
    ...


@overload
def asarray(a: List[str], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1253
    """
    ...


@overload
def asarray(a: Literal["24"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["21.6"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["34.7"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["33.4"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["36.2"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["28.7"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["22.9"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["27.1"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["16.5"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["18.9"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["15"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["21.7"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["20.4"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["18.2"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["19.9"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["23.1"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["17.5"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["20.2"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["13.6"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["19.6"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["15.2"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["14.5"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["15.6"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["13.9"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["16.6"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["14.8"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["18.4"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["21"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["12.7"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["13.2"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["13.1"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["13.5"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["20"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["24.7"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["30.8"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["34.9"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["26.6"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["25.3"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["21.2"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["19.3"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["14.4"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["19.4"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["19.7"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["20.5"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["25"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["23.4"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["35.4"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["31.6"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["23.3"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["18.7"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["16"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["22.2"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["33"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["23.5"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["22"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["17.4"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["20.9"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["24.2"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["22.8"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["24.1"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["21.4"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["20.8"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["20.3"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["28"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["23.9"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["24.8"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["22.5"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["23.6"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["22.6"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["20.6"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["28.4"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["38.7"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["43.8"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["33.2"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["27.5"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["26.5"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["18.6"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["20.1"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["19.5"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["19.8"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["18.8"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["18.5"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["18.3"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["19.2"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["17.3"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["15.7"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["16.2"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["18"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["14.3"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["23"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["18.1"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["17.1"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["13.3"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["17.8"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["14"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["13.4"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["11.8"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["13.8"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["14.6"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["15.4"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["21.5"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["15.3"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["17"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["41.3"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["24.3"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["27"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["50"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["22.7"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["23.8"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["22.3"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["19.1"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["29.4"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["23.2"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["24.6"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["29.9"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["37.2"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["39.8"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["37.9"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["32.5"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["26.4"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["29.6"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["32"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["29.8"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["37"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["30.5"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["36.4"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["31.1"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["29.1"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["33.3"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["30.3"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["34.6"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["32.9"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["42.3"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["48.5"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["24.4"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["22.4"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["28.1"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["23.7"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["26.7"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["30.1"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["44.8"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["37.6"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["46.7"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["31.5"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["31.7"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["41.7"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["48.3"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["29"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["25.1"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["17.6"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["24.5"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["26.2"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["42.8"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["21.9"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["44"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["36"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["33.8"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["43.1"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["48.8"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["31"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["36.5"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["30.7"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["43.5"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["20.7"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["21.1"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["25.2"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["35.2"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["32.4"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["33.1"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["35.1"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["45.4"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["46"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["32.2"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["28.5"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["37.3"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["27.9"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["28.6"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["36.1"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["28.2"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["16.1"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["22.1"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["19"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["32.7"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["31.2"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["17.2"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["16.8"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["10.2"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["10.4"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["10.9"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["11.3"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["12.3"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["8.8"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["7.2"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["10.5"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["7.4"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["11.5"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["15.1"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["9.7"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["12.5"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["8.5"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["5"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["6.3"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["5.6"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["12.1"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["8.3"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["11.9"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["17.9"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["16.3"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["7"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["7.5"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["8.4"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["16.7"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["14.2"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["11.7"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["11"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["9.5"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["14.1"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["9.6"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["8.7"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["12.8"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["10.8"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["14.9"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["12.6"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["13"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["16.4"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["17.7"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["12"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["21.8"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Literal["8.1"], dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(
    a: List[Literal["Iris-virginica", "Iris-versicolor", "Iris-setosa"]],
    dtype: Literal["O"],
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[str], dtype: Literal["O"]):
    """
    usage.sklearn: 4
    """
    ...


@overload
def asarray(a: List[Literal["G", "H", "C"]], dtype: Literal["O"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["SHEET", "COIL"]], dtype: Literal["O"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["-1", "1"]], dtype: Literal["O"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal[">50K", "<=50K"]], dtype: Literal["O"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["TRUE", "FALSE"]], dtype: Literal["O"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1", "0"]], dtype: Literal["O"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["Ts65Dn", "Control"]], dtype: Literal["O"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["nowin", "won"]], dtype: Literal["O"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Union[float, int]], dtype: None, order: None):
    """
    usage.sklearn: 3
    """
    ...


@overload
def asarray(a: List[List[Union[int, float]]], dtype: None, order: None):
    """
    usage.sklearn: 9
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: None, order: Literal["F"]):
    """
    usage.sklearn: 3
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: Literal["float64"], order: Literal["C"]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: numpy.memmap, dtype: None, order: None):
    """
    usage.sklearn: 3
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: Type[numpy.float64], order: Literal["F"]):
    """
    usage.sklearn: 8
    """
    ...


@overload
def asarray(a: List[List[int]], dtype: Type[numpy.float64], order: None):
    """
    usage.sklearn: 12
    """
    ...


@overload
def asarray(a: List[List[float]], dtype: Type[numpy.float64], order: None):
    """
    usage.sklearn: 10
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: numpy.dtype, order: None):
    """
    usage.sklearn: 8
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: Type[numpy.uint32]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[bool], dtype: Type[numpy.uint8]):
    """
    usage.sklearn: 4
    """
    ...


@overload
def asarray(a: List[importlib._bootstrap.MonotonicConstraint], dtype: Type[numpy.int8]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(
    a: sklearn.ensemble._hist_gradient_boosting.histogram._memoryviewslice,
    dtype: numpy.dtype,
):
    """
    usage.sklearn: 3
    """
    ...


@overload
def asarray(a: Tuple[numpy.ndarray], dtype: Type[numpy.int32]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Tuple[numpy.ndarray]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: List[Literal["A", "C", "B"]], dtype: None, order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[List[int]], dtype: Type[numpy.float32], order: None):
    """
    usage.sklearn: 14
    """
    ...


@overload
def asarray(
    a: List[List[Literal["blue", "red", "green", "purple", "yellow"]]],
    dtype: None,
    order: None,
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: Type[numpy.float32], order: Literal["F"]):
    """
    usage.sklearn: 5
    """
    ...


@overload
def asarray(a: List[str], dtype: None, order: None):
    """
    usage.sklearn: 3
    """
    ...


@overload
def asarray(a: List[List[int]], dtype: Type[numpy.float32], order: Literal["C"]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: List[numpy.ndarray], dtype: Type[numpy.float32], order: Literal["C"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1", "-1"]], dtype: None, order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(
    a: pandas.core.frame.DataFrame, dtype: Type[numpy.float64], order: Literal["C"]
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: pandas.core.series.Series, dtype: numpy.dtype, order: Literal["C"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: pandas.core.frame.DataFrame, dtype: Type[numpy.float32], order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(
    a: pandas.core.series.Series, dtype: Type[numpy.float64], order: Literal["C"]
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: sklearn.utils.estimator_checks._NotAnArray):
    """
    usage.sklearn: 12
    """
    ...


@overload
def asarray(
    a: sklearn.utils.estimator_checks._NotAnArray,
    dtype: Type[numpy.float64],
    order: Literal["C"],
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(
    a: sklearn.utils.estimator_checks._NotAnArray,
    dtype: numpy.dtype,
    order: Literal["C"],
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(
    a: sklearn.utils.estimator_checks._NotAnArray,
    dtype: Type[numpy.float32],
    order: None,
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: numpy.memmap):
    """
    usage.sklearn: 9
    """
    ...


@overload
def asarray(a: numpy.memmap, dtype: Type[numpy.float64], order: Literal["C"]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: numpy.memmap, dtype: Type[numpy.float32], order: None):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: sklearn.utils.estimator_checks._NotAnArray, dtype: None, order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[List[float]], dtype: Type[numpy.float32], order: None):
    """
    usage.sklearn: 4
    """
    ...


@overload
def asarray(a: List[Tuple[int, int]], dtype: None, order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Union[int, Literal["foo"]]]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: List[Union[int, Literal["bar", "foo"]]]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[List[str]], dtype: None, order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[List[Literal["I", "G", "E", "C", "A"]]], dtype: None, order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: numpy.ndarray, order: Literal["F"]):
    """
    usage.sklearn: 20
    """
    ...


@overload
def asarray(a: List[bool], dtype: None, order: None):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: List[numpy.int64], dtype: None, order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["B", "AB", "A"]], dtype: None, order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["C", "B", "A"]], dtype: None, order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[List[int]], dtype: Type[numpy.float64], order: Literal["F"]):
    """
    usage.sklearn: 4
    """
    ...


@overload
def asarray(
    a: List[List[Union[int, float]]], dtype: Type[numpy.float64], order: Literal["F"]
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[List[Union[int, float]]], dtype: Type[numpy.float64], order: None):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(
    a: pandas.core.frame.DataFrame, dtype: Type[numpy.float64], order: Literal["F"]
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: pandas.core.frame.DataFrame, dtype: Type[numpy.float64], order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(
    a: List[List[Union[Literal["b", "a", "e", "h", "g"], int]]],
    dtype: Type[numpy.float64],
    order: None,
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Union[int, float]], dtype: None, order: None):
    """
    usage.sklearn: 3
    """
    ...


@overload
def asarray(a: List[int], dtype: Type[numpy.int32], order: Literal["C"]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: List[numpy.ndarray], dtype: Type[object], order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(
    a: pandas.core.frame.DataFrame, dtype: Type[numpy.float32], order: Literal["C"]
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: numpy.memmap, dtype: Type[numpy.float64], order: Literal["F"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: numpy.memmap, dtype: None, order: Literal["F"]):
    """
    usage.sklearn: 3
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: Literal["float64"], order: Literal["F"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: Literal["float32"], order: Literal["F"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[List[Union[float, int]]], dtype: None, order: None):
    """
    usage.sklearn: 7
    """
    ...


@overload
def asarray(
    a: List[List[Union[float, int]]], dtype: Type[numpy.float64], order: Literal["F"]
):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(
    a: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray], dtype: Type[numpy.int32]
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["foo", "baz", "bar"]]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Tuple[float, float], dtype: numpy.dtype):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: List[Literal["three", "two", "one"]]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["one"]]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["three", "two"]]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["spam", "ham"]]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[List[bool]], dtype: None, order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1-a", "0-a"]], dtype: None, order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["1-a", "0-a"]]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: list, dtype: None, order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["a"]], dtype: None, order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["0", "1"]]):
    """
    usage.sklearn: 6
    """
    ...


@overload
def asarray(a: List[Literal["1", "2", "0"]]):
    """
    usage.sklearn: 3
    """
    ...


@overload
def asarray(a: List[Union[numpy.int64, int]]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["cat", "bird", "ant"]]):
    """
    usage.sklearn: 5
    """
    ...


@overload
def asarray(a: List[Literal["bird", "cat", "ant"]]):
    """
    usage.sklearn: 3
    """
    ...


@overload
def asarray(a: List[Tuple[int, ...]]):
    """
    usage.sklearn: 4
    """
    ...


@overload
def asarray(a: List[Literal["red", "white", "green", "blue"]]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["yes", "no"]]):
    """
    usage.sklearn: 3
    """
    ...


@overload
def asarray(a: List[Literal["ham", "spam"]]):
    """
    usage.sklearn: 3
    """
    ...


@overload
def asarray(a: sklearn.utils._mocking.MockDataFrame, dtype: None, order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: sklearn.utils._mocking.MockDataFrame):
    """
    usage.sklearn: 3
    """
    ...


@overload
def asarray(a: List[numpy.int64], dtype: Type[numpy.float64], order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["spam", "eggs"]]):
    """
    usage.sklearn: 4
    """
    ...


@overload
def asarray(a: List[int], dtype: Type[numpy.float64], order: None):
    """
    usage.sklearn: 6
    """
    ...


@overload
def asarray(a: List[float], dtype: Type[numpy.float64], order: None):
    """
    usage.sklearn: 4
    """
    ...


@overload
def asarray(a: List[Union[Tuple[Union[None, int], ...], int]]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: List[Tuple[None, ...]]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(
    a: Tuple[
        Tuple[numpy.float64, numpy.float64, numpy.float64, numpy.float64],
        Tuple[numpy.float64, numpy.float64, numpy.float64, numpy.float64],
        Tuple[numpy.float64, numpy.float64, numpy.float64, numpy.float64],
        Tuple[numpy.float64, numpy.float64, numpy.float64, numpy.float64],
        Tuple[numpy.float64, numpy.float64, numpy.float64, numpy.float64],
    ]
):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(
    a: Tuple[
        Tuple[numpy.float64, numpy.float64, numpy.float64, numpy.float64],
        Tuple[numpy.float64, numpy.float64, numpy.float64, numpy.float64],
    ]
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: Type[bool], order: None):
    """
    usage.sklearn: 3
    """
    ...


@overload
def asarray(a: List[Literal["c", "a", "b"]]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: List[Literal["c", "a", "b"]], dtype: None, order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["c", "b", "a"]], dtype: None, order: None):
    """
    usage.sklearn: 3
    """
    ...


@overload
def asarray(a: List[Literal["0", "1"]], dtype: None, order: None):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: range, dtype: None, order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["3", "2", "1"]], dtype: None, order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["3", "2", "1"]]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: Literal["wrong_type"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: Type[object]):
    """
    usage.sklearn: 3
    """
    ...


@overload
def asarray(a: sklearn.neighbors._kd_tree._memoryviewslice):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: sklearn.neighbors._ball_tree._memoryviewslice):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: List[list], dtype: None, order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[numpy.ndarray], dtype: Type[numpy.float64], order: Literal["C"]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: List[Literal["d"]], dtype: None, order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[List[Union[float, int]]], dtype: Type[numpy.float64], order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: int, dtype: Type[numpy.float64], order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[List[numpy.float64]], dtype: Type[numpy.float64], order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: numpy.ndarray, order: None):
    """
    usage.sklearn: 6
    """
    ...


@overload
def asarray(a: List[int], order: None):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: List[Union[int, float]], order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[List[int]], dtype: Type[numpy.int32]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: List[List[int]], dtype: Type[numpy.float32]):
    """
    usage.sklearn: 3
    """
    ...


@overload
def asarray(
    a: List[List[Union[Literal["girl", "Female", "boy", "Male"], int]]],
    dtype: None,
    order: None,
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(
    a: List[List[Union[Literal["girl", "Female", "boy", "Male"], int]]],
    dtype: Type[object],
    order: None,
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[List[Union[Literal["def", "abc"], int]]], dtype: None, order: None):
    """
    usage.sklearn: 3
    """
    ...


@overload
def asarray(
    a: List[List[Union[Literal["def", "abc"], int]]], dtype: Type[object], order: None
):
    """
    usage.sklearn: 3
    """
    ...


@overload
def asarray(a: List[List[Union[Literal["abc", "def"], int]]], dtype: None, order: None):
    """
    usage.sklearn: 4
    """
    ...


@overload
def asarray(
    a: List[List[Union[Literal["abc", "def"], int]]], dtype: Type[object], order: None
):
    """
    usage.sklearn: 4
    """
    ...


@overload
def asarray(
    a: List[List[Union[int, Literal["a", "c", "b"]]]], dtype: None, order: None
):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(
    a: List[List[Union[int, Literal["a", "c", "b"]]]], dtype: Type[object], order: None
):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: List[Union[Literal["b", "c"], int]], dtype: Type[object]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[List[Union[int, Literal["no", "yes"]]]], dtype: None, order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(
    a: List[List[Union[int, Literal["no", "yes"]]]], dtype: Type[object], order: None
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[List[Literal["a", "true", "false"]]], dtype: None, order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(
    a: List[List[Literal["a", "true", "false"]]], dtype: Type[object], order: None
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[List[Union[int, Literal["a", "b"]]]], dtype: None, order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(
    a: List[List[Union[int, Literal["a", "b"]]]], dtype: Type[object], order: None
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(
    a: List[List[Union[Literal["Male", "Female"], int]]], dtype: None, order: None
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(
    a: List[List[Union[Literal["Male", "Female"], int]]],
    dtype: Type[object],
    order: None,
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Union[int, Literal["def"]]], dtype: Type[object]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[List[Literal["Male", "Female"]]], dtype: None, order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[List[Literal["Male", "Female"]]], dtype: Type[object], order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Union[int, Literal["ghi"]]], dtype: Type[object]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Union[int, Literal["abc"]]], dtype: Type[object]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Union[Literal["a", "abc"], int]], dtype: Type[object]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Union[Literal["b", "a"], int]], dtype: Type[object]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[List[Union[Literal["a"], None]]], dtype: None, order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["pos"]]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: List[Literal["neg", "pos"]]):
    """
    usage.sklearn: 3
    """
    ...


@overload
def asarray(a: List[Literal["0", "ham", "eggs", "spam"]]):
    """
    usage.sklearn: 3
    """
    ...


@overload
def asarray(a: List[Literal["e", "d", "b"]]):
    """
    usage.sklearn: 3
    """
    ...


@overload
def asarray(a: Literal["apple"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(
    a: List[List[Union[int, numpy.float64]]],
    dtype: Type[numpy.float64],
    order: Literal["C"],
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: numpy.memmap, dtype: Type[numpy.float64], order: None):
    """
    usage.sklearn: 3
    """
    ...


@overload
def asarray(
    a: sklearn.utils.estimator_checks._NotAnArray,
    dtype: Type[numpy.float64],
    order: None,
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: numpy.memmap, dtype: Type[float], order: None):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: pandas.core.frame.DataFrame, order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: sklearn.utils.estimator_checks._NotAnArray, order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: numpy.memmap, order: None):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: List[List[float]], order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(
    a: sklearn.utils.estimator_checks._NotAnArray,
    dtype: Type[numpy.float64],
    order: Literal["F"],
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[List[float]], dtype: Type[numpy.float64], order: Literal["F"]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: pandas.core.frame.DataFrame, dtype: None, order: Literal["F"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(
    a: sklearn.utils.estimator_checks._NotAnArray,
    dtype: Type[numpy.float32],
    order: Literal["C"],
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: numpy.memmap, dtype: Type[numpy.float32], order: Literal["C"]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: numpy.memmap, dtype: None, order: Literal["C"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(
    a: sklearn.utils.estimator_checks._NotAnArray, dtype: Type[float], order: None
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[List[float]], dtype: Type[float], order: None):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: List[List[float]], dtype: None, order: Literal["F"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(
    a: sklearn.utils.estimator_checks._NotAnArray, dtype: None, order: Literal["F"]
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: pandas.core.series.Series, dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: sklearn.utils.estimator_checks._NotAnArray, dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["berlin", "amsterdam", "tokyo", "paris"]]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: int, dtype: None, order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["two", "one"]]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[int], dtype: numpy.dtype, order: None):
    """
    usage.sklearn: 5
    """
    ...


@overload
def asarray(a: List[Union[float, int]], dtype: numpy.dtype, order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[numpy.int64], dtype: numpy.dtype, order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["ham", "eggs", "spam"]]):
    """
    usage.sklearn: 3
    """
    ...


@overload
def asarray(a: List[List[numpy.float64]], dtype: None, order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[List[int]], order: None):
    """
    usage.sklearn: 7
    """
    ...


@overload
def asarray(
    a: List[Union[float, int]], dtype: Type[numpy.float64], order: Literal["C"]
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[numpy.ndarray], dtype: Type[numpy.float32], order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["def", "abc"]]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: List[set]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: List[frozenset]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: List[Dict[int, Literal["b", "a"]]]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: List[List[Literal["b", "a", "d", "c"]]]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: List[List[Literal["d", "a"]]]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: List[Union[int, Literal["1"]]]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: List[List[Union[Literal["1"], int]]]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: List[List[Union[Literal["2", "1"], int]]]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: List[Literal["spam", "egg"]]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[Literal["col_2", "col_1"]]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Tuple[bool, bool, bool]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: numpy.matrix, dtype: Type[numpy.float64], order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: Type[float], order: Literal["C"]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: Type[float], order: Literal["F"]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: Type[bool], order: Literal["C"]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: Type[bool], order: Literal["F"]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: Type[object], order: Literal["C"]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: Type[object], order: Literal["F"]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: numpy.ndarray, dtype: Type[object], order: None):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asarray(a: List[List[List[int]]], dtype: None, order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[List[Literal["12", "11", "xx", "13"]]], dtype: None, order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[List[bytes]], dtype: None, order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(
    a: sklearn.utils._mocking.MockDataFrame, dtype: Type[numpy.float32], order: None
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: List[List[complex]], dtype: None, order: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(
    a: Tuple[Tuple[complex, complex, complex], Tuple[complex, complex, complex]],
    dtype: None,
    order: None,
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asarray(a: Tuple[numpy.ndarray, numpy.ndarray], dtype: None, order: None):
    """
    usage.sklearn: 1
    """
    ...


def asarray(
    a: object,
    dtype: Union[numpy.dtype, numpy.ndarray, str, type, None] = ...,
    order: Union[Literal["F", "C", "c"], None] = ...,
):
    """
    usage.dask: 125
    usage.matplotlib: 675
    usage.pandas: 3941
    usage.scipy: 3858
    usage.skimage: 222
    usage.sklearn: 3078
    usage.xarray: 1078
    """
    ...


@overload
def asarray_chkfinite(a: numpy.ndarray):
    """
    usage.scipy: 86
    """
    ...


@overload
def asarray_chkfinite(a: numpy.matrix):
    """
    usage.scipy: 8
    """
    ...


@overload
def asarray_chkfinite(a: list):
    """
    usage.scipy: 2
    """
    ...


@overload
def asarray_chkfinite(a: numpy.ndarray, dtype: Type[numpy.float64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray_chkfinite(a: List[float]):
    """
    usage.scipy: 4
    """
    ...


@overload
def asarray_chkfinite(a: List[List[int]]):
    """
    usage.scipy: 16
    """
    ...


@overload
def asarray_chkfinite(a: List[List[Union[float, int]]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray_chkfinite(a: List[List[Union[int, float]]]):
    """
    usage.scipy: 3
    """
    ...


@overload
def asarray_chkfinite(a: List[Union[complex, int]]):
    """
    usage.scipy: 3
    """
    ...


@overload
def asarray_chkfinite(a: List[int]):
    """
    usage.scipy: 6
    """
    ...


@overload
def asarray_chkfinite(a: List[Union[int, complex]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray_chkfinite(a: List[List[Union[complex, int]]]):
    """
    usage.scipy: 7
    """
    ...


@overload
def asarray_chkfinite(a: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray_chkfinite(a: List[list]):
    """
    usage.scipy: 3
    """
    ...


@overload
def asarray_chkfinite(a: List[List[Union[int, complex]]]):
    """
    usage.scipy: 8
    """
    ...


@overload
def asarray_chkfinite(a: List[List[float]]):
    """
    usage.scipy: 9
    """
    ...


@overload
def asarray_chkfinite(a: scipy.linalg._testutils._FakeMatrix):
    """
    usage.scipy: 11
    """
    ...


@overload
def asarray_chkfinite(a: scipy.linalg._testutils._FakeMatrix2):
    """
    usage.scipy: 11
    """
    ...


@overload
def asarray_chkfinite(a: Literal["Some string for fail"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray_chkfinite(a: Tuple[List[List[int]]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray_chkfinite(a: List[List[complex]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray_chkfinite(a: numpy.ndarray, dtype: Type[float]):
    """
    usage.scipy: 6
    """
    ...


@overload
def asarray_chkfinite(a: List[float], dtype: Type[float]):
    """
    usage.scipy: 2
    """
    ...


@overload
def asarray_chkfinite(a: List[int], dtype: Type[float]):
    """
    usage.scipy: 3
    """
    ...


@overload
def asarray_chkfinite(a: list, dtype: Type[float]):
    """
    usage.scipy: 2
    """
    ...


@overload
def asarray_chkfinite(a: int, dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray_chkfinite(a: float):
    """
    usage.scipy: 1
    """
    ...


@overload
def asarray_chkfinite(a: scipy.optimize.nonlin.LowRankMatrix):
    """
    usage.scipy: 1
    """
    ...


def asarray_chkfinite(a: object, dtype: type = ...):
    """
    usage.scipy: 200
    """
    ...


@overload
def ascontiguousarray(a: numpy.ndarray):
    """
    usage.dask: 4
    usage.scipy: 34
    usage.skimage: 42
    usage.sklearn: 9
    """
    ...


@overload
def ascontiguousarray(a: numpy.ndarray, dtype: Type[numpy.uint8]):
    """
    usage.skimage: 6
    """
    ...


@overload
def ascontiguousarray(a: List[int], dtype: Type[numpy.float64]):
    """
    usage.scipy: 7
    usage.skimage: 6
    """
    ...


@overload
def ascontiguousarray(a: List[Union[float, int]], dtype: Type[numpy.float64]):
    """
    usage.scipy: 1
    usage.skimage: 4
    """
    ...


@overload
def ascontiguousarray(a: List[float], dtype: Type[numpy.float64]):
    """
    usage.skimage: 1
    """
    ...


@overload
def ascontiguousarray(a: numpy.ndarray, dtype: Type[numpy.float64]):
    """
    usage.scipy: 28
    usage.skimage: 1
    usage.sklearn: 14
    """
    ...


@overload
def ascontiguousarray(a: numpy.ndarray, dtype: Type[numpy.float32]):
    """
    usage.skimage: 3
    usage.sklearn: 2
    """
    ...


@overload
def ascontiguousarray(a: numpy.ndarray, dtype: numpy.dtype):
    """
    usage.skimage: 4
    usage.sklearn: 3
    """
    ...


@overload
def ascontiguousarray(a: numpy.ndarray, dtype: Type[numpy.int64]):
    """
    usage.skimage: 2
    """
    ...


@overload
def ascontiguousarray(a: numpy.ndarray, dtype: Type[numpy.int32]):
    """
    usage.skimage: 1
    """
    ...


@overload
def ascontiguousarray(a: List[int], dtype: numpy.dtype):
    """
    usage.skimage: 1
    """
    ...


@overload
def ascontiguousarray(a: numpy.ndarray, dtype: Type[bool]):
    """
    usage.skimage: 1
    """
    ...


@overload
def ascontiguousarray(a: numpy.ndarray, dtype: Literal["double"]):
    """
    usage.scipy: 5
    """
    ...


@overload
def ascontiguousarray(a: numpy.ndarray, dtype: Type[numpy.complex128]):
    """
    usage.scipy: 6
    """
    ...


@overload
def ascontiguousarray(a: List[Union[complex, int]], dtype: Type[numpy.float64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ascontiguousarray(a: List[List[int]], dtype: Type[numpy.float64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ascontiguousarray(a: List[Union[int, float]], dtype: Type[numpy.float64]):
    """
    usage.scipy: 2
    """
    ...


@overload
def ascontiguousarray(a: List[int]):
    """
    usage.scipy: 5
    """
    ...


@overload
def ascontiguousarray(a: List[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ascontiguousarray(a: List[Union[int, float]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ascontiguousarray(a: numpy.ndarray, dtype: Literal["intc"]):
    """
    usage.scipy: 2
    """
    ...


@overload
def ascontiguousarray(a: numpy.ndarray, dtype: Literal["float"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ascontiguousarray(a: numpy.ndarray, dtype: Literal["complex"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ascontiguousarray(a: numpy.ndarray, dtype: Type[complex]):
    """
    usage.scipy: 2
    """
    ...


@overload
def ascontiguousarray(a: numpy.ndarray, dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ascontiguousarray(a: numpy.ndarray, dtype: Literal["bool"]):
    """
    usage.scipy: 5
    """
    ...


@overload
def ascontiguousarray(a: List[List[int]]):
    """
    usage.sklearn: 1
    """
    ...


def ascontiguousarray(
    a: Union[List[Union[int, float, complex, List[int]]], numpy.ndarray],
    dtype: Union[
        numpy.dtype, type, Literal["bool", "double", "complex", "float", "intc"]
    ] = ...,
):
    """
    usage.dask: 4
    usage.scipy: 104
    usage.skimage: 72
    usage.sklearn: 29
    """
    ...


@overload
def asfarray(a: List[int]):
    """
    usage.scipy: 9
    """
    ...


@overload
def asfarray(a: numpy.ndarray):
    """
    usage.scipy: 8
    """
    ...


@overload
def asfarray(a: List[float]):
    """
    usage.scipy: 4
    """
    ...


@overload
def asfarray(a: List[Union[int, float]]):
    """
    usage.scipy: 4
    """
    ...


@overload
def asfarray(a: List[numpy.float64]):
    """
    usage.scipy: 4
    """
    ...


@overload
def asfarray(a: List[Union[numpy.float64, float]]):
    """
    usage.scipy: 3
    """
    ...


@overload
def asfarray(a: List[Union[int, numpy.float64, float]]):
    """
    usage.scipy: 2
    """
    ...


@overload
def asfarray(a: List[Union[int, numpy.float64]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asfarray(a: List[Union[numpy.float64, int]]):
    """
    usage.scipy: 2
    """
    ...


def asfarray(a: Union[List[Union[numpy.float64, float, int]], numpy.ndarray]):
    """
    usage.scipy: 37
    """
    ...


@overload
def asfortranarray(a: numpy.ndarray):
    """
    usage.dask: 2
    usage.scipy: 25
    usage.skimage: 1
    usage.sklearn: 16
    """
    ...


@overload
def asfortranarray(a: numpy.ndarray, dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asfortranarray(a: List[List[int]]):
    """
    usage.sklearn: 4
    """
    ...


@overload
def asfortranarray(a: numpy.ndarray, dtype: numpy.dtype):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asfortranarray(a: numpy.ndarray, dtype: Type[numpy.uint8]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def asfortranarray(a: List[List[int]], dtype: Type[numpy.uint8]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def asfortranarray(a: numpy.ndarray, dtype: Type[numpy.float32]):
    """
    usage.sklearn: 3
    """
    ...


def asfortranarray(
    a: Union[List[List[int]], numpy.ndarray],
    dtype: Union[numpy.dtype, type, Type[float]] = ...,
):
    """
    usage.dask: 2
    usage.scipy: 26
    usage.skimage: 1
    usage.sklearn: 28
    """
    ...


@overload
def asmatrix(data: numpy.ndarray):
    """
    usage.dask: 1
    usage.scipy: 15
    usage.sklearn: 2
    """
    ...


@overload
def asmatrix(data: List[List[int]]):
    """
    usage.scipy: 9
    """
    ...


@overload
def asmatrix(data: numpy.matrix):
    """
    usage.scipy: 15
    """
    ...


@overload
def asmatrix(data: List[List[Union[int, complex]]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asmatrix(data: List[int]):
    """
    usage.scipy: 1
    """
    ...


@overload
def asmatrix(data: List[List[Union[complex, int, float]]]):
    """
    usage.scipy: 1
    """
    ...


def asmatrix(
    data: Union[
        numpy.ndarray, numpy.matrix, List[Union[List[Union[int, complex, float]], int]]
    ]
):
    """
    usage.dask: 1
    usage.scipy: 42
    usage.sklearn: 2
    """
    ...


@overload
def atleast_1d(*arys: Literal["v", "t"]):
    """
    usage.dask: 3
    usage.matplotlib: 116
    usage.pandas: 4
    usage.scipy: 686
    usage.skimage: 11
    usage.sklearn: 70
    usage.xarray: 41
    """
    ...


@overload
def atleast_1d():
    """
    usage.dask: 1
    """
    ...


def atleast_1d(*arys: Literal["v", "t"]):
    """
    usage.dask: 4
    usage.matplotlib: 116
    usage.pandas: 4
    usage.scipy: 686
    usage.skimage: 11
    usage.sklearn: 70
    usage.xarray: 41
    """
    ...


@overload
def atleast_2d(*arys: Literal["v", "t"]):
    """
    usage.dask: 2
    usage.matplotlib: 12
    usage.pandas: 18
    usage.scipy: 239
    usage.skimage: 7
    usage.sklearn: 45
    usage.xarray: 2
    """
    ...


@overload
def atleast_2d():
    """
    usage.dask: 1
    """
    ...


def atleast_2d(*arys: Literal["v", "t"]):
    """
    usage.dask: 3
    usage.matplotlib: 12
    usage.pandas: 18
    usage.scipy: 239
    usage.skimage: 7
    usage.sklearn: 45
    usage.xarray: 2
    """
    ...


@overload
def atleast_3d(*arys: Literal["v", "t"]):
    """
    usage.dask: 2
    usage.matplotlib: 4
    usage.scipy: 1
    usage.skimage: 10
    usage.sklearn: 6
    """
    ...


@overload
def atleast_3d():
    """
    usage.dask: 1
    """
    ...


def atleast_3d(*arys: Literal["v", "t"]):
    """
    usage.dask: 3
    usage.matplotlib: 4
    usage.scipy: 1
    usage.skimage: 10
    usage.sklearn: 6
    """
    ...


@overload
def average(a: numpy.ndarray, weights: numpy.ndarray):
    """
    usage.scipy: 9
    usage.sklearn: 66
    """
    ...


@overload
def average(a: numpy.ndarray, weights: None):
    """
    usage.scipy: 6
    usage.sklearn: 27
    """
    ...


@overload
def average(a: numpy.ndarray, returned: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def average(a: numpy.ndarray, axis: int, weights: numpy.ndarray):
    """
    usage.dask: 1
    usage.sklearn: 43
    """
    ...


@overload
def average(a: numpy.ndarray, axis: int, weights: None):
    """
    usage.sklearn: 23
    """
    ...


@overload
def average(a: numpy.ndarray, axis: int, weights: List[int]):
    """
    usage.sklearn: 14
    """
    ...


@overload
def average(a: numpy.ndarray, axis: int, weights: List[float]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def average(a: numpy.ndarray, axis: int, weights: List[Union[float, int]]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def average(a: numpy.ndarray, axis: int, weights: List[numpy.int64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def average(a: List[int], weights: List[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def average(a: numpy.ndarray):
    """
    usage.sklearn: 2
    """
    ...


@overload
def average(a: numpy.ndarray, weights: List[int]):
    """
    usage.sklearn: 12
    """
    ...


@overload
def average(a: List[numpy.float64], weights: List[float]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def average(a: numpy.memmap, weights: numpy.ndarray):
    """
    usage.sklearn: 1
    """
    ...


def average(
    a: Union[List[Union[int, numpy.float64]], numpy.memmap, numpy.ndarray],
    axis: int = ...,
    weights: Union[
        List[Union[numpy.float64, numpy.int64, float, int]], None, numpy.ndarray
    ] = ...,
):
    """
    usage.dask: 2
    usage.scipy: 15
    usage.sklearn: 194
    """
    ...


@overload
def bincount(_0: numpy.ndarray, /, *, minlength: int):
    """
    usage.dask: 1
    usage.matplotlib: 2
    usage.scipy: 6
    usage.skimage: 6
    usage.sklearn: 18
    """
    ...


@overload
def bincount(_0: dask.array.core.Array, /, *, minlength: int):
    """
    usage.skimage: 1
    """
    ...


@overload
def bincount(_0: numpy.ndarray, /):
    """
    usage.dask: 2
    usage.scipy: 6
    usage.skimage: 5
    usage.sklearn: 40
    """
    ...


@overload
def bincount(_0: numpy.ndarray, /, *, minlength: int = ...):
    """
    usage.pandas: 10
    """
    ...


@overload
def bincount(_0: numpy.ndarray, /, *, weights: numpy.ndarray):
    """
    usage.matplotlib: 5
    usage.scipy: 23
    usage.sklearn: 4
    """
    ...


@overload
def bincount(_0: numpy.ndarray, _1: None, /):
    """
    usage.scipy: 3
    """
    ...


@overload
def bincount(_0: numpy.ndarray, _1: numpy.ndarray, /):
    """
    usage.scipy: 2
    usage.sklearn: 5
    """
    ...


@overload
def bincount(_0: List[int], /, *, minlength: int):
    """
    usage.matplotlib: 7
    """
    ...


@overload
def bincount(_0: list, /, *, minlength: int):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def bincount(_0: numpy.ndarray, /, *, minlength: int, weights: numpy.ndarray):
    """
    usage.dask: 1
    usage.matplotlib: 1
    usage.sklearn: 13
    """
    ...


@overload
def bincount(_0: list, /):
    """
    usage.dask: 1
    """
    ...


@overload
def bincount(_0: List[int], /, *, weights: List[int]):
    """
    usage.dask: 1
    """
    ...


@overload
def bincount(_0: numpy.ndarray, /, *, weights: None):
    """
    usage.sklearn: 4
    """
    ...


@overload
def bincount(_0: numpy.ndarray, /, *, weights: List[int]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def bincount(_0: numpy.ndarray, /, *, weights: List[float]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def bincount(_0: numpy.ndarray, /, *, weights: List[Union[float, int]]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def bincount(_0: numpy.ndarray, /, *, minlength: int, weights: None):
    """
    usage.sklearn: 3
    """
    ...


@overload
def bincount(_0: numpy.ndarray, _1: numpy.ndarray, /, *, minlength: int):
    """
    usage.sklearn: 2
    """
    ...


@overload
def bincount(_0: Tuple[None, ...], /, *, minlength: int):
    """
    usage.sklearn: 1
    """
    ...


@overload
def bincount(_0: Tuple[int], /, *, minlength: int):
    """
    usage.sklearn: 1
    """
    ...


@overload
def bincount(_0: Tuple[int, int], /, *, minlength: int):
    """
    usage.sklearn: 1
    """
    ...


@overload
def bincount(_0: Tuple[int, int, int], /, *, minlength: int):
    """
    usage.sklearn: 1
    """
    ...


def bincount(
    _0: Union[
        Tuple[Union[int, None], ...], numpy.ndarray, dask.array.core.Array, List[int]
    ],
    _1: Union[numpy.ndarray, None] = ...,
    /,
    *,
    minlength: int = ...,
    weights: Union[None, List[Union[int, float]], numpy.ndarray] = ...,
):
    """
    usage.dask: 6
    usage.matplotlib: 16
    usage.pandas: 10
    usage.scipy: 40
    usage.skimage: 12
    usage.sklearn: 97
    """
    ...


def blackman(M: int):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def block(arrays: List[List[numpy.ndarray]]):
    """
    usage.dask: 7
    usage.scipy: 4
    """
    ...


@overload
def block(arrays: List[numpy.ndarray]):
    """
    usage.dask: 5
    usage.scipy: 1
    """
    ...


@overload
def block(arrays: List[List[dask.array.core.Array]]):
    """
    usage.dask: 1
    """
    ...


@overload
def block(arrays: List[List[List[numpy.ndarray]]]):
    """
    usage.dask: 2
    """
    ...


@overload
def block(arrays: int):
    """
    usage.dask: 1
    """
    ...


@overload
def block(arrays: numpy.ndarray):
    """
    usage.dask: 1
    """
    ...


@overload
def block(arrays: List[dask.array.core.Array]):
    """
    usage.dask: 1
    """
    ...


def block(
    arrays: Union[
        numpy.ndarray,
        int,
        List[
            Union[
                numpy.ndarray,
                dask.array.core.Array,
                List[Union[List[numpy.ndarray], dask.array.core.Array, numpy.ndarray]],
            ]
        ],
    ]
):
    """
    usage.dask: 18
    usage.scipy: 5
    """
    ...


def bmat(obj: List[List[numpy.ndarray]]):
    """
    usage.scipy: 12
    """
    ...


@overload
def broadcast_arrays(*args: Literal["v", "t"]):
    """
    usage.dask: 9
    usage.matplotlib: 42
    usage.scipy: 286
    usage.xarray: 3
    """
    ...


@overload
def broadcast_arrays():
    """
    usage.dask: 1
    """
    ...


def broadcast_arrays(*args: Literal["v", "t"]):
    """
    usage.dask: 10
    usage.matplotlib: 42
    usage.scipy: 286
    usage.xarray: 3
    """
    ...


@overload
def broadcast_to(array: numpy.ndarray, shape: Tuple[int, int]):
    """
    usage.dask: 1
    usage.matplotlib: 1
    usage.scipy: 2
    usage.xarray: 7
    """
    ...


@overload
def broadcast_to(array: numpy.ndarray, shape: Tuple[int, int, int]):
    """
    usage.dask: 4
    usage.scipy: 3
    usage.xarray: 3
    """
    ...


@overload
def broadcast_to(array: numpy.ndarray, shape: Tuple[int]):
    """
    usage.dask: 2
    usage.matplotlib: 1
    usage.xarray: 7
    """
    ...


@overload
def broadcast_to(array: numpy.ndarray, shape: Tuple[int, int, int, int]):
    """
    usage.dask: 3
    usage.scipy: 2
    usage.xarray: 4
    """
    ...


@overload
def broadcast_to(array: numpy.ndarray, shape: Tuple[int, int, int, int, int]):
    """
    usage.dask: 2
    usage.xarray: 2
    """
    ...


@overload
def broadcast_to(array: float, shape: Tuple[int]):
    """
    usage.scipy: 2
    usage.xarray: 1
    """
    ...


@overload
def broadcast_to(array: sparse._coo.core.COO, shape: Tuple[int, int, int]):
    """
    usage.xarray: 1
    """
    ...


@overload
def broadcast_to(array: object, shape: Tuple[int, int]):
    """
    usage.xarray: 1
    """
    ...


@overload
def broadcast_to(array: object, shape: Tuple[int, int, int]):
    """
    usage.xarray: 1
    """
    ...


@overload
def broadcast_to(array: object, shape: Tuple[int, int, int, int, int]):
    """
    usage.xarray: 1
    """
    ...


@overload
def broadcast_to(array: float, shape: Tuple[None, ...]):
    """
    usage.xarray: 1
    """
    ...


@overload
def broadcast_to(array: object, shape: Tuple[int]):
    """
    usage.xarray: 1
    """
    ...


@overload
def broadcast_to(array: object, shape: Tuple[int, int, int, int]):
    """
    usage.xarray: 1
    """
    ...


@overload
def broadcast_to(
    array: Union[bool, numpy.datetime64, numpy.ndarray, numpy.timedelta64, int],
    shape: Tuple[int, ...],
):
    """
    usage.pandas: 14
    """
    ...


@overload
def broadcast_to(array: numpy.matrix, shape: Tuple[int, int]):
    """
    usage.scipy: 43
    """
    ...


@overload
def broadcast_to(array: int, shape: Tuple[int]):
    """
    usage.dask: 1
    usage.scipy: 2
    """
    ...


@overload
def broadcast_to(array: numpy.ndarray, shape: Tuple[numpy.int64]):
    """
    usage.scipy: 3
    """
    ...


@overload
def broadcast_to(array: numpy.ndarray, shape: Tuple[None, ...]):
    """
    usage.scipy: 1
    """
    ...


@overload
def broadcast_to(array: numpy.ndarray, shape: Tuple[numpy.int64, numpy.int64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def broadcast_to(array: bool, shape: int):
    """
    usage.matplotlib: 4
    """
    ...


@overload
def broadcast_to(array: Literal["0"], shape: int):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def broadcast_to(array: List[Literal["b", "a"]], shape: int):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def broadcast_to(array: numpy.ndarray, shape: int):
    """
    usage.matplotlib: 4
    """
    ...


@overload
def broadcast_to(array: int, shape: int):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def broadcast_to(array: Literal[""], shape: int):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def broadcast_to(array: List[int], shape: int):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def broadcast_to(array: List[Literal["First"]], shape: int):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def broadcast_to(array: float, shape: int):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def broadcast_to(array: List[float], shape: int):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def broadcast_to(array: Tuple[float, float], shape: int):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def broadcast_to(array: int, shape: Tuple[None, ...]):
    """
    usage.dask: 1
    """
    ...


@overload
def broadcast_to(array: int, shape: Tuple[int, int]):
    """
    usage.dask: 1
    """
    ...


@overload
def broadcast_to(array: int, shape: Tuple[int, int, int]):
    """
    usage.dask: 2
    """
    ...


@overload
def broadcast_to(array: int, shape: Tuple[int, int, int, int]):
    """
    usage.dask: 1
    """
    ...


@overload
def broadcast_to(array: int, shape: Tuple[int, int, int, int, int]):
    """
    usage.dask: 1
    """
    ...


@overload
def broadcast_to(
    array: numpy.ndarray, shape: Tuple[numpy.int64, numpy.int64, numpy.int64]
):
    """
    usage.dask: 1
    """
    ...


@overload
def broadcast_to(
    array: numpy.ndarray,
    shape: Tuple[numpy.int64, numpy.int64, numpy.int64, numpy.int64],
):
    """
    usage.dask: 1
    """
    ...


@overload
def broadcast_to(array: int, shape: List[int]):
    """
    usage.dask: 1
    """
    ...


@overload
def broadcast_to(array: numpy.float64, shape: Tuple[int, int]):
    """
    usage.dask: 1
    """
    ...


@overload
def broadcast_to(array: numpy.float64, shape: Tuple[int, int, int, int]):
    """
    usage.dask: 1
    """
    ...


def broadcast_to(
    array: object,
    shape: Union[List[int], Tuple[Union[None, int, numpy.int64], ...], int],
):
    """
    usage.dask: 24
    usage.matplotlib: 20
    usage.pandas: 14
    usage.scipy: 59
    usage.xarray: 31
    """
    ...


def busday_offset(
    _0: numpy.datetime64,
    _1: int,
    /,
    *,
    busdaycal: numpy.busdaycalendar,
    roll: Literal["backward", "forward"],
):
    """
    usage.pandas: 2
    """
    ...


@overload
def can_cast(_0: int, _1: numpy.dtype, /):
    """
    usage.skimage: 4
    """
    ...


@overload
def can_cast(_0: float, _1: numpy.dtype, /):
    """
    usage.skimage: 2
    """
    ...


@overload
def can_cast(_0: numpy.ndarray, _1: numpy.dtype, /):
    """
    usage.skimage: 1
    """
    ...


@overload
def can_cast(_0: numpy.dtype, _1: Type[bool], /, *, casting: Literal["safe"]):
    """
    usage.skimage: 2
    """
    ...


@overload
def can_cast(_0: object, _1: Union[Type[bool], numpy.dtype], /):
    """
    usage.pandas: 21
    """
    ...


@overload
def can_cast(_0: numpy.dtype, _1: Type[numpy.int32], /):
    """
    usage.scipy: 14
    """
    ...


@overload
def can_cast(_0: numpy.dtype, _1: numpy.dtype, /, *, casting: Literal["same_kind"]):
    """
    usage.scipy: 5
    """
    ...


@overload
def can_cast(_0: numpy.dtype, _1: Literal["intp"], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def can_cast(_0: numpy.dtype, _1: Type[numpy.bool_], /):
    """
    usage.scipy: 15
    """
    ...


@overload
def can_cast(_0: numpy.dtype, _1: Type[numpy.int8], /):
    """
    usage.scipy: 14
    """
    ...


@overload
def can_cast(_0: numpy.dtype, _1: Type[numpy.uint8], /):
    """
    usage.scipy: 13
    """
    ...


@overload
def can_cast(_0: numpy.dtype, _1: Type[numpy.int16], /):
    """
    usage.scipy: 12
    """
    ...


@overload
def can_cast(_0: numpy.dtype, _1: Type[numpy.uint16], /):
    """
    usage.scipy: 11
    """
    ...


@overload
def can_cast(_0: numpy.dtype, _1: Type[numpy.uint32], /):
    """
    usage.scipy: 9
    """
    ...


@overload
def can_cast(_0: numpy.dtype, _1: Type[numpy.int64], /):
    """
    usage.scipy: 19
    """
    ...


@overload
def can_cast(_0: numpy.dtype, _1: Type[numpy.uint64], /):
    """
    usage.scipy: 11
    """
    ...


@overload
def can_cast(_0: numpy.dtype, _1: Type[numpy.longlong], /):
    """
    usage.scipy: 6
    """
    ...


@overload
def can_cast(_0: numpy.dtype, _1: Type[numpy.ulonglong], /):
    """
    usage.scipy: 6
    """
    ...


@overload
def can_cast(_0: numpy.dtype, _1: Type[numpy.float32], /):
    """
    usage.scipy: 6
    """
    ...


@overload
def can_cast(_0: numpy.dtype, _1: Type[numpy.float64], /):
    """
    usage.scipy: 14
    """
    ...


@overload
def can_cast(_0: numpy.dtype, _1: Type[numpy.float128], /):
    """
    usage.scipy: 4
    """
    ...


@overload
def can_cast(_0: numpy.dtype, _1: Type[numpy.complex64], /):
    """
    usage.scipy: 3
    """
    ...


@overload
def can_cast(_0: numpy.dtype, _1: Type[numpy.complex128], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def can_cast(_0: int, _1: Type[numpy.int64], _2: Literal["safe"], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def can_cast(_0: float, _1: Type[numpy.int64], _2: Literal["safe"], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def can_cast(_0: numpy.dtype, _1: Type[numpy.complex256], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def can_cast(_0: Type[int], _1: Type[numpy.bool_], /, *, casting: Literal["same_kind"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def can_cast(
    _0: Type[float], _1: Type[numpy.bool_], /, *, casting: Literal["same_kind"]
):
    """
    usage.scipy: 1
    """
    ...


@overload
def can_cast(_0: Type[int], _1: Type[numpy.int64], /, *, casting: Literal["same_kind"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def can_cast(
    _0: Type[float], _1: Type[numpy.int64], /, *, casting: Literal["same_kind"]
):
    """
    usage.scipy: 1
    """
    ...


@overload
def can_cast(
    _0: Type[int], _1: Type[numpy.float64], /, *, casting: Literal["same_kind"]
):
    """
    usage.scipy: 2
    """
    ...


@overload
def can_cast(
    _0: Type[float], _1: Type[numpy.float64], /, *, casting: Literal["same_kind"]
):
    """
    usage.scipy: 2
    """
    ...


@overload
def can_cast(
    _0: Type[int], _1: Type[numpy.complex128], /, *, casting: Literal["same_kind"]
):
    """
    usage.scipy: 2
    """
    ...


@overload
def can_cast(
    _0: Type[float], _1: Type[numpy.complex128], /, *, casting: Literal["same_kind"]
):
    """
    usage.scipy: 2
    """
    ...


@overload
def can_cast(_0: Type[numpy.bool_], _1: Type[numpy.int64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def can_cast(_0: Type[numpy.int64], _1: Type[numpy.int64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def can_cast(_0: Type[numpy.float64], _1: Type[numpy.int64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def can_cast(_0: Type[numpy.complex128], _1: Type[numpy.int64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def can_cast(_0: numpy.dtype, _1: Type[float], _2: Literal["same_kind"], /):
    """
    usage.matplotlib: 20
    """
    ...


@overload
def can_cast(
    _0: Type[numpy.float128], _1: Type[numpy.float64], _2: Literal["equiv"], /
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def can_cast(_0: numpy.dtype, _1: numpy.dtype, /, *, casting: Literal["unsafe"]):
    """
    usage.dask: 21
    """
    ...


@overload
def can_cast(_0: numpy.ndarray, _1: numpy.dtype, /, *, casting: Literal["same_kind"]):
    """
    usage.dask: 1
    """
    ...


@overload
def can_cast(_0: numpy.dtype, _1: numpy.dtype, /, *, casting: Literal["safe"]):
    """
    usage.dask: 1
    """
    ...


def can_cast(
    _0: object,
    _1: Union[numpy.dtype, Literal["intp"], Type[bool], type],
    _2: Literal["equiv", "same_kind", "safe"] = ...,
    /,
    *,
    casting: Literal["unsafe", "safe", "same_kind"] = ...,
):
    """
    usage.dask: 23
    usage.matplotlib: 21
    usage.pandas: 21
    usage.scipy: 185
    usage.skimage: 9
    """
    ...


@overload
def choose(a: numpy.ndarray, choices: List[numpy.ndarray]):
    """
    usage.dask: 1
    usage.skimage: 1
    """
    ...


@overload
def choose(a: numpy.ndarray, choices: Tuple[int, numpy.ndarray]):
    """
    usage.dask: 1
    """
    ...


@overload
def choose(a: numpy.ndarray, choices: List[Union[numpy.ndarray, int]]):
    """
    usage.dask: 1
    """
    ...


@overload
def choose(a: numpy.ndarray, choices: Tuple[numpy.ndarray, numpy.ndarray]):
    """
    usage.dask: 1
    """
    ...


def choose(
    a: numpy.ndarray,
    choices: Union[
        Tuple[Union[int, numpy.ndarray], numpy.ndarray], List[Union[numpy.ndarray, int]]
    ],
):
    """
    usage.dask: 4
    usage.skimage: 1
    """
    ...


@overload
def clip(a: numpy.ndarray, a_min: int, a_max: int, out: numpy.ndarray):
    """
    usage.matplotlib: 6
    usage.skimage: 13
    usage.sklearn: 4
    """
    ...


@overload
def clip(a: numpy.ndarray, a_min: float, a_max: float):
    """
    usage.matplotlib: 2
    usage.scipy: 5
    usage.skimage: 8
    usage.sklearn: 4
    """
    ...


@overload
def clip(a: numpy.ndarray, a_min: int, a_max: int):
    """
    usage.dask: 5
    usage.matplotlib: 5
    usage.scipy: 8
    usage.skimage: 18
    usage.sklearn: 1
    """
    ...


@overload
def clip(a: numpy.float64, a_min: int, a_max: None):
    """
    usage.skimage: 1
    """
    ...


@overload
def clip(a: numpy.ndarray, a_min: None, a_max: int, out: numpy.ndarray):
    """
    usage.skimage: 1
    usage.sklearn: 1
    """
    ...


@overload
def clip(a: numpy.float64, a_min: int, a_max: int):
    """
    usage.scipy: 3
    usage.skimage: 2
    """
    ...


@overload
def clip(
    a: numpy.ndarray, a_min: numpy.float64, a_max: numpy.float64, out: numpy.ndarray
):
    """
    usage.matplotlib: 2
    usage.skimage: 1
    """
    ...


@overload
def clip(
    a: numpy.ndarray, a_min: numpy.float32, a_max: numpy.float32, out: numpy.ndarray
):
    """
    usage.skimage: 1
    """
    ...


@overload
def clip(a: numpy.ndarray, a_min: int, a_max: None):
    """
    usage.dask: 2
    usage.skimage: 1
    """
    ...


@overload
def clip(a: numpy.ndarray, a_min: float, a_max: float, out: numpy.ndarray):
    """
    usage.skimage: 2
    usage.sklearn: 3
    """
    ...


@overload
def clip(a: numpy.ndarray, a_min: int, a_max: None, out: numpy.ndarray):
    """
    usage.skimage: 1
    usage.sklearn: 13
    """
    ...


@overload
def clip(a: numpy.ndarray, a_min: numpy.float16, a_max: numpy.float16):
    """
    usage.skimage: 1
    """
    ...


@overload
def clip(a: numpy.ndarray, a_min: numpy.float32, a_max: numpy.float32):
    """
    usage.skimage: 1
    """
    ...


@overload
def clip(a: numpy.ndarray, a_min: numpy.float64, a_max: numpy.float64):
    """
    usage.skimage: 3
    usage.sklearn: 5
    """
    ...


@overload
def clip(a: numpy.ndarray, a_min: numpy.int16, a_max: numpy.int16):
    """
    usage.skimage: 1
    """
    ...


@overload
def clip(a: int, a_min: int, a_max: numpy.ndarray):
    """
    usage.skimage: 1
    """
    ...


@overload
def clip(a: numpy.ndarray, a_min: numpy.uint8, a_max: numpy.uint8):
    """
    usage.skimage: 1
    """
    ...


@overload
def clip(a: numpy.float64, a_min: numpy.float64, a_max: numpy.ndarray):
    """
    usage.skimage: 1
    """
    ...


@overload
def clip(a: pandas.core.series.Series, a_min: float, a_max: float):
    """
    usage.pandas: 1
    """
    ...


@overload
def clip(a: numpy.ndarray, a_min: numpy.ndarray, a_max: numpy.ndarray):
    """
    usage.matplotlib: 1
    usage.scipy: 7
    """
    ...


@overload
def clip(a: numpy.float64, a_min: float, a_max: float):
    """
    usage.matplotlib: 1
    usage.scipy: 6
    """
    ...


@overload
def clip(a: numpy.float64, a_min: numpy.float64, a_max: numpy.float64):
    """
    usage.scipy: 4
    usage.sklearn: 2
    """
    ...


@overload
def clip(a: numpy.ndarray, a_min: int, a_max: float, out: numpy.ndarray):
    """
    usage.scipy: 2
    """
    ...


@overload
def clip(a: numpy.float64, a_min: numpy.float64, a_max: float):
    """
    usage.scipy: 2
    """
    ...


@overload
def clip(a: float, a_min: int, a_max: int):
    """
    usage.matplotlib: 2
    usage.scipy: 1
    """
    ...


@overload
def clip(a: int, a_min: int, a_max: int):
    """
    usage.matplotlib: 3
    usage.sklearn: 2
    """
    ...


@overload
def clip(a: numpy.ndarray, a_min: numpy.float64, a_max: float):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def clip(a: numpy.ma.core.MaskedArray, a_min: int, a_max: int):
    """
    usage.matplotlib: 8
    """
    ...


@overload
def clip(a: numpy.ndarray, a_min: None, a_max: numpy.float64, out: numpy.ndarray):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def clip(
    a: numpy.ndarray, a_min: numpy.float128, a_max: numpy.float128, out: numpy.ndarray
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def clip(
    a: numpy.ndarray,
    a_min: numpy.ma.core.MaskedConstant,
    a_max: numpy.ma.core.MaskedConstant,
    out: numpy.ndarray,
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def clip(a: numpy.ndarray, a_min: None, a_max: int):
    """
    usage.dask: 2
    """
    ...


@overload
def clip(a: pandas.core.series.Series, a_min: int, a_max: int):
    """
    usage.dask: 5
    """
    ...


@overload
def clip(a: dask.dataframe.core.Series, a_min: int, a_max: int):
    """
    usage.dask: 2
    """
    ...


@overload
def clip(a: pandas.core.frame.DataFrame, a_min: float, a_max: float):
    """
    usage.dask: 5
    """
    ...


@overload
def clip(a: dask.dataframe.core.DataFrame, a_min: float, a_max: float):
    """
    usage.dask: 2
    """
    ...


@overload
def clip(a: numpy.float64, a_min: float, a_max: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def clip(a: numpy.ndarray, a_min: None, a_max: float, out: numpy.ndarray):
    """
    usage.sklearn: 1
    """
    ...


@overload
def clip(a: numpy.float64, a_min: numpy.float64, a_max: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def clip(a: numpy.ndarray, a_min: float, a_max: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def clip(a: numpy.ndarray, a_min: int, a_max: numpy.ndarray, out: numpy.ndarray):
    """
    usage.sklearn: 2
    """
    ...


@overload
def clip(a: numpy.float64, a_min: numpy.float32, a_max: numpy.float64):
    """
    usage.sklearn: 1
    """
    ...


@overload
def clip(a: numpy.ndarray, a_min: numpy.float32, a_max: numpy.float64):
    """
    usage.sklearn: 3
    """
    ...


@overload
def clip(a: numpy.int64, a_min: int, a_max: int):
    """
    usage.sklearn: 1
    """
    ...


@overload
def clip(a: numpy.ndarray, a_min: numpy.float64, a_max: None, out: numpy.ndarray):
    """
    usage.sklearn: 2
    """
    ...


@overload
def clip(a: numpy.ndarray, a_min: float, a_max: None, out: numpy.ndarray):
    """
    usage.sklearn: 1
    """
    ...


@overload
def clip(a: numpy.ndarray, a_min: numpy.int64, a_max: numpy.int64):
    """
    usage.sklearn: 1
    """
    ...


@overload
def clip(a: numpy.ndarray, a_min: int, a_max: numpy.float64, out: numpy.ndarray):
    """
    usage.sklearn: 1
    """
    ...


def clip(a: object, a_min: object, a_max: object, out: numpy.ndarray = ...):
    """
    usage.dask: 23
    usage.matplotlib: 34
    usage.pandas: 1
    usage.scipy: 38
    usage.skimage: 58
    usage.sklearn: 51
    """
    ...


@overload
def column_stack(tup: List[numpy.ndarray]):
    """
    usage.matplotlib: 17
    usage.sample-usage: 1
    usage.scipy: 28
    usage.skimage: 5
    usage.sklearn: 4
    """
    ...


@overload
def column_stack(tup: Tuple[numpy.ndarray, numpy.ndarray]):
    """
    usage.matplotlib: 16
    usage.scipy: 7
    usage.skimage: 4
    usage.sklearn: 1
    """
    ...


@overload
def column_stack(tup: List[Union[numpy.ndarray, List[int]]]):
    """
    usage.scipy: 2
    """
    ...


@overload
def column_stack(tup: List[Union[List[float], numpy.ndarray]]):
    """
    usage.scipy: 4
    """
    ...


@overload
def column_stack(tup: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray]):
    """
    usage.scipy: 2
    """
    ...


@overload
def column_stack(tup: List[List[Union[int, float]]]):
    """
    usage.matplotlib: 16
    """
    ...


@overload
def column_stack(tup: Tuple[List[float], numpy.ndarray]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def column_stack(tup: Tuple[numpy.ndarray, List[float]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def column_stack(tup: Tuple[List[float], List[float]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def column_stack(tup: List[List[Union[int, numpy.float64]]]):
    """
    usage.matplotlib: 7
    """
    ...


@overload
def column_stack(tup: List[numpy.ma.core.MaskedArray]):
    """
    usage.matplotlib: 4
    """
    ...


@overload
def column_stack(tup: List[List[numpy.float64]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def column_stack(tup: List[numpy.float64]):
    """
    usage.matplotlib: 1
    """
    ...


def column_stack(
    tup: Union[
        List[
            Union[
                List[Union[float, int, numpy.float64]],
                numpy.ndarray,
                numpy.ma.core.MaskedArray,
                numpy.float64,
            ]
        ],
        Tuple[Union[numpy.ndarray, List[float]], ...],
    ]
):
    """
    usage.matplotlib: 65
    usage.sample-usage: 1
    usage.scipy: 43
    usage.skimage: 9
    usage.sklearn: 5
    """
    ...


def common_type(*arrays: Literal["v", "t"]):
    """
    usage.scipy: 31
    """
    ...


@overload
def compress(condition: numpy.ndarray, a: List[Literal["X", "A"]]):
    """
    usage.pandas: 1
    """
    ...


@overload
def compress(condition: numpy.ndarray, a: numpy.ndarray):
    """
    usage.scipy: 7
    usage.sklearn: 7
    """
    ...


@overload
def compress(condition: numpy.ndarray, a: numpy.ndarray, axis: int):
    """
    usage.dask: 1
    usage.scipy: 4
    """
    ...


@overload
def compress(condition: numpy.ndarray, a: numpy.ndarray, axis: None):
    """
    usage.dask: 1
    """
    ...


@overload
def compress(condition: List[bool], a: numpy.ndarray, axis: None):
    """
    usage.dask: 1
    """
    ...


@overload
def compress(condition: List[bool], a: numpy.ndarray, axis: int):
    """
    usage.dask: 1
    """
    ...


def compress(
    condition: Union[numpy.ndarray, List[bool]],
    a: Union[numpy.ndarray, List[Literal["X", "A"]]],
    axis: Union[None, int] = ...,
):
    """
    usage.dask: 4
    usage.pandas: 1
    usage.scipy: 11
    usage.sklearn: 7
    """
    ...


@overload
def concatenate(
    _0: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray], /, *, axis: int
):
    """
    usage.scipy: 13
    usage.skimage: 3
    usage.sklearn: 2
    """
    ...


@overload
def concatenate(_0: Tuple[numpy.ndarray, numpy.ndarray], /, *, axis: int):
    """
    usage.sample-usage: 1
    usage.scipy: 26
    usage.skimage: 3
    usage.sklearn: 8
    usage.xarray: 1
    """
    ...


@overload
def concatenate(
    _0: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray],
    /,
    *,
    axis: int,
):
    """
    usage.skimage: 2
    """
    ...


@overload
def concatenate(_0: List[numpy.ndarray], /, *, axis: int):
    """
    usage.dask: 75
    usage.scipy: 63
    usage.skimage: 12
    usage.sklearn: 15
    usage.xarray: 33
    """
    ...


@overload
def concatenate(_0: Tuple[numpy.ndarray], /):
    """
    usage.skimage: 3
    usage.sklearn: 7
    """
    ...


@overload
def concatenate(_0: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray], /):
    """
    usage.scipy: 8
    usage.skimage: 4
    usage.sklearn: 3
    """
    ...


@overload
def concatenate(_0: Tuple[numpy.ndarray, List[int]], /):
    """
    usage.scipy: 1
    usage.skimage: 2
    """
    ...


@overload
def concatenate(_0: List[Union[numpy.ndarray, List[int]]], /):
    """
    usage.matplotlib: 1
    usage.skimage: 2
    usage.sklearn: 1
    """
    ...


@overload
def concatenate(_0: Tuple[numpy.ndarray, numpy.ndarray], /):
    """
    usage.matplotlib: 6
    usage.scipy: 126
    usage.skimage: 5
    usage.sklearn: 14
    """
    ...


@overload
def concatenate(_0: List[numpy.ndarray], /):
    """
    usage.dask: 17
    usage.matplotlib: 38
    usage.scipy: 96
    usage.skimage: 6
    usage.sklearn: 68
    usage.xarray: 3
    """
    ...


@overload
def concatenate(_0: List[List[int]], /):
    """
    usage.matplotlib: 4
    usage.scipy: 1
    usage.sklearn: 2
    usage.xarray: 16
    """
    ...


@overload
def concatenate(_0: List[List[Union[int, float]]], /):
    """
    usage.xarray: 1
    """
    ...


@overload
def concatenate(_0: List[Union[List[int], numpy.ndarray]], /):
    """
    usage.dask: 1
    usage.matplotlib: 2
    usage.xarray: 3
    """
    ...


@overload
def concatenate(_0: List[Union[List[float], numpy.ndarray]], /):
    """
    usage.matplotlib: 1
    usage.xarray: 1
    """
    ...


@overload
def concatenate(_0: List[List[cftime._cftime.DatetimeGregorian]], /):
    """
    usage.xarray: 1
    """
    ...


@overload
def concatenate(_0: List[xarray.core.dataarray.DataArray], /):
    """
    usage.xarray: 1
    """
    ...


@overload
def concatenate(_0: List[sparse._coo.core.COO], /, *, axis: int):
    """
    usage.xarray: 2
    """
    ...


@overload
def concatenate(_0: list, /, *, axis: int):
    """
    usage.dask: 5
    usage.xarray: 7
    """
    ...


@overload
def concatenate(_0: Union[tuple, list], /, *, axis: int = ...):
    """
    usage.pandas: 312
    """
    ...


@overload
def concatenate(_0: List[List[numpy.ndarray]], /):
    """
    usage.scipy: 4
    """
    ...


@overload
def concatenate(_0: Tuple[numpy.ndarray, Tuple[float, float]], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def concatenate(_0: Tuple[List[numpy.float64], numpy.ndarray, List[numpy.float64]], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def concatenate(_0: Tuple[List[numpy.int64], numpy.ndarray, List[numpy.int64]], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def concatenate(_0: Tuple[numpy.ndarray, List[numpy.float64]], /):
    """
    usage.matplotlib: 4
    usage.scipy: 1
    usage.sklearn: 1
    """
    ...


@overload
def concatenate(_0: Tuple[numpy.ndarray, Tuple[int]], /):
    """
    usage.matplotlib: 1
    usage.scipy: 1
    """
    ...


@overload
def concatenate(_0: numpy.ndarray, /, *, axis: int):
    """
    usage.scipy: 3
    """
    ...


@overload
def concatenate(_0: Tuple[numpy.ndarray, numpy.flatiter], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def concatenate(_0: Tuple[numpy.ndarray, numpy.ndarray], _1: int, /):
    """
    usage.matplotlib: 4
    usage.scipy: 3
    usage.sklearn: 1
    """
    ...


@overload
def concatenate(_0: Tuple[int, int, numpy.ndarray], /, *, axis: None):
    """
    usage.scipy: 1
    """
    ...


@overload
def concatenate(_0: Tuple[List[int], numpy.ndarray, List[int]], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def concatenate(_0: Tuple[numpy.ndarray, List[float]], /):
    """
    usage.scipy: 4
    """
    ...


@overload
def concatenate(_0: Tuple[List[complex], numpy.ndarray], /):
    """
    usage.scipy: 6
    """
    ...


@overload
def concatenate(_0: Tuple[List[int], numpy.ndarray], /):
    """
    usage.scipy: 3
    usage.sklearn: 1
    """
    ...


@overload
def concatenate(_0: Tuple[List[Union[complex, float]], numpy.ndarray], /):
    """
    usage.scipy: 3
    """
    ...


@overload
def concatenate(_0: Tuple[list, numpy.ndarray], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def concatenate(_0: Tuple[List[Union[float, complex]], numpy.ndarray], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def concatenate(_0: Tuple[numpy.ndarray, numpy.ndarray, List[int]], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def concatenate(_0: Tuple[List[int], List[int]], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def concatenate(
    _0: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray], /
):
    """
    usage.matplotlib: 1
    usage.scipy: 1
    """
    ...


@overload
def concatenate(_0: Tuple[numpy.ndarray, List[List[int]]], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def concatenate(_0: Tuple[List[bool], numpy.ndarray], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def concatenate(_0: List[Union[numpy.ma.core.MaskedArray, numpy.ndarray]], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def concatenate(_0: List[Union[List[numpy.float64], numpy.ndarray]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def concatenate(_0: List[Union[List[numpy.ndarray], numpy.ndarray]], /):
    """
    usage.matplotlib: 4
    """
    ...


@overload
def concatenate(_0: List[Union[List[numpy.uint8], numpy.ndarray]], /):
    """
    usage.matplotlib: 4
    """
    ...


@overload
def concatenate(_0: List[Union[numpy.ndarray, List[numpy.ndarray]]], /):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def concatenate(_0: List[Union[numpy.ndarray, List[numpy.uint8]]], /):
    """
    usage.matplotlib: 3
    """
    ...


@overload
def concatenate(
    _0: List[Union[List[Tuple[float, float]], numpy.ndarray]], /, *, axis: int
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def concatenate(
    _0: List[Union[List[Tuple[numpy.float64, numpy.float64]], numpy.ndarray]], /
):
    """
    usage.matplotlib: 3
    """
    ...


@overload
def concatenate(_0: List[List[Tuple[numpy.float64, numpy.float64]]], /):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def concatenate(_0: List[List[numpy.uint8]], /):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def concatenate(
    _0: List[Union[numpy.ndarray, List[Tuple[numpy.float64, numpy.float64]]]], /
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def concatenate(_0: List[list], /):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def concatenate(_0: List[List[numpy.int64]], /):
    """
    usage.matplotlib: 14
    """
    ...


@overload
def concatenate(_0: List[List[float]], /):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def concatenate(
    _0: Tuple[
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
    ],
    /,
    *,
    axis: int,
):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def concatenate(
    _0: Tuple[
        numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray
    ],
    /,
    *,
    axis: int,
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def concatenate(_0: List[List[numpy.float64]], /):
    """
    usage.matplotlib: 21
    """
    ...


@overload
def concatenate(_0: List[Union[List[numpy.int64], numpy.ndarray]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def concatenate(_0: List[List[Union[numpy.float64, numpy.int64]]], /):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def concatenate(_0: list, /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def concatenate(_0: Tuple[Tuple[float], numpy.ndarray], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def concatenate(_0: Tuple[numpy.ndarray, Tuple[float]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def concatenate(_0: Tuple[Tuple[int], numpy.ndarray], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def concatenate(_0: List[dask.array.core.Array], /):
    """
    usage.dask: 2
    """
    ...


@overload
def concatenate(_0: list, /):
    """
    usage.dask: 1
    """
    ...


@overload
def concatenate(_0: List[numpy.ndarray], _1: int, /):
    """
    usage.dask: 14
    """
    ...


@overload
def concatenate(_0: List[numpy.recarray], /, *, axis: int):
    """
    usage.dask: 1
    """
    ...


@overload
def concatenate(_0: List[pandas.core.series.Series], /, *, axis: int):
    """
    usage.dask: 1
    """
    ...


@overload
def concatenate(_0: Tuple[List[numpy.float64], numpy.ndarray], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def concatenate(
    _0: Tuple[
        numpy.ndarray, List[numpy.float64], List[numpy.float64], List[numpy.float64]
    ],
    /,
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def concatenate(
    _0: Tuple[
        numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray
    ],
    /,
):
    """
    usage.sklearn: 1
    """
    ...


def concatenate(
    _0: Union[tuple, list, numpy.ndarray],
    _1: int = ...,
    /,
    *,
    axis: Union[int, None] = ...,
):
    """
    usage.dask: 117
    usage.matplotlib: 134
    usage.pandas: 312
    usage.sample-usage: 1
    usage.scipy: 377
    usage.skimage: 42
    usage.sklearn: 126
    usage.xarray: 69
    """
    ...


@overload
def convolve(a: numpy.ndarray, v: List[float], mode: Literal["valid"]):
    """
    usage.skimage: 1
    """
    ...


@overload
def convolve(a: numpy.ndarray, v: numpy.ndarray):
    """
    usage.scipy: 43
    """
    ...


@overload
def convolve(a: numpy.ndarray, v: numpy.ndarray, mode: Literal["full"]):
    """
    usage.scipy: 204
    """
    ...


@overload
def convolve(a: numpy.ndarray, v: numpy.ndarray, mode: Literal["valid"]):
    """
    usage.scipy: 202
    """
    ...


@overload
def convolve(a: numpy.ndarray, v: numpy.ndarray, mode: Literal["same"]):
    """
    usage.matplotlib: 2
    usage.scipy: 202
    """
    ...


@overload
def convolve(
    a: List[Union[numpy.complex128, int]], v: List[Union[numpy.complex128, int]]
):
    """
    usage.scipy: 2
    """
    ...


@overload
def convolve(a: List[int], v: List[int]):
    """
    usage.scipy: 1
    """
    ...


def convolve(
    a: Union[numpy.ndarray, List[Union[int, numpy.complex128]]],
    v: Union[numpy.ndarray, List[Union[int, numpy.complex128, float]]],
    mode: Literal["same", "full", "valid"] = ...,
):
    """
    usage.matplotlib: 2
    usage.scipy: 654
    usage.skimage: 1
    """
    ...


@overload
def copy(a: numpy.ndarray):
    """
    usage.matplotlib: 7
    usage.pandas: 1
    usage.scipy: 50
    usage.skimage: 12
    usage.sklearn: 40
    """
    ...


@overload
def copy(a: numpy.float64):
    """
    usage.skimage: 1
    """
    ...


@overload
def copy(a: numpy.int64):
    """
    usage.scipy: 1
    """
    ...


@overload
def copy(a: List[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def copy(a: float):
    """
    usage.scipy: 1
    """
    ...


@overload
def copy(a: numpy.ndarray, order: Literal["C"]):
    """
    usage.sklearn: 1
    """
    ...


def copy(
    a: Union[numpy.ndarray, numpy.int64, float, numpy.float64, List[float]],
    order: Literal["C"] = ...,
):
    """
    usage.matplotlib: 7
    usage.pandas: 1
    usage.scipy: 53
    usage.skimage: 13
    usage.sklearn: 41
    """
    ...


@overload
def copyto(_0: numpy.ndarray, _1: int, /, *, where: numpy.ndarray):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def copyto(_0: numpy.ndarray, _1: numpy.ndarray, /, *, where: numpy.ndarray):
    """
    usage.matplotlib: 4
    """
    ...


def copyto(
    _0: numpy.ndarray, _1: Union[numpy.ndarray, int], /, *, where: numpy.ndarray
):
    """
    usage.matplotlib: 6
    """
    ...


@overload
def corrcoef(
    x: Union[numpy.ndarray, numpy.flatiter], y: Union[numpy.ndarray, numpy.flatiter]
):
    """
    usage.pandas: 12
    """
    ...


@overload
def corrcoef(x: numpy.ndarray, y: numpy.ndarray):
    """
    usage.dask: 3
    usage.scipy: 2
    usage.sklearn: 1
    """
    ...


@overload
def corrcoef(x: numpy.ndarray, rowvar: int):
    """
    usage.dask: 1
    usage.scipy: 1
    """
    ...


@overload
def corrcoef(x: numpy.ndarray):
    """
    usage.dask: 1
    usage.sklearn: 1
    """
    ...


@overload
def corrcoef(x: numpy.ndarray, y: List[numpy.ndarray]):
    """
    usage.sklearn: 1
    """
    ...


def corrcoef(
    x: Union[numpy.ndarray, numpy.flatiter],
    y: Union[List[numpy.ndarray], numpy.ndarray, numpy.flatiter] = ...,
    rowvar: int = ...,
):
    """
    usage.dask: 5
    usage.pandas: 12
    usage.scipy: 3
    usage.sklearn: 3
    """
    ...


@overload
def correlate(a: numpy.ndarray, v: numpy.ndarray, mode: Literal["full"]):
    """
    usage.matplotlib: 1
    usage.scipy: 1
    """
    ...


@overload
def correlate(a: numpy.ndarray, v: numpy.ndarray, mode: Literal["valid"]):
    """
    usage.scipy: 2
    """
    ...


@overload
def correlate(a: numpy.ndarray, v: numpy.ndarray, mode: Literal["same"]):
    """
    usage.scipy: 1
    """
    ...


def correlate(
    a: numpy.ndarray, v: numpy.ndarray, mode: Literal["full", "same", "valid"]
):
    """
    usage.matplotlib: 1
    usage.scipy: 4
    """
    ...


@overload
def count_nonzero(a: numpy.ndarray):
    """
    usage.dask: 4
    usage.scipy: 17
    usage.skimage: 9
    usage.sklearn: 12
    """
    ...


@overload
def count_nonzero(a: list):
    """
    usage.scipy: 1
    """
    ...


@overload
def count_nonzero(a: List[float]):
    """
    usage.scipy: 2
    """
    ...


@overload
def count_nonzero(a: numpy.ndarray, axis: int):
    """
    usage.dask: 2
    usage.scipy: 1
    usage.sklearn: 1
    """
    ...


@overload
def count_nonzero(a: numpy.ma.core.MaskedArray):
    """
    usage.scipy: 1
    """
    ...


@overload
def count_nonzero(a: List[bool]):
    """
    usage.dask: 1
    """
    ...


@overload
def count_nonzero(a: Literal["H"]):
    """
    usage.dask: 1
    """
    ...


@overload
def count_nonzero(a: Literal["e"]):
    """
    usage.dask: 1
    """
    ...


@overload
def count_nonzero(a: Literal["l"]):
    """
    usage.dask: 1
    """
    ...


@overload
def count_nonzero(a: Literal["o"]):
    """
    usage.dask: 1
    """
    ...


@overload
def count_nonzero(a: Literal[" "]):
    """
    usage.dask: 1
    """
    ...


@overload
def count_nonzero(a: Literal["w"]):
    """
    usage.dask: 1
    """
    ...


@overload
def count_nonzero(a: Literal["r"]):
    """
    usage.dask: 1
    """
    ...


@overload
def count_nonzero(a: Literal["d"]):
    """
    usage.dask: 1
    """
    ...


@overload
def count_nonzero(a: numpy.ndarray, axis: None):
    """
    usage.dask: 2
    """
    ...


@overload
def count_nonzero(a: numpy.ndarray, axis: Tuple[int]):
    """
    usage.dask: 2
    """
    ...


@overload
def count_nonzero(a: numpy.ndarray, axis: Tuple[int, int]):
    """
    usage.dask: 2
    """
    ...


def count_nonzero(
    a: Union[numpy.ndarray, numpy.ma.core.MaskedArray, List[Union[bool, float]], str],
    axis: Union[int, Tuple[int, ...], None] = ...,
):
    """
    usage.dask: 21
    usage.scipy: 22
    usage.skimage: 9
    usage.sklearn: 13
    """
    ...


@overload
def cov(
    m: Union[numpy.ndarray, numpy.flatiter],
    y: Union[numpy.flatiter, numpy.ndarray] = ...,
):
    """
    usage.pandas: 7
    """
    ...


@overload
def cov(m: numpy.ndarray):
    """
    usage.dask: 1
    usage.scipy: 7
    usage.sklearn: 14
    """
    ...


@overload
def cov(m: numpy.ndarray, rowvar: bool):
    """
    usage.scipy: 1
    usage.sklearn: 1
    """
    ...


@overload
def cov(m: numpy.ndarray, rowvar: int):
    """
    usage.dask: 1
    usage.scipy: 2
    """
    ...


@overload
def cov(m: numpy.ndarray, rowvar: int, bias: bool, aweights: numpy.ndarray):
    """
    usage.scipy: 5
    """
    ...


@overload
def cov(m: numpy.ndarray, y: numpy.ndarray, bias: int):
    """
    usage.matplotlib: 1
    usage.scipy: 4
    """
    ...


@overload
def cov(m: numpy.ndarray, bias: bool):
    """
    usage.scipy: 2
    """
    ...


@overload
def cov(m: numpy.ndarray, rowvar: int, bias: bool):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def cov(m: numpy.ndarray, y: numpy.ndarray):
    """
    usage.dask: 4
    """
    ...


@overload
def cov(m: dask.array.core.Array, y: dask.array.core.Array):
    """
    usage.dask: 2
    """
    ...


@overload
def cov(m: object, y: object):
    """
    usage.dask: 1
    """
    ...


@overload
def cov(m: numpy.ndarray, ddof: int):
    """
    usage.dask: 1
    """
    ...


@overload
def cov(m: numpy.ndarray, bias: int):
    """
    usage.dask: 1
    usage.sklearn: 8
    """
    ...


@overload
def cov(m: numpy.ndarray, rowvar: float, bias: float):
    """
    usage.sklearn: 1
    """
    ...


def cov(
    m: object,
    y: object = ...,
    rowvar: Union[float, bool, int] = ...,
    bias: Union[float, int, bool] = ...,
    aweights: numpy.ndarray = ...,
):
    """
    usage.dask: 11
    usage.matplotlib: 3
    usage.pandas: 7
    usage.scipy: 21
    usage.sklearn: 24
    """
    ...


def cross(a: numpy.ndarray, b: numpy.ndarray):
    """
    usage.scipy: 8
    usage.skimage: 5
    """
    ...


@overload
def cumprod(a: Tuple[int]):
    """
    usage.skimage: 1
    usage.xarray: 1
    """
    ...


@overload
def cumprod(a: Tuple[int, int, int]):
    """
    usage.skimage: 1
    usage.xarray: 1
    """
    ...


@overload
def cumprod(a: Tuple[int, int]):
    """
    usage.skimage: 1
    usage.xarray: 1
    """
    ...


@overload
def cumprod(a: Tuple[int, int, int, int]):
    """
    usage.skimage: 1
    """
    ...


@overload
def cumprod(a: Tuple[int, int, int, int, int]):
    """
    usage.skimage: 1
    """
    ...


@overload
def cumprod(a: numpy.ndarray, axis: int):
    """
    usage.dask: 6
    usage.xarray: 1
    """
    ...


@overload
def cumprod(a: object, axis: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def cumprod(a: object):
    """
    usage.xarray: 1
    """
    ...


@overload
def cumprod(a: xarray.core.dataarray.DataArray):
    """
    usage.xarray: 1
    """
    ...


@overload
def cumprod(a: numpy.ndarray, axis: int, dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def cumprod(a: object, axis: int, dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def cumprod(a: xarray.core.dataset.Dataset):
    """
    usage.xarray: 1
    """
    ...


@overload
def cumprod(a: Union[numpy.ndarray, pandas.core.series.Series], axis: int = ...):
    """
    usage.pandas: 9
    """
    ...


@overload
def cumprod(a: List[Union[numpy.int64, int]]):
    """
    usage.scipy: 3
    """
    ...


@overload
def cumprod(a: numpy.ndarray):
    """
    usage.dask: 2
    usage.sklearn: 2
    """
    ...


@overload
def cumprod(a: numpy.ma.core.MaskedArray, axis: int):
    """
    usage.dask: 2
    """
    ...


@overload
def cumprod(a: numpy.ndarray, axis: None):
    """
    usage.dask: 1
    """
    ...


@overload
def cumprod(a: dask.array.core.Array, axis: int, out: dask.array.core.Array):
    """
    usage.dask: 1
    """
    ...


@overload
def cumprod(a: dask.dataframe.core.DataFrame, out: dask.dataframe.core.DataFrame):
    """
    usage.dask: 1
    """
    ...


@overload
def cumprod(
    a: dask.dataframe.core.DataFrame, axis: int, out: dask.dataframe.core.DataFrame
):
    """
    usage.dask: 1
    """
    ...


def cumprod(
    a: object,
    axis: Union[None, int] = ...,
    out: Union[dask.dataframe.core.DataFrame, dask.array.core.Array] = ...,
    dtype: None = ...,
):
    """
    usage.dask: 14
    usage.pandas: 9
    usage.scipy: 3
    usage.skimage: 5
    usage.sklearn: 2
    usage.xarray: 10
    """
    ...


def cumproduct(*args: Literal["v", "t"]):
    """
    usage.pandas: 2
    """
    ...


@overload
def cumsum(a: numpy.ndarray, axis: int):
    """
    usage.dask: 8
    usage.scipy: 6
    usage.skimage: 4
    usage.sklearn: 3
    usage.xarray: 1
    """
    ...


@overload
def cumsum(a: numpy.ndarray):
    """
    usage.dask: 8
    usage.matplotlib: 4
    usage.scipy: 11
    usage.skimage: 15
    usage.sklearn: 16
    """
    ...


@overload
def cumsum(a: numpy.ndarray, out: numpy.ndarray):
    """
    usage.scipy: 9
    usage.skimage: 1
    usage.sklearn: 1
    """
    ...


@overload
def cumsum(a: dask.array.core.Array):
    """
    usage.skimage: 9
    """
    ...


@overload
def cumsum(a: List[int]):
    """
    usage.dask: 6
    usage.matplotlib: 5
    usage.scipy: 4
    usage.sklearn: 7
    usage.xarray: 10
    """
    ...


@overload
def cumsum(a: list):
    """
    usage.xarray: 1
    """
    ...


@overload
def cumsum(a: object, axis: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def cumsum(a: object):
    """
    usage.xarray: 1
    """
    ...


@overload
def cumsum(a: xarray.core.dataarray.DataArray):
    """
    usage.xarray: 1
    """
    ...


@overload
def cumsum(a: numpy.ndarray, axis: int, dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def cumsum(a: object, axis: int, dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def cumsum(a: xarray.core.dataset.Dataset):
    """
    usage.xarray: 1
    """
    ...


@overload
def cumsum(
    a: Union[
        numpy.ndarray,
        pandas.core.arrays.sparse.array.SparseArray,
        pandas.core.series.Series,
    ],
    dtype: Type[numpy.int64] = ...,
    out: pandas.core.arrays.sparse.array.SparseArray = ...,
    axis: int = ...,
):
    """
    usage.pandas: 26
    """
    ...


@overload
def cumsum(a: numpy.flatiter):
    """
    usage.matplotlib: 4
    """
    ...


@overload
def cumsum(a: List[Union[numpy.float64, float, int]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def cumsum(a: List[Union[float, int]]):
    """
    usage.dask: 1
    usage.matplotlib: 9
    """
    ...


@overload
def cumsum(a: List[Union[numpy.float64, int]]):
    """
    usage.matplotlib: 6
    """
    ...


@overload
def cumsum(a: numpy.ndarray, axis: int, dtype: numpy.dtype):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def cumsum(a: List[Union[float, numpy.float64, int]]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def cumsum(a: Tuple[int, int]):
    """
    usage.dask: 3
    """
    ...


@overload
def cumsum(a: Tuple[int, int, int, int, int, int]):
    """
    usage.dask: 1
    """
    ...


@overload
def cumsum(a: numpy.ma.core.MaskedArray, axis: int):
    """
    usage.dask: 2
    """
    ...


@overload
def cumsum(a: Tuple[int, int, int, int]):
    """
    usage.dask: 2
    """
    ...


@overload
def cumsum(a: Tuple[int]):
    """
    usage.dask: 2
    """
    ...


@overload
def cumsum(a: numpy.ndarray, axis: None):
    """
    usage.dask: 1
    """
    ...


@overload
def cumsum(a: dask.array.core.Array, axis: int, out: dask.array.core.Array):
    """
    usage.dask: 1
    """
    ...


@overload
def cumsum(a: Tuple[int, int, int]):
    """
    usage.dask: 2
    """
    ...


@overload
def cumsum(a: Tuple[int, int, int, int, int]):
    """
    usage.dask: 1
    """
    ...


@overload
def cumsum(a: Tuple[int, int, int, int, int, int, int, int, int, int]):
    """
    usage.dask: 1
    """
    ...


@overload
def cumsum(a: dask.dataframe.core.DataFrame, out: dask.dataframe.core.DataFrame):
    """
    usage.dask: 1
    """
    ...


@overload
def cumsum(
    a: dask.dataframe.core.DataFrame, axis: int, out: dask.dataframe.core.DataFrame
):
    """
    usage.dask: 1
    """
    ...


@overload
def cumsum(a: numpy.ndarray, axis: None, dtype: Type[numpy.float64]):
    """
    usage.sklearn: 3
    """
    ...


@overload
def cumsum(a: numpy.ndarray, axis: int, dtype: Type[numpy.float64]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def cumsum(a: List[int], axis: None, dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


def cumsum(
    a: object,
    axis: Union[None, int] = ...,
    out: Union[
        numpy.ndarray,
        pandas.core.arrays.sparse.array.SparseArray,
        dask.dataframe.core.DataFrame,
        dask.array.core.Array,
    ] = ...,
    dtype: Union[Type[numpy.float64], Type[numpy.int64], None, numpy.dtype] = ...,
):
    """
    usage.dask: 41
    usage.matplotlib: 33
    usage.pandas: 26
    usage.scipy: 30
    usage.skimage: 29
    usage.sklearn: 33
    usage.xarray: 18
    """
    ...


def datetime_data(_0: numpy.dtype, /):
    """
    usage.pandas: 14
    usage.xarray: 1
    """
    ...


@overload
def delete(arr: numpy.ndarray, obj: Tuple[None, ...], axis: int):
    """
    usage.skimage: 1
    """
    ...


@overload
def delete(arr: numpy.ndarray, obj: Tuple[int, int, int], axis: int):
    """
    usage.skimage: 1
    """
    ...


@overload
def delete(
    arr: numpy.ndarray,
    obj: Tuple[int, int, int, int, int, int, int, int, int, int],
    axis: int,
):
    """
    usage.skimage: 1
    """
    ...


@overload
def delete(
    arr: numpy.ndarray, obj: Tuple[int, int, int, int, int, int, int, int], axis: int
):
    """
    usage.skimage: 1
    """
    ...


@overload
def delete(
    arr: numpy.ndarray,
    obj: Union[
        int, numpy.ndarray, List[int], Tuple[int, int, int], slice[int, int, int]
    ],
    axis: int = ...,
):
    """
    usage.pandas: 28
    """
    ...


@overload
def delete(arr: numpy.ndarray, obj: int, axis: int):
    """
    usage.scipy: 54
    """
    ...


@overload
def delete(arr: numpy.ndarray, obj: slice[int, int, int], axis: int):
    """
    usage.scipy: 60
    """
    ...


@overload
def delete(arr: numpy.ndarray, obj: numpy.int64, axis: int):
    """
    usage.scipy: 2
    """
    ...


@overload
def delete(arr: numpy.ndarray, obj: numpy.int64):
    """
    usage.scipy: 16
    usage.sklearn: 1
    """
    ...


@overload
def delete(arr: numpy.ndarray, obj: int):
    """
    usage.matplotlib: 1
    usage.scipy: 5
    usage.sklearn: 3
    """
    ...


@overload
def delete(arr: numpy.ndarray, obj: numpy.ndarray, axis: int):
    """
    usage.scipy: 3
    """
    ...


@overload
def delete(arr: numpy.ndarray, obj: numpy.ndarray):
    """
    usage.scipy: 3
    usage.sklearn: 3
    """
    ...


@overload
def delete(arr: numpy.ndarray, obj: Tuple[numpy.int64, numpy.int64], axis: int):
    """
    usage.scipy: 2
    """
    ...


def delete(arr: numpy.ndarray, obj: object, axis: int = ...):
    """
    usage.matplotlib: 1
    usage.pandas: 28
    usage.scipy: 145
    usage.skimage: 4
    usage.sklearn: 7
    """
    ...


@overload
def diag(v: numpy.ndarray):
    """
    usage.dask: 5
    usage.scipy: 235
    usage.skimage: 5
    usage.sklearn: 55
    """
    ...


@overload
def diag(v: List[float]):
    """
    usage.scipy: 3
    """
    ...


@overload
def diag(v: numpy.ndarray, k: int):
    """
    usage.scipy: 86
    """
    ...


@overload
def diag(v: List[complex]):
    """
    usage.scipy: 2
    """
    ...


@overload
def diag(v: List[int], k: int):
    """
    usage.scipy: 3
    """
    ...


@overload
def diag(v: List[int]):
    """
    usage.scipy: 16
    """
    ...


@overload
def diag(v: List[Union[float, int]]):
    """
    usage.scipy: 6
    """
    ...


@overload
def diag(v: List[Union[int, numpy.float64]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def diag(v: List[float], k: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def diag(v: List[numpy.float64], k: int):
    """
    usage.scipy: 10
    """
    ...


@overload
def diag(v: list, k: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def diag(v: List[List[int]], k: int):
    """
    usage.scipy: 12
    """
    ...


@overload
def diag(v: numpy.ndarray, k: numpy.int64):
    """
    usage.scipy: 6
    """
    ...


@overload
def diag(v: dask.array.core.Array):
    """
    usage.dask: 3
    """
    ...


def diag(
    v: Union[
        numpy.ndarray,
        dask.array.core.Array,
        List[Union[numpy.float64, complex, float, int, List[int]]],
    ],
    k: Union[numpy.int64, int] = ...,
):
    """
    usage.dask: 8
    usage.scipy: 382
    usage.skimage: 5
    usage.sklearn: 55
    """
    ...


def diag_indices(n: int):
    """
    usage.scipy: 3
    usage.sklearn: 1
    """
    ...


def diag_indices_from(arr: numpy.ndarray):
    """
    usage.scipy: 3
    usage.sklearn: 6
    """
    ...


@overload
def diagonal(a: numpy.ndarray):
    """
    usage.scipy: 2
    usage.sklearn: 2
    """
    ...


@overload
def diagonal(a: dask.array.core.Array):
    """
    usage.dask: 2
    """
    ...


@overload
def diagonal(a: dask.array.core.Array, offset: int):
    """
    usage.dask: 4
    """
    ...


@overload
def diagonal(a: dask.array.core.Array, axis1: int):
    """
    usage.dask: 1
    """
    ...


@overload
def diagonal(a: dask.array.core.Array, offset: int, axis1: int):
    """
    usage.dask: 2
    """
    ...


@overload
def diagonal(a: dask.array.core.Array, offset: int, axis1: int, axis2: int):
    """
    usage.dask: 6
    """
    ...


@overload
def diagonal(a: numpy.ndarray, axis1: int, axis2: int):
    """
    usage.dask: 1
    """
    ...


@overload
def diagonal(a: numpy.ndarray, offset: int, axis1: int, axis2: int):
    """
    usage.dask: 6
    """
    ...


@overload
def diagonal(a: numpy.ndarray, offset: int, axis1: int):
    """
    usage.dask: 1
    """
    ...


def diagonal(
    a: Union[numpy.ndarray, dask.array.core.Array],
    offset: int = ...,
    axis1: int = ...,
    axis2: int = ...,
):
    """
    usage.dask: 23
    usage.scipy: 2
    usage.sklearn: 2
    """
    ...


@overload
def diff(a: numpy.ndarray, n: int, axis: int):
    """
    usage.dask: 1
    usage.skimage: 2
    usage.xarray: 2
    """
    ...


@overload
def diff(a: numpy.ndarray):
    """
    usage.dask: 3
    usage.matplotlib: 18
    usage.pandas: 6
    usage.scipy: 87
    usage.skimage: 7
    usage.sklearn: 39
    usage.xarray: 4
    """
    ...


@overload
def diff(a: numpy.ndarray, axis: int):
    """
    usage.dask: 2
    usage.matplotlib: 5
    usage.scipy: 17
    usage.skimage: 5
    usage.xarray: 7
    """
    ...


@overload
def diff(a: List[int]):
    """
    usage.scipy: 5
    """
    ...


@overload
def diff(a: List[List[int]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def diff(a: List[Union[numpy.float64, int]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def diff(a: list):
    """
    usage.scipy: 1
    """
    ...


@overload
def diff(a: List[Union[int, float]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def diff(a: Tuple[float, float, float]):
    """
    usage.scipy: 2
    """
    ...


@overload
def diff(a: Tuple[Tuple[float, float, float]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def diff(a: Tuple[float, float, float, float]):
    """
    usage.scipy: 2
    """
    ...


@overload
def diff(a: List[float]):
    """
    usage.scipy: 6
    """
    ...


@overload
def diff(a: List[Union[float, int]]):
    """
    usage.scipy: 2
    """
    ...


@overload
def diff(a: List[Union[float, numpy.float64]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def diff(a: Tuple[numpy.float64, numpy.float64]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def diff(a: List[numpy.int64]):
    """
    usage.dask: 2
    """
    ...


@overload
def diff(a: List[numpy.float64]):
    """
    usage.dask: 3
    usage.sklearn: 8
    """
    ...


@overload
def diff(a: dask.array.core.Array):
    """
    usage.dask: 1
    """
    ...


@overload
def diff(a: numpy.ndarray, n: int):
    """
    usage.sklearn: 2
    """
    ...


def diff(
    a: Union[
        List[Union[numpy.int64, float, numpy.float64, int, List[int]]],
        numpy.ndarray,
        dask.array.core.Array,
        Tuple[Union[float, numpy.float64, Tuple[float, float, float]], ...],
    ],
    n: int = ...,
    axis: int = ...,
):
    """
    usage.dask: 12
    usage.matplotlib: 25
    usage.pandas: 6
    usage.scipy: 127
    usage.skimage: 14
    usage.sklearn: 49
    usage.xarray: 13
    """
    ...


@overload
def digitize(x: numpy.ndarray, bins: numpy.ndarray):
    """
    usage.scipy: 2
    usage.sklearn: 3
    """
    ...


@overload
def digitize(x: List[int], bins: numpy.ndarray, right: bool):
    """
    usage.dask: 2
    """
    ...


@overload
def digitize(x: numpy.ndarray, bins: numpy.ndarray, right: bool):
    """
    usage.dask: 6
    """
    ...


def digitize(
    x: Union[numpy.ndarray, List[int]], bins: numpy.ndarray, right: bool = ...
):
    """
    usage.dask: 8
    usage.scipy: 2
    usage.sklearn: 3
    """
    ...


@overload
def dot(_0: numpy.ndarray, _1: numpy.ndarray, /):
    """
    usage.dask: 10
    usage.matplotlib: 21
    usage.pandas: 15
    usage.scipy: 1016
    usage.skimage: 1
    usage.sklearn: 542
    """
    ...


@overload
def dot(_0: List[List[Union[float, int]]], _1: numpy.ndarray, /):
    """
    usage.scipy: 1
    usage.sklearn: 3
    """
    ...


@overload
def dot(_0: List[List[Union[int, float]]], _1: numpy.ndarray, /):
    """
    usage.scipy: 2
    """
    ...


@overload
def dot(_0: List[List[int]], _1: numpy.ndarray, /):
    """
    usage.scipy: 9
    usage.sklearn: 8
    """
    ...


@overload
def dot(_0: List[List[Union[int, complex]]], _1: numpy.ndarray, /):
    """
    usage.scipy: 1
    """
    ...


@overload
def dot(_0: List[List[Union[complex, int]]], _1: List[List[Union[complex, int]]], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def dot(_0: numpy.matrix, _1: numpy.ndarray, /):
    """
    usage.scipy: 4
    """
    ...


@overload
def dot(_0: numpy.ndarray, _1: numpy.matrix, /):
    """
    usage.scipy: 3
    usage.sklearn: 2
    """
    ...


@overload
def dot(_0: numpy.matrix, _1: numpy.matrix, /):
    """
    usage.scipy: 10
    """
    ...


@overload
def dot(_0: List[int], _1: numpy.ndarray, /):
    """
    usage.scipy: 2
    """
    ...


@overload
def dot(_0: int, _1: int, /):
    """
    usage.scipy: 1
    """
    ...


@overload
def dot(_0: numpy.float64, _1: numpy.float64, /):
    """
    usage.scipy: 1
    """
    ...


@overload
def dot(_0: int, _1: numpy.float64, /):
    """
    usage.scipy: 1
    """
    ...


@overload
def dot(_0: List[float], _1: numpy.ndarray, /):
    """
    usage.scipy: 1
    """
    ...


@overload
def dot(_0: int, _1: numpy.ndarray, /):
    """
    usage.scipy: 2
    """
    ...


@overload
def dot(_0: numpy.ndarray, _1: int, /):
    """
    usage.scipy: 2
    """
    ...


@overload
def dot(_0: numpy.ndarray, _1: float, /):
    """
    usage.scipy: 2
    """
    ...


@overload
def dot(_0: float, _1: numpy.ndarray, /):
    """
    usage.scipy: 2
    """
    ...


@overload
def dot(_0: complex, _1: numpy.ndarray, /):
    """
    usage.scipy: 2
    """
    ...


@overload
def dot(_0: numpy.ndarray, _1: complex, /):
    """
    usage.scipy: 2
    """
    ...


@overload
def dot(_0: numpy.float32, _1: numpy.ndarray, /):
    """
    usage.scipy: 2
    """
    ...


@overload
def dot(_0: numpy.ndarray, _1: numpy.float32, /):
    """
    usage.scipy: 2
    """
    ...


@overload
def dot(_0: numpy.ndarray, _1: numpy.float64, /):
    """
    usage.scipy: 2
    """
    ...


@overload
def dot(_0: numpy.complex128, _1: numpy.ndarray, /):
    """
    usage.scipy: 2
    """
    ...


@overload
def dot(_0: numpy.ndarray, _1: numpy.complex128, /):
    """
    usage.scipy: 2
    """
    ...


@overload
def dot(_0: numpy.ndarray, _1: List[int], /):
    """
    usage.scipy: 2
    usage.sklearn: 5
    """
    ...


@overload
def dot(_0: numpy.float64, _1: numpy.ndarray, /):
    """
    usage.scipy: 2
    """
    ...


@overload
def dot(_0: numpy.ndarray, _1: matplotlib.transforms.Affine2D, /):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def dot(_0: numpy.ndarray, _1: List[List[numpy.float64]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def dot(_0: numpy.ndarray, _1: List[numpy.float64], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def dot(_0: numpy.ma.core.MaskedArray, _1: numpy.ma.core.MaskedArray, /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def dot(_0: dask.array.core.Array, _1: dask.array.core.Array, /):
    """
    usage.dask: 2
    """
    ...


@overload
def dot(_0: object, _1: object, /):
    """
    usage.dask: 1
    """
    ...


@overload
def dot(_0: numpy.ndarray, _1: numpy.ndarray, /, *, out: numpy.ndarray):
    """
    usage.sklearn: 5
    """
    ...


@overload
def dot(_0: numpy.ndarray, _1: List[float], /):
    """
    usage.sklearn: 3
    """
    ...


@overload
def dot(_0: numpy.memmap, _1: numpy.memmap, /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def dot(_0: numpy.memmap, _1: numpy.ndarray, /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def dot(_0: numpy.ndarray, _1: List[Union[float, int]], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def dot(_0: List[int], _1: List[int], /):
    """
    usage.sklearn: 1
    """
    ...


def dot(_0: object, _1: object, /, *, out: numpy.ndarray = ...):
    """
    usage.dask: 13
    usage.matplotlib: 26
    usage.pandas: 15
    usage.scipy: 1080
    usage.skimage: 1
    usage.sklearn: 572
    """
    ...


@overload
def dstack(tup: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray]):
    """
    usage.scipy: 3
    usage.skimage: 3
    """
    ...


@overload
def dstack(tup: Tuple[numpy.ndarray, numpy.ndarray]):
    """
    usage.dask: 4
    usage.scipy: 3
    usage.skimage: 3
    usage.sklearn: 4
    """
    ...


@overload
def dstack(tup: List[skimage.feature._hessian_det_appx._memoryviewslice]):
    """
    usage.skimage: 1
    """
    ...


@overload
def dstack(tup: List[numpy.ndarray]):
    """
    usage.matplotlib: 4
    usage.scipy: 7
    usage.skimage: 3
    usage.sklearn: 1
    """
    ...


@overload
def dstack(tup: Tuple[numpy.ndarray, numpy.ndarray, numpy.ma.core.MaskedArray]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def dstack(tup: numpy.ndarray):
    """
    usage.dask: 1
    """
    ...


@overload
def dstack(tup: dask.array.core.Array):
    """
    usage.dask: 2
    """
    ...


@overload
def dstack(tup: object):
    """
    usage.dask: 1
    """
    ...


def dstack(tup: object):
    """
    usage.dask: 8
    usage.matplotlib: 5
    usage.scipy: 13
    usage.skimage: 10
    usage.sklearn: 5
    """
    ...


@overload
def ediff1d(
    ary: numpy.ndarray, to_end: numpy.float64, to_begin: Union[None, numpy.float64]
):
    """
    usage.pandas: 2
    """
    ...


@overload
def ediff1d(ary: numpy.ndarray, to_end: None, to_begin: None):
    """
    usage.dask: 1
    """
    ...


@overload
def ediff1d(ary: numpy.ndarray, to_end: int, to_begin: int):
    """
    usage.dask: 1
    """
    ...


@overload
def ediff1d(ary: numpy.ndarray, to_end: List[int], to_begin: List[int]):
    """
    usage.dask: 1
    """
    ...


@overload
def ediff1d(ary: numpy.ndarray, to_end: float, to_begin: float):
    """
    usage.dask: 1
    """
    ...


@overload
def ediff1d(ary: numpy.ndarray, to_begin: float):
    """
    usage.sklearn: 1
    """
    ...


def ediff1d(
    ary: numpy.ndarray,
    to_begin: Union[float, numpy.float64, int, None, List[int]],
    to_end: Union[List[int], None, int, float, numpy.float64] = ...,
):
    """
    usage.dask: 4
    usage.pandas: 2
    usage.sklearn: 1
    """
    ...


@overload
def einsum(*operands: Literal["v", "t"]):
    """
    usage.dask: 103
    usage.scipy: 33
    usage.skimage: 1
    usage.sklearn: 15
    usage.xarray: 83
    """
    ...


@overload
def einsum(*operands: Literal["v", "t"], optimize: bool):
    """
    usage.dask: 33
    """
    ...


@overload
def einsum(
    *operands: Literal["v", "t"],
    optimize: List[Union[Tuple[int, int], Literal["einsum_path"]]],
):
    """
    usage.dask: 1
    """
    ...


@overload
def einsum(*operands: Literal["v", "t"], optimize: Literal["greedy"]):
    """
    usage.dask: 1
    """
    ...


@overload
def einsum(*operands: Literal["v", "t"], optimize: Literal["optimal"]):
    """
    usage.dask: 1
    """
    ...


def einsum(
    *operands: Literal["v", "t"],
    optimize: Union[
        bool,
        List[Union[Tuple[int, int], Literal["einsum_path"]]],
        Literal["optimal", "greedy"],
    ] = ...,
):
    """
    usage.dask: 139
    usage.scipy: 33
    usage.skimage: 1
    usage.sklearn: 15
    usage.xarray: 83
    """
    ...


@overload
def einsum_path(*operands: Literal["v", "t"]):
    """
    usage.dask: 1
    """
    ...


@overload
def einsum_path(*operands: Literal["v", "t"], optimize: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def einsum_path(*operands: Literal["v", "t"], optimize: Literal["greedy"]):
    """
    usage.dask: 1
    """
    ...


@overload
def einsum_path(*operands: Literal["v", "t"], optimize: Literal["optimal"]):
    """
    usage.dask: 1
    """
    ...


def einsum_path(
    *operands: Literal["v", "t"],
    optimize: Union[Literal["optimal", "greedy"], bool] = ...,
):
    """
    usage.dask: 4
    """
    ...


@overload
def empty(_0: Tuple[int, int, int], /, *, dtype: numpy.dtype):
    """
    usage.dask: 8
    usage.scipy: 32
    usage.skimage: 12
    usage.sklearn: 2
    """
    ...


@overload
def empty(_0: Tuple[int, int, int, int], /, *, dtype: numpy.dtype):
    """
    usage.scipy: 2
    usage.skimage: 1
    """
    ...


@overload
def empty(_0: Tuple[int, int, int, int, int], /, *, dtype: numpy.dtype):
    """
    usage.scipy: 1
    usage.skimage: 1
    """
    ...


@overload
def empty(_0: Tuple[int, int], /, *, dtype: numpy.dtype):
    """
    usage.dask: 12
    usage.scipy: 34
    usage.skimage: 4
    usage.sklearn: 41
    """
    ...


@overload
def empty(_0: Tuple[int, int, int, int, int, int], /, *, dtype: numpy.dtype):
    """
    usage.skimage: 1
    """
    ...


@overload
def empty(_0: Tuple[int, int, int], _1: numpy.dtype, /):
    """
    usage.scipy: 12
    usage.skimage: 4
    """
    ...


@overload
def empty(_0: Tuple[int, int], _1: Type[int], /):
    """
    usage.skimage: 1
    """
    ...


@overload
def empty(_0: Tuple[int, int], /):
    """
    usage.dask: 3
    usage.matplotlib: 3
    usage.scipy: 67
    usage.skimage: 17
    usage.sklearn: 30
    usage.xarray: 9
    """
    ...


@overload
def empty(_0: Tuple[int, int, int], /, *, dtype: Type[float]):
    """
    usage.scipy: 1
    usage.skimage: 2
    """
    ...


@overload
def empty(_0: Tuple[int, int, int, int], /, *, dtype: Type[float]):
    """
    usage.skimage: 1
    """
    ...


@overload
def empty(_0: Tuple[int, int, int], /):
    """
    usage.dask: 3
    usage.matplotlib: 3
    usage.scipy: 47
    usage.skimage: 5
    usage.sklearn: 15
    """
    ...


@overload
def empty(_0: Tuple[int, int], /, *, dtype: Type[numpy.float64]):
    """
    usage.scipy: 9
    usage.skimage: 2
    usage.sklearn: 5
    """
    ...


@overload
def empty(_0: Tuple[int, int], _1: numpy.dtype, /):
    """
    usage.scipy: 2
    usage.skimage: 8
    """
    ...


@overload
def empty(_0: Tuple[int, int, int], /, *, dtype: Type[numpy.float64]):
    """
    usage.skimage: 1
    """
    ...


@overload
def empty(_0: Tuple[int, int], /, *, dtype: Type[numpy.uint16]):
    """
    usage.skimage: 1
    """
    ...


@overload
def empty(_0: Tuple[int, int], _1: Type[numpy.uint8], /):
    """
    usage.skimage: 1
    """
    ...


@overload
def empty(_0: Tuple[int, int], /, *, dtype: Type[numpy.uint8]):
    """
    usage.skimage: 1
    """
    ...


@overload
def empty(_0: Tuple[int], /, *, dtype: Type[numpy.float64]):
    """
    usage.scipy: 1
    usage.skimage: 2
    """
    ...


@overload
def empty(_0: int, /, *, dtype: Type[object]):
    """
    usage.scipy: 1
    usage.skimage: 2
    usage.sklearn: 7
    usage.xarray: 1
    """
    ...


@overload
def empty(_0: Tuple[int, int, int], _1: Type[numpy.uint8], /):
    """
    usage.skimage: 1
    """
    ...


@overload
def empty(_0: Tuple[int, int], _1: Type[numpy.uint16], /):
    """
    usage.skimage: 1
    """
    ...


@overload
def empty(_0: Tuple[int, int, int], _1: Literal["float32"], /):
    """
    usage.skimage: 1
    """
    ...


@overload
def empty(_0: Tuple[int, int], /, *, dtype: Type[int]):
    """
    usage.scipy: 1
    usage.skimage: 1
    usage.sklearn: 1
    """
    ...


@overload
def empty(_0: int, /):
    """
    usage.dask: 1
    usage.matplotlib: 1
    usage.scipy: 23
    usage.skimage: 3
    usage.sklearn: 33
    """
    ...


@overload
def empty(_0: Tuple[int, int], /, *, dtype: Type[bool]):
    """
    usage.skimage: 2
    """
    ...


@overload
def empty(_0: Tuple[int, int, int], /, *, dtype: Type[bool]):
    """
    usage.skimage: 2
    """
    ...


@overload
def empty(_0: numpy.ndarray, /, *, dtype: numpy.dtype, order: Literal["F"]):
    """
    usage.dask: 1
    usage.skimage: 2
    """
    ...


@overload
def empty(_0: numpy.ndarray, /, *, dtype: numpy.dtype, order: Literal["C"]):
    """
    usage.dask: 1
    usage.skimage: 4
    """
    ...


@overload
def empty(_0: int, /, *, dtype: numpy.dtype):
    """
    usage.dask: 1
    usage.scipy: 30
    usage.skimage: 2
    usage.sklearn: 4
    """
    ...


@overload
def empty(_0: Tuple[int], /, *, dtype: numpy.dtype):
    """
    usage.dask: 32
    usage.scipy: 17
    usage.skimage: 14
    """
    ...


@overload
def empty(_0: Tuple[int, int], _1: Type[numpy.uint32], /):
    """
    usage.skimage: 2
    """
    ...


@overload
def empty(_0: List[Union[numpy.int64, int]], /, *, dtype: Type[numpy.float64]):
    """
    usage.skimage: 2
    """
    ...


@overload
def empty(_0: Tuple[int], _1: numpy.dtype, /):
    """
    usage.scipy: 10
    usage.skimage: 10
    usage.xarray: 2
    """
    ...


@overload
def empty(_0: Tuple[int], _1: Type[numpy.uint16], /):
    """
    usage.scipy: 1
    usage.skimage: 1
    """
    ...


@overload
def empty(_0: Tuple[int], _1: Type[numpy.uint8], /):
    """
    usage.scipy: 1
    usage.skimage: 1
    """
    ...


@overload
def empty(_0: Tuple[int], _1: Type[numpy.uint32], /):
    """
    usage.scipy: 1
    usage.skimage: 1
    """
    ...


@overload
def empty(*, dtype: Literal["U"], shape: Tuple[int]):
    """
    usage.xarray: 1
    """
    ...


@overload
def empty(*, dtype: Type[int], shape: Tuple[int]):
    """
    usage.dask: 1
    usage.xarray: 1
    """
    ...


@overload
def empty(*, dtype: Type[bool], shape: Tuple[int]):
    """
    usage.xarray: 1
    """
    ...


@overload
def empty(*, dtype: Literal["S"], shape: Tuple[int]):
    """
    usage.xarray: 1
    """
    ...


@overload
def empty(_0: Tuple[None, ...], /, *, dtype: Type[object]):
    """
    usage.dask: 1
    usage.xarray: 1
    """
    ...


@overload
def empty(_0: Tuple[int], /, *, dtype: Literal["M8[ns]"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def empty(_0: Tuple[int, int], /, *, dtype: Literal["M8[ns]"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def empty(_0: Tuple[None, ...], /, *, dtype: Literal["M8[ns]"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def empty(_0: int, /, *, dtype: Type[numpy.int64]):
    """
    usage.scipy: 26
    usage.xarray: 1
    """
    ...


@overload
def empty(_0: Tuple[int], /, *, dtype: Type[object]):
    """
    usage.dask: 1
    usage.scipy: 5
    usage.xarray: 2
    """
    ...


@overload
def empty(
    _0: Union[Tuple[Union[int, None], ...], int, numpy.int64, List[int]] = ...,
    /,
    *,
    order: Literal["F"] = ...,
    dtype: Union[
        str,
        numpy.dtype,
        None,
        type,
        List[
            Tuple[
                Literal["err", "A", "B", "C"],
                Union[Literal["datetime64[h]", "str", "int32"], Type[object]],
            ]
        ],
    ] = ...,
    shape: Tuple[int, ...] = ...,
):
    """
    usage.pandas: 423
    """
    ...


@overload
def empty(_0: int, _1: Type[numpy.uint8], /):
    """
    usage.matplotlib: 1
    usage.scipy: 1
    """
    ...


@overload
def empty(_0: int, /, *, dtype: Type[numpy.float64]):
    """
    usage.matplotlib: 2
    usage.scipy: 13
    usage.sklearn: 6
    """
    ...


@overload
def empty(_0: Tuple[int, int], _1: Type[numpy.float64], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def empty(_0: int, /, *, dtype: Type[numpy.int32]):
    """
    usage.scipy: 27
    usage.sklearn: 3
    """
    ...


@overload
def empty(_0: Tuple[int], /, *, dtype: Type[float]):
    """
    usage.matplotlib: 1
    usage.scipy: 1
    """
    ...


@overload
def empty(_0: Tuple[int], _1: Type[float], /):
    """
    usage.scipy: 4
    """
    ...


@overload
def empty(_0: Tuple[int], /):
    """
    usage.dask: 2
    usage.matplotlib: 1
    usage.scipy: 18
    usage.sklearn: 2
    """
    ...


@overload
def empty(_0: Tuple[int, int, int], /, *, dtype: Type[complex]):
    """
    usage.scipy: 1
    """
    ...


@overload
def empty(_0: Tuple[int, int, int, int], /, *, dtype: Type[numpy.float64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def empty(_0: List[int], /, *, dtype: numpy.dtype):
    """
    usage.matplotlib: 1
    usage.scipy: 1
    usage.sklearn: 1
    """
    ...


@overload
def empty(_0: Tuple[int, int, int, int], /):
    """
    usage.dask: 1
    usage.scipy: 4
    usage.sklearn: 1
    """
    ...


@overload
def empty(_0: list, /):
    """
    usage.scipy: 3
    """
    ...


@overload
def empty(_0: List[int], /):
    """
    usage.matplotlib: 1
    usage.scipy: 10
    """
    ...


@overload
def empty(_0: numpy.int32, /, *, dtype: Type[numpy.int32]):
    """
    usage.scipy: 1
    """
    ...


@overload
def empty(_0: numpy.int32, /, *, dtype: numpy.dtype):
    """
    usage.scipy: 24
    """
    ...


@overload
def empty(
    _0: Tuple[None, ...],
    _1: List[
        Tuple[Literal["mopt", "mrows", "ncols", "imagf", "namlen"], Literal["i4"]]
    ],
    /,
):
    """
    usage.scipy: 1
    """
    ...


@overload
def empty(_0: Tuple[None, ...], _1: numpy.dtype, /):
    """
    usage.scipy: 4
    """
    ...


@overload
def empty(_0: Tuple[None, ...], /, *, dtype: numpy.dtype):
    """
    usage.dask: 3
    usage.scipy: 5
    """
    ...


@overload
def empty(_0: Tuple[int], /, *, dtype: Type[numpy.int32]):
    """
    usage.scipy: 4
    """
    ...


@overload
def empty(_0: int, /, *, dtype: Type[numpy.bool_]):
    """
    usage.scipy: 10
    """
    ...


@overload
def empty(_0: Tuple[int, int], /, *, dtype: Type[numpy.complex64], order: Literal["F"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def empty(
    _0: Tuple[int, int], /, *, dtype: Type[numpy.complex128], order: Literal["C"]
):
    """
    usage.scipy: 1
    """
    ...


@overload
def empty(_0: Tuple[int, int], /, *, dtype: Type[numpy.complex64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def empty(_0: int, _1: numpy.dtype, /):
    """
    usage.scipy: 1
    """
    ...


@overload
def empty(_0: Tuple[int, int], /, *, dtype: Literal["d"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def empty(_0: Tuple[int, int], /, *, dtype: Literal["D"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def empty(_0: Tuple[int, int], /, *, dtype: Literal["f"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def empty(_0: Tuple[int, int], /, *, dtype: Literal["F"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def empty(_0: Tuple[None, ...], /):
    """
    usage.dask: 1
    usage.scipy: 1
    """
    ...


@overload
def empty(_0: Tuple[int, int], /, *, dtype: Type[complex]):
    """
    usage.scipy: 1
    """
    ...


@overload
def empty(_0: int, /, *, order: Literal["F"]):
    """
    usage.scipy: 5
    """
    ...


@overload
def empty(_0: int, /, *, dtype: Literal["complex128"], order: Literal["F"]):
    """
    usage.scipy: 3
    """
    ...


@overload
def empty(_0: int, /, *, dtype: Type[numpy.complex128], order: Literal["F"]):
    """
    usage.scipy: 2
    """
    ...


@overload
def empty(_0: Tuple[int, int], /, *, dtype: Literal["float64"], order: Literal["F"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def empty(_0: Tuple[int, int], /, *, dtype: Type[float]):
    """
    usage.matplotlib: 1
    usage.scipy: 4
    """
    ...


@overload
def empty(_0: Tuple[int, int], /, *, dtype: Type[numpy.int64]):
    """
    usage.scipy: 4
    """
    ...


@overload
def empty(_0: Tuple[int, int], /, *, dtype: Type[object]):
    """
    usage.dask: 2
    usage.matplotlib: 1
    usage.scipy: 6
    usage.sklearn: 2
    """
    ...


@overload
def empty(_0: Tuple[None, ...], _1: Type[numpy.int32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def empty(_0: Tuple[int], _1: Type[numpy.int32], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def empty(_0: Tuple[int, int], _1: Type[numpy.int32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def empty(_0: Tuple[int], _1: Type[numpy.int8], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def empty(_0: Tuple[int], _1: Type[numpy.int16], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def empty(_0: Tuple[int], _1: Type[numpy.int64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def empty(_0: Tuple[int], _1: Type[numpy.uint64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def empty(_0: Tuple[int], _1: Type[numpy.float32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def empty(_0: Tuple[int], _1: Type[numpy.float64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def empty(_0: Tuple[int], _1: Type[object], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def empty(_0: int, /, *, dtype: Type[numpy.float32]):
    """
    usage.scipy: 9
    """
    ...


@overload
def empty(_0: Tuple[int, int, int], _1: Type[numpy.int32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def empty(_0: int, /, *, dtype: Type[float]):
    """
    usage.scipy: 5
    usage.sklearn: 1
    """
    ...


@overload
def empty(_0: numpy.int64, /):
    """
    usage.scipy: 2
    """
    ...


@overload
def empty(_0: int, /, *, dtype: Literal["uint64"]):
    """
    usage.scipy: 2
    """
    ...


@overload
def empty(_0: int, /, *, dtype: Type[bool]):
    """
    usage.scipy: 1
    usage.sklearn: 1
    """
    ...


@overload
def empty(_0: int, /, *, dtype: Type[numpy.int8], order: Literal["c"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def empty(_0: List[int], _1: numpy.dtype, /):
    """
    usage.scipy: 27
    usage.sklearn: 2
    """
    ...


@overload
def empty(_0: int, /, *, dtype: Type[int]):
    """
    usage.scipy: 2
    usage.sklearn: 5
    """
    ...


@overload
def empty(_0: Tuple[int, int, int], _1: Literal["f"], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def empty(_0: Tuple[int, int, int], _1: Literal["d"], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def empty(_0: Tuple[int, int, int], _1: Literal["g"], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def empty(_0: Tuple[int, int, int], _1: Literal["F"], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def empty(_0: Tuple[int, int, int], _1: Literal["D"], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def empty(_0: Tuple[int, int, int], _1: Literal["G"], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def empty(_0: Tuple[int, int, int], _1: Literal["O"], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def empty(_0: int, /, *, dtype: Type[numpy.complex128]):
    """
    usage.scipy: 8
    """
    ...


@overload
def empty(_0: int, /, *, dtype: Type[numpy.complex64]):
    """
    usage.scipy: 7
    """
    ...


@overload
def empty(_0: Tuple[int, numpy.int64], /, *, dtype: numpy.dtype):
    """
    usage.scipy: 3
    """
    ...


@overload
def empty(_0: Tuple[int, int], /, *, dtype: numpy.dtype, order: Literal["F"]):
    """
    usage.dask: 1
    usage.scipy: 1
    usage.sklearn: 1
    """
    ...


@overload
def empty(_0: int, /, *, dtype: Type[numpy.uint8]):
    """
    usage.matplotlib: 3
    usage.scipy: 7
    """
    ...


@overload
def empty(_0: int, /, *, dtype: Type[numpy.int8]):
    """
    usage.scipy: 7
    usage.sklearn: 1
    """
    ...


@overload
def empty(_0: int, /, *, dtype: Type[numpy.uint32]):
    """
    usage.scipy: 7
    """
    ...


@overload
def empty(_0: int, /, *, dtype: Type[numpy.uint64]):
    """
    usage.scipy: 7
    """
    ...


@overload
def empty(_0: int, /, *, dtype: Type[numpy.uint16]):
    """
    usage.scipy: 7
    """
    ...


@overload
def empty(_0: int, /, *, dtype: Type[numpy.int16]):
    """
    usage.scipy: 7
    """
    ...


@overload
def empty(_0: int, /, *, dtype: Type[numpy.complex256]):
    """
    usage.scipy: 7
    """
    ...


@overload
def empty(_0: int, /, *, dtype: Type[numpy.float128]):
    """
    usage.scipy: 7
    """
    ...


@overload
def empty(_0: Tuple[int], /, *, dtype: Type[numpy.int64]):
    """
    usage.scipy: 4
    """
    ...


@overload
def empty(_0: numpy.int64, /, *, dtype: numpy.dtype):
    """
    usage.scipy: 12
    """
    ...


@overload
def empty(_0: int, /, *, dtype: None):
    """
    usage.scipy: 1
    """
    ...


@overload
def empty(_0: Tuple[int, int], /, *, dtype: Type[numpy.float64], order: Literal["F"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def empty(_0: Tuple[int, int, int], /, *, dtype: Type[int]):
    """
    usage.scipy: 1
    """
    ...


@overload
def empty(
    _0: List[int], /, *, dtype: List[Tuple[Literal["ii", "dd"], Literal["i8", "f8"]]]
):
    """
    usage.scipy: 1
    """
    ...


@overload
def empty(*, dtype: Type[object], shape: Tuple[int]):
    """
    usage.scipy: 1
    """
    ...


@overload
def empty(*, dtype: numpy.dtype, shape: Tuple[int]):
    """
    usage.dask: 10
    usage.scipy: 1
    """
    ...


@overload
def empty(*, dtype: Type[numpy.int64], shape: Tuple[int, int]):
    """
    usage.scipy: 1
    """
    ...


@overload
def empty(*, shape: Tuple[int, int]):
    """
    usage.dask: 2
    usage.scipy: 3
    """
    ...


@overload
def empty(_0: int, _1: Type[int], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def empty(_0: List[Union[numpy.int64, int]], _1: Type[float], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def empty(_0: Tuple[int], _1: Literal["d"], /):
    """
    usage.scipy: 3
    """
    ...


@overload
def empty(_0: Tuple[None, ...], _1: Literal["d"], /):
    """
    usage.scipy: 3
    """
    ...


@overload
def empty(_0: Tuple[numpy.int64, numpy.int64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def empty(_0: int, _1: Type[numpy.float64], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def empty(_0: list, /, *, dtype: Type[numpy.float64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def empty(_0: int, _1: Literal["O"], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def empty(_0: Tuple[int, int, int], /, *, dtype: Type[numpy.uint8]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def empty(_0: Tuple[int, int], _1: Type[float], /):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def empty(
    _0: Tuple[int],
    /,
    *,
    dtype: List[
        Tuple[Union[Literal["u1", "flags", ">u4", "points", "colors"], Tuple[int]], ...]
    ],
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def empty(*, dtype: numpy.dtype, shape: Tuple[int, int, int]):
    """
    usage.dask: 9
    usage.matplotlib: 1
    """
    ...


@overload
def empty(_0: List[int], /, *, dtype: Type[numpy.float32]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def empty(_0: List[Union[numpy.int64, int]], /, *, dtype: numpy.dtype):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def empty(_0: List[int], /, *, dtype: Type[numpy.float64]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def empty(_0: List[int], /, *, dtype: Type[numpy.int32]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def empty(*, dtype: numpy.dtype, shape: Tuple[int, int]):
    """
    usage.dask: 13
    """
    ...


@overload
def empty(_0: int, _1: int, /):
    """
    usage.dask: 1
    """
    ...


@overload
def empty(_0: List[int], /, *, dtype: Literal["O"]):
    """
    usage.dask: 8
    """
    ...


@overload
def empty(*, dtype: numpy.dtype, shape: Tuple[int, int, int, int]):
    """
    usage.dask: 3
    """
    ...


@overload
def empty(*, dtype: numpy.dtype, shape: Tuple[int, int, int, int, int]):
    """
    usage.dask: 3
    """
    ...


@overload
def empty(_0: Tuple[None, ...], /, *, dtype: Type[numpy.object_]):
    """
    usage.dask: 1
    """
    ...


@overload
def empty(_0: Tuple[int], /, *, dtype: Type[numpy.object_]):
    """
    usage.dask: 1
    """
    ...


@overload
def empty(_0: Tuple[int, int], /, *, dtype: Type[numpy.object_]):
    """
    usage.dask: 1
    """
    ...


@overload
def empty(_0: Tuple[int, int], /, *, dtype: numpy.dtype, order: Literal["C"]):
    """
    usage.dask: 1
    usage.sklearn: 2
    """
    ...


@overload
def empty(_0: List[int], /, *, dtype: numpy.dtype, order: Literal["C"]):
    """
    usage.dask: 1
    """
    ...


@overload
def empty(_0: List[int], /, *, dtype: numpy.dtype, order: Literal["F"]):
    """
    usage.dask: 1
    """
    ...


@overload
def empty(_0: Tuple[int, int, int], /, *, dtype: Type[object]):
    """
    usage.dask: 1
    """
    ...


@overload
def empty(
    *,
    dtype: List[Tuple[Literal["vals", "arg"], numpy.dtype]],
    shape: Tuple[int, int, int],
):
    """
    usage.dask: 2
    """
    ...


@overload
def empty(
    *, dtype: List[Tuple[Literal["vals", "arg"], numpy.dtype]], shape: Tuple[int]
):
    """
    usage.dask: 2
    """
    ...


@overload
def empty(
    *, dtype: List[Tuple[Literal["vals", "arg"], numpy.dtype]], shape: Tuple[int, int]
):
    """
    usage.dask: 1
    """
    ...


@overload
def empty(*, dtype: numpy.dtype, shape: Tuple[int, int, int, int, int, int]):
    """
    usage.dask: 2
    """
    ...


@overload
def empty(_0: Tuple[int, int, int], /, *, dtype: Type[numpy.object_]):
    """
    usage.dask: 1
    """
    ...


@overload
def empty(_0: Tuple[int], /, *, dtype: List[Tuple[Literal["values"], numpy.dtype]]):
    """
    usage.dask: 1
    """
    ...


@overload
def empty(
    _0: Tuple[int],
    /,
    *,
    dtype: List[
        Tuple[Literal["values", "indices"], Union[numpy.dtype, Type[numpy.int64]]]
    ],
):
    """
    usage.dask: 1
    """
    ...


@overload
def empty(
    _0: Tuple[int],
    /,
    *,
    dtype: List[
        Tuple[Literal["values", "inverse"], Union[numpy.dtype, Type[numpy.int64]]]
    ],
):
    """
    usage.dask: 1
    """
    ...


@overload
def empty(
    _0: Tuple[int],
    /,
    *,
    dtype: List[
        Tuple[
            Literal["values", "indices", "inverse"],
            Union[numpy.dtype, Type[numpy.int64]],
        ]
    ],
):
    """
    usage.dask: 1
    """
    ...


@overload
def empty(
    _0: Tuple[int],
    /,
    *,
    dtype: List[
        Tuple[Literal["values", "counts"], Union[numpy.dtype, Type[numpy.int64]]]
    ],
):
    """
    usage.dask: 1
    """
    ...


@overload
def empty(
    _0: Tuple[int],
    /,
    *,
    dtype: List[
        Tuple[
            Literal["values", "indices", "counts"],
            Union[numpy.dtype, Type[numpy.int64]],
        ]
    ],
):
    """
    usage.dask: 1
    """
    ...


@overload
def empty(
    _0: Tuple[int],
    /,
    *,
    dtype: List[
        Tuple[
            Literal["values", "inverse", "counts"],
            Union[numpy.dtype, Type[numpy.int64]],
        ]
    ],
):
    """
    usage.dask: 1
    """
    ...


@overload
def empty(
    _0: Tuple[int],
    /,
    *,
    dtype: List[
        Tuple[
            Literal["values", "indices", "inverse", "counts"],
            Union[numpy.dtype, Type[numpy.int64]],
        ]
    ],
):
    """
    usage.dask: 1
    """
    ...


@overload
def empty(_0: int, /, *, dtype: Literal["i1"]):
    """
    usage.dask: 1
    """
    ...


@overload
def empty(_0: int, /, *, dtype: Literal["f8"]):
    """
    usage.dask: 1
    """
    ...


@overload
def empty(_0: int, /, *, dtype: Type[numpy.float64], order: Literal["C"]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def empty(_0: int, /, *, dtype: Type[numpy.int8], order: Literal["C"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def empty(_0: Tuple[int], /, *, dtype: Type[numpy.int64], order: Literal["C"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def empty(_0: Tuple[int, int], /, *, dtype: Literal["float"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def empty(_0: Tuple[int, int], /, *, dtype: Type[numpy.float32]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def empty(_0: Tuple[int], /, *, dtype: Type[int]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def empty(_0: Tuple[int, int], /, *, dtype: Type[float], order: Literal["F"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def empty(*, dtype: numpy.dtype, order: Literal["F"], shape: Tuple[int, int]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def empty(_0: int, /, *, dtype: Literal["i"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def empty(*, dtype: Type[numpy.float32], shape: Tuple[int, int]):
    """
    usage.sklearn: 4
    """
    ...


@overload
def empty(*, dtype: numpy.dtype, order: Literal["C"], shape: Tuple[int, int]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def empty(*, dtype: numpy.dtype, order: Literal["C"], shape: int):
    """
    usage.sklearn: 2
    """
    ...


@overload
def empty(_0: Tuple[numpy.int64, numpy.int64], /, *, dtype: numpy.dtype):
    """
    usage.sklearn: 3
    """
    ...


@overload
def empty(_0: Tuple[int], _1: Type[int], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def empty(*, shape: int):
    """
    usage.sklearn: 1
    """
    ...


def empty(
    _0: object = ...,
    _1: object = ...,
    /,
    *,
    dtype: Union[
        str,
        type,
        numpy.dtype,
        None,
        List[
            Tuple[
                Union[Tuple[int], str, numpy.dtype, Type[object], Type[numpy.int64]],
                ...,
            ]
        ],
    ] = ...,
    order: Literal["C", "F", "c"] = ...,
    shape: Union[Tuple[int, ...], int] = ...,
):
    """
    usage.dask: 149
    usage.matplotlib: 30
    usage.pandas: 423
    usage.scipy: 677
    usage.skimage: 117
    usage.sklearn: 189
    usage.xarray: 23
    """
    ...


@overload
def empty_like(_0: numpy.ndarray, /):
    """
    usage.dask: 3
    usage.matplotlib: 10
    usage.scipy: 52
    usage.skimage: 33
    usage.sklearn: 19
    """
    ...


@overload
def empty_like(_0: numpy.ndarray, /, *, dtype: Type[numpy.float64]):
    """
    usage.scipy: 4
    usage.skimage: 3
    """
    ...


@overload
def empty_like(_0: numpy.ndarray, /, *, dtype: Type[numpy.uint16]):
    """
    usage.scipy: 2
    usage.skimage: 1
    """
    ...


@overload
def empty_like(_0: numpy.ndarray, /, *, dtype: Type[float]):
    """
    usage.scipy: 1
    usage.skimage: 2
    """
    ...


@overload
def empty_like(_0: numpy.ndarray, /, *, dtype: Type[numpy.uint8]):
    """
    usage.scipy: 2
    usage.skimage: 4
    """
    ...


@overload
def empty_like(
    _0: numpy.ndarray,
    /,
    *,
    dtype: Type[numpy.float64],
    order: Literal["C"],
    subok: bool,
):
    """
    usage.skimage: 2
    """
    ...


@overload
def empty_like(
    _0: numpy.ma.core.MaskedArray,
    /,
    *,
    dtype: Type[numpy.float64],
    order: Literal["C"],
    subok: bool,
):
    """
    usage.skimage: 1
    """
    ...


@overload
def empty_like(_0: numpy.ndarray, _1: Type[numpy.float64], /):
    """
    usage.skimage: 2
    """
    ...


@overload
def empty_like(_0: xarray.core.variable.Variable, /):
    """
    usage.xarray: 1
    """
    ...


@overload
def empty_like(_0: xarray.core.variable.IndexVariable, /):
    """
    usage.xarray: 1
    """
    ...


@overload
def empty_like(
    _0: Union[numpy.ndarray, pandas.core.arrays.string_.StringArray, List[None]],
    /,
    *,
    dtype: Union[type, Literal["float", "f8", "i8", "object"], numpy.dtype] = ...,
):
    """
    usage.pandas: 18
    """
    ...


@overload
def empty_like(_0: numpy.ndarray, /, *, dtype: Type[numpy.int32]):
    """
    usage.scipy: 4
    """
    ...


@overload
def empty_like(_0: numpy.ndarray, /, *, dtype: Type[numpy.complex128]):
    """
    usage.scipy: 2
    """
    ...


@overload
def empty_like(_0: numpy.ndarray, /, *, dtype: Type[numpy.int64]):
    """
    usage.scipy: 5
    """
    ...


@overload
def empty_like(_0: numpy.ndarray, /, *, dtype: Type[numpy.uint64]):
    """
    usage.scipy: 2
    """
    ...


@overload
def empty_like(_0: numpy.ndarray, /, *, dtype: Type[numpy.uint32]):
    """
    usage.scipy: 2
    """
    ...


@overload
def empty_like(_0: numpy.ndarray, /, *, dtype: Type[numpy.float32]):
    """
    usage.scipy: 2
    usage.sklearn: 4
    """
    ...


@overload
def empty_like(_0: numpy.ndarray, /, *, dtype: Type[bool]):
    """
    usage.scipy: 8
    """
    ...


@overload
def empty_like(_0: numpy.ndarray, /, *, dtype: Type[numpy.complex64]):
    """
    usage.scipy: 2
    """
    ...


@overload
def empty_like(_0: numpy.ndarray, /, *, dtype: Type[numpy.int16]):
    """
    usage.scipy: 2
    """
    ...


@overload
def empty_like(_0: numpy.ndarray, /, *, dtype: Type[numpy.bool_]):
    """
    usage.scipy: 2
    """
    ...


@overload
def empty_like(_0: numpy.ndarray, /, *, dtype: Type[numpy.int8]):
    """
    usage.scipy: 2
    """
    ...


@overload
def empty_like(_0: numpy.ndarray, /, *, dtype: Type[numpy.complex256]):
    """
    usage.scipy: 2
    """
    ...


@overload
def empty_like(_0: numpy.ndarray, /, *, dtype: Type[numpy.float128]):
    """
    usage.scipy: 2
    """
    ...


@overload
def empty_like(_0: numpy.ndarray, /, *, dtype: Type[int]):
    """
    usage.scipy: 4
    """
    ...


@overload
def empty_like(_0: numpy.ndarray, /, *, dtype: Type[object]):
    """
    usage.scipy: 1
    """
    ...


@overload
def empty_like(_0: numpy.ndarray, /, *, dtype: numpy.dtype, shape: Tuple[int]):
    """
    usage.dask: 1
    """
    ...


@overload
def empty_like(_0: numpy.ndarray, /, *, order: Literal["C"]):
    """
    usage.dask: 1
    """
    ...


@overload
def empty_like(_0: numpy.ndarray, /, *, order: Literal["F"]):
    """
    usage.dask: 1
    """
    ...


@overload
def empty_like(_0: numpy.ndarray, /, *, shape: None):
    """
    usage.dask: 1
    """
    ...


@overload
def empty_like(_0: numpy.ndarray, /, *, shape: Tuple[int, int]):
    """
    usage.dask: 1
    """
    ...


@overload
def empty_like(_0: numpy.ndarray, /, *, shape: int):
    """
    usage.dask: 1
    """
    ...


@overload
def empty_like(_0: numpy.ndarray, /, *, shape: Tuple[int, int, int]):
    """
    usage.dask: 1
    """
    ...


@overload
def empty_like(_0: numpy.ndarray, /, *, shape: Tuple[int, int, int, int, int]):
    """
    usage.dask: 1
    """
    ...


@overload
def empty_like(_0: numpy.ndarray, /, *, dtype: numpy.dtype, shape: Tuple[int, int]):
    """
    usage.dask: 1
    """
    ...


@overload
def empty_like(_0: numpy.ndarray, /, *, dtype: numpy.dtype):
    """
    usage.sklearn: 3
    """
    ...


def empty_like(
    _0: object,
    _1: Type[numpy.float64] = ...,
    /,
    *,
    dtype: Union[
        Type[numpy.float32], type, numpy.dtype, Literal["float", "f8", "i8", "object"]
    ] = ...,
    order: Literal["F", "C"] = ...,
    subok: bool = ...,
    shape: Union[Tuple[int, ...], None, int] = ...,
):
    """
    usage.dask: 12
    usage.matplotlib: 10
    usage.pandas: 18
    usage.scipy: 103
    usage.skimage: 48
    usage.sklearn: 26
    usage.xarray: 2
    """
    ...


@overload
def expand_dims(a: numpy.ndarray, axis: int):
    """
    usage.dask: 2
    usage.matplotlib: 12
    usage.scipy: 15
    usage.sklearn: 5
    usage.xarray: 5
    """
    ...


@overload
def expand_dims(a: Union[numpy.ndarray, numpy.float64], axis: int):
    """
    usage.pandas: 19
    """
    ...


@overload
def expand_dims(a: numpy.float64, axis: int):
    """
    usage.scipy: 3
    usage.sklearn: 1
    """
    ...


@overload
def expand_dims(a: numpy.ma.core.MaskedArray, axis: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def expand_dims(a: numpy.ma.core.MaskedConstant, axis: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def expand_dims(a: numpy.int64, axis: int):
    """
    usage.scipy: 1
    """
    ...


def expand_dims(
    a: Union[
        numpy.ndarray,
        numpy.float64,
        numpy.int64,
        numpy.ma.core.MaskedArray,
        numpy.ma.core.MaskedConstant,
    ],
    axis: int,
):
    """
    usage.dask: 2
    usage.matplotlib: 12
    usage.pandas: 19
    usage.scipy: 21
    usage.sklearn: 6
    usage.xarray: 5
    """
    ...


@overload
def extract(condition: numpy.bool_, arr: numpy.ndarray):
    """
    usage.scipy: 6
    """
    ...


@overload
def extract(condition: numpy.ndarray, arr: numpy.ndarray):
    """
    usage.dask: 1
    usage.scipy: 51
    """
    ...


@overload
def extract(condition: numpy.int64, arr: numpy.ndarray):
    """
    usage.scipy: 2
    """
    ...


@overload
def extract(condition: bool, arr: numpy.ndarray):
    """
    usage.scipy: 2
    """
    ...


@overload
def extract(condition: int, arr: numpy.ndarray):
    """
    usage.scipy: 1
    """
    ...


@overload
def extract(condition: bool, arr: float):
    """
    usage.scipy: 1
    """
    ...


@overload
def extract(condition: List[numpy.ndarray], arr: numpy.ndarray):
    """
    usage.scipy: 2
    """
    ...


@overload
def extract(condition: numpy.bool_, arr: numpy.float64):
    """
    usage.scipy: 8
    """
    ...


@overload
def extract(condition: numpy.bool_, arr: numpy.int64):
    """
    usage.scipy: 1
    """
    ...


@overload
def extract(condition: numpy.ma.core.MaskedArray, arr: numpy.ndarray):
    """
    usage.scipy: 1
    """
    ...


@overload
def extract(condition: numpy.ma.core.MaskedArray, arr: numpy.ma.core.MaskedArray):
    """
    usage.scipy: 2
    """
    ...


def extract(
    condition: object,
    arr: Union[
        numpy.ndarray, numpy.float64, float, numpy.int64, numpy.ma.core.MaskedArray
    ],
):
    """
    usage.dask: 1
    usage.scipy: 77
    """
    ...


@overload
def eye(N: int):
    """
    usage.dask: 10
    usage.sample-usage: 1
    usage.scipy: 316
    usage.skimage: 30
    usage.sklearn: 51
    """
    ...


@overload
def eye(N: int, dtype: Type[int]):
    """
    usage.dask: 2
    usage.scipy: 1
    usage.skimage: 5
    """
    ...


@overload
def eye(N: int, M: int, dtype: Type[bool]):
    """
    usage.skimage: 1
    """
    ...


@overload
def eye(N: int, dtype: Type[numpy.float64]):
    """
    usage.scipy: 19
    usage.skimage: 1
    """
    ...


@overload
def eye(N: int, M: int):
    """
    usage.dask: 14
    usage.matplotlib: 2
    usage.scipy: 9
    usage.skimage: 1
    usage.sklearn: 1
    """
    ...


@overload
def eye(N: int, dtype: Union[numpy.dtype, Literal["int64", "float64"]] = ...):
    """
    usage.pandas: 9
    """
    ...


@overload
def eye(N: int, M: int, dtype: numpy.dtype):
    """
    usage.scipy: 12
    """
    ...


@overload
def eye(N: numpy.int64, dtype: numpy.dtype):
    """
    usage.scipy: 5
    """
    ...


@overload
def eye(N: int, dtype: Type[numpy.float32]):
    """
    usage.scipy: 18
    """
    ...


@overload
def eye(N: int, dtype: Type[numpy.complex64]):
    """
    usage.scipy: 18
    """
    ...


@overload
def eye(N: int, dtype: Type[numpy.complex128]):
    """
    usage.scipy: 19
    """
    ...


@overload
def eye(N: int, dtype: numpy.dtype):
    """
    usage.scipy: 18
    """
    ...


@overload
def eye(N: int, M: int, dtype: Type[numpy.float32]):
    """
    usage.scipy: 2
    """
    ...


@overload
def eye(N: int, M: int, dtype: Type[numpy.float64]):
    """
    usage.scipy: 2
    """
    ...


@overload
def eye(N: int, M: int, dtype: Type[numpy.complex64]):
    """
    usage.scipy: 2
    """
    ...


@overload
def eye(N: int, M: int, dtype: Type[numpy.complex128]):
    """
    usage.scipy: 2
    """
    ...


@overload
def eye(N: int, M: int, k: int):
    """
    usage.dask: 4
    usage.scipy: 4
    """
    ...


@overload
def eye(N: int, k: int):
    """
    usage.dask: 2
    usage.scipy: 2
    """
    ...


@overload
def eye(N: int, dtype: Type[numpy.uint8]):
    """
    usage.scipy: 1
    """
    ...


@overload
def eye(N: int, dtype: Type[numpy.uint16]):
    """
    usage.scipy: 1
    """
    ...


@overload
def eye(N: int, dtype: Type[numpy.uint32]):
    """
    usage.scipy: 1
    """
    ...


@overload
def eye(N: int, dtype: Type[numpy.uint64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def eye(N: int, dtype: Type[numpy.int8]):
    """
    usage.scipy: 1
    """
    ...


@overload
def eye(N: int, dtype: Type[numpy.int16]):
    """
    usage.scipy: 1
    """
    ...


@overload
def eye(N: int, dtype: Type[numpy.int32]):
    """
    usage.scipy: 1
    """
    ...


@overload
def eye(N: int, dtype: Type[numpy.int64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def eye(N: int, dtype: Type[numpy.bool_]):
    """
    usage.scipy: 2
    """
    ...


@overload
def eye(N: int, dtype: Type[float]):
    """
    usage.dask: 1
    usage.scipy: 3
    """
    ...


@overload
def eye(N: int, order: Literal["F"]):
    """
    usage.scipy: 1
    """
    ...


def eye(
    N: Union[int, numpy.int64],
    M: int = ...,
    k: int = ...,
    dtype: Union[type, Literal["int64", "float64"], numpy.dtype] = ...,
):
    """
    usage.dask: 33
    usage.matplotlib: 2
    usage.pandas: 9
    usage.sample-usage: 1
    usage.scipy: 463
    usage.skimage: 38
    usage.sklearn: 52
    """
    ...


@overload
def fill_diagonal(a: numpy.ndarray, val: float):
    """
    usage.skimage: 1
    usage.sklearn: 7
    """
    ...


@overload
def fill_diagonal(a: numpy.ndarray, val: numpy.ndarray):
    """
    usage.scipy: 2
    usage.sklearn: 1
    """
    ...


@overload
def fill_diagonal(a: numpy.ndarray, val: int):
    """
    usage.scipy: 4
    usage.sklearn: 8
    """
    ...


@overload
def fill_diagonal(a: numpy.ndarray, val: numpy.float64):
    """
    usage.scipy: 1
    """
    ...


def fill_diagonal(
    a: numpy.ndarray, val: Union[float, int, numpy.ndarray, numpy.float64]
):
    """
    usage.scipy: 7
    usage.skimage: 1
    usage.sklearn: 16
    """
    ...


@overload
def find_common_type(
    array_types: Union[
        List[numpy.dtype],
        Tuple[Union[numpy.dtype, type], Union[numpy.dtype, type]],
        collections.defaultdict,
    ],
    scalar_types: list,
):
    """
    usage.pandas: 58
    """
    ...


@overload
def find_common_type(array_types: List[numpy.dtype], scalar_types: list):
    """
    usage.scipy: 24
    usage.sklearn: 8
    """
    ...


@overload
def find_common_type(array_types: Tuple[numpy.dtype, numpy.dtype], scalar_types: list):
    """
    usage.scipy: 224
    """
    ...


@overload
def find_common_type(
    array_types: Tuple[numpy.dtype, numpy.dtype, numpy.dtype, numpy.dtype],
    scalar_types: Tuple[None, ...],
):
    """
    usage.scipy: 10
    """
    ...


@overload
def find_common_type(
    array_types: List[Union[numpy.dtype, Type[int]]], scalar_types: list
):
    """
    usage.scipy: 1
    """
    ...


@overload
def find_common_type(
    array_types: List[Union[numpy.dtype, Type[numpy.int64]]], scalar_types: list
):
    """
    usage.scipy: 1
    """
    ...


@overload
def find_common_type(
    array_types: List[Union[numpy.dtype, Type[complex]]], scalar_types: list
):
    """
    usage.scipy: 2
    """
    ...


@overload
def find_common_type(
    array_types: List[Union[numpy.dtype, Type[numpy.complex128]]], scalar_types: list
):
    """
    usage.scipy: 1
    """
    ...


@overload
def find_common_type(array_types: Tuple[Literal["intc"]], scalar_types: list):
    """
    usage.scipy: 1
    """
    ...


@overload
def find_common_type(
    array_types: Tuple[Literal["int32"], Literal["float32"]], scalar_types: list
):
    """
    usage.scipy: 1
    """
    ...


@overload
def find_common_type(
    array_types: Tuple[Literal["bool"], Type[complex], Type[float]], scalar_types: list
):
    """
    usage.scipy: 1
    """
    ...


@overload
def find_common_type(
    array_types: Tuple[Literal["i"], Literal["d"]], scalar_types: list
):
    """
    usage.scipy: 1
    """
    ...


@overload
def find_common_type(array_types: List[Type[int]], scalar_types: List[numpy.dtype]):
    """
    usage.scipy: 6
    """
    ...


@overload
def find_common_type(
    array_types: List[Union[Type[numpy.float64], numpy.dtype]], scalar_types: list
):
    """
    usage.scipy: 36
    """
    ...


def find_common_type(
    array_types: Union[
        List[Union[type, numpy.dtype]],
        collections.defaultdict,
        Tuple[Union[str, numpy.dtype, type], ...],
    ],
    scalar_types: Union[List[numpy.dtype], Tuple[None, ...]],
):
    """
    usage.pandas: 58
    usage.scipy: 309
    usage.sklearn: 8
    """
    ...


@overload
def fix(x: float):
    """
    usage.skimage: 1
    """
    ...


@overload
def fix(x: numpy.float64):
    """
    usage.skimage: 1
    """
    ...


@overload
def fix(x: xarray.core.dataarray.DataArray):
    """
    usage.xarray: 1
    """
    ...


@overload
def fix(x: Union[pandas.core.series.Series, numpy.ndarray]):
    """
    usage.pandas: 2
    """
    ...


@overload
def fix(x: numpy.ndarray):
    """
    usage.dask: 3
    """
    ...


def fix(
    x: Union[
        numpy.ndarray,
        xarray.core.dataarray.DataArray,
        float,
        numpy.float64,
        pandas.core.series.Series,
    ]
):
    """
    usage.dask: 3
    usage.pandas: 2
    usage.skimage: 2
    usage.xarray: 1
    """
    ...


def flatnonzero(a: numpy.ndarray):
    """
    usage.dask: 2
    usage.pandas: 2
    usage.scipy: 5
    usage.skimage: 6
    usage.sklearn: 35
    usage.xarray: 2
    """
    ...


@overload
def flip(m: numpy.ndarray, axis: int):
    """
    usage.dask: 2
    usage.scipy: 1
    usage.skimage: 3
    usage.xarray: 4
    """
    ...


@overload
def flip(m: sparse._coo.core.COO, axis: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def flip(m: object, axis: int):
    """
    usage.dask: 1
    usage.xarray: 1
    """
    ...


@overload
def flip(m: dask.array.core.Array, axis: int):
    """
    usage.dask: 2
    """
    ...


def flip(m: object, axis: int):
    """
    usage.dask: 5
    usage.scipy: 1
    usage.skimage: 3
    usage.xarray: 6
    """
    ...


def fliplr(m: numpy.ndarray):
    """
    usage.dask: 1
    usage.matplotlib: 1
    usage.skimage: 5
    """
    ...


def flipud(m: numpy.ndarray):
    """
    usage.dask: 1
    usage.matplotlib: 1
    usage.scipy: 4
    usage.skimage: 2
    usage.xarray: 2
    """
    ...


@overload
def frombuffer(_0: bytes, /, *, dtype: Literal["int8"]):
    """
    usage.skimage: 1
    """
    ...


@overload
def frombuffer(
    _0: Union[bytes, pyarrow.lib.Buffer],
    /,
    *,
    dtype: Union[numpy.dtype, Literal["<i4"], type],
    count: int = ...,
):
    """
    usage.pandas: 22
    """
    ...


@overload
def frombuffer(_0: bytes, /, *, dtype: Literal["<f16"]):
    """
    usage.scipy: 2
    """
    ...


@overload
def frombuffer(_0: bytes, /, *, count: int, dtype: numpy.dtype):
    """
    usage.scipy: 1
    """
    ...


@overload
def frombuffer(_0: bytes, /, *, dtype: Literal[">f4"]):
    """
    usage.scipy: 2
    """
    ...


@overload
def frombuffer(_0: bytes, /, *, dtype: Literal[">i2"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def frombuffer(_0: bytes, /, *, dtype: Literal[">c8"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def frombuffer(_0: bytes, /, *, dtype: Literal[">u1"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def frombuffer(_0: bytes, _1: Literal[">b"], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def frombuffer(_0: bytes, _1: Literal[">i"], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def frombuffer(_0: bytes, /, *, dtype: Literal[">b"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def frombuffer(_0: mmap.mmap, /, *, dtype: Type[numpy.int8]):
    """
    usage.scipy: 1
    """
    ...


@overload
def frombuffer(_0: bytes, /, *, dtype: Literal[">i"]):
    """
    usage.scipy: 2
    """
    ...


@overload
def frombuffer(_0: bytes, _1: Literal[">q"], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def frombuffer(_0: bytes, /, *, dtype: Literal[">f"]):
    """
    usage.scipy: 2
    """
    ...


@overload
def frombuffer(_0: bytes, /, *, dtype: Literal[">d"]):
    """
    usage.scipy: 2
    """
    ...


@overload
def frombuffer(_0: bytes, /, *, dtype: Literal[">c"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def frombuffer(_0: bytes, /, *, dtype: Dict[Literal["formats", "names"], List[str]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def frombuffer(
    _0: bytes,
    /,
    *,
    dtype: Dict[
        Literal["formats", "names"],
        List[Literal["testData", "time", "(100, 100)>i", "()>d"]],
    ],
):
    """
    usage.scipy: 1
    """
    ...


@overload
def frombuffer(_0: bytes, /, *, dtype: Literal["u1"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def frombuffer(_0: bytes, /, *, dtype: Literal["<i4"]):
    """
    usage.matplotlib: 1
    usage.scipy: 1
    """
    ...


@overload
def frombuffer(_0: bytes, /, *, dtype: Literal["<f4"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def frombuffer(_0: bytes, /, *, dtype: Literal["<f8"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def frombuffer(_0: bytes, /, *, dtype: Literal["<i2"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def frombuffer(_0: bytes, /, *, dtype: Literal["<i8"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def frombuffer(
    _0: memoryview, /, *, count: int, dtype: Type[numpy.float32], offset: int
):
    """
    usage.scipy: 1
    """
    ...


@overload
def frombuffer(_0: memoryview, /, *, count: int, dtype: Type[complex], offset: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def frombuffer(_0: bytes, /, *, dtype: Literal["uint8"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def frombuffer(_0: numpy.ndarray, _1: Type[numpy.uint8], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def frombuffer(_0: numpy.ndarray, /, *, dtype: Type[numpy.uint8]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def frombuffer(_0: bytes, /, *, dtype: Type[numpy.uint8]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def frombuffer(_0: bytes, /, *, dtype: Type[numpy.uint32]):
    """
    usage.dask: 1
    """
    ...


@overload
def frombuffer(_0: array.array, /, *, dtype: Type[numpy.int32]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def frombuffer(_0: array.array, _1: Type[numpy.float64], /):
    """
    usage.sklearn: 2
    """
    ...


@overload
def frombuffer(_0: array.array, _1: Type[numpy.longlong], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def frombuffer(_0: array.array, /, *, dtype: Type[numpy.longlong]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def frombuffer(_0: numpy.ndarray, _1: Type[numpy.int64], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def frombuffer(_0: array.array, _1: Type[numpy.float32], /):
    """
    usage.sklearn: 1
    """
    ...


def frombuffer(
    _0: object,
    _1: Union[type, Type[numpy.uint8], Literal[">q", ">i", ">b"]] = ...,
    /,
    *,
    count: int = ...,
    dtype: object = ...,
    offset: int = ...,
):
    """
    usage.dask: 1
    usage.matplotlib: 4
    usage.pandas: 22
    usage.scipy: 31
    usage.skimage: 1
    usage.sklearn: 8
    """
    ...


@overload
def fromfile(_0: _io.TextIOWrapper, /, *, sep: Literal[" "]):
    """
    usage.skimage: 1
    """
    ...


@overload
def fromfile(_0: _io.BufferedReader, /, *, count: int, dtype: numpy.dtype):
    """
    usage.scipy: 10
    """
    ...


def fromfile(
    _0: Union[_io.BufferedReader, _io.TextIOWrapper],
    /,
    *,
    sep: Literal[" "] = ...,
    count: int = ...,
    dtype: numpy.dtype = ...,
):
    """
    usage.scipy: 10
    usage.skimage: 1
    """
    ...


@overload
def fromfunction(function: Callable, shape: Tuple[int, int], *, dtype: None):
    """
    usage.dask: 1
    """
    ...


@overload
def fromfunction(function: Callable, shape: Tuple[int, int], *, dtype: Type[float]):
    """
    usage.dask: 1
    """
    ...


@overload
def fromfunction(function: Callable, shape: Tuple[int, int], *, dtype: Literal["f8"]):
    """
    usage.dask: 2
    """
    ...


@overload
def fromfunction(function: Callable, shape: Tuple[int, int], *, dtype: Literal["i8"]):
    """
    usage.dask: 2
    """
    ...


def fromfunction(
    function: Callable,
    shape: Tuple[int, int],
    *,
    dtype: Union[Literal["i8", "f8"], Type[float], None],
):
    """
    usage.dask: 6
    """
    ...


@overload
def fromiter(_0: generator, /, *, dtype: Union[type, Literal["i8"]]):
    """
    usage.pandas: 3
    """
    ...


@overload
def fromiter(_0: dict_values, /, *, count: int, dtype: numpy.dtype):
    """
    usage.scipy: 15
    """
    ...


@overload
def fromiter(_0: generator, /, *, count: int, dtype: Type[numpy.int32]):
    """
    usage.scipy: 2
    """
    ...


@overload
def fromiter(_0: generator, /, *, count: int, dtype: Type[numpy.int64]):
    """
    usage.scipy: 2
    """
    ...


@overload
def fromiter(_0: List[numpy.float64], /, *, dtype: Type[numpy.float64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def fromiter(_0: itertools.chain, /, *, count: int, dtype: Literal["float64"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def fromiter(_0: generator, /, *, dtype: Type[numpy.float64]):
    """
    usage.sklearn: 2
    """
    ...


def fromiter(
    _0: Union[itertools.chain, generator, dict_values, List[numpy.float64]],
    /,
    *,
    dtype: Union[Literal["float64", "i8"], Type[numpy.float64], type, numpy.dtype],
    count: int = ...,
):
    """
    usage.pandas: 3
    usage.scipy: 20
    usage.sklearn: 3
    """
    ...


@overload
def frompyfunc(_0: Callable, _1: int, _2: int, /):
    """
    usage.dask: 3
    """
    ...


@overload
def frompyfunc(_0: Callable, _1: int, _2: int, /):
    """
    usage.dask: 1
    """
    ...


def frompyfunc(_0: Callable, _1: int, _2: int, /):
    """
    usage.dask: 4
    """
    ...


@overload
def fromstring(_0: str, /, *, dtype: Literal["float"], sep: Literal[","]):
    """
    usage.xarray: 1
    """
    ...


@overload
def fromstring(_0: str, /, *, dtype: Type[int], sep: Literal[" "]):
    """
    usage.scipy: 2
    """
    ...


@overload
def fromstring(_0: str, /, *, dtype: Type[numpy.float64], sep: Literal[" "]):
    """
    usage.scipy: 1
    """
    ...


@overload
def fromstring(_0: Literal[" 1 2 3 4\n"], /, *, dtype: Type[int], sep: Literal[" "]):
    """
    usage.scipy: 1
    """
    ...


@overload
def fromstring(_0: Literal[" 1 2 3\n"], /, *, dtype: Type[int], sep: Literal[" "]):
    """
    usage.scipy: 1
    """
    ...


def fromstring(
    _0: str, /, *, dtype: Union[type, Literal["float"]], sep: Literal[" ", ","]
):
    """
    usage.scipy: 5
    usage.xarray: 1
    """
    ...


@overload
def full(shape: Tuple[int, int], fill_value: int, dtype: Literal["float64"]):
    """
    usage.skimage: 1
    """
    ...


@overload
def full(shape: Tuple[int, int, int], fill_value: int, dtype: Type[numpy.uint8]):
    """
    usage.skimage: 1
    """
    ...


@overload
def full(shape: int, fill_value: int, dtype: Type[float]):
    """
    usage.skimage: 4
    """
    ...


@overload
def full(shape: int, fill_value: float, dtype: Type[float]):
    """
    usage.skimage: 2
    """
    ...


@overload
def full(shape: int, fill_value: float, dtype: numpy.dtype):
    """
    usage.skimage: 2
    usage.sklearn: 6
    """
    ...


@overload
def full(shape: int, fill_value: int, dtype: numpy.dtype):
    """
    usage.skimage: 2
    usage.sklearn: 3
    """
    ...


@overload
def full(shape: Tuple[int, int], fill_value: int, dtype: Type[numpy.uint8]):
    """
    usage.skimage: 3
    """
    ...


@overload
def full(shape: Tuple[int, int], fill_value: float):
    """
    usage.dask: 1
    usage.matplotlib: 1
    usage.scipy: 57
    usage.skimage: 6
    usage.sklearn: 8
    usage.xarray: 3
    """
    ...


@overload
def full(shape: Tuple[int, int], fill_value: int, dtype: Type[numpy.uint16]):
    """
    usage.skimage: 2
    """
    ...


@overload
def full(shape: int, fill_value: float, dtype: Literal["float64"]):
    """
    usage.skimage: 1
    """
    ...


@overload
def full(shape: Tuple[int], fill_value: int, dtype: numpy.dtype):
    """
    usage.skimage: 1
    """
    ...


@overload
def full(shape: numpy.ndarray, fill_value: numpy.float64, dtype: Literal["float64"]):
    """
    usage.skimage: 1
    """
    ...


@overload
def full(shape: int, fill_value: int, dtype: Type[numpy.int32]):
    """
    usage.matplotlib: 3
    usage.skimage: 2
    usage.sklearn: 6
    """
    ...


@overload
def full(shape: numpy.ndarray, fill_value: numpy.int64, dtype: Literal["float64"]):
    """
    usage.skimage: 1
    """
    ...


@overload
def full(shape: Tuple[int, int], fill_value: bool):
    """
    usage.skimage: 2
    """
    ...


@overload
def full(shape: Tuple[int, int], fill_value: int):
    """
    usage.dask: 2
    usage.scipy: 8
    usage.skimage: 1
    usage.sklearn: 1
    usage.xarray: 2
    """
    ...


@overload
def full(shape: Tuple[None, ...], fill_value: float):
    """
    usage.scipy: 1
    usage.xarray: 1
    """
    ...


@overload
def full(shape: Tuple[None, ...], fill_value: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def full(shape: Tuple[int, int, int], fill_value: int):
    """
    usage.scipy: 1
    usage.xarray: 2
    """
    ...


@overload
def full(shape: Tuple[int], fill_value: int):
    """
    usage.dask: 1
    usage.scipy: 1
    usage.xarray: 1
    """
    ...


@overload
def full(shape: int, fill_value: float, dtype: Type[numpy.float64]):
    """
    usage.sklearn: 2
    usage.xarray: 2
    """
    ...


@overload
def full(shape: Tuple[int], fill_value: int, dtype: Type[float]):
    """
    usage.xarray: 1
    """
    ...


@overload
def full(shape: Tuple[int], fill_value: numpy.ndarray, dtype: Type[float]):
    """
    usage.xarray: 2
    """
    ...


@overload
def full(shape: Tuple[int], fill_value: int, dtype: Type[int]):
    """
    usage.xarray: 1
    """
    ...


@overload
def full(shape: Tuple[int], fill_value: numpy.ndarray, dtype: Type[int]):
    """
    usage.xarray: 2
    """
    ...


@overload
def full(shape: Tuple[None, ...], fill_value: numpy.int64):
    """
    usage.xarray: 1
    """
    ...


@overload
def full(shape: Tuple[None, ...], fill_value: numpy.float64):
    """
    usage.xarray: 1
    """
    ...


@overload
def full(
    shape: Union[Tuple[int, ...], int],
    fill_value: object,
    dtype: Union[Type[object], numpy.dtype] = ...,
):
    """
    usage.pandas: 30
    """
    ...


@overload
def full(shape: Tuple[int], fill_value: float, dtype: numpy.dtype):
    """
    usage.scipy: 5
    """
    ...


@overload
def full(shape: Tuple[None, ...], fill_value: float, dtype: numpy.dtype):
    """
    usage.scipy: 1
    """
    ...


@overload
def full(shape: Tuple[int, int, int], fill_value: float, dtype: numpy.dtype):
    """
    usage.scipy: 1
    usage.sklearn: 1
    """
    ...


@overload
def full(shape: List[int], fill_value: int, dtype: numpy.dtype):
    """
    usage.scipy: 2
    """
    ...


@overload
def full(shape: List[int], fill_value: float, dtype: numpy.dtype):
    """
    usage.scipy: 2
    """
    ...


@overload
def full(shape: int, fill_value: int, dtype: Type[numpy.int64]):
    """
    usage.scipy: 17
    usage.sklearn: 2
    """
    ...


@overload
def full(shape: int, fill_value: int, dtype: Literal["f"]):
    """
    usage.scipy: 2
    """
    ...


@overload
def full(shape: int, fill_value: int, dtype: Literal["d"]):
    """
    usage.scipy: 2
    """
    ...


@overload
def full(shape: int, fill_value: int, dtype: Literal["F"]):
    """
    usage.scipy: 2
    """
    ...


@overload
def full(shape: int, fill_value: int, dtype: Literal["D"]):
    """
    usage.scipy: 2
    """
    ...


@overload
def full(shape: int, fill_value: bool, dtype: Type[bool]):
    """
    usage.scipy: 1
    """
    ...


@overload
def full(shape: int, fill_value: float):
    """
    usage.matplotlib: 1
    usage.scipy: 34
    usage.sklearn: 18
    """
    ...


@overload
def full(shape: numpy.int64, fill_value: float):
    """
    usage.scipy: 2
    """
    ...


@overload
def full(shape: numpy.int64, fill_value: bool, dtype: Type[bool]):
    """
    usage.scipy: 1
    """
    ...


@overload
def full(shape: int, fill_value: int):
    """
    usage.scipy: 12
    usage.sklearn: 2
    """
    ...


@overload
def full(shape: int, fill_value: complex):
    """
    usage.scipy: 4
    """
    ...


@overload
def full(shape: Tuple[int], fill_value: int, dtype: Type[numpy.float32]):
    """
    usage.scipy: 1
    """
    ...


@overload
def full(shape: int, fill_value: float, dtype: Literal["f"]):
    """
    usage.scipy: 2
    """
    ...


@overload
def full(shape: int, fill_value: int, dtype: Type[int]):
    """
    usage.scipy: 1
    usage.sklearn: 7
    """
    ...


@overload
def full(shape: int, fill_value: complex, dtype: Type[complex]):
    """
    usage.scipy: 1
    """
    ...


@overload
def full(shape: int, fill_value: int, dtype: Literal["float64"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def full(shape: Tuple[int], fill_value: float):
    """
    usage.scipy: 9
    usage.sklearn: 1
    """
    ...


@overload
def full(shape: Tuple[int, int, int], fill_value: float):
    """
    usage.scipy: 3
    """
    ...


@overload
def full(shape: Tuple[int, int, int, int], fill_value: float):
    """
    usage.scipy: 1
    """
    ...


@overload
def full(shape: Tuple[int, int, int, int], fill_value: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def full(shape: Tuple[int], fill_value: float, dtype: Type[numpy.float64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def full(shape: int, fill_value: numpy.uint8, dtype: Type[numpy.uint8]):
    """
    usage.matplotlib: 3
    """
    ...


@overload
def full(shape: int, fill_value: numpy.int64, dtype: Type[numpy.float64]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def full(_0: Tuple[int, int], /):
    """
    usage.dask: 1
    """
    ...


@overload
def full(_0: Tuple[int], /):
    """
    usage.dask: 1
    """
    ...


@overload
def full(
    shape: Tuple[int, int], fill_value: int, dtype: numpy.dtype, order: Literal["C"]
):
    """
    usage.dask: 1
    """
    ...


@overload
def full(shape: List[int], fill_value: int, dtype: numpy.dtype, order: Literal["C"]):
    """
    usage.dask: 1
    """
    ...


@overload
def full(
    shape: numpy.ndarray, fill_value: int, dtype: numpy.dtype, order: Literal["C"]
):
    """
    usage.dask: 1
    """
    ...


@overload
def full(
    shape: Tuple[int, int], fill_value: int, dtype: numpy.dtype, order: Literal["F"]
):
    """
    usage.dask: 1
    """
    ...


@overload
def full(shape: List[int], fill_value: int, dtype: numpy.dtype, order: Literal["F"]):
    """
    usage.dask: 1
    """
    ...


@overload
def full(
    shape: numpy.ndarray, fill_value: int, dtype: numpy.dtype, order: Literal["F"]
):
    """
    usage.dask: 1
    """
    ...


@overload
def full(shape: Tuple[int, int], fill_value: int, dtype: Literal["i8"]):
    """
    usage.dask: 1
    """
    ...


@overload
def full(shape: int, fill_value: int, dtype: Literal["i8"]):
    """
    usage.dask: 1
    """
    ...


@overload
def full(shape: Tuple[int, int], fill_value: numpy.ndarray, dtype: numpy.dtype):
    """
    usage.sklearn: 3
    """
    ...


@overload
def full(shape: Tuple[int, int], fill_value: numpy.float64, dtype: numpy.dtype):
    """
    usage.sklearn: 4
    """
    ...


@overload
def full(shape: Tuple[int, int], fill_value: int, dtype: Type[int]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def full(
    shape: int,
    fill_value: importlib._bootstrap.MonotonicConstraint,
    dtype: Type[numpy.int8],
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def full(shape: int, fill_value: numpy.int64, dtype: Type[int]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def full(shape: Tuple[int, int, int], fill_value: numpy.float64, dtype: numpy.dtype):
    """
    usage.sklearn: 1
    """
    ...


@overload
def full(shape: int, fill_value: numpy.float64, dtype: numpy.dtype):
    """
    usage.sklearn: 1
    """
    ...


@overload
def full(shape: Tuple[int, int], fill_value: float, dtype: numpy.dtype):
    """
    usage.sklearn: 2
    """
    ...


@overload
def full(shape: Tuple[int, int], fill_value: int, dtype: numpy.dtype):
    """
    usage.sklearn: 3
    """
    ...


@overload
def full(shape: Tuple[int, int], fill_value: int, dtype: Type[float]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def full(shape: Tuple[int, int], fill_value: float, dtype: Type[float]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def full(shape: int, fill_value: Literal["missing"], dtype: numpy.dtype):
    """
    usage.sklearn: 1
    """
    ...


@overload
def full(shape: int, fill_value: Literal["missing_value"], dtype: numpy.dtype):
    """
    usage.sklearn: 1
    """
    ...


@overload
def full(shape: int, fill_value: int, dtype: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def full(shape: numpy.int64, fill_value: numpy.float64):
    """
    usage.sklearn: 1
    """
    ...


@overload
def full(shape: int, fill_value: int, dtype: Type[numpy.uint32]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def full(shape: int, fill_value: int, dtype: Literal["int"]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def full(shape: numpy.int64, fill_value: int, dtype: Type[int]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def full(shape: Tuple[int, int], fill_value: numpy.float64, dtype: Type[numpy.float64]):
    """
    usage.sklearn: 3
    """
    ...


@overload
def full(shape: Tuple[int, int], fill_value: int, dtype: Type[numpy.float64]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def full(shape: Tuple[int], fill_value: numpy.float64, dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def full(shape: Tuple[int, int], fill_value: numpy.float64):
    """
    usage.sklearn: 1
    """
    ...


@overload
def full(shape: int, fill_value: numpy.float64, dtype: Type[numpy.float64]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def full(shape: int, fill_value: numpy.float64):
    """
    usage.sklearn: 1
    """
    ...


@overload
def full(shape: Tuple[int, int], fill_value: numpy.ndarray, dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def full(shape: int, fill_value: float, dtype: None):
    """
    usage.sklearn: 1
    """
    ...


def full(
    _0: Tuple[int, ...] = ...,
    /,
    shape: Union[
        Tuple[Union[None, int], ...], numpy.int64, int, numpy.ndarray, List[int]
    ] = ...,
    fill_value: object = ...,
    dtype: Union[type, Type[object], numpy.dtype, str, None] = ...,
    order: Literal["F", "C"] = ...,
):
    """
    usage.dask: 14
    usage.matplotlib: 9
    usage.pandas: 30
    usage.scipy: 179
    usage.skimage: 32
    usage.sklearn: 97
    usage.xarray: 20
    """
    ...


@overload
def full_like(a: numpy.ndarray, fill_value: int):
    """
    usage.scipy: 5
    usage.skimage: 1
    usage.sklearn: 2
    usage.xarray: 1
    """
    ...


@overload
def full_like(a: xarray.core.variable.Variable, fill_value: int, dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def full_like(a: xarray.core.variable.Variable, fill_value: bool, dtype: Type[bool]):
    """
    usage.xarray: 1
    """
    ...


@overload
def full_like(a: xarray.core.dataarray.DataArray, fill_value: int, dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def full_like(a: xarray.core.dataarray.DataArray, fill_value: bool, dtype: Type[bool]):
    """
    usage.xarray: 1
    """
    ...


@overload
def full_like(a: xarray.core.variable.IndexVariable, fill_value: int, dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def full_like(a: object, fill_value: float):
    """
    usage.xarray: 2
    """
    ...


@overload
def full_like(a: xarray.core.variable.Variable, fill_value: object, dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def full_like(a: xarray.core.variable.Variable, fill_value: numpy.ndarray, dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def full_like(a: xarray.core.dataarray.DataArray, fill_value: object, dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def full_like(
    a: xarray.core.dataarray.DataArray, fill_value: numpy.ndarray, dtype: None
):
    """
    usage.xarray: 1
    """
    ...


@overload
def full_like(a: object, fill_value: bool, dtype: Type[bool]):
    """
    usage.xarray: 1
    """
    ...


@overload
def full_like(a: numpy.ndarray, fill_value: bool, dtype: Type[bool]):
    """
    usage.xarray: 2
    """
    ...


@overload
def full_like(a: xarray.core.variable.Variable, fill_value: int, dtype: Type[int]):
    """
    usage.xarray: 1
    """
    ...


@overload
def full_like(a: xarray.core.variable.Variable, fill_value: float, dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def full_like(a: numpy.ndarray, fill_value: float):
    """
    usage.matplotlib: 4
    usage.scipy: 9
    usage.sklearn: 4
    """
    ...


@overload
def full_like(a: numpy.ndarray, fill_value: float, dtype: Type[numpy.float64]):
    """
    usage.scipy: 12
    """
    ...


@overload
def full_like(a: float, fill_value: float, dtype: Type[numpy.float64]):
    """
    usage.scipy: 2
    """
    ...


@overload
def full_like(a: numpy.float64, fill_value: float):
    """
    usage.scipy: 1
    """
    ...


@overload
def full_like(a: List[float], fill_value: float):
    """
    usage.matplotlib: 3
    """
    ...


@overload
def full_like(a: List[numpy.float64], fill_value: float):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def full_like(
    a: numpy.ndarray,
    fill_value: numpy.int64,
    dtype: Type[numpy.float64],
    shape: Tuple[int],
):
    """
    usage.dask: 4
    """
    ...


@overload
def full_like(a: numpy.ndarray, fill_value: numpy.float64):
    """
    usage.dask: 2
    """
    ...


@overload
def full_like(
    a: numpy.ndarray,
    fill_value: numpy.int64,
    dtype: numpy.dtype,
    shape: Tuple[int, int],
):
    """
    usage.dask: 2
    """
    ...


@overload
def full_like(
    a: numpy.ndarray,
    fill_value: numpy.int64,
    dtype: Type[numpy.float64],
    shape: Tuple[int, int],
):
    """
    usage.dask: 1
    """
    ...


@overload
def full_like(
    a: object, fill_value: numpy.int64, dtype: numpy.dtype, shape: Tuple[int, int]
):
    """
    usage.dask: 1
    """
    ...


@overload
def full_like(
    a: object,
    fill_value: numpy.int64,
    dtype: Type[numpy.float64],
    shape: Tuple[int, int],
):
    """
    usage.dask: 1
    """
    ...


@overload
def full_like(a: numpy.ndarray, fill_value: int, order: Literal["C"]):
    """
    usage.dask: 1
    """
    ...


@overload
def full_like(a: numpy.ndarray, fill_value: int, order: Literal["F"]):
    """
    usage.dask: 1
    """
    ...


@overload
def full_like(a: numpy.ndarray, fill_value: int, shape: None):
    """
    usage.dask: 1
    """
    ...


@overload
def full_like(a: numpy.ndarray, fill_value: int, shape: Tuple[int, int]):
    """
    usage.dask: 1
    """
    ...


@overload
def full_like(a: numpy.ndarray, fill_value: int, shape: int):
    """
    usage.dask: 1
    """
    ...


@overload
def full_like(a: numpy.ndarray, fill_value: int, shape: Tuple[int, int, int]):
    """
    usage.dask: 1
    """
    ...


@overload
def full_like(a: numpy.ndarray, fill_value: int, shape: Tuple[int, int, int, int, int]):
    """
    usage.dask: 1
    """
    ...


@overload
def full_like(
    a: numpy.ndarray,
    fill_value: numpy.int64,
    dtype: numpy.dtype,
    shape: Tuple[int, int, int],
):
    """
    usage.dask: 5
    """
    ...


@overload
def full_like(
    a: numpy.ndarray,
    fill_value: numpy.float64,
    dtype: Literal["f4"],
    shape: Tuple[int, int, int],
):
    """
    usage.dask: 1
    """
    ...


@overload
def full_like(
    a: numpy.ndarray,
    fill_value: numpy.int64,
    dtype: Literal["f4"],
    shape: Tuple[int, int, int],
):
    """
    usage.dask: 1
    """
    ...


@overload
def full_like(
    a: numpy.ndarray,
    fill_value: numpy.float32,
    dtype: Literal["f4"],
    shape: Tuple[int, int, int],
):
    """
    usage.dask: 1
    """
    ...


@overload
def full_like(
    a: numpy.ndarray,
    fill_value: numpy.float64,
    dtype: Literal["i4"],
    shape: Tuple[int, int, int],
):
    """
    usage.dask: 1
    """
    ...


@overload
def full_like(
    a: numpy.ndarray,
    fill_value: numpy.int64,
    dtype: Literal["i4"],
    shape: Tuple[int, int, int],
):
    """
    usage.dask: 1
    """
    ...


@overload
def full_like(
    a: numpy.ndarray,
    fill_value: numpy.int32,
    dtype: Literal["i4"],
    shape: Tuple[int, int, int],
):
    """
    usage.dask: 1
    """
    ...


@overload
def full_like(
    a: numpy.ndarray,
    fill_value: numpy.int64,
    dtype: Literal["f4"],
    shape: Tuple[int, int],
):
    """
    usage.dask: 1
    """
    ...


@overload
def full_like(
    a: numpy.ndarray, fill_value: numpy.int64, dtype: Literal["f4"], shape: Tuple[int]
):
    """
    usage.dask: 1
    """
    ...


@overload
def full_like(
    a: numpy.ndarray,
    fill_value: numpy.int64,
    dtype: Literal["i4"],
    shape: Tuple[int, int],
):
    """
    usage.dask: 1
    """
    ...


@overload
def full_like(
    a: numpy.ndarray, fill_value: numpy.int64, dtype: Literal["i4"], shape: Tuple[int]
):
    """
    usage.dask: 1
    """
    ...


@overload
def full_like(
    a: numpy.ndarray, fill_value: numpy.int64, dtype: numpy.dtype, shape: Tuple[int]
):
    """
    usage.dask: 3
    """
    ...


@overload
def full_like(
    a: numpy.ndarray, fill_value: numpy.float64, dtype: numpy.dtype, shape: Tuple[int]
):
    """
    usage.dask: 2
    """
    ...


@overload
def full_like(
    a: numpy.ndarray, fill_value: numpy.int64, dtype: Literal["f8"], shape: Tuple[int]
):
    """
    usage.dask: 2
    """
    ...


@overload
def full_like(
    a: numpy.ndarray, fill_value: numpy.int64, dtype: Literal["i8"], shape: Tuple[int]
):
    """
    usage.dask: 2
    """
    ...


@overload
def full_like(
    a: numpy.ndarray,
    fill_value: numpy.float64,
    dtype: Type[numpy.float64],
    shape: Tuple[int],
):
    """
    usage.dask: 2
    """
    ...


@overload
def full_like(
    a: numpy.ndarray,
    fill_value: numpy.float64,
    dtype: numpy.dtype,
    shape: Tuple[int, int],
):
    """
    usage.dask: 1
    """
    ...


@overload
def full_like(
    a: numpy.ndarray,
    fill_value: numpy.float64,
    dtype: Type[numpy.float64],
    shape: Tuple[int, int],
):
    """
    usage.dask: 1
    """
    ...


@overload
def full_like(
    a: numpy.ndarray,
    fill_value: numpy.float64,
    dtype: numpy.dtype,
    shape: Tuple[int, int, int],
):
    """
    usage.dask: 1
    """
    ...


@overload
def full_like(a: numpy.ndarray, fill_value: int, dtype: Type[numpy.float32]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def full_like(a: List[Literal["b", "a"]], fill_value: Literal["a"]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def full_like(a: List[Literal["b", "c", "a"]], fill_value: Literal["a"]):
    """
    usage.sklearn: 1
    """
    ...


def full_like(
    a: object,
    fill_value: object,
    dtype: object = ...,
    shape: Union[Tuple[int, ...], None, int] = ...,
):
    """
    usage.dask: 47
    usage.matplotlib: 8
    usage.scipy: 29
    usage.skimage: 1
    usage.sklearn: 10
    usage.xarray: 17
    """
    ...


def genfromtxt(fname: str):
    """
    usage.scipy: 1
    """
    ...


def get_printoptions():
    """
    usage.sklearn: 1
    usage.xarray: 3
    """
    ...


def geterr():
    """
    usage.pandas: 1
    """
    ...


@overload
def gradient(f: numpy.ndarray):
    """
    usage.dask: 1
    usage.matplotlib: 1
    usage.skimage: 7
    """
    ...


@overload
def gradient(f: numpy.ndarray, *, axis: int):
    """
    usage.skimage: 1
    """
    ...


@overload
def gradient(
    f: xarray.core.dataarray.DataArray,
    *varargs: Literal["v", "t"],
    axis: int,
    edge_order: int,
):
    """
    usage.xarray: 4
    """
    ...


@overload
def gradient(f: numpy.ndarray, *varargs: Literal["v", "t"], axis: int, edge_order: int):
    """
    usage.dask: 4
    usage.xarray: 3
    """
    ...


@overload
def gradient(
    f: sparse._coo.core.COO, *varargs: Literal["v", "t"], axis: int, edge_order: int
):
    """
    usage.xarray: 1
    """
    ...


@overload
def gradient(f: object, *varargs: Literal["v", "t"], axis: int, edge_order: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def gradient(f: numpy.ndarray, *varargs: Literal["v", "t"]):
    """
    usage.dask: 2
    usage.matplotlib: 3
    """
    ...


@overload
def gradient(f: numpy.ma.core.MaskedArray, *varargs: Literal["v", "t"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def gradient(f: numpy.ndarray, *, axis: None, edge_order: int):
    """
    usage.dask: 1
    """
    ...


@overload
def gradient(f: int, *varargs: Literal["v", "t"]):
    """
    usage.dask: 1
    """
    ...


@overload
def gradient(
    f: numpy.ndarray, *varargs: Literal["v", "t"], axis: None, edge_order: int
):
    """
    usage.dask: 2
    """
    ...


@overload
def gradient(f: float, *varargs: Literal["v", "t"]):
    """
    usage.dask: 2
    """
    ...


@overload
def gradient(f: numpy.ndarray, *, axis: int, edge_order: int):
    """
    usage.dask: 1
    """
    ...


@overload
def gradient(f: numpy.ndarray, *, axis: Tuple[int, int], edge_order: int):
    """
    usage.dask: 1
    """
    ...


@overload
def gradient(
    f: numpy.ndarray,
    *varargs: Literal["v", "t"],
    axis: Tuple[int, int],
    edge_order: int,
):
    """
    usage.dask: 2
    """
    ...


def gradient(
    f: object,
    *varargs: Literal["v", "t"],
    axis: Union[Tuple[int, int], None, int] = ...,
    edge_order: int = ...,
):
    """
    usage.dask: 17
    usage.matplotlib: 5
    usage.skimage: 8
    usage.xarray: 9
    """
    ...


def hamming(M: int):
    """
    usage.skimage: 1
    """
    ...


def hanning(M: int):
    """
    usage.matplotlib: 4
    usage.skimage: 1
    """
    ...


@overload
def histogram(a: numpy.ndarray, bins: int, range: None):
    """
    usage.skimage: 2
    """
    ...


@overload
def histogram(a: numpy.ndarray, bins: int, range: Tuple[int, int]):
    """
    usage.skimage: 1
    """
    ...


@overload
def histogram(
    a: numpy.ndarray,
    bins: Tuple[
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
        numpy.float64,
    ],
    density: bool,
):
    """
    usage.skimage: 1
    """
    ...


@overload
def histogram(a: numpy.ndarray, bins: numpy.int64, range: None):
    """
    usage.skimage: 1
    """
    ...


@overload
def histogram(a: numpy.ndarray, bins: List[Union[int, float]]):
    """
    usage.skimage: 2
    """
    ...


@overload
def histogram(a: numpy.ndarray, bins: int, range: None, weights: None):
    """
    usage.matplotlib: 1
    usage.pandas: 2
    """
    ...


@overload
def histogram(a: numpy.ndarray, bins: numpy.ndarray):
    """
    usage.scipy: 2
    """
    ...


@overload
def histogram(a: numpy.ndarray, bins: int):
    """
    usage.scipy: 2
    """
    ...


@overload
def histogram(a: numpy.ndarray, bins: int, weights: numpy.ndarray):
    """
    usage.scipy: 1
    """
    ...


@overload
def histogram(
    a: numpy.ndarray,
    bins: int,
    range: Tuple[numpy.float64, numpy.float64],
    weights: None,
):
    """
    usage.matplotlib: 1
    usage.scipy: 1
    """
    ...


@overload
def histogram(a: numpy.ndarray, bins: int, range: Tuple[float, int], weights: None):
    """
    usage.scipy: 1
    """
    ...


@overload
def histogram(
    a: numpy.ndarray, bins: int, range: Tuple[numpy.int64, numpy.int64], weights: None
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def histogram(a: list, bins: int, range: None, weights: None):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def histogram(a: numpy.ndarray, bins: numpy.ndarray, weights: None):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def histogram(
    a: numpy.ndarray,
    bins: int,
    range: Tuple[numpy.float64, numpy.float64],
    weights: None,
    density: bool,
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def histogram(
    a: numpy.ndarray,
    bins: List[Union[int, float]],
    range: Tuple[numpy.float64, numpy.float64],
    weights: None,
    density: bool,
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def histogram(a: numpy.ndarray, bins: List[Union[int, float]], density: bool):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def histogram(a: numpy.ndarray, bins: numpy.ndarray, range: None, weights: None):
    """
    usage.dask: 2
    usage.matplotlib: 1
    """
    ...


@overload
def histogram(
    a: numpy.ndarray,
    bins: Literal["auto"],
    range: Tuple[int, int],
    weights: None,
    density: bool,
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def histogram(a: numpy.ndarray, bins: int, range: Tuple[int, int], weights: None):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def histogram(
    a: numpy.ndarray,
    bins: numpy.ndarray,
    range: Tuple[numpy.float64, numpy.float64],
    weights: None,
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def histogram(a: list):
    """
    usage.dask: 1
    """
    ...


@overload
def histogram(a: dask.array.core.Array, bins: numpy.ndarray):
    """
    usage.dask: 2
    """
    ...


@overload
def histogram(a: dask.array.core.Array, bins: int, range: Tuple[int, int]):
    """
    usage.dask: 2
    """
    ...


@overload
def histogram(
    a: numpy.ndarray, bins: numpy.ndarray, range: Tuple[int, int], weights: None
):
    """
    usage.dask: 1
    """
    ...


@overload
def histogram(a: dask.array.core.Array, bins: numpy.ndarray, density: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def histogram(
    a: dask.array.core.Array, bins: numpy.ndarray, weights: dask.array.core.Array
):
    """
    usage.dask: 1
    """
    ...


@overload
def histogram(
    a: numpy.ndarray, bins: numpy.ndarray, range: None, weights: numpy.ndarray
):
    """
    usage.dask: 1
    """
    ...


@overload
def histogram(
    a: numpy.ndarray,
    bins: int,
    range: List[numpy.float64],
    weights: numpy.ndarray,
    density: bool,
):
    """
    usage.dask: 1
    """
    ...


@overload
def histogram(
    a: numpy.ndarray,
    bins: numpy.ndarray,
    range: List[numpy.float64],
    weights: numpy.ndarray,
):
    """
    usage.dask: 1
    """
    ...


@overload
def histogram(
    a: numpy.ndarray,
    bins: int,
    range: List[numpy.float64],
    weights: None,
    density: bool,
):
    """
    usage.dask: 1
    """
    ...


@overload
def histogram(
    a: numpy.ndarray, bins: numpy.ndarray, range: List[numpy.float64], weights: None
):
    """
    usage.dask: 1
    """
    ...


@overload
def histogram(
    a: numpy.ndarray,
    bins: numpy.ndarray,
    range: List[numpy.float64],
    weights: numpy.ndarray,
    density: bool,
):
    """
    usage.dask: 1
    """
    ...


@overload
def histogram(
    a: numpy.ndarray,
    bins: numpy.ndarray,
    range: List[numpy.float64],
    weights: None,
    density: bool,
):
    """
    usage.dask: 1
    """
    ...


@overload
def histogram(a: numpy.ndarray):
    """
    usage.sklearn: 1
    """
    ...


def histogram(
    a: Union[numpy.ndarray, dask.array.core.Array, list],
    bins: object = ...,
    range: Union[
        Tuple[
            Union[numpy.int64, int, float, numpy.float64],
            Union[numpy.int64, int, numpy.float64],
        ],
        None,
        List[numpy.float64],
    ] = ...,
    weights: Union[numpy.ndarray, dask.array.core.Array, None] = ...,
    density: bool = ...,
):
    """
    usage.dask: 17
    usage.matplotlib: 13
    usage.pandas: 2
    usage.scipy: 7
    usage.skimage: 7
    usage.sklearn: 1
    """
    ...


@overload
def histogram2d(x: numpy.ndarray, y: numpy.ndarray, bins: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def histogram2d(x: numpy.ndarray, y: numpy.ndarray, bins: int, weights: numpy.ndarray):
    """
    usage.scipy: 1
    """
    ...


@overload
def histogram2d(
    x: numpy.ndarray,
    y: numpy.ndarray,
    bins: int,
    range: None,
    normed: bool,
    weights: None,
):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def histogram2d(
    x: numpy.ndarray, y: numpy.ndarray, bins: Tuple[numpy.ndarray, numpy.ndarray]
):
    """
    usage.sklearn: 1
    """
    ...


def histogram2d(
    x: numpy.ndarray,
    y: numpy.ndarray,
    bins: Union[Tuple[numpy.ndarray, numpy.ndarray], int],
    range: None = ...,
    normed: bool = ...,
    weights: Union[None, numpy.ndarray] = ...,
):
    """
    usage.matplotlib: 2
    usage.scipy: 2
    usage.sklearn: 1
    """
    ...


@overload
def histogram_bin_edges(
    a: numpy.ndarray,
    bins: int,
    range: Tuple[numpy.float64, numpy.float64],
    weights: None,
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def histogram_bin_edges(
    a: numpy.ndarray,
    bins: numpy.ndarray,
    range: Tuple[numpy.float64, numpy.float64],
    weights: None,
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def histogram_bin_edges(
    a: numpy.ndarray, bins: int, range: Tuple[numpy.int64, numpy.int64], weights: None
):
    """
    usage.matplotlib: 1
    """
    ...


def histogram_bin_edges(
    a: numpy.ndarray,
    bins: Union[int, numpy.ndarray],
    range: Tuple[Union[numpy.float64, numpy.int64], Union[numpy.float64, numpy.int64]],
    weights: None,
):
    """
    usage.matplotlib: 3
    """
    ...


@overload
def histogramdd(sample: numpy.ndarray, bins: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def histogramdd(sample: numpy.ndarray, bins: int, weights: numpy.ndarray):
    """
    usage.scipy: 1
    """
    ...


def histogramdd(sample: numpy.ndarray, bins: int, weights: numpy.ndarray = ...):
    """
    usage.scipy: 2
    """
    ...


@overload
def hstack(tup: List[numpy.ndarray]):
    """
    usage.matplotlib: 18
    usage.scipy: 81
    usage.skimage: 24
    usage.sklearn: 79
    usage.xarray: 1
    """
    ...


@overload
def hstack(tup: Tuple[numpy.ndarray]):
    """
    usage.skimage: 1
    usage.sklearn: 3
    """
    ...


@overload
def hstack(tup: List[numpy.int64]):
    """
    usage.skimage: 1
    """
    ...


@overload
def hstack(tup: List[numpy.float32]):
    """
    usage.skimage: 1
    """
    ...


@overload
def hstack(tup: List[numpy.float64]):
    """
    usage.skimage: 1
    usage.sklearn: 1
    """
    ...


@overload
def hstack(tup: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray]):
    """
    usage.scipy: 9
    usage.skimage: 1
    usage.sklearn: 10
    """
    ...


@overload
def hstack(tup: Tuple[numpy.ndarray, numpy.ndarray]):
    """
    usage.dask: 3
    usage.matplotlib: 1
    usage.scipy: 88
    usage.skimage: 1
    usage.sklearn: 39
    """
    ...


@overload
def hstack(
    tup: Union[
        Tuple[
            Union[List[Union[bool, int, List[Literal["x", "y", "z"]]]], numpy.ndarray],
            ...,
        ],
        List[Union[numpy.ndarray, float]],
    ]
):
    """
    usage.pandas: 9
    """
    ...


@overload
def hstack(tup: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray]):
    """
    usage.scipy: 6
    """
    ...


@overload
def hstack(tup: Tuple[numpy.float64, numpy.float64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def hstack(tup: Tuple[numpy.float64, numpy.float64, numpy.float64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def hstack(
    tup: Tuple[
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
    ]
):
    """
    usage.scipy: 2
    usage.sklearn: 1
    """
    ...


@overload
def hstack(tup: Tuple[numpy.complex128, numpy.complex128]):
    """
    usage.scipy: 1
    """
    ...


@overload
def hstack(tup: Tuple[List[int], numpy.ndarray]):
    """
    usage.scipy: 18
    """
    ...


@overload
def hstack(
    tup: Tuple[List[int], Tuple[int, int, int, int, int, int, int, int, int, int]]
):
    """
    usage.scipy: 1
    """
    ...


@overload
def hstack(
    tup: Tuple[
        numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray
    ]
):
    """
    usage.scipy: 1
    """
    ...


@overload
def hstack(
    tup: Tuple[List[int], Tuple[float, float, float, float, float, float, float]]
):
    """
    usage.scipy: 1
    """
    ...


@overload
def hstack(
    tup: Tuple[
        List[int],
        Tuple[float, float, float, float, float, float, float, float, float, float],
    ]
):
    """
    usage.scipy: 1
    """
    ...


@overload
def hstack(tup: Tuple[List[int], Tuple[float, float]]):
    """
    usage.scipy: 2
    """
    ...


@overload
def hstack(tup: Tuple[List[int], List[float]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def hstack(tup: Tuple[List[int], List[Union[float, numpy.float64]]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def hstack(tup: Tuple[int, numpy.ndarray]):
    """
    usage.scipy: 2
    usage.sklearn: 4
    """
    ...


@overload
def hstack(tup: Tuple[numpy.ndarray, int]):
    """
    usage.scipy: 2
    usage.sklearn: 4
    """
    ...


@overload
def hstack(tup: Tuple[numpy.ndarray, numpy.ndarray, numpy.float64]):
    """
    usage.matplotlib: 1
    usage.scipy: 1
    """
    ...


@overload
def hstack(tup: Tuple[numpy.ndarray, numpy.float64]):
    """
    usage.scipy: 1
    usage.sklearn: 2
    """
    ...


@overload
def hstack(tup: Tuple[numpy.ndarray, List[int]]):
    """
    usage.scipy: 2
    """
    ...


@overload
def hstack(tup: Tuple[List[float], numpy.ndarray, list]):
    """
    usage.scipy: 1
    """
    ...


@overload
def hstack(tup: Tuple[list, numpy.ndarray, List[float]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def hstack(tup: Tuple[list, numpy.ndarray, list]):
    """
    usage.scipy: 1
    """
    ...


@overload
def hstack(tup: Tuple[List[float], numpy.ndarray, List[float]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def hstack(tup: Tuple[numpy.ndarray, numpy.float64, numpy.ndarray]):
    """
    usage.scipy: 1
    """
    ...


@overload
def hstack(tup: Tuple[numpy.ndarray, list]):
    """
    usage.scipy: 2
    """
    ...


@overload
def hstack(tup: Tuple[numpy.ndarray, List[numpy.complex128]]):
    """
    usage.scipy: 4
    """
    ...


@overload
def hstack(tup: List[Union[numpy.ndarray, float]]):
    """
    usage.scipy: 2
    """
    ...


@overload
def hstack(tup: List[Union[float, numpy.ndarray]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def hstack(tup: Tuple[numpy.ndarray, numpy.ndarray, numpy.int64]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def hstack(tup: List[Union[List[numpy.uint8], numpy.ndarray]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def hstack(tup: List[Union[numpy.uint8, numpy.ndarray]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def hstack(tup: List[Union[int, numpy.ndarray]]):
    """
    usage.matplotlib: 11
    usage.sklearn: 1
    """
    ...


@overload
def hstack(tup: List[Union[numpy.float64, numpy.ndarray]]):
    """
    usage.matplotlib: 2
    usage.sklearn: 1
    """
    ...


@overload
def hstack(tup: List[Union[numpy.ndarray, List[numpy.float64]]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def hstack(tup: numpy.ndarray):
    """
    usage.dask: 1
    usage.sklearn: 1
    """
    ...


@overload
def hstack(tup: dask.array.core.Array):
    """
    usage.dask: 2
    """
    ...


@overload
def hstack(tup: object):
    """
    usage.dask: 1
    """
    ...


@overload
def hstack(
    tup: Tuple[
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
    ]
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def hstack(tup: Tuple[numpy.ndarray, float]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def hstack(tup: List[pandas.core.frame.DataFrame]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def hstack(tup: List[Union[pandas.core.frame.DataFrame, numpy.ndarray]]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def hstack(tup: List[Union[numpy.ndarray, List[int]]]):
    """
    usage.sklearn: 7
    """
    ...


@overload
def hstack(tup: List[float]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def hstack(tup: List[List[float]]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def hstack(tup: List[int]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def hstack(tup: List[Union[numpy.float64, int]]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def hstack(tup: List[Union[int, numpy.float64]]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def hstack(tup: List[List[int]]):
    """
    usage.sklearn: 3
    """
    ...


@overload
def hstack(tup: List[Union[numpy.ndarray, List[Literal["1", "2", "0"]]]]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def hstack(tup: List[Union[numpy.ndarray, List[Literal["3", "1", "2", "0"]]]]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def hstack(tup: List[Union[numpy.ndarray, List[Literal["bird", "ant"]]]]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def hstack(tup: List[Union[numpy.ndarray, List[Literal["cat", "ant"]]]]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def hstack(tup: List[Union[numpy.ndarray, List[Literal["bird", "cat"]]]]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def hstack(tup: List[Union[numpy.ndarray, List[Literal["ant"]]]]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def hstack(tup: List[Union[numpy.ndarray, List[Literal["bird"]]]]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def hstack(tup: List[Union[numpy.ndarray, List[Literal["cat"]]]]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def hstack(tup: List[Union[numpy.ndarray, List[Literal["spam", "eggs"]]]]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def hstack(tup: Tuple[List[List[int]], numpy.ndarray]):
    """
    usage.sklearn: 1
    """
    ...


def hstack(tup: object):
    """
    usage.dask: 7
    usage.matplotlib: 37
    usage.pandas: 9
    usage.scipy: 237
    usage.skimage: 30
    usage.sklearn: 179
    usage.xarray: 1
    """
    ...


@overload
def i0(x: numpy.ndarray):
    """
    usage.dask: 3
    """
    ...


@overload
def i0(x: pandas.core.series.Series):
    """
    usage.dask: 5
    """
    ...


@overload
def i0(x: dask.dataframe.core.Series):
    """
    usage.dask: 2
    """
    ...


@overload
def i0(x: pandas.core.frame.DataFrame):
    """
    usage.dask: 5
    """
    ...


@overload
def i0(x: dask.dataframe.core.DataFrame):
    """
    usage.dask: 2
    """
    ...


def i0(
    x: Union[
        dask.dataframe.core.DataFrame,
        dask.dataframe.core.Series,
        numpy.ndarray,
        pandas.core.series.Series,
        pandas.core.frame.DataFrame,
    ]
):
    """
    usage.dask: 17
    """
    ...


@overload
def identity(n: int):
    """
    usage.matplotlib: 1
    usage.scipy: 58
    usage.sklearn: 1
    """
    ...


@overload
def identity(n: int, dtype: numpy.dtype):
    """
    usage.scipy: 9
    """
    ...


@overload
def identity(n: int, dtype: Type[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def identity(n: int, dtype: Type[bool]):
    """
    usage.matplotlib: 1
    """
    ...


def identity(n: int, dtype: Union[type, numpy.dtype] = ...):
    """
    usage.matplotlib: 3
    usage.scipy: 67
    usage.sklearn: 1
    """
    ...


@overload
def imag(val: numpy.ndarray):
    """
    usage.dask: 16
    usage.scipy: 22
    usage.skimage: 1
    usage.sklearn: 1
    """
    ...


@overload
def imag(val: xarray.core.dataarray.DataArray):
    """
    usage.xarray: 1
    """
    ...


@overload
def imag(val: Union[numpy.ndarray, numpy.complex128]):
    """
    usage.pandas: 2
    """
    ...


@overload
def imag(val: List[complex]):
    """
    usage.scipy: 1
    """
    ...


@overload
def imag(val: numpy.complex128):
    """
    usage.scipy: 6
    """
    ...


@overload
def imag(val: float):
    """
    usage.scipy: 6
    """
    ...


@overload
def imag(val: int):
    """
    usage.scipy: 7
    """
    ...


@overload
def imag(val: numpy.float64):
    """
    usage.scipy: 4
    """
    ...


@overload
def imag(val: complex):
    """
    usage.scipy: 5
    """
    ...


@overload
def imag(val: dask.array.core.Array):
    """
    usage.dask: 1
    """
    ...


@overload
def imag(val: pandas.core.series.Series):
    """
    usage.dask: 5
    """
    ...


@overload
def imag(val: dask.dataframe.core.Series):
    """
    usage.dask: 2
    """
    ...


@overload
def imag(val: pandas.core.frame.DataFrame):
    """
    usage.dask: 5
    """
    ...


@overload
def imag(val: dask.dataframe.core.DataFrame):
    """
    usage.dask: 2
    """
    ...


def imag(val: object):
    """
    usage.dask: 31
    usage.pandas: 2
    usage.scipy: 51
    usage.skimage: 1
    usage.sklearn: 1
    usage.xarray: 1
    """
    ...


@overload
def in1d(ar1: numpy.flatiter, ar2: Tuple[int, int]):
    """
    usage.skimage: 1
    """
    ...


@overload
def in1d(ar1: numpy.ndarray, ar2: numpy.ndarray):
    """
    usage.matplotlib: 1
    usage.scipy: 3
    usage.skimage: 1
    usage.sklearn: 32
    """
    ...


@overload
def in1d(
    ar1: Union[pandas.core.indexes.numeric.Int64Index, numpy.ndarray],
    ar2: Union[Tuple[int, int, int, int], numpy.ndarray],
    assume_unique: bool = ...,
):
    """
    usage.pandas: 6
    """
    ...


@overload
def in1d(ar1: numpy.ndarray, ar2: numpy.ndarray, assume_unique: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def in1d(ar1: numpy.ndarray, ar2: List[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def in1d(
    ar1: Tuple[
        Literal["mean_test_score"],
        Literal["rank_test_score"],
        Literal["split0_test_score"],
        Literal["split1_test_score"],
        Literal["split2_test_score"],
    ],
    ar2: List[str],
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def in1d(ar1: numpy.ndarray, ar2: List[numpy.int64]):
    """
    usage.sklearn: 1
    """
    ...


def in1d(
    ar1: Union[
        Tuple[
            Literal["mean_test_score"],
            Literal["rank_test_score"],
            Literal["split0_test_score"],
            Literal["split1_test_score"],
            Literal["split2_test_score"],
        ],
        numpy.ndarray,
        pandas.core.indexes.numeric.Int64Index,
        numpy.flatiter,
    ],
    ar2: Union[
        numpy.ndarray, List[Union[numpy.int64, numpy.float64, str]], Tuple[int, ...]
    ],
    assume_unique: bool = ...,
):
    """
    usage.dask: 1
    usage.matplotlib: 1
    usage.pandas: 6
    usage.scipy: 3
    usage.skimage: 2
    usage.sklearn: 35
    """
    ...


@overload
def indices(dimensions: Tuple[int]):
    """
    usage.dask: 1
    usage.scipy: 1
    usage.skimage: 2
    """
    ...


@overload
def indices(dimensions: Tuple[int, int]):
    """
    usage.dask: 2
    usage.matplotlib: 2
    usage.scipy: 7
    usage.skimage: 2
    usage.sklearn: 2
    """
    ...


@overload
def indices(dimensions: Tuple[numpy.int64, numpy.int64], dtype: Type[numpy.float64]):
    """
    usage.skimage: 1
    """
    ...


@overload
def indices(dimensions: List[int]):
    """
    usage.scipy: 3
    """
    ...


@overload
def indices(dimensions: Tuple[int, int], dtype: Type[numpy.float64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def indices(dimensions: Tuple[int, int], dtype: Type[numpy.int32]):
    """
    usage.scipy: 11
    """
    ...


@overload
def indices(dimensions: Tuple[int, int], dtype: numpy.dtype):
    """
    usage.scipy: 2
    """
    ...


@overload
def indices(dimensions: Tuple[int], dtype: numpy.dtype):
    """
    usage.scipy: 1
    """
    ...


@overload
def indices(dimensions: Tuple[None, ...]):
    """
    usage.dask: 1
    """
    ...


@overload
def indices(dimensions: Tuple[None, ...], dtype: Type[float]):
    """
    usage.dask: 1
    """
    ...


@overload
def indices(dimensions: Tuple[int], dtype: Type[float]):
    """
    usage.dask: 2
    """
    ...


@overload
def indices(dimensions: Tuple[int, int, int], dtype: Type[float]):
    """
    usage.dask: 1
    """
    ...


@overload
def indices(dimensions: generator):
    """
    usage.sklearn: 1
    """
    ...


def indices(
    dimensions: Union[Tuple[Union[None, int, numpy.int64], ...], generator, List[int]],
    dtype: Union[Type[float], Type[numpy.float64], type, numpy.dtype] = ...,
):
    """
    usage.dask: 8
    usage.matplotlib: 2
    usage.scipy: 26
    usage.skimage: 5
    usage.sklearn: 3
    """
    ...


def inner(_0: numpy.ndarray, _1: numpy.ndarray, /):
    """
    usage.matplotlib: 1
    usage.scipy: 5
    usage.sklearn: 4
    """
    ...


@overload
def insert(arr: numpy.ndarray, obj: int, values: numpy.ndarray, axis: int):
    """
    usage.dask: 1
    usage.scipy: 72
    usage.skimage: 3
    """
    ...


@overload
def insert(
    arr: numpy.ndarray,
    obj: Union[numpy.ndarray, int],
    values: Union[None, float, numpy.int64, int],
):
    """
    usage.pandas: 15
    """
    ...


@overload
def insert(arr: numpy.ndarray, obj: numpy.ndarray, values: numpy.ndarray, axis: int):
    """
    usage.scipy: 72
    """
    ...


@overload
def insert(arr: numpy.ndarray, obj: int, values: int):
    """
    usage.scipy: 1
    usage.sklearn: 2
    """
    ...


@overload
def insert(arr: numpy.ndarray, obj: int, values: float, axis: int):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def insert(arr: numpy.ndarray, obj: int, values: int, axis: int):
    """
    usage.dask: 4
    """
    ...


@overload
def insert(arr: numpy.ndarray, obj: List[int], values: int, axis: int):
    """
    usage.dask: 4
    """
    ...


@overload
def insert(arr: numpy.ndarray, obj: slice[int, int, int], values: int, axis: int):
    """
    usage.dask: 1
    """
    ...


@overload
def insert(arr: numpy.ndarray, obj: List[int], values: numpy.ndarray, axis: int):
    """
    usage.dask: 1
    """
    ...


@overload
def insert(arr: numpy.ndarray, obj: int, values: numpy.int64):
    """
    usage.sklearn: 1
    """
    ...


@overload
def insert(arr: numpy.ndarray, obj: int, values: float):
    """
    usage.sklearn: 1
    """
    ...


def insert(
    arr: numpy.ndarray,
    obj: Union[int, numpy.ndarray, List[int], slice[int, int, int]],
    values: Union[numpy.int64, int, float, numpy.ndarray, None],
    axis: int = ...,
):
    """
    usage.dask: 11
    usage.matplotlib: 2
    usage.pandas: 15
    usage.scipy: 145
    usage.skimage: 3
    usage.sklearn: 4
    """
    ...


@overload
def interp(x: numpy.flatiter, xp: numpy.ndarray, fp: numpy.ndarray):
    """
    usage.skimage: 2
    """
    ...


@overload
def interp(x: numpy.ndarray, xp: numpy.ndarray, fp: numpy.ndarray):
    """
    usage.dask: 4
    usage.matplotlib: 5
    usage.pandas: 3
    usage.scipy: 6
    usage.skimage: 4
    usage.sklearn: 5
    """
    ...


@overload
def interp(
    x: numpy.ndarray,
    xp: numpy.ndarray,
    fp: numpy.ndarray,
    left: float,
    right: float,
    period: None,
):
    """
    usage.xarray: 1
    """
    ...


@overload
def interp(
    x: numpy.ndarray,
    xp: numpy.ndarray,
    fp: numpy.ndarray,
    left: int,
    right: int,
    period: None,
):
    """
    usage.xarray: 1
    """
    ...


@overload
def interp(x: numpy.ndarray, xp: List[float], fp: List[float]):
    """
    usage.scipy: 4
    """
    ...


@overload
def interp(x: numpy.ndarray, xp: numpy.ndarray, fp: List[float]):
    """
    usage.dask: 2
    usage.scipy: 2
    """
    ...


@overload
def interp(x: numpy.ndarray, xp: numpy.ndarray, fp: Tuple[float, float, float, float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def interp(x: int, xp: numpy.ndarray, fp: numpy.ndarray):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def interp(x: numpy.float64, xp: numpy.ndarray, fp: numpy.ndarray):
    """
    usage.matplotlib: 4
    """
    ...


@overload
def interp(x: numpy.ndarray, xp: numpy.ndarray, fp: numpy.ma.core.MaskedArray):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def interp(x: numpy.ma.core.MaskedArray, xp: List[float], fp: List[Union[float, int]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def interp(
    x: numpy.ma.core.MaskedArray,
    xp: List[Union[numpy.int64, int]],
    fp: List[Union[float, int]],
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def interp(
    x: numpy.ma.core.MaskedArray,
    xp: List[Union[int, numpy.int64]],
    fp: List[Union[float, int]],
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def interp(
    x: numpy.ma.core.MaskedArray,
    xp: List[Union[numpy.float64, int]],
    fp: List[Union[float, int]],
):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def interp(
    x: numpy.ma.core.MaskedArray,
    xp: List[Union[int, numpy.float64]],
    fp: List[Union[float, int]],
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def interp(x: numpy.ma.core.MaskedArray, xp: List[int], fp: List[Union[float, int]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def interp(
    x: numpy.ndarray, xp: numpy.ndarray, fp: numpy.ndarray, left: int, right: int
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def interp(x: numpy.ndarray, xp: numpy.ndarray, fp: List[None]):
    """
    usage.dask: 1
    """
    ...


@overload
def interp(
    x: numpy.ndarray, xp: numpy.ndarray, fp: List[pandas._libs.tslibs.nattype.NaTType]
):
    """
    usage.dask: 1
    """
    ...


@overload
def interp(x: float, xp: List[numpy.float64], fp: List[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def interp(x: numpy.float64, xp: List[numpy.float64], fp: List[numpy.float64]):
    """
    usage.sklearn: 2
    """
    ...


def interp(
    x: object,
    xp: Union[List[Union[float, numpy.float64, numpy.int64, int]], numpy.ndarray],
    fp: Union[
        List[
            Union[None, pandas._libs.tslibs.nattype.NaTType, float, int, numpy.float64]
        ],
        numpy.ndarray,
        numpy.ma.core.MaskedArray,
        Tuple[float, float, float, float],
    ],
    left: Union[int, float] = ...,
    right: Union[int, float] = ...,
    period: None = ...,
):
    """
    usage.dask: 8
    usage.matplotlib: 20
    usage.pandas: 3
    usage.scipy: 13
    usage.skimage: 6
    usage.sklearn: 8
    usage.xarray: 2
    """
    ...


def intersect1d(ar1: numpy.ndarray, ar2: numpy.ndarray):
    """
    usage.pandas: 8
    usage.sklearn: 9
    """
    ...


def is_busday(_0: numpy.datetime64, /, *, busdaycal: numpy.busdaycalendar):
    """
    usage.pandas: 1
    """
    ...


@overload
def isclose(a: numpy.float64, b: int):
    """
    usage.skimage: 1
    """
    ...


@overload
def isclose(a: float, b: float):
    """
    usage.matplotlib: 1
    usage.scipy: 4
    usage.skimage: 1
    """
    ...


@overload
def isclose(a: numpy.ndarray, b: int, atol: float):
    """
    usage.skimage: 1
    """
    ...


@overload
def isclose(
    a: numpy.ndarray, b: numpy.ndarray, rtol: float, atol: float, equal_nan: bool
):
    """
    usage.sklearn: 1
    usage.xarray: 11
    """
    ...


@overload
def isclose(a: numpy.float64, b: numpy.float64):
    """
    usage.matplotlib: 4
    usage.scipy: 2
    usage.xarray: 1
    """
    ...


@overload
def isclose(a: numpy.float64, b: numpy.float64, rtol: float):
    """
    usage.xarray: 1
    """
    ...


@overload
def isclose(
    a: Union[numpy.bool_, numpy.float64, numpy.ndarray, float],
    b: Union[bool, numpy.ndarray, int],
    equal_nan: bool = ...,
):
    """
    usage.pandas: 4
    """
    ...


@overload
def isclose(a: numpy.float64, b: float, rtol: float, atol: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def isclose(a: float, b: float, rtol: float, atol: float):
    """
    usage.scipy: 3
    """
    ...


@overload
def isclose(a: float, b: float, rtol: numpy.float64, atol: numpy.float64):
    """
    usage.scipy: 1
    """
    ...


@overload
def isclose(a: float, b: int, rtol: numpy.float64, atol: numpy.float64):
    """
    usage.scipy: 1
    """
    ...


@overload
def isclose(a: float, b: int, rtol: float, atol: float):
    """
    usage.scipy: 2
    """
    ...


@overload
def isclose(a: numpy.float64, b: numpy.float64, rtol: numpy.float64, atol: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def isclose(
    a: numpy.float64,
    b: List[Union[float, numpy.float64]],
    rtol: int,
    atol: numpy.float64,
):
    """
    usage.scipy: 4
    """
    ...


@overload
def isclose(a: numpy.float64, b: List[float], rtol: int, atol: numpy.float64):
    """
    usage.scipy: 2
    """
    ...


@overload
def isclose(a: float, b: List[float], rtol: int, atol: numpy.float64):
    """
    usage.scipy: 3
    """
    ...


@overload
def isclose(a: numpy.float64, b: List[numpy.float64], rtol: int, atol: numpy.float64):
    """
    usage.scipy: 3
    """
    ...


@overload
def isclose(
    a: float, b: List[Union[float, numpy.float64]], rtol: int, atol: numpy.float64
):
    """
    usage.scipy: 2
    """
    ...


@overload
def isclose(
    a: numpy.float64,
    b: List[Union[numpy.float64, float]],
    rtol: int,
    atol: numpy.float64,
):
    """
    usage.scipy: 2
    """
    ...


@overload
def isclose(a: float, b: List[numpy.float64], rtol: int, atol: numpy.float64):
    """
    usage.scipy: 2
    """
    ...


@overload
def isclose(a: numpy.float64, b: float, rtol: numpy.float64, atol: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def isclose(
    a: numpy.float64,
    b: List[Union[int, float, numpy.float64]],
    rtol: int,
    atol: numpy.float64,
):
    """
    usage.scipy: 1
    """
    ...


@overload
def isclose(
    a: numpy.float64, b: List[Union[int, float]], rtol: int, atol: numpy.float64
):
    """
    usage.scipy: 1
    """
    ...


@overload
def isclose(a: float, b: List[int], rtol: int, atol: numpy.float64):
    """
    usage.scipy: 1
    """
    ...


@overload
def isclose(
    a: numpy.float64,
    b: List[Union[float, int, numpy.float64]],
    rtol: int,
    atol: numpy.float64,
):
    """
    usage.scipy: 1
    """
    ...


@overload
def isclose(
    a: numpy.float64, b: List[Union[float, int]], rtol: int, atol: numpy.float64
):
    """
    usage.scipy: 1
    """
    ...


@overload
def isclose(a: int, b: List[float], rtol: int, atol: numpy.float64):
    """
    usage.scipy: 1
    """
    ...


@overload
def isclose(
    a: numpy.float64, b: List[Union[numpy.float64, int]], rtol: int, atol: numpy.float64
):
    """
    usage.scipy: 2
    """
    ...


@overload
def isclose(a: int, b: List[numpy.float64], rtol: int, atol: numpy.float64):
    """
    usage.scipy: 1
    """
    ...


@overload
def isclose(a: numpy.float64, b: float, rtol: numpy.float64, atol: numpy.float64):
    """
    usage.scipy: 1
    """
    ...


@overload
def isclose(a: numpy.float64, b: int, rtol: numpy.float64, atol: numpy.float64):
    """
    usage.scipy: 1
    """
    ...


@overload
def isclose(a: numpy.float64, b: float, rtol: float, atol: numpy.float64):
    """
    usage.scipy: 1
    """
    ...


@overload
def isclose(a: numpy.float64, b: numpy.float64, rtol: float, atol: numpy.float64):
    """
    usage.scipy: 1
    """
    ...


@overload
def isclose(a: float, b: float, rtol: float, atol: numpy.float64):
    """
    usage.scipy: 1
    """
    ...


@overload
def isclose(a: complex, b: complex, rtol: float, atol: numpy.float64):
    """
    usage.scipy: 1
    """
    ...


@overload
def isclose(a: numpy.complex128, b: complex, rtol: float, atol: numpy.float64):
    """
    usage.scipy: 1
    """
    ...


@overload
def isclose(a: numpy.complex128, b: numpy.complex128, rtol: float, atol: numpy.float64):
    """
    usage.scipy: 1
    """
    ...


@overload
def isclose(a: complex, b: complex, rtol: numpy.float64, atol: numpy.float64):
    """
    usage.scipy: 1
    """
    ...


@overload
def isclose(a: complex, b: numpy.complex128, rtol: numpy.float64, atol: numpy.float64):
    """
    usage.scipy: 1
    """
    ...


@overload
def isclose(a: numpy.complex128, b: complex, rtol: numpy.float64, atol: numpy.float64):
    """
    usage.scipy: 1
    """
    ...


@overload
def isclose(a: complex, b: complex, rtol: float, atol: float):
    """
    usage.scipy: 1
    """
    ...


@overload
def isclose(a: numpy.float64, b: float, rtol: float, atol: float):
    """
    usage.scipy: 4
    """
    ...


@overload
def isclose(a: numpy.float64, b: numpy.float64, rtol: float, atol: float):
    """
    usage.scipy: 2
    """
    ...


@overload
def isclose(a: numpy.ndarray, b: numpy.ndarray, rtol: float, atol: float):
    """
    usage.scipy: 1
    """
    ...


@overload
def isclose(a: numpy.complex128, b: numpy.complex128, rtol: float, atol: float):
    """
    usage.scipy: 1
    """
    ...


@overload
def isclose(a: numpy.ndarray, b: float):
    """
    usage.scipy: 3
    """
    ...


@overload
def isclose(a: numpy.float64, b: numpy.ndarray, rtol: int, atol: numpy.float64):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def isclose(a: numpy.float64, b: List[float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def isclose(a: numpy.int64, b: numpy.ndarray, rtol: int, atol: numpy.float64):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def isclose(a: numpy.float64, b: float):
    """
    usage.matplotlib: 1
    usage.sklearn: 4
    """
    ...


@overload
def isclose(a: numpy.ndarray, b: numpy.ndarray):
    """
    usage.dask: 1
    """
    ...


@overload
def isclose(a: numpy.float64, b: int, rtol: float, atol: int):
    """
    usage.dask: 1
    """
    ...


@overload
def isclose(a: numpy.ndarray, b: numpy.ndarray, equal_nan: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def isclose(
    a: numpy.float64, b: numpy.float64, rtol: float, atol: float, equal_nan: bool
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def isclose(a: float, b: numpy.float32):
    """
    usage.sklearn: 2
    """
    ...


@overload
def isclose(a: float, b: numpy.float64):
    """
    usage.sklearn: 1
    """
    ...


@overload
def isclose(a: numpy.int64, b: float):
    """
    usage.sklearn: 1
    """
    ...


@overload
def isclose(a: numpy.float64, b: numpy.float64, rtol: int, atol: int, equal_nan: bool):
    """
    usage.sklearn: 1
    """
    ...


def isclose(
    a: object,
    b: object,
    rtol: Union[float, int, numpy.float64] = ...,
    atol: Union[float, int, numpy.float64] = ...,
    equal_nan: bool = ...,
):
    """
    usage.dask: 3
    usage.matplotlib: 10
    usage.pandas: 4
    usage.scipy: 66
    usage.skimage: 3
    usage.sklearn: 11
    usage.xarray: 13
    """
    ...


@overload
def iscomplex(x: xarray.core.dataarray.DataArray):
    """
    usage.xarray: 1
    """
    ...


@overload
def iscomplex(x: numpy.ndarray):
    """
    usage.dask: 13
    usage.scipy: 3
    """
    ...


@overload
def iscomplex(x: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def iscomplex(x: float):
    """
    usage.scipy: 4
    """
    ...


@overload
def iscomplex(x: numpy.float64):
    """
    usage.scipy: 4
    """
    ...


@overload
def iscomplex(x: dask.array.core.Array):
    """
    usage.dask: 1
    """
    ...


@overload
def iscomplex(x: pandas.core.series.Series):
    """
    usage.dask: 5
    """
    ...


@overload
def iscomplex(x: dask.dataframe.core.Series):
    """
    usage.dask: 2
    """
    ...


@overload
def iscomplex(x: pandas.core.frame.DataFrame):
    """
    usage.dask: 5
    """
    ...


@overload
def iscomplex(x: dask.dataframe.core.DataFrame):
    """
    usage.dask: 2
    """
    ...


def iscomplex(x: object):
    """
    usage.dask: 28
    usage.scipy: 12
    usage.xarray: 1
    """
    ...


@overload
def iscomplexobj(x: numpy.ndarray):
    """
    usage.matplotlib: 2
    usage.pandas: 2
    usage.scipy: 303
    usage.skimage: 4
    """
    ...


@overload
def iscomplexobj(x: numpy.float32):
    """
    usage.scipy: 3
    """
    ...


@overload
def iscomplexobj(x: numpy.complex64):
    """
    usage.scipy: 3
    """
    ...


@overload
def iscomplexobj(x: numpy.float64):
    """
    usage.scipy: 3
    """
    ...


@overload
def iscomplexobj(x: numpy.complex128):
    """
    usage.scipy: 3
    """
    ...


@overload
def iscomplexobj(x: float):
    """
    usage.scipy: 1
    """
    ...


@overload
def iscomplexobj(x: List[int]):
    """
    usage.scipy: 1
    """
    ...


@overload
def iscomplexobj(x: complex):
    """
    usage.scipy: 2
    """
    ...


@overload
def iscomplexobj(x: List[Union[complex, float]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def iscomplexobj(x: List[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def iscomplexobj(x: numpy.float128):
    """
    usage.scipy: 1
    """
    ...


@overload
def iscomplexobj(x: numpy.complex256):
    """
    usage.scipy: 1
    """
    ...


@overload
def iscomplexobj(x: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def iscomplexobj(x: dask.array.core.Array):
    """
    usage.dask: 2
    """
    ...


def iscomplexobj(x: object):
    """
    usage.dask: 2
    usage.matplotlib: 2
    usage.pandas: 2
    usage.scipy: 324
    usage.skimage: 4
    """
    ...


def isfortran(a: numpy.ndarray):
    """
    usage.dask: 1
    usage.matplotlib: 2
    usage.scipy: 16
    usage.sklearn: 3
    """
    ...


@overload
def isin(element: numpy.ndarray, test_elements: List[int]):
    """
    usage.xarray: 2
    """
    ...


@overload
def isin(element: numpy.ndarray, test_elements: numpy.ndarray):
    """
    usage.scipy: 3
    usage.xarray: 3
    """
    ...


@overload
def isin(element: dask.array.core.Array, test_elements: List[int]):
    """
    usage.xarray: 1
    """
    ...


@overload
def isin(element: dask.array.core.Array, test_elements: numpy.ndarray):
    """
    usage.xarray: 1
    """
    ...


@overload
def isin(element: sparse._coo.core.COO, test_elements: List[int]):
    """
    usage.xarray: 1
    """
    ...


@overload
def isin(element: object, test_elements: numpy.ndarray):
    """
    usage.xarray: 2
    """
    ...


@overload
def isin(element: object, test_elements: object):
    """
    usage.xarray: 1
    """
    ...


@overload
def isin(element: numpy.ndarray, test_elements: numpy.ndarray, invert: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def isin(
    element: dask.array.core.Array, test_elements: dask.array.core.Array, invert: bool
):
    """
    usage.dask: 1
    """
    ...


@overload
def isin(element: numpy.ndarray, test_elements: numpy.ndarray, assume_unique: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def isin(
    element: dask.array.core.Array, test_elements: numpy.ndarray, assume_unique: bool
):
    """
    usage.dask: 1
    """
    ...


def isin(
    element: object,
    test_elements: object,
    assume_unique: bool = ...,
    invert: bool = ...,
):
    """
    usage.dask: 4
    usage.scipy: 3
    usage.xarray: 11
    """
    ...


@overload
def isneginf(x: numpy.ndarray):
    """
    usage.dask: 1
    usage.scipy: 7
    """
    ...


@overload
def isneginf(x: numpy.float64):
    """
    usage.scipy: 5
    """
    ...


@overload
def isneginf(x: List[Union[numpy.float64, int]]):
    """
    usage.scipy: 1
    """
    ...


def isneginf(x: Union[numpy.ndarray, numpy.float64, List[Union[numpy.float64, int]]]):
    """
    usage.dask: 1
    usage.scipy: 13
    """
    ...


@overload
def isposinf(x: numpy.float64):
    """
    usage.scipy: 2
    """
    ...


@overload
def isposinf(x: numpy.ndarray):
    """
    usage.dask: 1
    usage.scipy: 5
    """
    ...


@overload
def isposinf(x: float):
    """
    usage.scipy: 1
    usage.sklearn: 1
    """
    ...


@overload
def isposinf(x: List[Union[numpy.float64, int]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def isposinf(x: int):
    """
    usage.sklearn: 1
    """
    ...


def isposinf(
    x: Union[float, int, numpy.float64, numpy.ndarray, List[Union[numpy.float64, int]]]
):
    """
    usage.dask: 1
    usage.scipy: 9
    usage.sklearn: 2
    """
    ...


@overload
def isreal(x: xarray.core.dataarray.DataArray):
    """
    usage.xarray: 1
    """
    ...


@overload
def isreal(x: numpy.ndarray):
    """
    usage.dask: 13
    usage.scipy: 19
    usage.sklearn: 4
    """
    ...


@overload
def isreal(x: numpy.complex128):
    """
    usage.scipy: 21
    """
    ...


@overload
def isreal(x: numpy.float64):
    """
    usage.matplotlib: 1
    usage.scipy: 13
    """
    ...


@overload
def isreal(x: numpy.complex256):
    """
    usage.scipy: 3
    """
    ...


@overload
def isreal(x: numpy.float128):
    """
    usage.scipy: 2
    """
    ...


@overload
def isreal(x: float):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def isreal(x: int):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def isreal(x: dask.array.core.Array):
    """
    usage.dask: 1
    """
    ...


@overload
def isreal(x: pandas.core.series.Series):
    """
    usage.dask: 5
    """
    ...


@overload
def isreal(x: dask.dataframe.core.Series):
    """
    usage.dask: 2
    """
    ...


@overload
def isreal(x: pandas.core.frame.DataFrame):
    """
    usage.dask: 5
    """
    ...


@overload
def isreal(x: dask.dataframe.core.DataFrame):
    """
    usage.dask: 2
    """
    ...


def isreal(x: object):
    """
    usage.dask: 28
    usage.matplotlib: 3
    usage.scipy: 58
    usage.sklearn: 4
    usage.xarray: 1
    """
    ...


def isrealobj(x: numpy.ndarray):
    """
    usage.scipy: 44
    """
    ...


@overload
def isscalar(element: int):
    """
    usage.dask: 15
    usage.matplotlib: 2
    usage.scipy: 75
    usage.skimage: 15
    usage.sklearn: 3
    """
    ...


@overload
def isscalar(element: numpy.ndarray):
    """
    usage.dask: 145
    usage.matplotlib: 3
    usage.scipy: 61
    usage.skimage: 5
    usage.sklearn: 5
    usage.xarray: 21
    """
    ...


@overload
def isscalar(element: List[int]):
    """
    usage.dask: 2
    usage.matplotlib: 6
    usage.scipy: 18
    usage.skimage: 8
    usage.sklearn: 6
    usage.xarray: 1
    """
    ...


@overload
def isscalar(element: List[Union[int, float]]):
    """
    usage.skimage: 2
    usage.sklearn: 1
    """
    ...


@overload
def isscalar(element: float):
    """
    usage.dask: 7
    usage.matplotlib: 3
    usage.scipy: 22
    usage.skimage: 6
    usage.sklearn: 2
    usage.xarray: 1
    """
    ...


@overload
def isscalar(element: List[Union[float, int]]):
    """
    usage.matplotlib: 1
    usage.scipy: 1
    usage.skimage: 2
    usage.sklearn: 1
    """
    ...


@overload
def isscalar(element: numpy.float64):
    """
    usage.dask: 9
    usage.matplotlib: 1
    usage.scipy: 19
    usage.skimage: 2
    usage.sklearn: 2
    """
    ...


@overload
def isscalar(element: Tuple[int, int]):
    """
    usage.dask: 2
    usage.matplotlib: 1
    usage.scipy: 5
    usage.skimage: 4
    usage.sklearn: 1
    """
    ...


@overload
def isscalar(element: Tuple[int, int, int]):
    """
    usage.scipy: 1
    usage.skimage: 3
    """
    ...


@overload
def isscalar(element: Tuple[int, int, int, int]):
    """
    usage.skimage: 4
    """
    ...


@overload
def isscalar(element: Tuple[float, float]):
    """
    usage.skimage: 2
    """
    ...


@overload
def isscalar(element: numpy.int64):
    """
    usage.dask: 10
    usage.scipy: 12
    usage.skimage: 1
    """
    ...


@overload
def isscalar(element: List[Dict[Literal["dd", "da", "ad"], numpy.float64]]):
    """
    usage.skimage: 6
    """
    ...


@overload
def isscalar(element: List[Dict[Literal["d"], numpy.float64]]):
    """
    usage.skimage: 2
    """
    ...


@overload
def isscalar(element: List[Dict[str, numpy.float64]]):
    """
    usage.skimage: 3
    """
    ...


@overload
def isscalar(element: Tuple[int]):
    """
    usage.scipy: 2
    usage.skimage: 2
    """
    ...


@overload
def isscalar(element: slice[int, None, int]):
    """
    usage.dask: 1
    usage.skimage: 1
    """
    ...


@overload
def isscalar(element: xarray.core.indexing.CopyOnWriteArray):
    """
    usage.xarray: 1
    """
    ...


@overload
def isscalar(element: xarray.core.indexing.NumpyIndexingAdapter):
    """
    usage.xarray: 1
    """
    ...


@overload
def isscalar(element: xarray.core.indexing.LazilyOuterIndexedArray):
    """
    usage.xarray: 1
    """
    ...


@overload
def isscalar(element: xarray.core.indexing.LazilyVectorizedIndexedArray):
    """
    usage.xarray: 1
    """
    ...


@overload
def isscalar(element: Literal["a"]):
    """
    usage.dask: 12
    usage.xarray: 1
    """
    ...


@overload
def isscalar(element: cftime._cftime.DatetimeNoLeap):
    """
    usage.xarray: 1
    """
    ...


@overload
def isscalar(element: cftime._cftime.Datetime360Day):
    """
    usage.xarray: 1
    """
    ...


@overload
def isscalar(element: cftime._cftime.DatetimeJulian):
    """
    usage.xarray: 1
    """
    ...


@overload
def isscalar(element: cftime._cftime.DatetimeAllLeap):
    """
    usage.xarray: 1
    """
    ...


@overload
def isscalar(element: cftime._cftime.DatetimeGregorian):
    """
    usage.xarray: 1
    """
    ...


@overload
def isscalar(element: cftime._cftime.DatetimeProlepticGregorian):
    """
    usage.xarray: 1
    """
    ...


@overload
def isscalar(element: numpy.timedelta64):
    """
    usage.dask: 3
    usage.xarray: 1
    """
    ...


@overload
def isscalar(element: Tuple[Literal["a"], numpy.int64, numpy.int64]):
    """
    usage.xarray: 1
    """
    ...


@overload
def isscalar(element: Tuple[Literal["b"], numpy.int64, numpy.int64]):
    """
    usage.xarray: 1
    """
    ...


@overload
def isscalar(element: Literal["2000-01-01"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def isscalar(element: Literal["2000-01-02"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def isscalar(element: Literal["2000-01-03"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def isscalar(element: Literal["bar"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def isscalar(element: Tuple[Literal["a"], numpy.int64]):
    """
    usage.xarray: 1
    """
    ...


@overload
def isscalar(element: Tuple[Literal["b"], numpy.int64]):
    """
    usage.xarray: 1
    """
    ...


@overload
def isscalar(element: Tuple[Literal["c"], numpy.int64]):
    """
    usage.xarray: 1
    """
    ...


@overload
def isscalar(element: Tuple[numpy.int64, numpy.int64]):
    """
    usage.xarray: 1
    """
    ...


@overload
def isscalar(element: numpy.datetime64):
    """
    usage.dask: 1
    usage.xarray: 1
    """
    ...


@overload
def isscalar(element: object):
    """
    usage.dask: 11
    usage.xarray: 1
    """
    ...


@overload
def isscalar(element: pandas._libs.tslibs.period.Period):
    """
    usage.xarray: 1
    """
    ...


@overload
def isscalar(element: xarray.core.indexing.MemoryCachedArray):
    """
    usage.xarray: 1
    """
    ...


@overload
def isscalar(element: dask.array.core.Array):
    """
    usage.dask: 2
    usage.xarray: 1
    """
    ...


@overload
def isscalar(element: numpy.matrix):
    """
    usage.dask: 3
    usage.scipy: 18
    """
    ...


@overload
def isscalar(element: List[float]):
    """
    usage.matplotlib: 2
    usage.scipy: 4
    """
    ...


@overload
def isscalar(element: scipy.sparse.csr.csr_matrix):
    """
    usage.dask: 3
    usage.scipy: 1
    """
    ...


@overload
def isscalar(element: range):
    """
    usage.scipy: 1
    """
    ...


@overload
def isscalar(element: scipy.sparse.csc.csc_matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def isscalar(element: scipy.sparse.coo.coo_matrix):
    """
    usage.dask: 1
    usage.scipy: 1
    """
    ...


@overload
def isscalar(element: numpy.int8):
    """
    usage.dask: 1
    usage.scipy: 2
    """
    ...


@overload
def isscalar(element: numpy.uint8):
    """
    usage.dask: 1
    usage.scipy: 1
    """
    ...


@overload
def isscalar(element: numpy.int16):
    """
    usage.dask: 1
    usage.scipy: 1
    """
    ...


@overload
def isscalar(element: numpy.uint16):
    """
    usage.dask: 1
    usage.scipy: 1
    """
    ...


@overload
def isscalar(element: numpy.int32):
    """
    usage.dask: 4
    usage.scipy: 2
    """
    ...


@overload
def isscalar(element: numpy.uint32):
    """
    usage.dask: 1
    usage.scipy: 1
    """
    ...


@overload
def isscalar(element: numpy.uint64):
    """
    usage.dask: 1
    usage.scipy: 2
    """
    ...


@overload
def isscalar(element: numpy.float32):
    """
    usage.dask: 5
    usage.scipy: 4
    """
    ...


@overload
def isscalar(element: None):
    """
    usage.dask: 4
    usage.scipy: 1
    """
    ...


@overload
def isscalar(element: scipy.sparse.dia.dia_matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def isscalar(element: complex):
    """
    usage.dask: 1
    usage.scipy: 5
    """
    ...


@overload
def isscalar(element: numpy.complex128):
    """
    usage.dask: 5
    usage.scipy: 5
    """
    ...


@overload
def isscalar(element: List[List[int]]):
    """
    usage.matplotlib: 2
    usage.scipy: 4
    """
    ...


@overload
def isscalar(element: scipy.sparse.bsr.bsr_matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def isscalar(element: scipy.sparse.lil.lil_matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def isscalar(element: numpy.complex64):
    """
    usage.dask: 1
    usage.scipy: 2
    """
    ...


@overload
def isscalar(element: numpy.complex256):
    """
    usage.dask: 1
    usage.scipy: 2
    """
    ...


@overload
def isscalar(element: numpy.float128):
    """
    usage.dask: 1
    usage.scipy: 3
    """
    ...


@overload
def isscalar(element: scipy.sparse.tests.test_base.BinopTester):
    """
    usage.scipy: 1
    """
    ...


@overload
def isscalar(element: scipy.sparse.tests.test_base.BinopTester_with_shape):
    """
    usage.scipy: 1
    """
    ...


@overload
def isscalar(element: scipy.sparse.dok.dok_matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def isscalar(element: Literal["16"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def isscalar(element: Callable):
    """
    usage.scipy: 2
    """
    ...


@overload
def isscalar(element: Literal["wrongstring"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def isscalar(element: Tuple[None, ...]):
    """
    usage.scipy: 1
    """
    ...


@overload
def isscalar(element: list):
    """
    usage.dask: 1
    usage.matplotlib: 1
    """
    ...


@overload
def isscalar(
    element: List[List[Literal["2017-01-01T00:00:00", "2017-01-02T00:00:00"]]]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def isscalar(element: List[List[str]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def isscalar(element: List[list]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def isscalar(element: Tuple[numpy.ndarray, numpy.ndarray]):
    """
    usage.dask: 15
    usage.matplotlib: 1
    """
    ...


@overload
def isscalar(element: List[Union[range, list]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def isscalar(element: List[range]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def isscalar(element: bool):
    """
    usage.dask: 2
    """
    ...


@overload
def isscalar(element: Callable):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: dask.array.tests.test_array_core.MyArray):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: numpy.bool_):
    """
    usage.dask: 8
    """
    ...


@overload
def isscalar(element: numpy.bytes_):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: numpy.str_):
    """
    usage.dask: 2
    """
    ...


@overload
def isscalar(element: numpy.ulonglong):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: numpy.longlong):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: numpy.void):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: numpy.float16):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["x"]):
    """
    usage.dask: 6
    """
    ...


@overload
def isscalar(element: Type[numpy.float64]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["foo"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: numpy.dtype):
    """
    usage.dask: 4
    """
    ...


@overload
def isscalar(element: Type[numpy.ndarray]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Tuple[numpy.ndarray]):
    """
    usage.dask: 3
    """
    ...


@overload
def isscalar(element: Tuple[int, numpy.ndarray]):
    """
    usage.dask: 2
    """
    ...


@overload
def isscalar(element: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray]):
    """
    usage.dask: 2
    """
    ...


@overload
def isscalar(element: numpy.ma.core.MaskedArray):
    """
    usage.dask: 25
    """
    ...


@overload
def isscalar(element: numpy.ma.core.MaskedConstant):
    """
    usage.dask: 3
    """
    ...


@overload
def isscalar(element: Literal["f8"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Type[numpy.float32]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["amount"]):
    """
    usage.dask: 4
    """
    ...


@overload
def isscalar(element: Literal["aa"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["path"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["filename"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["name"]):
    """
    usage.dask: 5
    """
    ...


@overload
def isscalar(element: Literal["fruit"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["A"]):
    """
    usage.dask: 7
    """
    ...


@overload
def isscalar(element: Literal["B"]):
    """
    usage.dask: 3
    """
    ...


@overload
def isscalar(element: Literal["b"]):
    """
    usage.dask: 8
    """
    ...


@overload
def isscalar(element: Literal["numbers"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["Date"]):
    """
    usage.dask: 4
    """
    ...


@overload
def isscalar(element: Literal["date_time"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["C"]):
    """
    usage.dask: 4
    """
    ...


@overload
def isscalar(element: Literal["A_B"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["B_"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: List[Literal["x"]]):
    """
    usage.dask: 2
    """
    ...


@overload
def isscalar(element: List[Literal["b", "a"]]):
    """
    usage.dask: 3
    """
    ...


@overload
def isscalar(element: List[Literal["a", "b"]]):
    """
    usage.dask: 2
    """
    ...


@overload
def isscalar(element: List[Literal["c", "b", "a"]]):
    """
    usage.dask: 2
    """
    ...


@overload
def isscalar(element: List[Literal["name"]]):
    """
    usage.dask: 2
    """
    ...


@overload
def isscalar(element: numpy.record):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["date"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["val2"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["idx"]):
    """
    usage.dask: 6
    """
    ...


@overload
def isscalar(element: Literal["dt_col"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["str_col"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["string_col"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["int_col"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["y"]):
    """
    usage.dask: 6
    """
    ...


@overload
def isscalar(element: Literal["X"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["c"]):
    """
    usage.dask: 6
    """
    ...


@overload
def isscalar(element: pandas._libs.tslibs.timedeltas.Timedelta):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: List[Literal["y", "x"]]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["abcde"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["e"]):
    """
    usage.dask: 4
    """
    ...


@overload
def isscalar(element: pandas._libs.tslibs.timestamps.Timestamp):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: List[Literal["bool", "float", "int"]]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: List[Literal["float", "int"]]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: dask.dataframe.core.Series):
    """
    usage.dask: 7
    """
    ...


@overload
def isscalar(element: pandas.core.series.Series):
    """
    usage.dask: 4
    usage.sklearn: 1
    """
    ...


@overload
def isscalar(element: Literal["w"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["cat"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["y_"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["v"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["id"]):
    """
    usage.dask: 4
    """
    ...


@overload
def isscalar(element: Literal["tz"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: List[Literal["d", "c"]]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["d"]):
    """
    usage.dask: 3
    """
    ...


@overload
def isscalar(element: Literal["f"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: List[Literal["B", "A"]]):
    """
    usage.dask: 2
    """
    ...


@overload
def isscalar(element: Literal["z"]):
    """
    usage.dask: 2
    """
    ...


@overload
def isscalar(element: List[Literal["cint"]]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: List[Literal["cdt", "clfoat", "cstr"]]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: List[Literal["cstr", "cint"]]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: List[Literal["cdt"]]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: List[Literal["z", "y"]]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: List[Literal["d", "b", "a"]]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["col2"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["col1"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Tuple[Literal["A"], Literal["0"]]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: List[Tuple[Literal["A", "B"], Literal["0", "1"]]]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: List[Literal["B", "A", "C"]]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: pandas.core.indexes.base.Index):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["Name"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: List[Literal["x", "y"]]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: dask.dataframe.core.Scalar):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["D"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: decimal.Decimal):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: List[Literal["a"]]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["_index"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["__series__"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: List[Literal["c", "b"]]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: List[Literal["b"]]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: List[Literal["a", "c", "b"]]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: List[Literal["A"]]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["AA"]):
    """
    usage.dask: 2
    """
    ...


@overload
def isscalar(element: List[Literal["AA"]]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["AB"]):
    """
    usage.dask: 2
    """
    ...


@overload
def isscalar(element: List[Literal["AB", "AA"]]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: List[Literal["B"]]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: List[Literal["d", "a"]]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: List[Literal["a", "d", "c"]]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: List[Literal["b", "a", "d", "c"]]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: List[Literal["a", "idx"]]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: List[Literal["idx", "a"]]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["g"]):
    """
    usage.dask: 2
    """
    ...


@overload
def isscalar(element: Literal["cc"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["g0"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["g1"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: List[Literal["z", "x"]]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["group"]):
    """
    usage.dask: 2
    """
    ...


@overload
def isscalar(element: List[Literal["group"]]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["category_1"]):
    """
    usage.dask: 2
    """
    ...


@overload
def isscalar(element: Literal["value"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: List[Literal["category_2", "category_1"]]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["category_2"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: List[Literal["c", "a"]]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["_"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: slice[Literal["a"], Literal["e"], Literal["a"]]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: slice[Literal["a"], Literal["b"], Literal["a"]]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: slice[Literal["f"], None, Literal["f"]]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: slice[int, int, int]):
    """
    usage.dask: 1
    usage.sklearn: 1
    """
    ...


@overload
def isscalar(element: slice[None, int, None]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["2011-01-02"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["2011-01"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["2011"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(
    element: slice[Literal["2011-01"], Literal["2012-05"], Literal["2011-01"]]
):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: slice[Literal["2011"], Literal["2015"], Literal["2011"]]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["k"]):
    """
    usage.dask: 2
    """
    ...


@overload
def isscalar(element: List[Literal["k"]]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: List[Literal["y"]]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: List[Literal["z"]]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: List[Literal["d"]]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: List[Literal["e"]]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: List[Literal["e", "d"]]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: List[Literal["c"]]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["E"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["F"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["G"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["H"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["I"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["cluster"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["a_a"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["A_a"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["timestamp"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["notz"]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: List[Literal["id"]]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: List[Literal["name", "id"]]):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: dask.dataframe.core.DataFrame):
    """
    usage.dask: 1
    """
    ...


@overload
def isscalar(element: Literal["Time"]):
    """
    usage.dask: 4
    """
    ...


@overload
def isscalar(element: Literal["abc"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def isscalar(element: List[bool]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def isscalar(element: Tuple[bool, bool, bool, bool, bool, bool, bool, bool, bool]):
    """
    usage.sklearn: 1
    """
    ...


def isscalar(element: object):
    """
    usage.dask: 547
    usage.matplotlib: 30
    usage.scipy: 289
    usage.skimage: 68
    usage.sklearn: 26
    usage.xarray: 50
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.uint8], arg2: Type[numpy.floating]):
    """
    usage.skimage: 2
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.float64], arg2: Type[numpy.floating]):
    """
    usage.skimage: 3
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.float64], arg2: Type[numpy.float64]):
    """
    usage.scipy: 1
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.float64], arg2: Type[numpy.uint16]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.uint16], arg2: Type[numpy.float64]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.float64], arg2: Type[numpy.uint8]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: numpy.dtype, arg2: Type[numpy.floating]):
    """
    usage.dask: 2
    usage.scipy: 3
    usage.skimage: 18
    usage.sklearn: 10
    usage.xarray: 64
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.float64], arg2: Type[numpy.bool_]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: numpy.dtype, arg2: Type[numpy.integer]):
    """
    usage.dask: 16
    usage.matplotlib: 24
    usage.scipy: 38
    usage.skimage: 31
    usage.sklearn: 4
    usage.xarray: 52
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.uint16], arg2: Type[numpy.floating]):
    """
    usage.skimage: 2
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.uint8], arg2: Type[numpy.uint16]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.uint16], arg2: Type[numpy.uint16]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.bool_], arg2: Type[numpy.floating]):
    """
    usage.skimage: 1
    usage.xarray: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.float32], arg2: Type[numpy.floating]):
    """
    usage.skimage: 2
    usage.xarray: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.int64], arg2: Type[numpy.floating]):
    """
    usage.skimage: 2
    """
    ...


@overload
def issubdtype(arg1: numpy.dtype, arg2: Type[numpy.bool_]):
    """
    usage.scipy: 22
    usage.skimage: 5
    usage.sklearn: 4
    usage.xarray: 3
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.uint8], arg2: Type[numpy.float32]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.uint8], arg2: Type[numpy.float64]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.uint8], arg2: Type[numpy.uint8]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.uint8], arg2: Type[numpy.int64]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: numpy.dtype, arg2: Type[numpy.signedinteger]):
    """
    usage.scipy: 8
    usage.skimage: 14
    usage.sklearn: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.bool_], arg2: Type[numpy.uint8]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.int8], arg2: Type[numpy.uint8]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: numpy.dtype, arg2: Type[numpy.unsignedinteger]):
    """
    usage.scipy: 15
    usage.skimage: 11
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.int8], arg2: Type[numpy.floating]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.int16], arg2: Type[numpy.floating]):
    """
    usage.skimage: 2
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.uint32], arg2: Type[numpy.floating]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.int32], arg2: Type[numpy.floating]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.uint64], arg2: Type[numpy.floating]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: numpy.dtype, arg2: Type[numpy.uint16]):
    """
    usage.skimage: 2
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.uint8], arg2: Type[numpy.int16]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.int16], arg2: Type[numpy.uint8]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.uint16], arg2: Type[numpy.uint8]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.int16], arg2: Type[numpy.uint16]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.int64], arg2: Type[numpy.integer]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.bool_], arg2: Type[numpy.bool_]):
    """
    usage.skimage: 1
    usage.xarray: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.float64], arg2: Type[numpy.float32]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.float16], arg2: Type[numpy.floating]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.uint16], arg2: Type[numpy.int16]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.uint16], arg2: Type[numpy.float32]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.int8], arg2: Type[numpy.int16]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.int8], arg2: Type[numpy.float64]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.int8], arg2: Type[numpy.float32]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.int8], arg2: Type[numpy.uint16]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.int16], arg2: Type[numpy.int16]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.int16], arg2: Type[numpy.float64]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.int16], arg2: Type[numpy.float32]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.float32], arg2: Type[numpy.int16]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.float32], arg2: Type[numpy.float64]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.float32], arg2: Type[numpy.float32]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.float32], arg2: Type[numpy.uint16]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.float32], arg2: Type[numpy.uint8]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.float64], arg2: Type[numpy.int16]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.uint8], arg2: Type[numpy.uint32]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.int8], arg2: Type[numpy.uint32]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.int8], arg2: Type[numpy.int32]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.int32], arg2: Type[numpy.int8]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.int32], arg2: Type[numpy.float32]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.uint64], arg2: Type[numpy.int16]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.bool_], arg2: Type[numpy.int16]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.bool_], arg2: Type[numpy.uint16]):
    """
    usage.skimage: 1
    """
    ...


@overload
def issubdtype(arg1: numpy.dtype, arg2: Type[numpy.datetime64]):
    """
    usage.dask: 14
    usage.matplotlib: 11
    usage.xarray: 77
    """
    ...


@overload
def issubdtype(arg1: numpy.dtype, arg2: Type[numpy.timedelta64]):
    """
    usage.xarray: 67
    """
    ...


@overload
def issubdtype(arg1: numpy.dtype, arg2: Type[numpy.complexfloating]):
    """
    usage.scipy: 124
    usage.xarray: 18
    """
    ...


@overload
def issubdtype(arg1: numpy.dtype, arg2: Type[numpy.number]):
    """
    usage.dask: 15
    usage.scipy: 8
    usage.xarray: 13
    """
    ...


@overload
def issubdtype(arg1: Type[float], arg2: Type[numpy.floating]):
    """
    usage.xarray: 1
    """
    ...


@overload
def issubdtype(arg1: Type[int], arg2: Type[numpy.floating]):
    """
    usage.xarray: 1
    """
    ...


@overload
def issubdtype(arg1: Type[int], arg2: Type[numpy.integer]):
    """
    usage.dask: 1
    usage.xarray: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.bool_], arg2: Type[numpy.integer]):
    """
    usage.xarray: 1
    """
    ...


@overload
def issubdtype(arg1: Type[str], arg2: Type[numpy.floating]):
    """
    usage.xarray: 1
    """
    ...


@overload
def issubdtype(arg1: Type[str], arg2: Type[numpy.integer]):
    """
    usage.xarray: 1
    """
    ...


@overload
def issubdtype(arg1: Type[str], arg2: Type[numpy.bool_]):
    """
    usage.xarray: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.generic], arg2: Type[numpy.floating]):
    """
    usage.xarray: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.generic], arg2: Type[numpy.integer]):
    """
    usage.xarray: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.generic], arg2: Type[numpy.timedelta64]):
    """
    usage.xarray: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.generic], arg2: Type[numpy.datetime64]):
    """
    usage.xarray: 1
    """
    ...


@overload
def issubdtype(arg1: Union[numpy.dtype, type], arg2: Union[type, numpy.dtype]):
    """
    usage.pandas: 83
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.float32], arg2: Type[numpy.complexfloating]):
    """
    usage.scipy: 17
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.float64], arg2: Type[numpy.complexfloating]):
    """
    usage.scipy: 18
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.float128], arg2: Type[numpy.complexfloating]):
    """
    usage.scipy: 11
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.complex64], arg2: Type[numpy.complexfloating]):
    """
    usage.scipy: 15
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.complex128], arg2: Type[numpy.complexfloating]):
    """
    usage.scipy: 16
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.complex256], arg2: Type[numpy.complexfloating]):
    """
    usage.scipy: 10
    """
    ...


@overload
def issubdtype(arg1: None, arg2: Type[numpy.complexfloating]):
    """
    usage.scipy: 1
    """
    ...


@overload
def issubdtype(arg1: numpy.dtype, arg2: Type[numpy.inexact]):
    """
    usage.scipy: 62
    """
    ...


@overload
def issubdtype(arg1: numpy.dtype, arg2: Type[numpy.int32]):
    """
    usage.scipy: 1
    """
    ...


@overload
def issubdtype(arg1: numpy.dtype, arg2: Type[numpy.uint8]):
    """
    usage.scipy: 1
    """
    ...


@overload
def issubdtype(arg1: numpy.dtype, arg2: Type[numpy.float32]):
    """
    usage.scipy: 2
    """
    ...


@overload
def issubdtype(arg1: numpy.dtype, arg2: Type[numpy.float64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def issubdtype(arg1: numpy.dtype, arg2: Type[numpy.uint64]):
    """
    usage.scipy: 2
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.bool_], arg2: Type[numpy.complexfloating]):
    """
    usage.scipy: 8
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.int8], arg2: Type[numpy.complexfloating]):
    """
    usage.scipy: 8
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.uint8], arg2: Type[numpy.complexfloating]):
    """
    usage.scipy: 8
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.int16], arg2: Type[numpy.complexfloating]):
    """
    usage.scipy: 8
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.uint16], arg2: Type[numpy.complexfloating]):
    """
    usage.scipy: 8
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.int32], arg2: Type[numpy.complexfloating]):
    """
    usage.scipy: 8
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.uint32], arg2: Type[numpy.complexfloating]):
    """
    usage.scipy: 8
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.int64], arg2: Type[numpy.complexfloating]):
    """
    usage.scipy: 8
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.uint64], arg2: Type[numpy.complexfloating]):
    """
    usage.scipy: 8
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.longlong], arg2: Type[numpy.complexfloating]):
    """
    usage.scipy: 8
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.ulonglong], arg2: Type[numpy.complexfloating]):
    """
    usage.scipy: 8
    """
    ...


@overload
def issubdtype(arg1: numpy.int64, arg2: Type[numpy.signedinteger]):
    """
    usage.scipy: 1
    """
    ...


@overload
def issubdtype(arg1: Type[numpy.float64], arg2: Type[numpy.inexact]):
    """
    usage.scipy: 1
    """
    ...


@overload
def issubdtype(arg1: numpy.dtype, arg2: Type[numpy.flexible]):
    """
    usage.sklearn: 13
    """
    ...


@overload
def issubdtype(arg1: numpy.dtype, arg2: Type[numpy.str_]):
    """
    usage.sklearn: 8
    """
    ...


@overload
def issubdtype(arg1: numpy.dtype, arg2: Type[numpy.object_]):
    """
    usage.sklearn: 4
    """
    ...


def issubdtype(
    arg1: Union[numpy.dtype, numpy.int64, None, type, Type[int]],
    arg2: Union[type, numpy.dtype],
):
    """
    usage.dask: 48
    usage.matplotlib: 35
    usage.pandas: 83
    usage.scipy: 466
    usage.skimage: 143
    usage.sklearn: 44
    usage.xarray: 308
    """
    ...


def issubsctype(arg1: numpy.ndarray, arg2: Type[numpy.float32]):
    """
    usage.scipy: 2
    """
    ...


@overload
def iterable(y: object):
    """
    usage.matplotlib: 2
    usage.pandas: 32
    """
    ...


@overload
def iterable(y: matplotlib.gridspec.SubplotSpec):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: List[int]):
    """
    usage.matplotlib: 70
    usage.sklearn: 1
    """
    ...


@overload
def iterable(y: int):
    """
    usage.matplotlib: 21
    usage.sklearn: 2
    """
    ...


@overload
def iterable(y: Tuple[int]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: Tuple[float, float]):
    """
    usage.matplotlib: 4
    """
    ...


@overload
def iterable(y: Tuple[int, float]):
    """
    usage.matplotlib: 4
    """
    ...


@overload
def iterable(y: Tuple[int, int]):
    """
    usage.matplotlib: 5
    """
    ...


@overload
def iterable(y: float):
    """
    usage.matplotlib: 13
    usage.sklearn: 2
    """
    ...


@overload
def iterable(y: numpy.float64):
    """
    usage.matplotlib: 7
    usage.sklearn: 1
    """
    ...


@overload
def iterable(y: numpy.ndarray):
    """
    usage.matplotlib: 88
    usage.sklearn: 1
    """
    ...


@overload
def iterable(y: numpy.ma.core.MaskedArray):
    """
    usage.matplotlib: 26
    """
    ...


@overload
def iterable(y: numpy.int64):
    """
    usage.matplotlib: 4
    """
    ...


@overload
def iterable(y: range_iterator):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: bool):
    """
    usage.matplotlib: 3
    """
    ...


@overload
def iterable(y: List[bool]):
    """
    usage.matplotlib: 6
    """
    ...


@overload
def iterable(y: List[Union[int, float]]):
    """
    usage.matplotlib: 23
    """
    ...


@overload
def iterable(y: list):
    """
    usage.matplotlib: 18
    """
    ...


@overload
def iterable(y: matplotlib.lines.Line2D):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: List[None]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: None):
    """
    usage.matplotlib: 6
    """
    ...


@overload
def iterable(y: matplotlib.spines.Spine):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: type):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Type[matplotlib.lines.Line2D]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: matplotlib.testing.jpl_units.UnitDbl.UnitDbl):
    """
    usage.matplotlib: 3
    """
    ...


@overload
def iterable(y: List[decimal.Decimal]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: List[float]):
    """
    usage.matplotlib: 25
    usage.sklearn: 2
    """
    ...


@overload
def iterable(y: decimal.Decimal):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: List[numpy.float64]):
    """
    usage.matplotlib: 88
    """
    ...


@overload
def iterable(y: range):
    """
    usage.matplotlib: 7
    """
    ...


@overload
def iterable(y: numpy.bool_):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Tuple[int, int, int, int]):
    """
    usage.matplotlib: 4
    """
    ...


@overload
def iterable(y: matplotlib.transforms.Bbox):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["2009-04-27T00:00:00"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: matplotlib.testing.jpl_units.Epoch.Epoch):
    """
    usage.matplotlib: 3
    """
    ...


@overload
def iterable(y: Literal["2000-01-01"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["2010-01-01"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: List[str]):
    """
    usage.matplotlib: 49
    """
    ...


@overload
def iterable(y: Literal["2009-01-20T00:00:00"]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: Literal["2009-01-21T00:00:00"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: List[matplotlib.testing.jpl_units.Epoch.Epoch]):
    """
    usage.matplotlib: 4
    """
    ...


@overload
def iterable(y: List[Union[float, int]]):
    """
    usage.matplotlib: 11
    """
    ...


@overload
def iterable(y: Literal["2018-01-01T00:00:00"]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: datetime.timedelta):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["2018-01-01T03:00:00"]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: Literal["2018-01-01T02:00:00"]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: List[numpy.int64]):
    """
    usage.matplotlib: 43
    """
    ...


@overload
def iterable(y: List[Literal["2018-01-01T00:00:00"]]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: List[datetime.timedelta]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["2018-01-01T01:00:00"]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(
    y: List[
        Literal["2019-03-01T00:00:00", "2019-02-01T00:00:00", "2019-01-01T00:00:00"]
    ]
):
    """
    usage.matplotlib: 3
    """
    ...


@overload
def iterable(y: List[Literal["y"]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: List[Literal["c"]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: matplotlib.ticker.FixedLocator):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(
    y: List[Tuple[numpy.float64, numpy.float64, numpy.float64, numpy.float64]]
):
    """
    usage.matplotlib: 3
    """
    ...


@overload
def iterable(y: List[Literal["lime", "b", "y", "r"]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: List[List[Union[int, float]]]):
    """
    usage.matplotlib: 3
    """
    ...


@overload
def iterable(y: List[Literal["0.8", "0.7", "0.6", "0.5"]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: List[numpy.ndarray]):
    """
    usage.matplotlib: 20
    """
    ...


@overload
def iterable(y: List[Union[numpy.float64, float]]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: List[Literal["2013-09-28T12:00:00", "2013-09-28T11:00:00"]]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: List[List[float]]):
    """
    usage.matplotlib: 5
    """
    ...


@overload
def iterable(y: List[List[int]]):
    """
    usage.matplotlib: 10
    """
    ...


@overload
def iterable(y: Literal["0.5"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(
    y: Tuple[
        Literal["tab:orange"],
        Literal["tab:pink"],
        Literal["tab:cyan"],
        Literal["bLacK"],
    ]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: List[Literal["b", "r"]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: List[Literal["dashed", "solid"]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: List[list]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: List[Tuple[float, float, float, float]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Callable):
    """
    usage.matplotlib: 3
    """
    ...


@overload
def iterable(y: Tuple[numpy.float64, numpy.float64]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: matplotlib.text.Text):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Tuple[numpy.int64, numpy.int64]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: Literal["2018-11-09T00:00:00"]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: Literal["2018-11-09T01:00:00"]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: numpy.uint8):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: numpy.datetime64):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: matplotlib.axes._subplots.Axes3DSubplot):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: matplotlib.patches.Rectangle):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["Здравствуйте мир"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["hello world"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["a"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["1"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["A"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["hi"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["мир"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["42"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: List[Literal["hi", "world", "hello"]]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: Literal["hello"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: List[Literal["привет", "Здравствуйте"]]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: Literal["Здравствуйте"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: List[Literal["c", "b", "a"]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: List[bytes]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: bytes):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: List[Literal["3", "11", "1"]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: List[Literal["world", "happy", "hello"]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: List[Literal["fun", "is", "Python"]]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: Literal["Python"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: List[Literal["b", "a"]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: List[Literal["g", "e"]]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: Literal["e"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: List[Literal["d", "b", "a"]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: List[Literal["b", "a", "f"]]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: Literal["f"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: List[Literal["d", "c", "b"]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["b"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: List[Literal["d", "e", "g"]]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: Literal["g"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["12"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: mpl_toolkits.mplot3d.axes3d.Axes3D):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: matplotlib.axes._subplots.AxesSubplot):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: List[matplotlib.axes._subplots.AxesSubplot]):
    """
    usage.matplotlib: 4
    """
    ...


@overload
def iterable(y: List[Literal["c", "b", "g", "r"]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: numpy.float128):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: List[Literal["yellow", "blue", "green"]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: List[Tuple[float, float, float]]):
    """
    usage.matplotlib: 3
    """
    ...


@overload
def iterable(y: matplotlib.ticker.MaxNLocator):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: matplotlib.axes._axes.Axes):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: Tuple[Literal["r"], Literal["g"]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: List[Literal["blue", "pink", "yellow"]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: List[Literal["blue", "pink", "yellow", "red"]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: List[Literal["black", "blue", "pink", "yellow"]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["2017-01-01T00:01:01"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: List[Literal["2017-01-01T01:01:01", "2017-01-01T00:01:01"]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(
    y: List[
        List[
            Literal[
                "2017-01-01T01:01:01",
                "2017-01-01T00:01:01",
                "2017-01-01T03:01:01",
                "2017-01-01T02:01:01",
            ]
        ]
    ]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: List[Literal["2009-01-21T00:00:00", "2009-01-20T00:00:00"]]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: Literal["2009-01-15T00:00:00"]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: Literal["2009-01-26T00:00:00"]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: List[Literal["2010-01-21T00:00:00", "2000-01-20T00:00:00"]]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: Literal["1998-01-30T00:00:00"]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: Literal["2012-01-11T00:00:00"]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: List[Literal["2009-01-20T00:00:00"]]):
    """
    usage.matplotlib: 3
    """
    ...


@overload
def iterable(y: Literal["2009-02-05T00:00:00"]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: Literal["2000-01-20T00:00:00"]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: List[Literal["2000-01-20T00:00:00"]]):
    """
    usage.matplotlib: 3
    """
    ...


@overload
def iterable(y: Literal["2000-01-15T00:00:00"]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: Literal["2000-01-26T00:00:00"]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: Tuple[Literal["2000-01-20T00:00:00"], Literal["2000-01-20T00:00:00"]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(
    y: Tuple[Literal["2001-01-01T00:00:00+00:00"], Literal["2001-01-01T00:00:01+00:00"]]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(
    y: List[
        Literal[
            "2018-09-30T10:15:00+00:00",
            "2018-09-30T09:45:00+00:00",
            "2018-09-30T09:15:00+00:00",
            "2018-09-30T08:45:00+00:00",
            "2018-09-30T08:15:00+00:00",
        ]
    ]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["2011-01-01T00:00:00+00:00"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["2011-01-02T00:00:00+00:00"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["2011-01-01T23:00:00+00:00"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["2011-01-02T00:00:00.000001+00:00"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["2011-01-01T20:00:00+00:00"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["1990-01-01T00:00:00"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["2189-04-27T00:00:00"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["1990-12-31T00:00:00"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["1990-05-22T00:00:00"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["1990-02-10T00:00:00"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["1990-01-02T16:00:00"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["1990-01-01T00:20:00"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(
    y: List[
        Literal[
            "1990-01-01T00:20:00+00:00",
            "1990-01-01T00:15:00+00:00",
            "1990-01-01T00:10:00+00:00",
            "1990-01-01T00:05:00+00:00",
            "1990-01-01T00:00:00+00:00",
        ]
    ]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["1990-01-01T00:00:40"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["1990-01-01T00:00:00.001500"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(
    y: Tuple[
        Literal["1990-01-01T00:00:00+00:00"],
        Literal["1990-01-01T00:00:00.001500+00:00"],
    ]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["1997-01-01T00:00:00"]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: Literal["2196-04-27T00:00:00"]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: Literal["1997-12-31T00:00:00"]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: Literal["1997-05-22T00:00:00"]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: Literal["1997-02-10T00:00:00"]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: Literal["1997-01-02T16:00:00"]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: Literal["1997-01-01T00:20:00"]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(
    y: List[
        Literal[
            "1997-01-01T00:20:00+00:00",
            "1997-01-01T00:15:00+00:00",
            "1997-01-01T00:10:00+00:00",
            "1997-01-01T00:05:00+00:00",
            "1997-01-01T00:00:00+00:00",
        ]
    ]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["1997-01-01T00:00:40"]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: Literal["1997-01-01T00:00:00.001500"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(
    y: Tuple[
        Literal["1997-01-01T00:00:00+00:00"],
        Literal["1997-01-01T00:00:00.001500+00:00"],
    ]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["1997-01-01T00:00:02"]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(
    y: Tuple[Literal["1997-01-01T00:00:00+00:00"], Literal["1997-01-01T00:00:02+00:00"]]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["1997-01-01T00:00:00+00:00"]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: Literal["1997-01-02T16:00:00+00:00"]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: Literal["1997-01-01T00:20:00+00:00"]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: Literal["1997-01-01T00:00:40+00:00"]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: Literal["1997-01-01T00:00:02+00:00"]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: Literal["1997-01-01T00:00:00-08:00"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["2196-04-27T00:00:00-08:00"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["1997-12-31T00:00:00-08:00"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["1997-05-22T00:00:00-07:00"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["1997-02-10T00:00:00-08:00"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["1997-01-02T16:00:00-08:00"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["1997-01-01T00:20:00-08:00"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(
    y: List[
        Literal[
            "1997-01-01T00:20:00-08:00",
            "1997-01-01T00:15:00-08:00",
            "1997-01-01T00:10:00-08:00",
            "1997-01-01T00:05:00-08:00",
            "1997-01-01T00:00:00-08:00",
        ]
    ]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["1997-01-01T00:00:40-08:00"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: list):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: List[numpy.datetime64]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Tuple[float, float, float, float]):
    """
    usage.matplotlib: 4
    """
    ...


@overload
def iterable(y: List[Literal["sans-serif"]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["normal"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: List[Literal["serif"]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["italic"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["oblique"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["small-caps"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["bold"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["expanded"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: numpy.uint16):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: numpy.ma.core.MaskedConstant):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: matplotlib.axes._subplots.AxesHostAxesSubplot):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: matplotlib.axis.XAxis):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: matplotlib.axis.YAxis):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: List[Tuple[int, Tuple[int, int]]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Callable):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: List[matplotlib.testing.jpl_units.UnitDbl.UnitDbl]):
    """
    usage.matplotlib: 4
    """
    ...


@overload
def iterable(y: Literal["2017-01-01T00:00:00"]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: Literal["2017-01-01T00:00:16"]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: Literal["2000-01-01T00:00:00"]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: matplotlib.collections.LineCollection):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: matplotlib.contour.ClabelText):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: numpy.float32):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Tuple[int, int, float, float]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Tuple[float, int]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Tuple[None, float]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: Literal["2020-08-17T22:40:05.392444"]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: Literal["2020-08-17T22:40:06.879974"]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(
    y: List[
        Literal[
            "2018-11-05T00:00:00+00:00",
            "2018-11-04T00:00:00+00:00",
            "2018-11-03T00:00:00+00:00",
        ]
    ]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: matplotlib.tests.test_units.Quantity):
    """
    usage.matplotlib: 3
    """
    ...


@overload
def iterable(y: List[matplotlib.tests.test_units.Quantity]):
    """
    usage.matplotlib: 4
    """
    ...


@overload
def iterable(
    y: Tuple[matplotlib.tests.test_units.Quantity, matplotlib.tests.test_units.Quantity]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Literal["2009-04-25T00:00:00"]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: List[matplotlib.testing.jpl_units.Duration.Duration]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: matplotlib.testing.jpl_units.Duration.Duration):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: Tuple[int, float, int, float]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: Tuple[float, int, float, int]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def iterable(y: List[Union[numpy.float64, int]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: mpl_toolkits.axes_grid1.mpl_axes.Axes):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: mpl_toolkits.axes_grid1.axes_grid.CbarAxes):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: mpl_toolkits.axes_grid1.parasite_axes.AxesHostAxes):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: matplotlib.axes._subplots.AxesZeroSubplot):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: mpl_toolkits.axisartist.axislines.Axes):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: mpl_toolkits.axisartist.axis_artist.AxisArtist):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def iterable(y: mpl_toolkits.axisartist.axis_artist.GridlinesCollection):
    """
    usage.matplotlib: 1
    """
    ...


def iterable(y: object):
    """
    usage.matplotlib: 858
    usage.pandas: 32
    usage.sklearn: 9
    """
    ...


@overload
def ix_(*args: Literal["v", "t"]):
    """
    usage.matplotlib: 6
    usage.scipy: 1
    usage.skimage: 2
    usage.sklearn: 4
    usage.xarray: 3
    """
    ...


@overload
def ix_():
    """
    usage.xarray: 1
    """
    ...


def ix_(*args: Literal["v", "t"]):
    """
    usage.matplotlib: 6
    usage.scipy: 1
    usage.skimage: 2
    usage.sklearn: 4
    usage.xarray: 4
    """
    ...


@overload
def kron(a: numpy.ndarray, b: numpy.ndarray):
    """
    usage.scipy: 14
    """
    ...


@overload
def kron(a: List[List[int]], b: List[List[int]]):
    """
    usage.scipy: 36
    """
    ...


@overload
def kron(a: List[int], b: List[List[int]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def kron(a: numpy.matrix, b: List[List[int]]):
    """
    usage.scipy: 2
    """
    ...


def kron(
    a: Union[List[Union[int, List[int]]], numpy.ndarray, numpy.matrix],
    b: Union[List[List[int]], numpy.ndarray],
):
    """
    usage.scipy: 53
    """
    ...


@overload
def lexsort(_0: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray], /):
    """
    usage.skimage: 1
    """
    ...


@overload
def lexsort(_0: Tuple[xarray.core.dataarray.DataArray], /):
    """
    usage.xarray: 1
    """
    ...


@overload
def lexsort(
    _0: Tuple[xarray.core.dataarray.DataArray, xarray.core.dataarray.DataArray], /
):
    """
    usage.xarray: 1
    """
    ...


@overload
def lexsort(
    _0: Union[
        List[numpy.ndarray],
        Tuple[
            Union[
                pandas.core.indexes.numeric.Float64Index,
                numpy.ndarray,
                pandas.core.indexes.numeric.Int64Index,
            ],
            Union[
                pandas.core.indexes.numeric.Float64Index,
                numpy.ndarray,
                pandas.core.indexes.numeric.Int64Index,
            ],
        ],
    ],
    /,
):
    """
    usage.pandas: 11
    """
    ...


@overload
def lexsort(_0: Tuple[numpy.ndarray, numpy.ndarray], /):
    """
    usage.scipy: 6
    usage.sklearn: 2
    """
    ...


@overload
def lexsort(_0: numpy.ndarray, /):
    """
    usage.scipy: 2
    """
    ...


@overload
def lexsort(_0: List[numpy.ndarray], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def lexsort(_0: Tuple[numpy.ma.core.MaskedArray, numpy.ma.core.MaskedArray], /):
    """
    usage.matplotlib: 1
    """
    ...


def lexsort(
    _0: Union[
        Tuple[
            Union[
                numpy.ma.core.MaskedArray,
                pandas.core.indexes.numeric.Float64Index,
                pandas.core.indexes.numeric.Int64Index,
                numpy.ndarray,
                xarray.core.dataarray.DataArray,
            ],
            ...,
        ],
        List[numpy.ndarray],
        numpy.ndarray,
    ],
    /,
):
    """
    usage.matplotlib: 1
    usage.pandas: 11
    usage.scipy: 9
    usage.skimage: 1
    usage.sklearn: 2
    usage.xarray: 2
    """
    ...


@overload
def linspace(start: int, stop: int, num: int, endpoint: bool):
    """
    usage.matplotlib: 1
    usage.scipy: 22
    usage.skimage: 4
    usage.sklearn: 1
    """
    ...


@overload
def linspace(start: numpy.int64, stop: numpy.int64, num: int, endpoint: bool):
    """
    usage.skimage: 1
    """
    ...


@overload
def linspace(start: numpy.float64, stop: numpy.float64, num: int, endpoint: bool):
    """
    usage.matplotlib: 1
    usage.skimage: 2
    usage.sklearn: 1
    """
    ...


@overload
def linspace(start: int, stop: int, num: int, dtype: Type[numpy.uint8]):
    """
    usage.skimage: 1
    """
    ...


@overload
def linspace(start: int, stop: int, num: int, dtype: Type[numpy.int8]):
    """
    usage.skimage: 1
    """
    ...


@overload
def linspace(start: int, stop: int, num: int):
    """
    usage.dask: 15
    usage.matplotlib: 88
    usage.sample-usage: 1
    usage.scipy: 289
    usage.skimage: 23
    usage.sklearn: 44
    usage.xarray: 193
    """
    ...


@overload
def linspace(start: int, stop: float, num: int):
    """
    usage.matplotlib: 17
    usage.scipy: 64
    usage.skimage: 17
    usage.sklearn: 9
    usage.xarray: 3
    """
    ...


@overload
def linspace(start: numpy.float64, stop: numpy.float64, num: int):
    """
    usage.matplotlib: 8
    usage.scipy: 21
    usage.skimage: 4
    usage.sklearn: 4
    """
    ...


@overload
def linspace(start: int, stop: numpy.float64, num: int, endpoint: bool):
    """
    usage.skimage: 1
    """
    ...


@overload
def linspace(start: int, stop: numpy.float32, num: int, endpoint: bool):
    """
    usage.skimage: 1
    """
    ...


@overload
def linspace(start: float, stop: int, num: int):
    """
    usage.matplotlib: 2
    usage.scipy: 12
    usage.skimage: 2
    usage.sklearn: 1
    """
    ...


@overload
def linspace(start: float, stop: float, num: int):
    """
    usage.matplotlib: 51
    usage.scipy: 66
    usage.skimage: 4
    usage.sklearn: 27
    usage.xarray: 21
    """
    ...


@overload
def linspace(start: float, stop: float, num: int, endpoint: bool):
    """
    usage.dask: 1
    usage.scipy: 8
    usage.skimage: 5
    usage.sklearn: 1
    usage.xarray: 1
    """
    ...


@overload
def linspace(start: int, stop: float, num: int, endpoint: bool):
    """
    usage.matplotlib: 3
    usage.scipy: 29
    usage.skimage: 1
    usage.sklearn: 2
    """
    ...


@overload
def linspace(start: int, stop: int, num: numpy.int64):
    """
    usage.sklearn: 1
    usage.xarray: 1
    """
    ...


@overload
def linspace(start: float, stop: numpy.float64, num: int):
    """
    usage.scipy: 2
    usage.xarray: 1
    """
    ...


@overload
def linspace(start: float, stop: float, num: numpy.int64):
    """
    usage.xarray: 1
    """
    ...


@overload
def linspace(start: int, stop: int, num: int, dtype: Type[float]):
    """
    usage.xarray: 5
    """
    ...


@overload
def linspace(start: int, stop: int, num: int, dtype: Type[int]):
    """
    usage.xarray: 5
    """
    ...


@overload
def linspace(
    start: Union[float, int],
    stop: Union[int, float],
    num: int,
    endpoint: bool = ...,
    dtype: Literal["int64"] = ...,
):
    """
    usage.pandas: 19
    """
    ...


@overload
def linspace(start: int, stop: numpy.int64, num: numpy.int64):
    """
    usage.scipy: 7
    """
    ...


@overload
def linspace(start: float, stop: float):
    """
    usage.scipy: 18
    """
    ...


@overload
def linspace(start: int, stop: int):
    """
    usage.matplotlib: 7
    usage.scipy: 18
    """
    ...


@overload
def linspace(start: int, stop: float, num: int, endpoint: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def linspace(start: int, stop: int, num: numpy.int8, endpoint: bool):
    """
    usage.scipy: 2
    """
    ...


@overload
def linspace(start: int, stop: int, num: numpy.int16, endpoint: bool):
    """
    usage.scipy: 2
    """
    ...


@overload
def linspace(start: int, stop: int, num: numpy.int32, endpoint: bool):
    """
    usage.scipy: 2
    """
    ...


@overload
def linspace(start: int, stop: int, num: numpy.int64, endpoint: bool):
    """
    usage.scipy: 2
    """
    ...


@overload
def linspace(start: int, stop: int, num: numpy.ndarray, endpoint: bool):
    """
    usage.scipy: 2
    """
    ...


@overload
def linspace(start: int, stop: float, num: numpy.int8, endpoint: bool):
    """
    usage.scipy: 2
    """
    ...


@overload
def linspace(start: int, stop: float, num: numpy.int16, endpoint: bool):
    """
    usage.scipy: 2
    """
    ...


@overload
def linspace(start: int, stop: float, num: numpy.int32, endpoint: bool):
    """
    usage.scipy: 2
    """
    ...


@overload
def linspace(start: int, stop: float, num: numpy.int64, endpoint: bool):
    """
    usage.scipy: 2
    """
    ...


@overload
def linspace(start: int, stop: float, num: numpy.ndarray, endpoint: bool):
    """
    usage.scipy: 2
    """
    ...


@overload
def linspace(start: float, stop: float, num: int, endpoint: bool, retstep: bool):
    """
    usage.matplotlib: 2
    usage.scipy: 1
    """
    ...


@overload
def linspace(start: int, stop: int, retstep: bool):
    """
    usage.scipy: 1
    """
    ...


@overload
def linspace(start: float, stop: int, num: int, endpoint: bool):
    """
    usage.scipy: 7
    """
    ...


@overload
def linspace(start: int, stop: float):
    """
    usage.matplotlib: 1
    usage.scipy: 2
    """
    ...


@overload
def linspace(start: numpy.float64, stop: numpy.float64, num: numpy.int64):
    """
    usage.scipy: 1
    usage.sklearn: 2
    """
    ...


@overload
def linspace(start: float, stop: int):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def linspace(start: numpy.int64, stop: numpy.int64, num: int):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def linspace(start: int, stop: int, endpoint: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def linspace(start: int, stop: int, endpoint: bool, dtype: Type[float]):
    """
    usage.dask: 1
    """
    ...


@overload
def linspace(start: int, stop: int, endpoint: bool, retstep: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def linspace(start: float, stop: float, num: int, endpoint: bool, dtype: Type[int]):
    """
    usage.dask: 1
    """
    ...


@overload
def linspace(start: numpy.float64, stop: int, num: int, dtype: numpy.dtype):
    """
    usage.dask: 1
    """
    ...


@overload
def linspace(start: numpy.uint8, stop: int, num: int, dtype: numpy.dtype):
    """
    usage.dask: 1
    """
    ...


@overload
def linspace(start: numpy.int16, stop: int, num: int, dtype: numpy.dtype):
    """
    usage.dask: 1
    """
    ...


@overload
def linspace(start: numpy.float32, stop: int, num: int, dtype: numpy.dtype):
    """
    usage.dask: 1
    """
    ...


@overload
def linspace(start: numpy.bool_, stop: int, num: int, dtype: numpy.dtype):
    """
    usage.dask: 1
    """
    ...


@overload
def linspace(start: int, stop: numpy.float64, num: int):
    """
    usage.dask: 1
    """
    ...


@overload
def linspace(start: numpy.int64, stop: numpy.int64, num: numpy.int64):
    """
    usage.sklearn: 2
    """
    ...


def linspace(
    start: object,
    stop: Union[numpy.float64, float, int, numpy.int64, numpy.float32],
    num: object = ...,
    endpoint: Union[bool, int] = ...,
    dtype: Union[type, numpy.dtype, Literal["int64"]] = ...,
    retstep: bool = ...,
):
    """
    usage.dask: 26
    usage.matplotlib: 184
    usage.pandas: 19
    usage.sample-usage: 1
    usage.scipy: 589
    usage.skimage: 67
    usage.sklearn: 95
    usage.xarray: 231
    """
    ...


@overload
def load(file: str):
    """
    usage.dask: 1
    usage.scipy: 9
    usage.skimage: 21
    """
    ...


@overload
def load(file: Literal["/tmp/tmp1i2bbux4.npz"], allow_pickle: bool):
    """
    usage.scipy: 1
    """
    ...


@overload
def load(file: Literal["/tmp/tmpg4wb90xw.npz"], allow_pickle: bool):
    """
    usage.scipy: 1
    """
    ...


@overload
def load(file: Literal["/tmp/tmpnhzfk5x1.npz"], allow_pickle: bool):
    """
    usage.scipy: 1
    """
    ...


@overload
def load(file: Literal["/tmp/tmpuy3zec9x.npz"], allow_pickle: bool):
    """
    usage.scipy: 1
    """
    ...


@overload
def load(file: Literal["/tmp/tmphb49k4ff.npz"], allow_pickle: bool):
    """
    usage.scipy: 1
    """
    ...


@overload
def load(file: Literal["/tmp/tmpi0xs623l.npz"], allow_pickle: bool):
    """
    usage.scipy: 1
    """
    ...


@overload
def load(file: Literal["/tmp/tmplgjy764d.npz"], allow_pickle: bool):
    """
    usage.scipy: 1
    """
    ...


@overload
def load(file: Literal["/tmp/tmpuapqbick.npz"], allow_pickle: bool):
    """
    usage.scipy: 1
    """
    ...


@overload
def load(file: Literal["/tmp/tmp_caxy98g.npz"], allow_pickle: bool):
    """
    usage.scipy: 1
    """
    ...


@overload
def load(file: Literal["/tmp/tmpjq7zk5do.npz"], allow_pickle: bool):
    """
    usage.scipy: 1
    """
    ...


@overload
def load(file: Literal["/tmp/tmpugthn03a.npz"], allow_pickle: bool):
    """
    usage.scipy: 1
    """
    ...


@overload
def load(file: Literal["/tmp/tmpcwwz3w6_.npz"], allow_pickle: bool):
    """
    usage.scipy: 1
    """
    ...


@overload
def load(file: Literal["/tmp/tmpxmziq2fp.npz"], allow_pickle: bool):
    """
    usage.scipy: 1
    """
    ...


@overload
def load(file: Literal["/tmp/tmpr1v07p0x.npz"], allow_pickle: bool):
    """
    usage.scipy: 1
    """
    ...


@overload
def load(file: Literal["/tmp/tmp3m2kn7v_.npz"], allow_pickle: bool):
    """
    usage.scipy: 1
    """
    ...


@overload
def load(file: Literal["/tmp/tmpdhsm8ld3.npz"], allow_pickle: bool):
    """
    usage.scipy: 1
    """
    ...


@overload
def load(file: str, allow_pickle: bool):
    """
    usage.scipy: 1
    """
    ...


@overload
def load(file: _io.BufferedReader):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def load(file: Literal["/tmp/tmpfk_q52db.npy"], mmap_mode: Literal["r"]):
    """
    usage.dask: 1
    """
    ...


@overload
def load(file: Literal["/tmp/tmp7pu_zh_l.npy"], mmap_mode: Literal["r"]):
    """
    usage.dask: 1
    """
    ...


@overload
def load(file: Literal["/tmp/tmpd4ay6ms9.npy"], mmap_mode: Literal["r"]):
    """
    usage.dask: 1
    """
    ...


@overload
def load(file: Literal["/tmp/tmp3jfp1gkx.npy"], mmap_mode: Literal["r"]):
    """
    usage.dask: 2
    """
    ...


@overload
def load(file: Literal["/tmp/tmpu7vhvxgk.npy"], mmap_mode: Literal["r"]):
    """
    usage.dask: 1
    """
    ...


def load(
    file: Union[str, _io.BufferedReader],
    allow_pickle: bool = ...,
    mmap_mode: Literal["r"] = ...,
):
    """
    usage.dask: 7
    usage.matplotlib: 1
    usage.scipy: 26
    usage.skimage: 21
    """
    ...


@overload
def loadtxt(fname: str, dtype: List[Tuple[str, type]]):
    """
    usage.skimage: 1
    """
    ...


@overload
def loadtxt(fname: str):
    """
    usage.pandas: 2
    usage.scipy: 3
    usage.sklearn: 2
    """
    ...


@overload
def loadtxt(fname: _io.StringIO):
    """
    usage.scipy: 2
    """
    ...


@overload
def loadtxt(fname: str, skiprows: int):
    """
    usage.scipy: 1
    usage.sklearn: 2
    """
    ...


@overload
def loadtxt(fname: str, delimiter: Literal[","]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def loadtxt(fname: tarfile.ExFileObject, delimiter: Literal[","]):
    """
    usage.sklearn: 1
    """
    ...


def loadtxt(
    fname: Union[str, tarfile.ExFileObject, _io.StringIO],
    dtype: List[Tuple[str, type]] = ...,
    skiprows: int = ...,
    delimiter: Literal[","] = ...,
):
    """
    usage.pandas: 2
    usage.scipy: 6
    usage.skimage: 1
    usage.sklearn: 6
    """
    ...


@overload
def logspace(start: numpy.float64, stop: numpy.float64, num: int):
    """
    usage.scipy: 3
    usage.skimage: 1
    usage.sklearn: 3
    """
    ...


@overload
def logspace(start: float, stop: float, num: int):
    """
    usage.skimage: 1
    """
    ...


@overload
def logspace(start: int, stop: int, num: int):
    """
    usage.matplotlib: 1
    usage.scipy: 29
    usage.sklearn: 13
    """
    ...


@overload
def logspace(start: numpy.float64, stop: numpy.float64, num: numpy.int8):
    """
    usage.scipy: 1
    """
    ...


@overload
def logspace(start: numpy.float64, stop: numpy.float64, num: numpy.int16):
    """
    usage.scipy: 1
    """
    ...


@overload
def logspace(start: numpy.float64, stop: numpy.float64, num: numpy.int32):
    """
    usage.scipy: 1
    """
    ...


@overload
def logspace(start: numpy.float64, stop: numpy.float64, num: numpy.int64):
    """
    usage.scipy: 1
    """
    ...


@overload
def logspace(start: numpy.float64, stop: numpy.float64, num: numpy.ndarray):
    """
    usage.scipy: 1
    """
    ...


@overload
def logspace(start: numpy.float64, stop: int, num: int):
    """
    usage.scipy: 2
    """
    ...


@overload
def logspace(start: int, stop: int):
    """
    usage.matplotlib: 1
    usage.scipy: 4
    """
    ...


@overload
def logspace(start: int, stop: numpy.float64, num: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def logspace(start: float, stop: float, base: float):
    """
    usage.scipy: 6
    """
    ...


@overload
def logspace(start: float, stop: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def logspace(start: int, stop: int, num: int, base: float):
    """
    usage.matplotlib: 1
    usage.sklearn: 1
    """
    ...


def logspace(
    start: Union[numpy.float64, int, float],
    stop: Union[numpy.float64, int, float],
    num: object = ...,
    base: float = ...,
):
    """
    usage.matplotlib: 3
    usage.scipy: 51
    usage.skimage: 2
    usage.sklearn: 17
    """
    ...


@overload
def may_share_memory(_0: numpy.ndarray, _1: numpy.ndarray, /):
    """
    usage.scipy: 155
    usage.skimage: 2
    usage.sklearn: 36
    """
    ...


@overload
def may_share_memory(
    _0: Union[
        pandas.core.indexes.base.Index,
        pandas.core.arrays.datetimes.DatetimeArray,
        pandas.core.arrays.timedeltas.TimedeltaArray,
    ],
    _1: Union[pandas.core.indexes.base.Index, numpy.ndarray],
    /,
):
    """
    usage.pandas: 3
    """
    ...


@overload
def may_share_memory(_0: numpy.ndarray, _1: numpy.ma.core.MaskedArray, /):
    """
    usage.scipy: 2
    """
    ...


@overload
def may_share_memory(_0: numpy.ndarray, _1: list, /):
    """
    usage.scipy: 1
    """
    ...


@overload
def may_share_memory(
    _0: scipy.sparse.csr.csr_matrix, _1: scipy.sparse.csr.csr_matrix, /
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def may_share_memory(
    _0: scipy.sparse.csr.csr_matrix, _1: scipy.sparse.coo.coo_matrix, /
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def may_share_memory(_0: numpy.ndarray, _1: List[List[float]], /):
    """
    usage.sklearn: 10
    """
    ...


@overload
def may_share_memory(_0: numpy.ndarray, _1: pandas.core.frame.DataFrame, /):
    """
    usage.sklearn: 2
    """
    ...


@overload
def may_share_memory(
    _0: scipy.sparse.csc.csc_matrix, _1: scipy.sparse.csc.csc_matrix, /
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def may_share_memory(
    _0: scipy.sparse.lil.lil_matrix, _1: scipy.sparse.lil.lil_matrix, /
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def may_share_memory(_0: numpy.ndarray, _1: List[List[Union[int, float]]], /):
    """
    usage.sklearn: 3
    """
    ...


@overload
def may_share_memory(_0: numpy.ndarray, _1: List[List[int]], /):
    """
    usage.sklearn: 7
    """
    ...


@overload
def may_share_memory(
    _0: scipy.sparse.csr.csr_matrix, _1: scipy.sparse.csc.csc_matrix, /
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def may_share_memory(
    _0: scipy.sparse.csc.csc_matrix, _1: scipy.sparse.csr.csr_matrix, /
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def may_share_memory(
    _0: scipy.sparse.csc.csc_matrix, _1: scipy.sparse.coo.coo_matrix, /
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def may_share_memory(
    _0: scipy.sparse.csc.csc_matrix, _1: scipy.sparse.lil.lil_matrix, /
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def may_share_memory(
    _0: scipy.sparse.csc.csc_matrix, _1: scipy.sparse.bsr.bsr_matrix, /
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def may_share_memory(
    _0: scipy.sparse.csr.csr_matrix, _1: scipy.sparse.lil.lil_matrix, /
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def may_share_memory(_0: numpy.ndarray, _1: numpy.memmap, /):
    """
    usage.sklearn: 4
    """
    ...


@overload
def may_share_memory(_0: numpy.ndarray, _1: List[List[Union[float, int]]], /):
    """
    usage.sklearn: 2
    """
    ...


@overload
def may_share_memory(_0: numpy.ndarray, _1: List[int], /):
    """
    usage.sklearn: 3
    """
    ...


@overload
def may_share_memory(_0: numpy.ndarray, _1: List[Literal["3", "2", "1"]], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def may_share_memory(
    _0: scipy.sparse.csr.csr_matrix, _1: scipy.sparse.bsr.bsr_matrix, /
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def may_share_memory(
    _0: scipy.sparse.csr.csr_matrix, _1: scipy.sparse.dia.dia_matrix, /
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def may_share_memory(
    _0: scipy.sparse.csr.csr_matrix, _1: scipy.sparse.dok.dok_matrix, /
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def may_share_memory(
    _0: scipy.sparse.csc.csc_matrix, _1: scipy.sparse.dia.dia_matrix, /
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def may_share_memory(
    _0: scipy.sparse.csc.csc_matrix, _1: scipy.sparse.dok.dok_matrix, /
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def may_share_memory(_0: numpy.ndarray, _1: List[float], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def may_share_memory(_0: numpy.ndarray, _1: List[List[numpy.float64]], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def may_share_memory(_0: numpy.ndarray, _1: List[numpy.ndarray], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def may_share_memory(_0: numpy.ndarray, _1: List[Union[int, float]], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def may_share_memory(
    _0: numpy.ndarray, _1: sklearn.utils.estimator_checks._NotAnArray, /
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def may_share_memory(_0: numpy.memmap, _1: numpy.ndarray, /):
    """
    usage.sklearn: 3
    """
    ...


@overload
def may_share_memory(_0: sklearn.utils.estimator_checks._NotAnArray, _1: None, /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def may_share_memory(_0: numpy.ndarray, _1: numpy.matrix, /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def may_share_memory(
    _0: scipy.sparse.coo.coo_matrix, _1: scipy.sparse.csc.csc_matrix, /
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def may_share_memory(
    _0: scipy.sparse.coo.coo_matrix, _1: scipy.sparse.coo.coo_matrix, /
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def may_share_memory(
    _0: scipy.sparse.dok.dok_matrix, _1: scipy.sparse.dok.dok_matrix, /
):
    """
    usage.sklearn: 1
    """
    ...


def may_share_memory(_0: object, _1: object, /):
    """
    usage.pandas: 3
    usage.scipy: 158
    usage.skimage: 2
    usage.sklearn: 96
    """
    ...


@overload
def mean(a: numpy.ndarray):
    """
    usage.dask: 21
    usage.matplotlib: 7
    usage.scipy: 26
    usage.skimage: 35
    usage.sklearn: 128
    usage.xarray: 1
    """
    ...


@overload
def mean(a: numpy.ndarray, axis: int):
    """
    usage.dask: 12
    usage.matplotlib: 5
    usage.scipy: 32
    usage.skimage: 13
    usage.sklearn: 73
    usage.xarray: 6
    """
    ...


@overload
def mean(a: dask.array.core.Array):
    """
    usage.dask: 2
    usage.skimage: 1
    """
    ...


@overload
def mean(a: numpy.ndarray, axis: Tuple[int, int]):
    """
    usage.dask: 1
    usage.skimage: 1
    usage.xarray: 2
    """
    ...


@overload
def mean(a: numpy.ndarray, axis: Tuple[int, int], dtype: Type[numpy.uint8]):
    """
    usage.skimage: 1
    """
    ...


@overload
def mean(a: numpy.ndarray, axis: Tuple[int, int], dtype: Type[numpy.float16]):
    """
    usage.skimage: 1
    """
    ...


@overload
def mean(a: numpy.ndarray, dtype: Type[numpy.float64]):
    """
    usage.skimage: 4
    """
    ...


@overload
def mean(a: List[numpy.float64]):
    """
    usage.skimage: 2
    usage.sklearn: 9
    """
    ...


@overload
def mean(a: numpy.ndarray, axis: None):
    """
    usage.scipy: 5
    usage.xarray: 3
    """
    ...


@overload
def mean(a: numpy.ndarray, axis: Tuple[int]):
    """
    usage.xarray: 3
    """
    ...


@overload
def mean(a: xarray.core.dataarray.DataArray):
    """
    usage.xarray: 3
    """
    ...


@overload
def mean(a: xarray.core.dataarray.DataArray, keepdims: bool):
    """
    usage.xarray: 1
    """
    ...


@overload
def mean(a: numpy.ndarray, axis: None, dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def mean(a: xarray.core.dataarray.DataArray, axis: int, keepdims: bool):
    """
    usage.xarray: 1
    """
    ...


@overload
def mean(a: numpy.ndarray, axis: int, dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def mean(a: numpy.ndarray, axis: None, dtype: Type[float]):
    """
    usage.xarray: 2
    """
    ...


@overload
def mean(a: numpy.ndarray, axis: int, dtype: Type[float]):
    """
    usage.xarray: 2
    """
    ...


@overload
def mean(a: object, axis: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def mean(a: object, axis: Tuple[int]):
    """
    usage.xarray: 2
    """
    ...


@overload
def mean(a: object):
    """
    usage.dask: 1
    usage.xarray: 1
    """
    ...


@overload
def mean(a: object, axis: None, dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def mean(a: object, axis: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def mean(a: xarray.core.dataset.Dataset):
    """
    usage.xarray: 1
    """
    ...


@overload
def mean(a: object, axis: int, dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def mean(a: xarray.core.variable.Variable):
    """
    usage.xarray: 1
    """
    ...


@overload
def mean(a: numpy.ndarray, keepdims: bool):
    """
    usage.dask: 5
    usage.xarray: 3
    """
    ...


@overload
def mean(a: numpy.ndarray, axis: int, keepdims: bool):
    """
    usage.dask: 1
    usage.scipy: 2
    usage.xarray: 3
    """
    ...


@overload
def mean(a: numpy.ndarray, axis: Tuple[int, int], keepdims: bool):
    """
    usage.xarray: 1
    """
    ...


@overload
def mean(
    a: Union[
        numpy.ndarray,
        pandas.core.arrays.sparse.array.SparseArray,
        pandas.core.series.Series,
        List[float],
    ],
    axis: Union[None, int] = ...,
    dtype: Type[numpy.int64] = ...,
    out: numpy.float64 = ...,
):
    """
    usage.pandas: 26
    """
    ...


@overload
def mean(a: Tuple[numpy.ndarray, numpy.ndarray], axis: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def mean(a: List[numpy.int64]):
    """
    usage.scipy: 4
    """
    ...


@overload
def mean(a: List[numpy.complex128]):
    """
    usage.scipy: 4
    """
    ...


@overload
def mean(a: numpy.matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def mean(a: scipy.sparse.csr.csr_matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def mean(a: scipy.sparse.csc.csc_matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def mean(a: scipy.sparse.dok.dok_matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def mean(a: scipy.sparse.lil.lil_matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def mean(a: scipy.sparse.coo.coo_matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def mean(a: scipy.sparse.dia.dia_matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def mean(a: scipy.sparse.bsr.bsr_matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def mean(a: list):
    """
    usage.scipy: 1
    """
    ...


@overload
def mean(a: List[float], axis: int):
    """
    usage.scipy: 4
    """
    ...


@overload
def mean(a: List[int]):
    """
    usage.dask: 1
    usage.scipy: 2
    usage.sklearn: 3
    """
    ...


@overload
def mean(a: numpy.ma.core.MaskedArray):
    """
    usage.dask: 3
    """
    ...


@overload
def mean(a: numpy.ma.core.MaskedArray, axis: int):
    """
    usage.dask: 6
    """
    ...


@overload
def mean(a: numpy.ma.core.MaskedArray, keepdims: bool):
    """
    usage.dask: 2
    """
    ...


@overload
def mean(a: numpy.ma.core.MaskedArray, axis: int, keepdims: bool):
    """
    usage.dask: 4
    """
    ...


@overload
def mean(a: numpy.ndarray, axis: Tuple[None, ...]):
    """
    usage.dask: 3
    """
    ...


@overload
def mean(a: numpy.ndarray, dtype: Literal["f8"]):
    """
    usage.dask: 2
    """
    ...


@overload
def mean(a: numpy.ndarray, dtype: Literal["i8"]):
    """
    usage.dask: 2
    """
    ...


@overload
def mean(a: numpy.ndarray, axis: Tuple[None, ...], keepdims: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def mean(a: numpy.ndarray, axis: Tuple[int, int], dtype: Literal["float32"]):
    """
    usage.dask: 1
    """
    ...


@overload
def mean(a: numpy.ndarray, dtype: Literal["float32"]):
    """
    usage.dask: 1
    """
    ...


@overload
def mean(a: dask.dataframe.core.DataFrame, axis: int, out: dask.dataframe.core.Series):
    """
    usage.dask: 1
    """
    ...


@overload
def mean(a: dask.dataframe.core.Series, axis: None, out: dask.dataframe.core.Scalar):
    """
    usage.dask: 1
    """
    ...


@overload
def mean(a: pandas.core.frame.DataFrame):
    """
    usage.dask: 2
    """
    ...


@overload
def mean(a: dask.dataframe.core.Series):
    """
    usage.dask: 2
    """
    ...


@overload
def mean(a: pandas.core.series.Series):
    """
    usage.dask: 1
    """
    ...


@overload
def mean(a: dask.dataframe.core.DataFrame):
    """
    usage.dask: 2
    """
    ...


@overload
def mean(
    a: Tuple[numpy.float64, numpy.float64, numpy.float64, numpy.float64, numpy.float64]
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def mean(a: Tuple[float, float, float, float, numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def mean(a: List[numpy.ndarray], axis: int, dtype: Type[numpy.float64]):
    """
    usage.sklearn: 3
    """
    ...


@overload
def mean(a: numpy.float64):
    """
    usage.sklearn: 3
    """
    ...


@overload
def mean(a: List[float]):
    """
    usage.sklearn: 3
    """
    ...


@overload
def mean(a: List[Union[float, numpy.float64]]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def mean(a: List[Union[numpy.float64, float]]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def mean(a: List[numpy.ndarray], axis: int):
    """
    usage.sklearn: 3
    """
    ...


@overload
def mean(a: Tuple[numpy.float64, numpy.float64, numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


def mean(
    a: object,
    axis: Union[int, None, Tuple[Union[None, int], ...]] = ...,
    out: Union[
        dask.dataframe.core.Series, dask.dataframe.core.Scalar, numpy.float64
    ] = ...,
    keepdims: bool = ...,
    dtype: object = ...,
):
    """
    usage.dask: 78
    usage.matplotlib: 12
    usage.pandas: 26
    usage.scipy: 89
    usage.skimage: 58
    usage.sklearn: 231
    usage.xarray: 42
    """
    ...


@overload
def median(a: numpy.ndarray, axis: Tuple[int, int]):
    """
    usage.skimage: 1
    """
    ...


@overload
def median(a: numpy.ndarray):
    """
    usage.matplotlib: 2
    usage.scipy: 18
    usage.skimage: 4
    usage.sklearn: 23
    """
    ...


@overload
def median(a: numpy.ndarray, axis: None):
    """
    usage.scipy: 1
    usage.xarray: 1
    """
    ...


@overload
def median(a: object, axis: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def median(a: object):
    """
    usage.xarray: 1
    """
    ...


@overload
def median(a: xarray.core.dataarray.DataArray):
    """
    usage.xarray: 1
    """
    ...


@overload
def median(a: xarray.core.dataset.Dataset):
    """
    usage.xarray: 1
    """
    ...


@overload
def median(a: object, axis: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def median(a: numpy.ndarray, axis: int):
    """
    usage.dask: 2
    usage.scipy: 5
    usage.sklearn: 15
    usage.xarray: 1
    """
    ...


@overload
def median(a: numpy.ndarray, axis: Tuple[int]):
    """
    usage.xarray: 1
    """
    ...


@overload
def median(
    a: Union[numpy.ndarray, pandas.core.series.Series], axis: Union[None, int] = ...
):
    """
    usage.pandas: 17
    """
    ...


@overload
def median(a: numpy.ndarray, axis: int, keepdims: bool):
    """
    usage.dask: 3
    usage.scipy: 2
    """
    ...


@overload
def median(a: list):
    """
    usage.scipy: 1
    """
    ...


@overload
def median(a: List[float], axis: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def median(a: numpy.ndarray, axis: int, overwrite_input: bool):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def median(a: Tuple[int]):
    """
    usage.dask: 1
    """
    ...


@overload
def median(a: Tuple[int, int, int, int, int]):
    """
    usage.dask: 1
    """
    ...


@overload
def median(a: Tuple[int, int, int, int, int, int, int, int, int, int]):
    """
    usage.dask: 1
    """
    ...


@overload
def median(a: Tuple[int, int]):
    """
    usage.dask: 1
    """
    ...


@overload
def median(a: Tuple[int, int, int]):
    """
    usage.dask: 1
    """
    ...


@overload
def median(a: Tuple[int, int, int, int, int, int, int, int]):
    """
    usage.dask: 1
    """
    ...


@overload
def median(a: numpy.ndarray, axis: List[int], keepdims: bool):
    """
    usage.dask: 7
    """
    ...


def median(
    a: object,
    axis: Union[int, Tuple[int, ...], None, List[int]] = ...,
    overwrite_input: bool = ...,
    keepdims: bool = ...,
):
    """
    usage.dask: 18
    usage.matplotlib: 3
    usage.pandas: 17
    usage.scipy: 28
    usage.skimage: 5
    usage.sklearn: 38
    usage.xarray: 8
    """
    ...


@overload
def meshgrid(*xi: Literal["v", "t"]):
    """
    usage.matplotlib: 74
    usage.scipy: 14
    usage.skimage: 8
    usage.sklearn: 4
    usage.xarray: 4
    """
    ...


@overload
def meshgrid(*xi: Literal["v", "t"], indexing: Literal["ij"]):
    """
    usage.dask: 1
    usage.skimage: 10
    usage.sklearn: 2
    usage.xarray: 2
    """
    ...


@overload
def meshgrid(*xi: Literal["v", "t"], indexing: Literal["ij"], sparse: bool):
    """
    usage.dask: 4
    usage.skimage: 9
    """
    ...


@overload
def meshgrid(*xi: Literal["v", "t"], indexing: Literal["xy"], sparse: bool):
    """
    usage.dask: 4
    """
    ...


def meshgrid(
    *xi: Literal["v", "t"], indexing: Literal["ij", "xy"] = ..., sparse: bool = ...
):
    """
    usage.dask: 9
    usage.matplotlib: 74
    usage.scipy: 14
    usage.skimage: 27
    usage.sklearn: 6
    usage.xarray: 6
    """
    ...


@overload
def min_scalar_type(_0: int, /):
    """
    usage.dask: 1
    usage.skimage: 3
    """
    ...


@overload
def min_scalar_type(_0: numpy.int64, /):
    """
    usage.skimage: 1
    """
    ...


@overload
def min_scalar_type(_0: numpy.float64, /):
    """
    usage.skimage: 1
    """
    ...


@overload
def min_scalar_type(_0: object, /):
    """
    usage.matplotlib: 1
    usage.pandas: 10
    """
    ...


@overload
def min_scalar_type(_0: numpy.ma.core.MaskedArray, /):
    """
    usage.matplotlib: 3
    """
    ...


@overload
def min_scalar_type(_0: List[numpy.int64], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def min_scalar_type(_0: List[numpy.bool_], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def min_scalar_type(_0: List[numpy.float64], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def min_scalar_type(_0: List[float], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def min_scalar_type(_0: numpy.ndarray, /):
    """
    usage.dask: 1
    usage.matplotlib: 5
    """
    ...


@overload
def min_scalar_type(_0: List[Union[int, float]], /):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def min_scalar_type(_0: List[int], /):
    """
    usage.matplotlib: 4
    """
    ...


@overload
def min_scalar_type(_0: List[numpy.float128], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def min_scalar_type(_0: List[Union[float, int]], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def min_scalar_type(_0: List[None], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def min_scalar_type(_0: List[numpy.ma.core.MaskedArray], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def min_scalar_type(_0: List[numpy.uint16], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def min_scalar_type(_0: List[numpy.ma.core.MaskedConstant], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def min_scalar_type(_0: List[numpy.float32], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def min_scalar_type(_0: dask.array.core.Array, /):
    """
    usage.dask: 1
    """
    ...


def min_scalar_type(_0: object, /):
    """
    usage.dask: 3
    usage.matplotlib: 26
    usage.pandas: 10
    usage.skimage: 5
    """
    ...


@overload
def mintypecode(typechars: List[Literal["d"]]):
    """
    usage.scipy: 11
    """
    ...


@overload
def mintypecode(typechars: Tuple[numpy.ndarray, numpy.ndarray]):
    """
    usage.scipy: 2
    """
    ...


@overload
def mintypecode(typechars: List[Literal["d", "D"]]):
    """
    usage.scipy: 5
    """
    ...


@overload
def mintypecode(typechars: List[Literal["d", "l"]]):
    """
    usage.scipy: 4
    """
    ...


@overload
def mintypecode(typechars: List[Literal["d", "e"]]):
    """
    usage.scipy: 2
    """
    ...


@overload
def mintypecode(typechars: List[Literal["d", "f"]]):
    """
    usage.scipy: 2
    """
    ...


@overload
def mintypecode(typechars: List[Literal["D"]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def mintypecode(typechars: List[Literal["d", "l", "e"]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def mintypecode(typechars: List[Literal["d", "l", "f"]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def mintypecode(typechars: List[Literal["l", "d"]]):
    """
    usage.scipy: 5
    """
    ...


@overload
def mintypecode(typechars: List[Literal["l"]]):
    """
    usage.scipy: 3
    """
    ...


def mintypecode(
    typechars: Union[
        List[Literal["d", "D", "l", "e", "f"]], Tuple[numpy.ndarray, numpy.ndarray]
    ]
):
    """
    usage.scipy: 37
    """
    ...


@overload
def moveaxis(a: numpy.ndarray, source: int, destination: int):
    """
    usage.dask: 3
    usage.matplotlib: 1
    usage.scipy: 15
    usage.skimage: 4
    usage.xarray: 1
    """
    ...


@overload
def moveaxis(a: numpy.ndarray, source: numpy.ndarray, destination: numpy.ndarray):
    """
    usage.xarray: 12
    """
    ...


@overload
def moveaxis(a: numpy.ndarray, source: Tuple[None, ...], destination: Tuple[None, ...]):
    """
    usage.xarray: 3
    """
    ...


@overload
def moveaxis(a: numpy.ndarray, source: range, destination: List[int]):
    """
    usage.xarray: 2
    """
    ...


@overload
def moveaxis(a: numpy.float64, source: numpy.ndarray, destination: numpy.ndarray):
    """
    usage.xarray: 1
    """
    ...


@overload
def moveaxis(a: int, source: Tuple[None, ...], destination: Tuple[None, ...]):
    """
    usage.xarray: 1
    """
    ...


@overload
def moveaxis(a: object, source: int, destination: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def moveaxis(a: object, source: numpy.ndarray, destination: numpy.ndarray):
    """
    usage.xarray: 1
    """
    ...


@overload
def moveaxis(a: numpy.ndarray, source: List[int], destination: List[int]):
    """
    usage.scipy: 12
    """
    ...


@overload
def moveaxis(a: dask.array.core.Array, source: int, destination: int):
    """
    usage.dask: 1
    """
    ...


def moveaxis(
    a: object,
    source: Union[int, numpy.ndarray, range, List[int], Tuple[None, ...]],
    destination: Union[int, numpy.ndarray, List[int], Tuple[None, ...]],
):
    """
    usage.dask: 4
    usage.matplotlib: 1
    usage.scipy: 27
    usage.skimage: 4
    usage.xarray: 22
    """
    ...


@overload
def nan_to_num(x: List[numpy.float64]):
    """
    usage.skimage: 1
    """
    ...


@overload
def nan_to_num(x: numpy.ndarray):
    """
    usage.dask: 4
    usage.scipy: 4
    usage.sklearn: 7
    """
    ...


@overload
def nan_to_num(x: pandas.core.indexes.base.Index):
    """
    usage.dask: 1
    """
    ...


@overload
def nan_to_num(x: pandas.core.indexes.range.RangeIndex):
    """
    usage.dask: 1
    """
    ...


@overload
def nan_to_num(x: pandas.core.indexes.numeric.Int64Index):
    """
    usage.dask: 1
    """
    ...


@overload
def nan_to_num(x: pandas.core.indexes.category.CategoricalIndex):
    """
    usage.dask: 1
    """
    ...


@overload
def nan_to_num(x: pandas.core.indexes.numeric.Float64Index):
    """
    usage.dask: 1
    """
    ...


@overload
def nan_to_num(x: pandas.core.series.Series):
    """
    usage.dask: 5
    """
    ...


@overload
def nan_to_num(x: dask.dataframe.core.Series):
    """
    usage.dask: 2
    """
    ...


@overload
def nan_to_num(x: pandas.core.frame.DataFrame):
    """
    usage.dask: 5
    """
    ...


@overload
def nan_to_num(x: dask.dataframe.core.DataFrame):
    """
    usage.dask: 2
    """
    ...


def nan_to_num(x: object):
    """
    usage.dask: 23
    usage.scipy: 4
    usage.skimage: 1
    usage.sklearn: 7
    """
    ...


@overload
def nanargmax(a: numpy.ndarray):
    """
    usage.dask: 7
    usage.xarray: 5
    """
    ...


@overload
def nanargmax(a: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanargmax(a: List[int]):
    """
    usage.xarray: 2
    """
    ...


@overload
def nanargmax(a: List[List[int]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanargmax(a: float):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanargmax(a: List[float]):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanargmax(a: numpy.int32):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanargmax(a: numpy.ndarray, axis: int):
    """
    usage.dask: 14
    usage.xarray: 1
    """
    ...


@overload
def nanargmax(a: sparse._coo.core.COO, axis: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanargmax(a: object, axis: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanargmax(a: object, axis: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanargmax(a: numpy.ndarray, axis: None):
    """
    usage.dask: 2
    usage.xarray: 1
    """
    ...


@overload
def nanargmax(_0: numpy.ndarray, _1: None, /, *, keepdims: bool):
    """
    usage.dask: 3
    """
    ...


@overload
def nanargmax(_0: numpy.ndarray, _1: int, /, *, keepdims: bool):
    """
    usage.dask: 2
    """
    ...


def nanargmax(
    _0: numpy.ndarray = ...,
    _1: Union[None, int] = ...,
    /,
    a: object = ...,
    axis: Union[None, int] = ...,
    *,
    keepdims: bool = ...,
):
    """
    usage.dask: 28
    usage.xarray: 17
    """
    ...


@overload
def nanargmin(a: numpy.ndarray):
    """
    usage.dask: 7
    usage.xarray: 6
    """
    ...


@overload
def nanargmin(a: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanargmin(a: List[int]):
    """
    usage.xarray: 2
    """
    ...


@overload
def nanargmin(a: List[List[int]]):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanargmin(a: float):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanargmin(a: List[float]):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanargmin(a: numpy.int32):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanargmin(a: numpy.ndarray, axis: int):
    """
    usage.dask: 14
    usage.xarray: 1
    """
    ...


@overload
def nanargmin(a: sparse._coo.core.COO, axis: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanargmin(a: object, axis: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanargmin(a: object, axis: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanargmin(_0: numpy.ndarray, _1: None, /, *, keepdims: bool):
    """
    usage.dask: 3
    """
    ...


@overload
def nanargmin(a: numpy.ndarray, axis: None):
    """
    usage.dask: 2
    """
    ...


@overload
def nanargmin(_0: numpy.ndarray, _1: int, /, *, keepdims: bool):
    """
    usage.dask: 2
    """
    ...


def nanargmin(
    _0: numpy.ndarray = ...,
    _1: Union[None, int] = ...,
    /,
    a: object = ...,
    axis: Union[None, int] = ...,
    *,
    keepdims: bool = ...,
):
    """
    usage.dask: 28
    usage.xarray: 17
    """
    ...


@overload
def nancumprod(a: numpy.ndarray, axis: int, dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def nancumprod(a: sparse._coo.core.COO, axis: int, dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def nancumprod(a: object, axis: int, dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def nancumprod(a: numpy.ndarray):
    """
    usage.dask: 4
    """
    ...


@overload
def nancumprod(a: numpy.ndarray, axis: int):
    """
    usage.dask: 11
    """
    ...


@overload
def nancumprod(a: numpy.ndarray, axis: None):
    """
    usage.dask: 1
    """
    ...


def nancumprod(a: object, axis: Union[int, None] = ..., dtype: None = ...):
    """
    usage.dask: 16
    usage.xarray: 3
    """
    ...


@overload
def nancumsum(a: numpy.ndarray, axis: int, dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def nancumsum(a: sparse._coo.core.COO, axis: int, dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def nancumsum(a: object, axis: int, dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def nancumsum(a: numpy.ndarray):
    """
    usage.dask: 4
    """
    ...


@overload
def nancumsum(a: numpy.ndarray, axis: int):
    """
    usage.dask: 11
    """
    ...


@overload
def nancumsum(a: numpy.ndarray, axis: None):
    """
    usage.dask: 1
    """
    ...


def nancumsum(a: object, axis: Union[int, None] = ..., dtype: None = ...):
    """
    usage.dask: 16
    usage.xarray: 3
    """
    ...


@overload
def nanmax(a: numpy.ndarray, axis: int):
    """
    usage.dask: 6
    usage.sklearn: 6
    usage.xarray: 4
    """
    ...


@overload
def nanmax(a: numpy.ndarray, axis: Tuple[int]):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanmax(a: numpy.ndarray):
    """
    usage.dask: 10
    usage.matplotlib: 2
    usage.xarray: 4
    """
    ...


@overload
def nanmax(a: numpy.ndarray, axis: None):
    """
    usage.sklearn: 2
    usage.xarray: 2
    """
    ...


@overload
def nanmax(a: sparse._coo.core.COO, axis: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanmax(a: object, axis: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanmax(a: object, axis: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanmax(a: Union[numpy.ndarray, pandas.core.series.Series]):
    """
    usage.pandas: 7
    """
    ...


@overload
def nanmax(a: numpy.ndarray, axis: Tuple[int], keepdims: bool):
    """
    usage.dask: 8
    """
    ...


@overload
def nanmax(
    _0: numpy.ndarray, /, *, axis: Tuple[int], computing_meta: bool, keepdims: bool
):
    """
    usage.dask: 4
    """
    ...


@overload
def nanmax(a: numpy.ndarray, keepdims: bool):
    """
    usage.dask: 5
    """
    ...


@overload
def nanmax(a: numpy.ndarray, axis: Tuple[None, ...], keepdims: bool):
    """
    usage.dask: 9
    """
    ...


@overload
def nanmax(
    _0: numpy.ndarray,
    /,
    *,
    axis: Tuple[None, ...],
    computing_meta: bool,
    keepdims: bool,
):
    """
    usage.dask: 4
    """
    ...


@overload
def nanmax(a: numpy.ndarray, axis: Tuple[None, ...]):
    """
    usage.dask: 4
    """
    ...


@overload
def nanmax(a: numpy.ndarray, axis: None, keepdims: bool):
    """
    usage.dask: 2
    """
    ...


@overload
def nanmax(a: numpy.ndarray, axis: int, keepdims: bool):
    """
    usage.dask: 2
    """
    ...


@overload
def nanmax(a: numpy.ndarray, axis: Tuple[int, int], keepdims: bool):
    """
    usage.dask: 4
    """
    ...


@overload
def nanmax(
    _0: numpy.ndarray, /, *, axis: Tuple[int, int], computing_meta: bool, keepdims: bool
):
    """
    usage.dask: 2
    """
    ...


@overload
def nanmax(a: numpy.ndarray, axis: Tuple[int, int]):
    """
    usage.dask: 2
    """
    ...


def nanmax(
    _0: numpy.ndarray = ...,
    /,
    a: object = ...,
    axis: Union[int, None, Tuple[Union[None, int], ...]] = ...,
    keepdims: bool = ...,
    *,
    computing_meta: bool = ...,
):
    """
    usage.dask: 62
    usage.matplotlib: 2
    usage.pandas: 7
    usage.sklearn: 8
    usage.xarray: 14
    """
    ...


@overload
def nanmean(a: numpy.ndarray, axis: None, dtype: None):
    """
    usage.xarray: 4
    """
    ...


@overload
def nanmean(a: numpy.ndarray, axis: int, dtype: None):
    """
    usage.xarray: 3
    """
    ...


@overload
def nanmean(a: numpy.ndarray, axis: None, dtype: Type[numpy.float16]):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanmean(a: numpy.ndarray, axis: None, dtype: Type[numpy.float32]):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanmean(a: numpy.ndarray, axis: None, dtype: Type[numpy.float64]):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanmean(a: numpy.ndarray, axis: int):
    """
    usage.dask: 5
    usage.sklearn: 4
    usage.xarray: 1
    """
    ...


@overload
def nanmean(a: numpy.ndarray, axis: Tuple[None, ...], dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanmean(a: numpy.ndarray, axis: Tuple[int], dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanmean(a: numpy.ndarray):
    """
    usage.dask: 1
    usage.xarray: 3
    """
    ...


@overload
def nanmean(a: numpy.ndarray, axis: None, dtype: Type[float]):
    """
    usage.xarray: 2
    """
    ...


@overload
def nanmean(a: numpy.ndarray, axis: int, dtype: Type[float]):
    """
    usage.xarray: 2
    """
    ...


@overload
def nanmean(a: numpy.ndarray, axis: Tuple[int, int], dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanmean(a: sparse._coo.core.COO, axis: None, dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanmean(a: sparse._coo.core.COO, axis: Tuple[int], dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanmean(a: sparse._coo.core.COO, axis: int, dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanmean(a: object, axis: None, dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanmean(a: object, axis: int, dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanmean(a: object, axis: Tuple[int], dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanmean(a: pandas.core.series.Series):
    """
    usage.pandas: 2
    """
    ...


@overload
def nanmean(a: numpy.ndarray, axis: int, keepdims: bool):
    """
    usage.dask: 1
    usage.scipy: 1
    """
    ...


@overload
def nanmean(a: numpy.ndarray, keepdims: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def nanmean(a: numpy.ndarray, axis: Tuple[None, ...]):
    """
    usage.dask: 1
    """
    ...


@overload
def nanmean(a: numpy.ndarray, axis: Tuple[None, ...], keepdims: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def nanmean(a: numpy.ndarray, axis: Tuple[int, int]):
    """
    usage.dask: 1
    """
    ...


def nanmean(
    a: object,
    axis: Union[int, None, Tuple[Union[None, int], ...]] = ...,
    keepdims: bool = ...,
    dtype: Union[None, type] = ...,
):
    """
    usage.dask: 11
    usage.pandas: 2
    usage.scipy: 1
    usage.sklearn: 4
    usage.xarray: 27
    """
    ...


@overload
def nanmedian(a: numpy.ndarray, axis: int):
    """
    usage.sklearn: 2
    usage.xarray: 1
    """
    ...


@overload
def nanmedian(a: sparse._coo.core.COO, axis: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanmedian(a: object, axis: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanmedian(a: Union[pandas.core.series.Series, numpy.ndarray], axis: int = ...):
    """
    usage.pandas: 3
    """
    ...


@overload
def nanmedian(a: numpy.ndarray, axis: List[int], keepdims: bool):
    """
    usage.dask: 7
    """
    ...


@overload
def nanmedian(a: numpy.ndarray, axis: int, keepdims: bool):
    """
    usage.dask: 1
    """
    ...


def nanmedian(a: object, axis: Union[int, None, List[int]] = ..., keepdims: bool = ...):
    """
    usage.dask: 8
    usage.pandas: 3
    usage.sklearn: 2
    usage.xarray: 3
    """
    ...


@overload
def nanmin(a: numpy.ndarray, axis: Tuple[None, ...]):
    """
    usage.dask: 4
    usage.xarray: 1
    """
    ...


@overload
def nanmin(a: numpy.ndarray, axis: int):
    """
    usage.dask: 7
    usage.sklearn: 5
    usage.xarray: 3
    """
    ...


@overload
def nanmin(a: numpy.ndarray):
    """
    usage.dask: 10
    usage.matplotlib: 2
    usage.sklearn: 2
    usage.xarray: 4
    """
    ...


@overload
def nanmin(a: numpy.ndarray, axis: None):
    """
    usage.sklearn: 2
    usage.xarray: 2
    """
    ...


@overload
def nanmin(a: sparse._coo.core.COO, axis: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanmin(a: object, axis: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanmin(a: object, axis: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanmin(a: Union[numpy.ndarray, pandas.core.series.Series]):
    """
    usage.pandas: 6
    """
    ...


@overload
def nanmin(a: numpy.ndarray, axis: Tuple[int], keepdims: bool):
    """
    usage.dask: 8
    """
    ...


@overload
def nanmin(
    _0: numpy.ndarray, /, *, axis: Tuple[int], computing_meta: bool, keepdims: bool
):
    """
    usage.dask: 4
    """
    ...


@overload
def nanmin(a: numpy.ndarray, keepdims: bool):
    """
    usage.dask: 5
    """
    ...


@overload
def nanmin(a: numpy.ndarray, axis: Tuple[None, ...], keepdims: bool):
    """
    usage.dask: 9
    """
    ...


@overload
def nanmin(
    _0: numpy.ndarray,
    /,
    *,
    axis: Tuple[None, ...],
    computing_meta: bool,
    keepdims: bool,
):
    """
    usage.dask: 4
    """
    ...


@overload
def nanmin(a: numpy.ndarray, axis: None, keepdims: bool):
    """
    usage.dask: 2
    """
    ...


@overload
def nanmin(a: numpy.ndarray, axis: int, keepdims: bool):
    """
    usage.dask: 2
    """
    ...


@overload
def nanmin(a: numpy.ndarray, axis: Tuple[int, int], keepdims: bool):
    """
    usage.dask: 4
    """
    ...


@overload
def nanmin(
    _0: numpy.ndarray, /, *, axis: Tuple[int, int], computing_meta: bool, keepdims: bool
):
    """
    usage.dask: 2
    """
    ...


@overload
def nanmin(a: numpy.ndarray, axis: Tuple[int, int]):
    """
    usage.dask: 1
    """
    ...


def nanmin(
    _0: numpy.ndarray = ...,
    /,
    a: object = ...,
    axis: Union[int, None, Tuple[Union[int, None], ...]] = ...,
    keepdims: bool = ...,
    *,
    computing_meta: bool = ...,
):
    """
    usage.dask: 62
    usage.matplotlib: 2
    usage.pandas: 6
    usage.sklearn: 9
    usage.xarray: 13
    """
    ...


@overload
def nanpercentile(a: numpy.ndarray, q: numpy.float64, axis: None):
    """
    usage.xarray: 2
    """
    ...


@overload
def nanpercentile(a: numpy.ndarray, q: numpy.ndarray, axis: None):
    """
    usage.xarray: 2
    """
    ...


@overload
def nanpercentile(a: numpy.ndarray, q: numpy.float64, axis: int):
    """
    usage.xarray: 3
    """
    ...


@overload
def nanpercentile(a: numpy.ndarray, q: numpy.ndarray, axis: int):
    """
    usage.xarray: 3
    """
    ...


@overload
def nanpercentile(a: numpy.ndarray, q: numpy.float64, axis: List[int]):
    """
    usage.xarray: 5
    """
    ...


@overload
def nanpercentile(a: numpy.ndarray, q: numpy.ndarray, axis: List[int]):
    """
    usage.xarray: 5
    """
    ...


@overload
def nanpercentile(
    a: numpy.ndarray,
    q: List[int],
    axis: None,
    interpolation: Literal["linear"],
    keepdims: bool,
):
    """
    usage.scipy: 1
    """
    ...


@overload
def nanpercentile(
    a: numpy.ndarray,
    q: List[int],
    axis: int,
    interpolation: Literal["linear"],
    keepdims: bool,
):
    """
    usage.scipy: 1
    """
    ...


@overload
def nanpercentile(a: numpy.ndarray, q: Tuple[float, float]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def nanpercentile(a: numpy.ndarray, q: numpy.ndarray):
    """
    usage.sklearn: 3
    """
    ...


@overload
def nanpercentile(a: numpy.ndarray, q: Tuple[int, int]):
    """
    usage.sklearn: 1
    """
    ...


def nanpercentile(
    a: numpy.ndarray,
    q: Union[
        numpy.ndarray,
        numpy.float64,
        Tuple[Union[int, float], Union[int, float]],
        List[int],
    ],
    interpolation: Literal["linear"] = ...,
    keepdims: bool = ...,
):
    """
    usage.scipy: 2
    usage.sklearn: 6
    usage.xarray: 20
    """
    ...


@overload
def nanprod(a: numpy.ndarray, axis: None, dtype: None, out: None):
    """
    usage.xarray: 3
    """
    ...


@overload
def nanprod(a: numpy.ndarray, axis: int, dtype: None, out: None):
    """
    usage.xarray: 3
    """
    ...


@overload
def nanprod(a: numpy.ndarray, axis: Tuple[int, int], dtype: None, out: None):
    """
    usage.xarray: 3
    """
    ...


@overload
def nanprod(a: sparse._coo.core.COO, axis: None, dtype: None, out: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanprod(a: numpy.ndarray, axis: Union[None, int]):
    """
    usage.pandas: 4
    """
    ...


@overload
def nanprod(a: numpy.ndarray):
    """
    usage.dask: 10
    """
    ...


@overload
def nanprod(a: numpy.ndarray, keepdims: bool):
    """
    usage.dask: 5
    """
    ...


@overload
def nanprod(a: numpy.ndarray, axis: Tuple[None, ...]):
    """
    usage.dask: 3
    """
    ...


@overload
def nanprod(a: numpy.ndarray, dtype: Literal["f8"]):
    """
    usage.dask: 2
    """
    ...


@overload
def nanprod(a: numpy.ndarray, dtype: Literal["i8"]):
    """
    usage.dask: 2
    """
    ...


@overload
def nanprod(a: numpy.ndarray, axis: int):
    """
    usage.dask: 4
    """
    ...


@overload
def nanprod(a: numpy.ndarray, axis: int, keepdims: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def nanprod(a: numpy.ndarray, axis: Tuple[None, ...], keepdims: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def nanprod(a: numpy.ndarray, axis: Tuple[int, int]):
    """
    usage.dask: 1
    """
    ...


def nanprod(
    a: Union[numpy.ndarray, sparse._coo.core.COO],
    axis: Union[int, Tuple[Union[int, None], ...], None] = ...,
    keepdims: bool = ...,
    dtype: Union[Literal["i8", "f8"], None] = ...,
    out: None = ...,
):
    """
    usage.dask: 29
    usage.pandas: 4
    usage.xarray: 10
    """
    ...


@overload
def nanquantile(
    a: numpy.ndarray,
    q: numpy.ndarray,
    axis: numpy.ndarray,
    interpolation: Literal["linear"],
):
    """
    usage.xarray: 2
    """
    ...


@overload
def nanquantile(
    a: sparse._coo.core.COO,
    q: numpy.ndarray,
    axis: numpy.ndarray,
    interpolation: Literal["linear"],
):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanquantile(
    a: object, q: numpy.ndarray, axis: numpy.ndarray, interpolation: Literal["linear"]
):
    """
    usage.xarray: 1
    """
    ...


def nanquantile(
    a: object, q: numpy.ndarray, axis: numpy.ndarray, interpolation: Literal["linear"]
):
    """
    usage.xarray: 4
    """
    ...


@overload
def nanstd(a: numpy.ndarray, axis: int):
    """
    usage.dask: 5
    usage.sklearn: 1
    usage.xarray: 1
    """
    ...


@overload
def nanstd(a: sparse._coo.core.COO, axis: None, dtype: None, ddof: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanstd(a: object, axis: None, dtype: None, ddof: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanstd(a: object, axis: int, dtype: None, ddof: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanstd(a: numpy.ndarray, axis: int, ddof: int, keepdims: bool):
    """
    usage.scipy: 1
    """
    ...


@overload
def nanstd(a: numpy.ndarray):
    """
    usage.dask: 1
    """
    ...


@overload
def nanstd(a: numpy.ndarray, keepdims: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def nanstd(a: numpy.ndarray, axis: Tuple[None, ...]):
    """
    usage.dask: 1
    """
    ...


@overload
def nanstd(a: numpy.ndarray, axis: int, keepdims: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def nanstd(a: numpy.ndarray, axis: Tuple[None, ...], keepdims: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def nanstd(a: numpy.ndarray, axis: Tuple[int, int]):
    """
    usage.dask: 1
    """
    ...


def nanstd(
    a: object,
    axis: Union[int, None, Tuple[Union[None, int], ...]] = ...,
    dtype: None = ...,
    ddof: int = ...,
    keepdims: bool = ...,
):
    """
    usage.dask: 11
    usage.scipy: 1
    usage.sklearn: 1
    usage.xarray: 4
    """
    ...


@overload
def nansum(a: numpy.ndarray, axis: int):
    """
    usage.dask: 11
    usage.sklearn: 2
    usage.xarray: 3
    """
    ...


@overload
def nansum(a: numpy.ndarray):
    """
    usage.dask: 18
    usage.scipy: 1
    usage.sklearn: 4
    usage.xarray: 4
    """
    ...


@overload
def nansum(a: numpy.ndarray, axis: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def nansum(
    a: Union[pandas.core.series.Series, numpy.ndarray], axis: Union[None, int] = ...
):
    """
    usage.pandas: 6
    """
    ...


@overload
def nansum(a: numpy.ndarray, keepdims: bool):
    """
    usage.dask: 5
    """
    ...


@overload
def nansum(a: numpy.ndarray, axis: Tuple[None, ...]):
    """
    usage.dask: 4
    """
    ...


@overload
def nansum(a: numpy.ndarray, dtype: Literal["f8"]):
    """
    usage.dask: 2
    """
    ...


@overload
def nansum(a: numpy.ndarray, dtype: Literal["i8"]):
    """
    usage.dask: 2
    """
    ...


@overload
def nansum(a: numpy.ndarray, axis: Tuple[int], dtype: numpy.dtype, keepdims: bool):
    """
    usage.dask: 11
    """
    ...


@overload
def nansum(
    a: numpy.ndarray, axis: Tuple[None, ...], dtype: numpy.dtype, keepdims: bool
):
    """
    usage.dask: 10
    """
    ...


@overload
def nansum(a: numpy.ndarray, axis: Tuple[int], dtype: Literal["f8"], keepdims: bool):
    """
    usage.dask: 6
    """
    ...


@overload
def nansum(a: numpy.ndarray, axis: Tuple[int], dtype: Literal["i8"], keepdims: bool):
    """
    usage.dask: 6
    """
    ...


@overload
def nansum(a: numpy.ndarray, axis: int, keepdims: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def nansum(a: numpy.ndarray, axis: Tuple[None, ...], keepdims: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def nansum(a: numpy.ndarray, axis: Tuple[int, int]):
    """
    usage.dask: 1
    """
    ...


@overload
def nansum(a: numpy.ndarray, axis: Tuple[int, int], dtype: numpy.dtype, keepdims: bool):
    """
    usage.dask: 4
    """
    ...


@overload
def nansum(a: numpy.ndarray, axis: int, dtype: Type[numpy.float64]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def nansum(a: numpy.ma.core.MaskedArray):
    """
    usage.sklearn: 1
    """
    ...


def nansum(
    a: Union[numpy.ma.core.MaskedArray, numpy.ndarray, pandas.core.series.Series],
    axis: Union[int, None, Tuple[Union[None, int], ...]] = ...,
    dtype: Union[Type[numpy.float64], Literal["i8", "f8"], numpy.dtype] = ...,
    keepdims: bool = ...,
):
    """
    usage.dask: 82
    usage.pandas: 6
    usage.scipy: 1
    usage.sklearn: 9
    usage.xarray: 8
    """
    ...


@overload
def nanvar(a: numpy.ndarray, axis: int):
    """
    usage.dask: 4
    usage.sklearn: 4
    usage.xarray: 2
    """
    ...


@overload
def nanvar(a: numpy.ndarray):
    """
    usage.dask: 2
    usage.sklearn: 4
    usage.xarray: 4
    """
    ...


@overload
def nanvar(a: numpy.ndarray, axis: None, dtype: Type[float], ddof: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanvar(a: numpy.ndarray, axis: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanvar(a: numpy.ndarray, axis: None, dtype: None, ddof: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanvar(a: numpy.ndarray, axis: int, dtype: Type[float], ddof: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanvar(a: sparse._coo.core.COO, axis: None, dtype: None, ddof: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanvar(a: object, axis: None, dtype: None, ddof: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanvar(a: object, axis: int, dtype: None, ddof: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def nanvar(a: numpy.ndarray, axis: int, ddof: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def nanvar(a: numpy.ndarray, keepdims: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def nanvar(a: numpy.ndarray, axis: Tuple[None, ...]):
    """
    usage.dask: 1
    """
    ...


@overload
def nanvar(a: numpy.ndarray, axis: int, keepdims: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def nanvar(a: numpy.ndarray, axis: Tuple[None, ...], keepdims: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def nanvar(a: numpy.ndarray, axis: Tuple[int, int]):
    """
    usage.dask: 1
    """
    ...


@overload
def nanvar(a: numpy.ndarray, axis: int, dtype: Type[numpy.float64]):
    """
    usage.sklearn: 2
    """
    ...


def nanvar(
    a: object,
    axis: Union[int, None, Tuple[Union[None, int], ...]] = ...,
    keepdims: bool = ...,
    dtype: Union[Type[numpy.float64], Type[float], None] = ...,
    ddof: int = ...,
):
    """
    usage.dask: 11
    usage.scipy: 1
    usage.sklearn: 10
    usage.xarray: 13
    """
    ...


@overload
def ndim(a: numpy.ndarray):
    """
    usage.dask: 3
    usage.matplotlib: 7
    usage.scipy: 23
    usage.skimage: 4
    usage.sklearn: 2
    """
    ...


@overload
def ndim(a: object):
    """
    usage.matplotlib: 1
    usage.pandas: 703
    """
    ...


@overload
def ndim(a: List[List[int]]):
    """
    usage.dask: 1
    usage.scipy: 9
    """
    ...


@overload
def ndim(a: scipy.fftpack.tests.test_basic.FakeArray):
    """
    usage.scipy: 1
    """
    ...


@overload
def ndim(a: scipy.fftpack.tests.test_basic.FakeArray2):
    """
    usage.scipy: 1
    """
    ...


@overload
def ndim(a: int):
    """
    usage.dask: 3
    usage.scipy: 4
    """
    ...


@overload
def ndim(a: numpy.int32):
    """
    usage.scipy: 2
    """
    ...


@overload
def ndim(a: slice[None, None, None]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ndim(a: numpy.int64):
    """
    usage.matplotlib: 2
    usage.scipy: 3
    """
    ...


@overload
def ndim(a: List[int]):
    """
    usage.dask: 2
    usage.scipy: 13
    """
    ...


@overload
def ndim(a: list):
    """
    usage.scipy: 1
    """
    ...


@overload
def ndim(a: slice[None, int, None]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ndim(a: List[Union[int, float]]):
    """
    usage.scipy: 2
    """
    ...


@overload
def ndim(a: List[Union[float, int]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ndim(a: numpy.int8):
    """
    usage.scipy: 2
    """
    ...


@overload
def ndim(a: numpy.int16):
    """
    usage.scipy: 1
    """
    ...


@overload
def ndim(a: float):
    """
    usage.matplotlib: 3
    usage.scipy: 3
    """
    ...


@overload
def ndim(a: complex):
    """
    usage.scipy: 2
    """
    ...


@overload
def ndim(a: numpy.float64):
    """
    usage.matplotlib: 2
    usage.scipy: 1
    usage.sklearn: 2
    """
    ...


@overload
def ndim(a: Tuple[int]):
    """
    usage.scipy: 2
    """
    ...


@overload
def ndim(a: Tuple[int, int, int]):
    """
    usage.scipy: 2
    """
    ...


@overload
def ndim(a: Tuple[int, int]):
    """
    usage.scipy: 2
    """
    ...


@overload
def ndim(a: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray]):
    """
    usage.scipy: 2
    """
    ...


@overload
def ndim(a: List[numpy.ndarray]):
    """
    usage.scipy: 4
    """
    ...


@overload
def ndim(a: slice[int, int, int]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ndim(a: slice[int, None, int]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ndim(a: slice[int, int, int]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ndim(a: slice[numpy.int8, numpy.int8, numpy.int8]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ndim(a: slice[int, None, int]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ndim(a: slice[None, int, None]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ndim(a: Literal["foo"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ndim(a: List[list]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ndim(a: slice[None, None, None]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ndim(a: numpy.ma.core.MaskedArray):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def ndim(a: None):
    """
    usage.dask: 1
    """
    ...


def ndim(a: object):
    """
    usage.dask: 10
    usage.matplotlib: 16
    usage.pandas: 703
    usage.scipy: 92
    usage.skimage: 4
    usage.sklearn: 4
    """
    ...


@overload
def nonzero(a: numpy.ndarray):
    """
    usage.dask: 2
    usage.matplotlib: 5
    usage.pandas: 4
    usage.scipy: 73
    usage.skimage: 17
    usage.sklearn: 15
    usage.xarray: 4
    """
    ...


@overload
def nonzero(a: scipy.sparse.csr.csr_matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def nonzero(a: scipy.sparse.csc.csc_matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def nonzero(a: scipy.sparse.dok.dok_matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def nonzero(a: scipy.sparse.lil.lil_matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def nonzero(a: scipy.sparse.coo.coo_matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def nonzero(a: scipy.sparse.dia.dia_matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def nonzero(a: scipy.sparse.bsr.bsr_matrix):
    """
    usage.scipy: 1
    """
    ...


def nonzero(a: object):
    """
    usage.dask: 2
    usage.matplotlib: 5
    usage.pandas: 4
    usage.scipy: 80
    usage.skimage: 17
    usage.sklearn: 15
    usage.xarray: 4
    """
    ...


@overload
def obj2sctype(rep: Type[numpy.floating]):
    """
    usage.skimage: 1
    """
    ...


@overload
def obj2sctype(rep: numpy.dtype):
    """
    usage.skimage: 1
    """
    ...


@overload
def obj2sctype(rep: Type[numpy.uint16]):
    """
    usage.skimage: 1
    """
    ...


@overload
def obj2sctype(rep: Type[numpy.uint8]):
    """
    usage.skimage: 1
    """
    ...


@overload
def obj2sctype(rep: Type[numpy.bool_]):
    """
    usage.skimage: 1
    """
    ...


@overload
def obj2sctype(rep: Type[numpy.float64]):
    """
    usage.skimage: 1
    """
    ...


@overload
def obj2sctype(rep: Literal["float32"]):
    """
    usage.skimage: 1
    """
    ...


@overload
def obj2sctype(rep: Literal["float64"]):
    """
    usage.skimage: 1
    """
    ...


@overload
def obj2sctype(rep: Literal["uint8"]):
    """
    usage.skimage: 1
    """
    ...


@overload
def obj2sctype(rep: Literal["uint16"]):
    """
    usage.skimage: 1
    """
    ...


@overload
def obj2sctype(rep: Literal["int64"]):
    """
    usage.skimage: 1
    """
    ...


@overload
def obj2sctype(rep: Type[numpy.int16]):
    """
    usage.skimage: 1
    """
    ...


@overload
def obj2sctype(rep: Type[numpy.float32]):
    """
    usage.skimage: 1
    """
    ...


@overload
def obj2sctype(rep: Type[numpy.uint32]):
    """
    usage.skimage: 1
    """
    ...


@overload
def obj2sctype(rep: Type[numpy.int32]):
    """
    usage.skimage: 1
    """
    ...


@overload
def obj2sctype(rep: Type[numpy.int8]):
    """
    usage.skimage: 1
    """
    ...


@overload
def obj2sctype(rep: Type[float]):
    """
    usage.skimage: 1
    """
    ...


def obj2sctype(
    rep: Union[
        type, Literal["int64", "uint16", "uint8", "float64", "float32"], numpy.dtype
    ]
):
    """
    usage.skimage: 17
    """
    ...


@overload
def ones(shape: Tuple[int, int], dtype: Type[numpy.bool_]):
    """
    usage.scipy: 8
    usage.skimage: 2
    """
    ...


@overload
def ones(shape: Tuple[int, int]):
    """
    usage.dask: 43
    usage.matplotlib: 4
    usage.sample-usage: 1
    usage.scipy: 89
    usage.skimage: 76
    usage.sklearn: 81
    usage.xarray: 21
    """
    ...


@overload
def ones(shape: Tuple[int, int], dtype: Type[float]):
    """
    usage.dask: 2
    usage.matplotlib: 1
    usage.scipy: 11
    usage.skimage: 1
    usage.xarray: 3
    """
    ...


@overload
def ones(shape: List[int]):
    """
    usage.scipy: 37
    usage.skimage: 3
    usage.sklearn: 1
    usage.xarray: 8
    """
    ...


@overload
def ones(shape: Tuple[int, int, int]):
    """
    usage.dask: 14
    usage.scipy: 9
    usage.skimage: 17
    usage.sklearn: 2
    usage.xarray: 6
    """
    ...


@overload
def ones(shape: Tuple[int, int, int, int]):
    """
    usage.dask: 1
    usage.scipy: 4
    usage.skimage: 8
    usage.sklearn: 1
    usage.xarray: 1
    """
    ...


@overload
def ones(shape: Tuple[int, int], dtype: Type[numpy.uint8]):
    """
    usage.matplotlib: 1
    usage.skimage: 41
    """
    ...


@overload
def ones(shape: int):
    """
    usage.dask: 38
    usage.matplotlib: 40
    usage.scipy: 204
    usage.skimage: 19
    usage.sklearn: 214
    usage.xarray: 21
    """
    ...


@overload
def ones(shape: Tuple[int, int], dtype: Type[numpy.float32]):
    """
    usage.dask: 4
    usage.scipy: 5
    usage.skimage: 3
    usage.sklearn: 5
    """
    ...


@overload
def ones(shape: Tuple[int, int], dtype: Type[numpy.int8]):
    """
    usage.skimage: 6
    """
    ...


@overload
def ones(shape: Tuple[int, int], dtype: Type[numpy.float64]):
    """
    usage.scipy: 5
    usage.skimage: 2
    usage.sklearn: 4
    """
    ...


@overload
def ones(shape: int, dtype: Type[numpy.int64]):
    """
    usage.dask: 2
    usage.scipy: 1
    usage.skimage: 1
    usage.sklearn: 6
    """
    ...


@overload
def ones(shape: Tuple[int, int], dtype: Type[bool]):
    """
    usage.matplotlib: 1
    usage.scipy: 4
    usage.skimage: 29
    usage.sklearn: 2
    """
    ...


@overload
def ones(shape: Tuple[numpy.int64, numpy.int64], dtype: Type[numpy.uint8]):
    """
    usage.skimage: 2
    """
    ...


@overload
def ones(shape: Tuple[numpy.int64, numpy.int64], dtype: Type[numpy.uint16]):
    """
    usage.skimage: 1
    """
    ...


@overload
def ones(shape: Tuple[int]):
    """
    usage.dask: 3
    usage.matplotlib: 1
    usage.scipy: 6
    usage.skimage: 5
    usage.sklearn: 21
    usage.xarray: 4
    """
    ...


@overload
def ones(shape: int, dtype: numpy.dtype):
    """
    usage.dask: 2
    usage.matplotlib: 6
    usage.scipy: 17
    usage.skimage: 2
    usage.sklearn: 13
    """
    ...


@overload
def ones(shape: Tuple[int], dtype: Type[float]):
    """
    usage.scipy: 5
    usage.skimage: 1
    usage.xarray: 1
    """
    ...


@overload
def ones(shape: int, dtype: Type[numpy.float64]):
    """
    usage.dask: 1
    usage.matplotlib: 4
    usage.scipy: 3
    usage.skimage: 1
    usage.sklearn: 11
    """
    ...


@overload
def ones(shape: Tuple[int, int, int], dtype: Type[numpy.uint8]):
    """
    usage.skimage: 3
    """
    ...


@overload
def ones(shape: Tuple[int, int], dtype: Type[bool], order: Literal["F"]):
    """
    usage.skimage: 1
    """
    ...


@overload
def ones(shape: Tuple[int, int, int], dtype: Type[bool], order: Literal["F"]):
    """
    usage.skimage: 1
    """
    ...


@overload
def ones(shape: Tuple[int, int, int], dtype: Type[bool]):
    """
    usage.scipy: 5
    usage.skimage: 5
    """
    ...


@overload
def ones(shape: Tuple[int, int, int, int, int]):
    """
    usage.scipy: 1
    usage.skimage: 1
    """
    ...


@overload
def ones(shape: List[int], dtype: Type[bool]):
    """
    usage.scipy: 5
    usage.skimage: 2
    usage.sklearn: 5
    """
    ...


@overload
def ones(shape: Tuple[int, int], dtype: Literal["uint8"]):
    """
    usage.skimage: 2
    """
    ...


@overload
def ones(shape: Tuple[int, int, int], dtype: Literal["uint8"]):
    """
    usage.skimage: 1
    """
    ...


@overload
def ones(shape: Tuple[int], dtype: Type[bool]):
    """
    usage.scipy: 6
    usage.skimage: 3
    usage.sklearn: 5
    usage.xarray: 1
    """
    ...


@overload
def ones(shape: Tuple[int, int, int, int], dtype: Type[bool]):
    """
    usage.scipy: 1
    usage.skimage: 3
    """
    ...


@overload
def ones(shape: Tuple[int, int], dtype: Type[int]):
    """
    usage.dask: 3
    usage.scipy: 1
    usage.skimage: 1
    usage.sklearn: 1
    usage.xarray: 4
    """
    ...


@overload
def ones(shape: Tuple[int], dtype: Type[numpy.float64]):
    """
    usage.scipy: 1
    usage.skimage: 1
    usage.sklearn: 5
    """
    ...


@overload
def ones(shape: numpy.ndarray):
    """
    usage.scipy: 7
    usage.skimage: 1
    """
    ...


@overload
def ones(shape: int, dtype: Type[bool]):
    """
    usage.dask: 1
    usage.scipy: 9
    usage.skimage: 1
    usage.sklearn: 13
    """
    ...


@overload
def ones(shape: numpy.int64):
    """
    usage.scipy: 6
    usage.skimage: 2
    usage.sklearn: 2
    """
    ...


@overload
def ones(shape: Tuple[int, int, int, int, int, int]):
    """
    usage.scipy: 1
    usage.xarray: 1
    """
    ...


@overload
def ones(shape: Tuple[int], dtype: Type[int]):
    """
    usage.xarray: 1
    """
    ...


@overload
def ones(shape: int, dtype: Literal[">f4"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def ones(
    shape: Union[int, Tuple[int, ...]],
    dtype: Union[numpy.dtype, Literal["int64", "float64", "bool"], type] = ...,
):
    """
    usage.pandas: 116
    """
    ...


@overload
def ones(shape: int, dtype: Type[float]):
    """
    usage.scipy: 14
    """
    ...


@overload
def ones(shape: Tuple[int, int], dtype: numpy.dtype):
    """
    usage.dask: 13
    usage.scipy: 23
    usage.sklearn: 2
    """
    ...


@overload
def ones(shape: Tuple[int, int, int], dtype: Literal[">f4"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ones(shape: int, dtype: Literal["int8"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ones(shape: Tuple[int, int], dtype: Literal["d"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ones(shape: Tuple[int, int], dtype: Type[numpy.complex64]):
    """
    usage.scipy: 4
    """
    ...


@overload
def ones(shape: Tuple[int, int], dtype: Type[numpy.complex128]):
    """
    usage.scipy: 4
    """
    ...


@overload
def ones(shape: int, dtype: Type[numpy.float32]):
    """
    usage.dask: 4
    usage.scipy: 3
    usage.sklearn: 16
    """
    ...


@overload
def ones(shape: int, dtype: Type[numpy.complex64]):
    """
    usage.scipy: 3
    """
    ...


@overload
def ones(shape: int, dtype: Type[numpy.complex128]):
    """
    usage.scipy: 3
    """
    ...


@overload
def ones(shape: Tuple[int], dtype: Type[numpy.float32]):
    """
    usage.scipy: 1
    usage.sklearn: 2
    """
    ...


@overload
def ones(shape: list):
    """
    usage.scipy: 1
    """
    ...


@overload
def ones(shape: list, dtype: Type[int]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ones(shape: List[int], dtype: Type[int]):
    """
    usage.scipy: 2
    usage.sklearn: 1
    """
    ...


@overload
def ones(shape: list, dtype: Type[numpy.int8]):
    """
    usage.scipy: 6
    """
    ...


@overload
def ones(shape: list, dtype: Type[numpy.uint8]):
    """
    usage.scipy: 6
    """
    ...


@overload
def ones(shape: list, dtype: Type[numpy.int16]):
    """
    usage.scipy: 6
    """
    ...


@overload
def ones(shape: list, dtype: Type[numpy.uint16]):
    """
    usage.scipy: 6
    """
    ...


@overload
def ones(shape: list, dtype: Type[numpy.int32]):
    """
    usage.scipy: 6
    """
    ...


@overload
def ones(shape: list, dtype: Type[numpy.uint32]):
    """
    usage.scipy: 6
    """
    ...


@overload
def ones(shape: list, dtype: Type[numpy.int64]):
    """
    usage.scipy: 6
    """
    ...


@overload
def ones(shape: list, dtype: Type[numpy.uint64]):
    """
    usage.scipy: 6
    """
    ...


@overload
def ones(shape: list, dtype: Type[numpy.float32]):
    """
    usage.scipy: 6
    """
    ...


@overload
def ones(shape: list, dtype: Type[numpy.float64]):
    """
    usage.scipy: 6
    """
    ...


@overload
def ones(shape: List[int], dtype: Type[numpy.int8]):
    """
    usage.scipy: 26
    """
    ...


@overload
def ones(shape: List[int], dtype: Type[numpy.uint8]):
    """
    usage.scipy: 26
    """
    ...


@overload
def ones(shape: List[int], dtype: Type[numpy.int16]):
    """
    usage.scipy: 26
    """
    ...


@overload
def ones(shape: List[int], dtype: Type[numpy.uint16]):
    """
    usage.scipy: 26
    """
    ...


@overload
def ones(shape: List[int], dtype: Type[numpy.int32]):
    """
    usage.matplotlib: 1
    usage.scipy: 26
    """
    ...


@overload
def ones(shape: List[int], dtype: Type[numpy.uint32]):
    """
    usage.scipy: 26
    """
    ...


@overload
def ones(shape: List[int], dtype: Type[numpy.int64]):
    """
    usage.scipy: 26
    """
    ...


@overload
def ones(shape: List[int], dtype: Type[numpy.uint64]):
    """
    usage.scipy: 26
    """
    ...


@overload
def ones(shape: List[int], dtype: Type[numpy.float32]):
    """
    usage.scipy: 26
    """
    ...


@overload
def ones(shape: List[int], dtype: Type[numpy.float64]):
    """
    usage.scipy: 28
    """
    ...


@overload
def ones(shape: int, dtype: Type[int]):
    """
    usage.scipy: 16
    usage.sklearn: 8
    """
    ...


@overload
def ones(shape: Tuple[int, int], dtype: Type[numpy.int64]):
    """
    usage.scipy: 5
    """
    ...


@overload
def ones(shape: int, dtype: Literal["uint64"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ones(shape: List[int], dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ones(shape: List[int], dtype: Type[complex]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ones(shape: Tuple[None, ...], dtype: Type[bool]):
    """
    usage.scipy: 3
    """
    ...


@overload
def ones(shape: List[int], dtype: numpy.dtype):
    """
    usage.scipy: 6
    """
    ...


@overload
def ones(shape: Tuple[int], dtype: numpy.dtype):
    """
    usage.dask: 14
    usage.scipy: 2
    usage.sklearn: 2
    """
    ...


@overload
def ones(shape: numpy.int8):
    """
    usage.scipy: 4
    """
    ...


@overload
def ones(shape: numpy.int16):
    """
    usage.scipy: 4
    """
    ...


@overload
def ones(shape: numpy.int32):
    """
    usage.scipy: 4
    """
    ...


@overload
def ones(shape: int, dtype: Type[numpy.int8], order: Literal["c"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ones(shape: int, dtype: Literal["l"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ones(shape: Tuple[int, int, int], dtype: Literal["l"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ones(shape: int, dtype: Literal["complex256"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ones(shape: int, dtype: Literal["f"]):
    """
    usage.scipy: 5
    """
    ...


@overload
def ones(shape: int, dtype: Literal["d"]):
    """
    usage.scipy: 6
    """
    ...


@overload
def ones(shape: int, dtype: Literal["g"]):
    """
    usage.scipy: 3
    """
    ...


@overload
def ones(shape: int, dtype: Literal["F"]):
    """
    usage.scipy: 3
    """
    ...


@overload
def ones(shape: int, dtype: Literal["D"]):
    """
    usage.scipy: 3
    """
    ...


@overload
def ones(shape: int, dtype: Literal["G"]):
    """
    usage.scipy: 3
    """
    ...


@overload
def ones(shape: int, dtype: Literal["O"]):
    """
    usage.scipy: 3
    """
    ...


@overload
def ones(shape: Tuple[numpy.int64, int], dtype: Literal["d"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ones(shape: int, dtype: Type[complex]):
    """
    usage.scipy: 2
    """
    ...


@overload
def ones(shape: Tuple[int, int], dtype: Type[complex]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ones(shape: Tuple[int, int], dtype: Type[numpy.uint64]):
    """
    usage.scipy: 3
    """
    ...


@overload
def ones(shape: int, dtype: Type[numpy.uint64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ones(shape: Tuple[int, int, int], dtype: Type[numpy.int8]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ones(shape: Tuple[int, int], dtype: Literal["int8"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ones(shape: Tuple[int, int], dtype: Literal["int16"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ones(shape: int, dtype: Literal["uint32"]):
    """
    usage.scipy: 6
    """
    ...


@overload
def ones(shape: Tuple[int], dtype: Literal["double"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ones(shape: int, dtype: Literal["f4"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ones(shape: Tuple[int], dtype: Type[numpy.bool_]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ones(shape: Tuple[int], dtype: Literal["?"]):
    """
    usage.scipy: 2
    """
    ...


@overload
def ones(shape: Tuple[int, int], dtype: Type[numpy.uint16]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def ones(shape: int, dtype: Type[numpy.int32]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def ones(shape: Tuple[int, int, int], dtype: Type[int]):
    """
    usage.dask: 8
    """
    ...


@overload
def ones(shape: int, dtype: Type[numpy.int16]):
    """
    usage.dask: 2
    """
    ...


@overload
def ones(shape: Tuple[None, ...], dtype: Type[numpy.float64]):
    """
    usage.dask: 2
    """
    ...


@overload
def ones(shape: Tuple[None, ...], dtype: Type[numpy.int64]):
    """
    usage.dask: 2
    """
    ...


@overload
def ones(
    shape: Tuple[int, int],
    dtype: List[
        Tuple[
            Literal["col1", "col2"], Tuple[Literal["f4"], Union[int, Tuple[int, int]]]
        ]
    ],
):
    """
    usage.dask: 1
    """
    ...


@overload
def ones(shape: Tuple[int, int], dtype: Literal["f8"]):
    """
    usage.dask: 2
    """
    ...


@overload
def ones(shape: Tuple[int, int, int], dtype: Literal["float32"]):
    """
    usage.dask: 1
    """
    ...


@overload
def ones(shape: Tuple[int, int], dtype: numpy.dtype, order: Literal["C"]):
    """
    usage.dask: 1
    """
    ...


@overload
def ones(shape: List[int], dtype: numpy.dtype, order: Literal["C"]):
    """
    usage.dask: 1
    """
    ...


@overload
def ones(shape: numpy.ndarray, dtype: numpy.dtype, order: Literal["C"]):
    """
    usage.dask: 1
    """
    ...


@overload
def ones(shape: Tuple[int, int], dtype: numpy.dtype, order: Literal["F"]):
    """
    usage.dask: 1
    """
    ...


@overload
def ones(shape: List[int], dtype: numpy.dtype, order: Literal["F"]):
    """
    usage.dask: 1
    """
    ...


@overload
def ones(shape: numpy.ndarray, dtype: numpy.dtype, order: Literal["F"]):
    """
    usage.dask: 1
    """
    ...


@overload
def ones(shape: Tuple[int, int, int], dtype: numpy.dtype):
    """
    usage.dask: 6
    """
    ...


@overload
def ones(shape: Tuple[int, int, int, int], dtype: numpy.dtype):
    """
    usage.dask: 1
    """
    ...


@overload
def ones(shape: Tuple[None, ...], dtype: numpy.dtype):
    """
    usage.dask: 2
    """
    ...


@overload
def ones(
    shape: Tuple[int, int], dtype: List[Tuple[Literal["a", "b", "c"], Literal["f8"]]]
):
    """
    usage.dask: 1
    """
    ...


@overload
def ones(shape: int, dtype: Literal["i4"]):
    """
    usage.dask: 3
    """
    ...


@overload
def ones(shape: Tuple[int, int], dtype: Literal["i4"]):
    """
    usage.dask: 3
    """
    ...


@overload
def ones(shape: Tuple[int, int, int], dtype: Literal["i4"]):
    """
    usage.dask: 1
    """
    ...


@overload
def ones(shape: numpy.int64, dtype: Type[int]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def ones(shape: int, dtype: Type[numpy.float64], order: Literal["C"]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def ones(shape: int, dtype: None):
    """
    usage.sklearn: 1
    """
    ...


@overload
def ones(shape: Tuple[int], dtype: Type[numpy.float64], order: Literal["C"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def ones(shape: Tuple[int, int], dtype: Type[numpy.int16]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def ones(shape: numpy.int64, dtype: Type[bool]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def ones(shape: numpy.int64, dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def ones(shape: int, dtype: Literal["int"]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def ones(shape: Tuple[int, int], dtype: Type[numpy.int32]):
    """
    usage.sklearn: 1
    """
    ...


def ones(
    shape: object,
    dtype: Union[
        None,
        str,
        numpy.dtype,
        type,
        List[
            Tuple[
                Literal["a", "b", "c", "col1", "col2"],
                Union[Literal["f8"], Tuple[Literal["f4"], Union[int, Tuple[int, int]]]],
            ]
        ],
    ] = ...,
    order: Literal["C", "F", "c"] = ...,
):
    """
    usage.dask: 186
    usage.matplotlib: 62
    usage.pandas: 116
    usage.sample-usage: 1
    usage.scipy: 934
    usage.skimage: 248
    usage.sklearn: 435
    usage.xarray: 73
    """
    ...


@overload
def ones_like(a: numpy.ndarray):
    """
    usage.dask: 2
    usage.matplotlib: 8
    usage.scipy: 39
    usage.skimage: 17
    usage.sklearn: 29
    """
    ...


@overload
def ones_like(a: numpy.ndarray, dtype: Type[bool]):
    """
    usage.scipy: 14
    usage.skimage: 3
    usage.sklearn: 2
    """
    ...


@overload
def ones_like(a: numpy.ndarray, dtype: Type[numpy.uint8]):
    """
    usage.skimage: 6
    """
    ...


@overload
def ones_like(a: object):
    """
    usage.xarray: 11
    """
    ...


@overload
def ones_like(a: xarray.core.dataarray.DataArray):
    """
    usage.xarray: 2
    """
    ...


@overload
def ones_like(a: xarray.core.variable.Variable):
    """
    usage.xarray: 4
    """
    ...


@overload
def ones_like(a: Union[pandas.core.series.Series, numpy.ndarray]):
    """
    usage.pandas: 6
    """
    ...


@overload
def ones_like(a: numpy.ndarray, dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ones_like(a: Tuple[int, int], dtype: Type[numpy.float64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ones_like(a: Tuple[int, int, int], dtype: Type[numpy.float64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ones_like(a: List[float], dtype: Type[int]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ones_like(a: float):
    """
    usage.scipy: 1
    """
    ...


@overload
def ones_like(a: float, dtype: Type[bool]):
    """
    usage.scipy: 2
    """
    ...


@overload
def ones_like(a: List[int]):
    """
    usage.scipy: 2
    usage.sklearn: 2
    """
    ...


@overload
def ones_like(a: numpy.ma.core.MaskedArray, dtype: Type[numpy.float32]):
    """
    usage.matplotlib: 6
    """
    ...


@overload
def ones_like(a: numpy.ma.core.MaskedArray):
    """
    usage.dask: 2
    usage.matplotlib: 1
    """
    ...


@overload
def ones_like(a: numpy.ndarray, order: Literal["C"]):
    """
    usage.dask: 1
    """
    ...


@overload
def ones_like(a: numpy.ndarray, order: Literal["F"]):
    """
    usage.dask: 1
    """
    ...


@overload
def ones_like(a: numpy.ndarray, shape: None):
    """
    usage.dask: 1
    """
    ...


@overload
def ones_like(a: numpy.ndarray, shape: Tuple[int, int]):
    """
    usage.dask: 1
    """
    ...


@overload
def ones_like(a: numpy.ndarray, shape: int):
    """
    usage.dask: 1
    """
    ...


@overload
def ones_like(a: numpy.ndarray, shape: Tuple[int, int, int]):
    """
    usage.dask: 1
    """
    ...


@overload
def ones_like(a: numpy.ndarray, shape: Tuple[int, int, int, int, int]):
    """
    usage.dask: 1
    """
    ...


@overload
def ones_like(a: numpy.float64):
    """
    usage.sklearn: 1
    """
    ...


@overload
def ones_like(a: numpy.ndarray, dtype: Type[numpy.float32]):
    """
    usage.sklearn: 3
    """
    ...


def ones_like(
    a: object,
    dtype: Union[type, Type[numpy.float32]] = ...,
    order: Literal["F", "C"] = ...,
    shape: Union[Tuple[int, ...], int, None] = ...,
):
    """
    usage.dask: 11
    usage.matplotlib: 15
    usage.pandas: 6
    usage.scipy: 62
    usage.skimage: 26
    usage.sklearn: 37
    usage.xarray: 17
    """
    ...


@overload
def outer(a: numpy.ndarray, b: numpy.ndarray):
    """
    usage.dask: 3
    usage.matplotlib: 1
    usage.scipy: 65
    usage.sklearn: 14
    """
    ...


@overload
def outer(a: numpy.ndarray, b: List[int]):
    """
    usage.scipy: 2
    """
    ...


@overload
def outer(a: numpy.float64, b: numpy.float64):
    """
    usage.dask: 1
    """
    ...


def outer(
    a: Union[numpy.ndarray, numpy.float64],
    b: Union[numpy.ndarray, numpy.float64, List[int]],
):
    """
    usage.dask: 4
    usage.matplotlib: 1
    usage.scipy: 67
    usage.sklearn: 14
    """
    ...


@overload
def pad(array: numpy.ndarray, pad_width: List[List[int]], mode: Literal["reflect"]):
    """
    usage.skimage: 2
    """
    ...


@overload
def pad(array: numpy.ndarray, pad_width: List[List[int]], mode: Literal["edge"]):
    """
    usage.skimage: 2
    """
    ...


@overload
def pad(array: numpy.ndarray, pad_width: int, mode: Literal["constant"]):
    """
    usage.dask: 6
    usage.scipy: 4
    usage.skimage: 13
    """
    ...


@overload
def pad(
    array: numpy.ndarray, pad_width: List[Tuple[int, int]], mode: Literal["constant"]
):
    """
    usage.matplotlib: 1
    usage.scipy: 12
    usage.skimage: 7
    usage.xarray: 16
    """
    ...


@overload
def pad(
    array: numpy.ndarray,
    pad_width: Tuple[Tuple[int, int], Tuple[int, int]],
    mode: Literal["constant"],
):
    """
    usage.dask: 1
    usage.skimage: 4
    """
    ...


@overload
def pad(
    array: numpy.ndarray,
    pad_width: Tuple[Tuple[int, int], Tuple[int, int], Tuple[int, int]],
    mode: Literal["constant"],
):
    """
    usage.dask: 4
    usage.skimage: 1
    usage.xarray: 5
    """
    ...


@overload
def pad(
    array: numpy.ndarray,
    pad_width: Tuple[Tuple[int, int], Tuple[int, int]],
    mode: Literal["reflect"],
):
    """
    usage.dask: 1
    usage.skimage: 2
    """
    ...


@overload
def pad(
    array: numpy.ndarray,
    pad_width: Tuple[Tuple[int, int], Tuple[int, int], Tuple[int, int]],
    mode: Literal["reflect"],
):
    """
    usage.skimage: 1
    usage.xarray: 2
    """
    ...


@overload
def pad(array: numpy.ndarray, pad_width: int, mode: Literal["edge"]):
    """
    usage.dask: 6
    usage.scipy: 4
    usage.skimage: 4
    """
    ...


@overload
def pad(
    array: numpy.ndarray,
    pad_width: List[Tuple[numpy.int64, numpy.int64]],
    mode: Literal["constant"],
):
    """
    usage.skimage: 3
    """
    ...


@overload
def pad(array: numpy.ndarray, pad_width: Tuple[int, int], mode: Literal["constant"]):
    """
    usage.dask: 5
    usage.scipy: 6
    usage.sklearn: 1
    usage.xarray: 1
    """
    ...


@overload
def pad(
    array: numpy.ndarray, pad_width: List[Tuple[int, int]], mode: Literal["minimum"]
):
    """
    usage.xarray: 1
    """
    ...


@overload
def pad(
    array: numpy.ndarray,
    pad_width: Tuple[Tuple[int, int], Tuple[int, int], Tuple[int, int]],
    mode: Literal["minimum"],
):
    """
    usage.dask: 4
    usage.xarray: 2
    """
    ...


@overload
def pad(
    array: numpy.ndarray, pad_width: List[Tuple[int, int]], mode: Literal["maximum"]
):
    """
    usage.xarray: 1
    """
    ...


@overload
def pad(
    array: numpy.ndarray,
    pad_width: Tuple[Tuple[int, int], Tuple[int, int], Tuple[int, int]],
    mode: Literal["maximum"],
):
    """
    usage.dask: 4
    usage.xarray: 2
    """
    ...


@overload
def pad(array: numpy.ndarray, pad_width: List[Tuple[int, int]], mode: Literal["mean"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def pad(
    array: numpy.ndarray,
    pad_width: Tuple[Tuple[int, int], Tuple[int, int], Tuple[int, int]],
    mode: Literal["mean"],
):
    """
    usage.dask: 4
    usage.xarray: 2
    """
    ...


@overload
def pad(
    array: numpy.ndarray, pad_width: List[Tuple[int, int]], mode: Literal["median"]
):
    """
    usage.xarray: 1
    """
    ...


@overload
def pad(
    array: numpy.ndarray,
    pad_width: Tuple[Tuple[int, int], Tuple[int, int], Tuple[int, int]],
    mode: Literal["median"],
):
    """
    usage.xarray: 2
    """
    ...


@overload
def pad(
    array: numpy.ndarray, pad_width: List[Tuple[int, int]], mode: Literal["linear_ramp"]
):
    """
    usage.xarray: 1
    """
    ...


@overload
def pad(
    array: numpy.ndarray,
    pad_width: Tuple[Tuple[int, int], Tuple[int, int], Tuple[int, int]],
    mode: Literal["linear_ramp"],
):
    """
    usage.dask: 4
    usage.xarray: 2
    """
    ...


@overload
def pad(
    array: numpy.ndarray, pad_width: List[Tuple[int, int]], mode: Literal["reflect"]
):
    """
    usage.xarray: 1
    """
    ...


@overload
def pad(
    array: numpy.ndarray, pad_width: List[Tuple[int, int]], mode: Literal["symmetric"]
):
    """
    usage.xarray: 1
    """
    ...


@overload
def pad(
    array: numpy.ndarray,
    pad_width: Tuple[Tuple[int, int], Tuple[int, int], Tuple[int, int]],
    mode: Literal["symmetric"],
):
    """
    usage.xarray: 2
    """
    ...


@overload
def pad(
    array: sparse._coo.core.COO,
    pad_width: List[Tuple[int, int]],
    mode: Literal["constant"],
):
    """
    usage.xarray: 2
    """
    ...


@overload
def pad(array: object, pad_width: List[Tuple[int, int]], mode: Literal["constant"]):
    """
    usage.xarray: 4
    """
    ...


@overload
def pad(
    array: object,
    pad_width: Tuple[Tuple[int, int], Tuple[int, int], Tuple[int, int]],
    mode: Literal["constant"],
):
    """
    usage.xarray: 1
    """
    ...


@overload
def pad(array: object, pad_width: List[Tuple[int, int]], mode: Literal["mean"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def pad(array: object, pad_width: List[Tuple[int, int]], mode: Literal["median"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def pad(array: object, pad_width: List[Tuple[int, int]], mode: Literal["reflect"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def pad(array: object, pad_width: List[Tuple[int, int]], mode: Literal["edge"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def pad(
    array: numpy.ndarray,
    pad_width: Tuple[Tuple[int, int], Tuple[int, int], Tuple[int, int]],
    mode: Literal["edge"],
):
    """
    usage.dask: 4
    usage.xarray: 1
    """
    ...


@overload
def pad(array: object, pad_width: List[Tuple[int, int]], mode: Literal["linear_ramp"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def pad(array: object, pad_width: List[Tuple[int, int]], mode: Literal["maximum"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def pad(array: object, pad_width: List[Tuple[int, int]], mode: Literal["minimum"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def pad(array: object, pad_width: List[Tuple[int, int]], mode: Literal["symmetric"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def pad(array: object, pad_width: List[Tuple[int, int]], mode: Literal["wrap"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def pad(
    array: numpy.ndarray,
    pad_width: Tuple[Tuple[int, int], Tuple[int, int], Tuple[int, int]],
    mode: Literal["wrap"],
):
    """
    usage.xarray: 1
    """
    ...


@overload
def pad(array: numpy.ndarray, pad_width: List[Tuple[int, int]], mode: Literal["edge"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def pad(array: numpy.ndarray, pad_width: List[Tuple[int, int]], mode: Literal["wrap"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def pad(array: numpy.ndarray, pad_width: Tuple[int, int], mode: Literal["wrap"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def pad(array: numpy.ndarray, pad_width: Tuple[int, int], mode: Literal["edge"]):
    """
    usage.dask: 4
    usage.scipy: 1
    """
    ...


@overload
def pad(array: numpy.ndarray, pad_width: Tuple[int, int], mode: Literal["symmetric"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def pad(array: numpy.ndarray, pad_width: Tuple[int, int], mode: Literal["reflect"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def pad(array: numpy.ndarray, pad_width: int, mode: Literal["wrap"]):
    """
    usage.dask: 1
    usage.scipy: 4
    """
    ...


@overload
def pad(array: numpy.ndarray, pad_width: int, mode: Literal["symmetric"]):
    """
    usage.dask: 1
    usage.scipy: 4
    """
    ...


@overload
def pad(array: numpy.ndarray, pad_width: int, mode: Literal["reflect"]):
    """
    usage.dask: 1
    usage.scipy: 4
    """
    ...


@overload
def pad(array: numpy.ndarray, pad_width: int, mode: Literal["linear_ramp"]):
    """
    usage.dask: 6
    """
    ...


@overload
def pad(array: numpy.ndarray, pad_width: int, mode: Literal["empty"]):
    """
    usage.dask: 2
    """
    ...


@overload
def pad(
    array: numpy.ndarray,
    pad_width: Tuple[Tuple[int, int], Tuple[int, int]],
    mode: Literal["linear_ramp"],
):
    """
    usage.dask: 1
    """
    ...


@overload
def pad(
    array: numpy.ndarray,
    pad_width: Tuple[Tuple[int, int], Tuple[int, int]],
    mode: Literal["symmetric"],
):
    """
    usage.dask: 1
    """
    ...


@overload
def pad(
    array: numpy.ndarray,
    pad_width: Tuple[Tuple[int, int], Tuple[int, int]],
    mode: Literal["wrap"],
):
    """
    usage.dask: 1
    """
    ...


@overload
def pad(array: numpy.ndarray, pad_width: Tuple[int, int], mode: Literal["maximum"]):
    """
    usage.dask: 5
    """
    ...


@overload
def pad(
    array: numpy.ndarray,
    pad_width: Tuple[Tuple[int, int], Tuple[int, int]],
    mode: Literal["mean"],
):
    """
    usage.dask: 1
    """
    ...


@overload
def pad(array: numpy.ndarray, pad_width: Tuple[int, int], mode: Literal["minimum"]):
    """
    usage.dask: 5
    """
    ...


@overload
def pad(array: numpy.ndarray, pad_width: Tuple[int], mode: Literal["constant"]):
    """
    usage.dask: 4
    """
    ...


@overload
def pad(
    array: numpy.ndarray, pad_width: Tuple[Tuple[int, int]], mode: Literal["constant"]
):
    """
    usage.dask: 4
    """
    ...


@overload
def pad(array: numpy.ndarray, pad_width: Tuple[int], mode: Literal["edge"]):
    """
    usage.dask: 4
    """
    ...


@overload
def pad(array: numpy.ndarray, pad_width: Tuple[Tuple[int, int]], mode: Literal["edge"]):
    """
    usage.dask: 4
    """
    ...


@overload
def pad(array: numpy.ndarray, pad_width: Tuple[int], mode: Literal["linear_ramp"]):
    """
    usage.dask: 4
    """
    ...


@overload
def pad(array: numpy.ndarray, pad_width: Tuple[int, int], mode: Literal["linear_ramp"]):
    """
    usage.dask: 4
    """
    ...


@overload
def pad(
    array: numpy.ndarray,
    pad_width: Tuple[Tuple[int, int]],
    mode: Literal["linear_ramp"],
):
    """
    usage.dask: 4
    """
    ...


@overload
def pad(array: numpy.ndarray, pad_width: int, mode: Literal["maximum"]):
    """
    usage.dask: 4
    """
    ...


@overload
def pad(array: numpy.ndarray, pad_width: Tuple[int], mode: Literal["maximum"]):
    """
    usage.dask: 4
    """
    ...


@overload
def pad(
    array: numpy.ndarray, pad_width: Tuple[Tuple[int, int]], mode: Literal["maximum"]
):
    """
    usage.dask: 4
    """
    ...


@overload
def pad(array: numpy.ndarray, pad_width: int, mode: Literal["mean"]):
    """
    usage.dask: 4
    """
    ...


@overload
def pad(array: numpy.ndarray, pad_width: Tuple[int], mode: Literal["mean"]):
    """
    usage.dask: 4
    """
    ...


@overload
def pad(array: numpy.ndarray, pad_width: Tuple[int, int], mode: Literal["mean"]):
    """
    usage.dask: 4
    """
    ...


@overload
def pad(array: numpy.ndarray, pad_width: Tuple[Tuple[int, int]], mode: Literal["mean"]):
    """
    usage.dask: 4
    """
    ...


@overload
def pad(array: numpy.ndarray, pad_width: int, mode: Literal["minimum"]):
    """
    usage.dask: 4
    """
    ...


@overload
def pad(array: numpy.ndarray, pad_width: Tuple[int], mode: Literal["minimum"]):
    """
    usage.dask: 4
    """
    ...


@overload
def pad(
    array: numpy.ndarray, pad_width: Tuple[Tuple[int, int]], mode: Literal["minimum"]
):
    """
    usage.dask: 4
    """
    ...


@overload
def pad(
    array: numpy.ndarray,
    pad_width: Tuple[Tuple[int, int], Tuple[int, int]],
    mode: Callable,
):
    """
    usage.dask: 1
    """
    ...


@overload
def pad(array: dask.array.core.Array, pad_width: int, mode: Literal["constant"]):
    """
    usage.dask: 1
    """
    ...


@overload
def pad(
    array: numpy.ndarray,
    pad_width: List[Tuple[int, Union[int, numpy.int64]]],
    mode: Literal["constant"],
):
    """
    usage.sklearn: 1
    """
    ...


def pad(
    array: object,
    pad_width: Union[
        Tuple[Union[Tuple[int, int], int], ...],
        List[Union[List[int], Tuple[Union[int, numpy.int64], Union[int, numpy.int64]]]],
        int,
    ],
    mode: Union[str, Callable],
):
    """
    usage.dask: 142
    usage.matplotlib: 1
    usage.scipy: 42
    usage.skimage: 39
    usage.sklearn: 2
    usage.xarray: 63
    """
    ...


@overload
def partition(a: numpy.ndarray, kth: Tuple[int, int], axis: int):
    """
    usage.scipy: 5
    """
    ...


@overload
def partition(a: numpy.ndarray, kth: int, axis: int):
    """
    usage.dask: 1
    usage.sklearn: 4
    """
    ...


def partition(a: numpy.ndarray, kth: Union[int, Tuple[int, int]], axis: int):
    """
    usage.dask: 1
    usage.scipy: 5
    usage.sklearn: 4
    """
    ...


@overload
def percentile(a: numpy.ndarray, q: float):
    """
    usage.skimage: 1
    usage.sklearn: 7
    usage.xarray: 2
    """
    ...


@overload
def percentile(a: numpy.ndarray, q: List[int]):
    """
    usage.matplotlib: 3
    usage.scipy: 1
    usage.skimage: 5
    """
    ...


@overload
def percentile(a: numpy.ndarray, q: int):
    """
    usage.skimage: 3
    usage.sklearn: 5
    usage.xarray: 2
    """
    ...


@overload
def percentile(a: numpy.ndarray, q: numpy.float64, axis: None):
    """
    usage.xarray: 2
    """
    ...


@overload
def percentile(a: numpy.ndarray, q: numpy.ndarray, axis: None):
    """
    usage.xarray: 2
    """
    ...


@overload
def percentile(a: numpy.ndarray, q: numpy.float64, axis: int):
    """
    usage.xarray: 2
    """
    ...


@overload
def percentile(a: numpy.ndarray, q: numpy.ndarray, axis: int):
    """
    usage.xarray: 2
    """
    ...


@overload
def percentile(a: numpy.ndarray, q: numpy.float64, axis: List[int]):
    """
    usage.xarray: 4
    """
    ...


@overload
def percentile(a: numpy.ndarray, q: numpy.ndarray, axis: List[int]):
    """
    usage.xarray: 4
    """
    ...


@overload
def percentile(
    _0: pandas.core.series.Series = ...,
    /,
    a: Union[
        numpy.ndarray, int, pandas.core.frame.DataFrame, pandas.core.series.Series
    ] = ...,
    q: Union[
        int,
        numpy.ndarray,
        pandas.core.frame.DataFrame,
        pandas.core.series.Series,
        float,
    ] = ...,
    axis: int = ...,
    interpolation: Literal["linear", "midpoint", "nearest", "higher", "lower"] = ...,
):
    """
    usage.pandas: 54
    """
    ...


@overload
def percentile(a: List[float], q: int):
    """
    usage.scipy: 5
    """
    ...


@overload
def percentile(
    a: numpy.ndarray,
    q: List[int],
    axis: None,
    interpolation: Literal["linear"],
    keepdims: bool,
):
    """
    usage.scipy: 2
    """
    ...


@overload
def percentile(
    a: numpy.ndarray,
    q: List[int],
    axis: int,
    interpolation: Literal["linear"],
    keepdims: bool,
):
    """
    usage.scipy: 2
    """
    ...


@overload
def percentile(
    a: numpy.ndarray,
    q: List[int],
    axis: Tuple[int, int],
    interpolation: Literal["linear"],
    keepdims: bool,
):
    """
    usage.scipy: 2
    """
    ...


@overload
def percentile(
    a: numpy.ndarray,
    q: List[int],
    axis: None,
    interpolation: Literal["lower"],
    keepdims: bool,
):
    """
    usage.scipy: 2
    """
    ...


@overload
def percentile(
    a: numpy.ndarray,
    q: List[int],
    axis: None,
    interpolation: Literal["midpoint"],
    keepdims: bool,
):
    """
    usage.scipy: 2
    """
    ...


@overload
def percentile(
    a: numpy.ndarray,
    q: List[int],
    axis: None,
    interpolation: Literal["nearest"],
    keepdims: bool,
):
    """
    usage.scipy: 2
    """
    ...


@overload
def percentile(
    a: numpy.ndarray,
    q: List[int],
    axis: None,
    interpolation: Literal["higher"],
    keepdims: bool,
):
    """
    usage.scipy: 2
    """
    ...


@overload
def percentile(
    a: numpy.ndarray,
    q: List[int],
    axis: Tuple[int, int, int],
    interpolation: Literal["linear"],
    keepdims: bool,
):
    """
    usage.scipy: 2
    """
    ...


@overload
def percentile(
    a: numpy.ndarray,
    q: List[int],
    axis: Tuple[int],
    interpolation: Literal["linear"],
    keepdims: bool,
):
    """
    usage.scipy: 1
    """
    ...


@overload
def percentile(
    a: numpy.ndarray,
    q: List[Union[float, int]],
    axis: None,
    interpolation: Literal["linear"],
    keepdims: bool,
):
    """
    usage.scipy: 1
    """
    ...


@overload
def percentile(
    a: numpy.ndarray,
    q: List[Union[int, float]],
    axis: None,
    interpolation: Literal["linear"],
    keepdims: bool,
):
    """
    usage.scipy: 1
    """
    ...


@overload
def percentile(
    a: numpy.ndarray,
    q: List[int],
    axis: None,
    interpolation: Literal["foobar"],
    keepdims: bool,
):
    """
    usage.scipy: 1
    """
    ...


@overload
def percentile(
    a: numpy.ndarray,
    q: List[int],
    axis: Tuple[int, int, int, int],
    interpolation: Literal["linear"],
    keepdims: bool,
):
    """
    usage.scipy: 1
    """
    ...


@overload
def percentile(a: numpy.ndarray, q: numpy.ndarray):
    """
    usage.matplotlib: 1
    usage.sklearn: 5
    """
    ...


@overload
def percentile(a: numpy.ndarray, q: List[float]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def percentile(a: numpy.ndarray, q: Tuple[int, int]):
    """
    usage.matplotlib: 1
    usage.sklearn: 1
    """
    ...


@overload
def percentile(a: numpy.ndarray, q: list):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def percentile(a: numpy.ndarray, q: numpy.ndarray, interpolation: Literal["linear"]):
    """
    usage.dask: 5
    """
    ...


@overload
def percentile(a: numpy.ndarray, q: numpy.ndarray, interpolation: Literal["nearest"]):
    """
    usage.dask: 3
    """
    ...


@overload
def percentile(a: numpy.ndarray, q: numpy.ndarray, interpolation: Literal["midpoint"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def percentile(a: numpy.ndarray, q: float, axis: int):
    """
    usage.sklearn: 2
    """
    ...


@overload
def percentile(a: numpy.ndarray, q: Tuple[int, int], axis: int):
    """
    usage.sklearn: 3
    """
    ...


@overload
def percentile(a: numpy.ndarray, q: int, axis: int):
    """
    usage.sklearn: 1
    """
    ...


def percentile(
    _0: pandas.core.series.Series = ...,
    /,
    a: Union[
        numpy.ndarray,
        pandas.core.series.Series,
        pandas.core.frame.DataFrame,
        int,
        List[float],
    ] = ...,
    q: object = ...,
    axis: Union[int, List[int], Tuple[int, ...], None] = ...,
    interpolation: str = ...,
    keepdims: bool = ...,
):
    """
    usage.dask: 8
    usage.matplotlib: 9
    usage.pandas: 54
    usage.scipy: 27
    usage.skimage: 9
    usage.sklearn: 25
    usage.xarray: 20
    """
    ...


@overload
def piecewise(
    x: numpy.ndarray, condlist: List[numpy.ndarray], funclist: List[Callable]
):
    """
    usage.scipy: 2
    """
    ...


@overload
def piecewise(
    x: numpy.ndarray,
    condlist: List[numpy.ndarray],
    funclist: List[Union[int, Callable]],
):
    """
    usage.scipy: 2
    """
    ...


@overload
def piecewise(
    x: numpy.ndarray,
    condlist: List[numpy.ndarray],
    funclist: List[Union[int, Callable]],
    *args: Literal["v", "t"],
):
    """
    usage.dask: 2
    """
    ...


@overload
def piecewise(
    x: int,
    condlist: numpy.ndarray,
    funclist: List[numpy.ndarray],
    *args: Literal["v", "t"],
):
    """
    usage.dask: 2
    """
    ...


@overload
def piecewise(
    x: numpy.ndarray,
    condlist: List[numpy.ndarray],
    funclist: List[Callable],
    *args: Literal["v", "t"],
):
    """
    usage.dask: 2
    """
    ...


def piecewise(
    x: Union[numpy.ndarray, int],
    condlist: Union[List[numpy.ndarray], numpy.ndarray],
    funclist: List[Union[Callable, int, numpy.ndarray]],
    *args: Literal["v", "t"],
):
    """
    usage.dask: 6
    usage.scipy: 4
    """
    ...


@overload
def place(arr: numpy.ndarray, mask: numpy.ndarray, vals: object):
    """
    usage.pandas: 19
    """
    ...


@overload
def place(arr: numpy.ndarray, mask: numpy.bool_, vals: numpy.ndarray):
    """
    usage.scipy: 36
    """
    ...


@overload
def place(arr: numpy.ndarray, mask: numpy.ndarray, vals: numpy.ndarray):
    """
    usage.scipy: 100
    """
    ...


@overload
def place(arr: numpy.ndarray, mask: numpy.ndarray, vals: float):
    """
    usage.scipy: 42
    """
    ...


@overload
def place(arr: numpy.ndarray, mask: numpy.int64, vals: float):
    """
    usage.scipy: 17
    """
    ...


@overload
def place(arr: numpy.ndarray, mask: numpy.bool_, vals: float):
    """
    usage.scipy: 12
    """
    ...


@overload
def place(arr: numpy.ndarray, mask: numpy.int64, vals: numpy.ndarray):
    """
    usage.scipy: 25
    """
    ...


@overload
def place(arr: numpy.ndarray, mask: bool, vals: numpy.ndarray):
    """
    usage.scipy: 2
    """
    ...


@overload
def place(arr: numpy.ndarray, mask: int, vals: numpy.ndarray):
    """
    usage.scipy: 1
    """
    ...


@overload
def place(arr: numpy.ndarray, mask: numpy.ndarray, vals: int):
    """
    usage.scipy: 3
    """
    ...


@overload
def place(arr: numpy.ndarray, mask: numpy.ndarray, vals: numpy.int64):
    """
    usage.scipy: 6
    """
    ...


@overload
def place(arr: numpy.ndarray, mask: numpy.bool_, vals: numpy.int64):
    """
    usage.scipy: 4
    """
    ...


@overload
def place(arr: numpy.ndarray, mask: numpy.bool_, vals: int):
    """
    usage.scipy: 3
    """
    ...


@overload
def place(arr: numpy.ndarray, mask: numpy.ndarray, vals: numpy.float64):
    """
    usage.scipy: 2
    """
    ...


@overload
def place(arr: numpy.ndarray, mask: numpy.bool_, vals: numpy.float64):
    """
    usage.scipy: 2
    """
    ...


@overload
def place(arr: numpy.ndarray, mask: numpy.int64, vals: numpy.int64):
    """
    usage.scipy: 2
    """
    ...


@overload
def place(arr: numpy.ndarray, mask: numpy.int64, vals: numpy.float64):
    """
    usage.scipy: 2
    """
    ...


@overload
def place(arr: numpy.ndarray, mask: numpy.ndarray, vals: List[float]):
    """
    usage.scipy: 6
    """
    ...


@overload
def place(arr: numpy.ndarray, mask: List[numpy.ndarray], vals: numpy.ndarray):
    """
    usage.scipy: 1
    """
    ...


@overload
def place(arr: numpy.ma.core.MaskedArray, mask: numpy.bool_, vals: numpy.ndarray):
    """
    usage.scipy: 2
    """
    ...


@overload
def place(
    arr: numpy.ma.core.MaskedArray,
    mask: numpy.ma.core.MaskedArray,
    vals: numpy.ma.core.MaskedArray,
):
    """
    usage.scipy: 1
    """
    ...


def place(
    arr: Union[numpy.ndarray, numpy.ma.core.MaskedArray], mask: object, vals: object
):
    """
    usage.pandas: 19
    usage.scipy: 269
    """
    ...


@overload
def poly(seq_of_zeros: numpy.ndarray):
    """
    usage.scipy: 12
    """
    ...


@overload
def poly(seq_of_zeros: list):
    """
    usage.scipy: 1
    """
    ...


@overload
def poly(seq_of_zeros: List[int]):
    """
    usage.scipy: 11
    """
    ...


def poly(seq_of_zeros: Union[List[int], numpy.ndarray]):
    """
    usage.scipy: 24
    """
    ...


@overload
def polyadd(a1: int, a2: numpy.ndarray):
    """
    usage.scipy: 6
    """
    ...


@overload
def polyadd(a1: numpy.ndarray, a2: numpy.ndarray):
    """
    usage.scipy: 8
    """
    ...


def polyadd(a1: Union[numpy.ndarray, int], a2: numpy.ndarray):
    """
    usage.scipy: 14
    """
    ...


def polydiv(u: numpy.ndarray, v: numpy.ndarray):
    """
    usage.scipy: 9
    """
    ...


def polyfit(x: numpy.ndarray, y: numpy.ndarray, deg: int):
    """
    usage.scipy: 3
    usage.skimage: 1
    """
    ...


@overload
def polyint(p: numpy.poly1d):
    """
    usage.scipy: 1
    """
    ...


@overload
def polyint(p: numpy.ndarray):
    """
    usage.scipy: 1
    """
    ...


@overload
def polyint(p: List[float]):
    """
    usage.scipy: 1
    """
    ...


def polyint(p: Union[List[float], numpy.poly1d, numpy.ndarray]):
    """
    usage.scipy: 3
    """
    ...


@overload
def polymul(a1: List[float], a2: numpy.ndarray):
    """
    usage.scipy: 2
    """
    ...


@overload
def polymul(a1: numpy.ndarray, a2: numpy.ndarray):
    """
    usage.scipy: 23
    """
    ...


@overload
def polymul(a1: List[Union[float, int]], a2: List[Union[float, int]]):
    """
    usage.scipy: 1
    """
    ...


def polymul(
    a1: Union[List[Union[float, int]], numpy.ndarray],
    a2: Union[List[Union[int, float]], numpy.ndarray],
):
    """
    usage.scipy: 26
    """
    ...


def polysub(a1: numpy.ndarray, a2: numpy.ndarray):
    """
    usage.scipy: 2
    """
    ...


@overload
def polyval(p: numpy.ndarray, x: numpy.ndarray):
    """
    usage.scipy: 15
    """
    ...


@overload
def polyval(p: List[float], x: numpy.ndarray):
    """
    usage.scipy: 2
    """
    ...


@overload
def polyval(p: List[int], x: numpy.ndarray):
    """
    usage.scipy: 4
    """
    ...


@overload
def polyval(p: numpy.ndarray, x: numpy.float64):
    """
    usage.scipy: 4
    """
    ...


@overload
def polyval(p: numpy.ndarray, x: numpy.complex128):
    """
    usage.scipy: 3
    """
    ...


@overload
def polyval(p: numpy.poly1d, x: numpy.ndarray):
    """
    usage.scipy: 1
    """
    ...


@overload
def polyval(p: List[Union[float, int]], x: float):
    """
    usage.scipy: 1
    """
    ...


@overload
def polyval(p: List[Union[float, int]], x: numpy.ndarray):
    """
    usage.scipy: 1
    """
    ...


@overload
def polyval(p: List[Union[float, int]], x: numpy.float64):
    """
    usage.scipy: 1
    """
    ...


@overload
def polyval(p: List[Union[int, float]], x: numpy.ndarray):
    """
    usage.scipy: 1
    """
    ...


@overload
def polyval(p: List[int], x: float):
    """
    usage.scipy: 2
    """
    ...


@overload
def polyval(p: List[float], x: float):
    """
    usage.scipy: 1
    """
    ...


def polyval(
    p: Union[List[Union[float, int]], numpy.ndarray, numpy.poly1d],
    x: Union[float, numpy.ndarray, numpy.complex128, numpy.float64],
):
    """
    usage.scipy: 36
    """
    ...


@overload
def prod(a: Tuple[int, int]):
    """
    usage.dask: 2
    usage.matplotlib: 2
    usage.scipy: 9
    usage.skimage: 2
    usage.sklearn: 3
    usage.xarray: 4
    """
    ...


@overload
def prod(a: Tuple[int, int, int]):
    """
    usage.dask: 6
    usage.scipy: 7
    usage.skimage: 3
    usage.sklearn: 1
    usage.xarray: 3
    """
    ...


@overload
def prod(a: List[int]):
    """
    usage.dask: 22
    usage.scipy: 2
    usage.skimage: 1
    usage.xarray: 1
    """
    ...


@overload
def prod(a: numpy.ndarray):
    """
    usage.dask: 9
    usage.scipy: 15
    usage.skimage: 3
    usage.sklearn: 2
    """
    ...


@overload
def prod(a: Tuple[int]):
    """
    usage.dask: 2
    usage.scipy: 3
    usage.sklearn: 1
    usage.xarray: 3
    """
    ...


@overload
def prod(a: Tuple[None, ...]):
    """
    usage.dask: 2
    usage.matplotlib: 2
    usage.scipy: 3
    usage.xarray: 1
    """
    ...


@overload
def prod(a: list):
    """
    usage.dask: 4
    usage.xarray: 1
    """
    ...


@overload
def prod(a: Tuple[int, int, int, int]):
    """
    usage.dask: 1
    usage.xarray: 1
    """
    ...


@overload
def prod(a: Tuple[int, int, int, int, int]):
    """
    usage.dask: 1
    usage.xarray: 1
    """
    ...


@overload
def prod(a: numpy.ndarray, axis: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def prod(a: object, axis: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def prod(a: object):
    """
    usage.xarray: 1
    """
    ...


@overload
def prod(a: xarray.core.dataarray.DataArray):
    """
    usage.xarray: 1
    """
    ...


@overload
def prod(a: xarray.core.dataset.Dataset):
    """
    usage.xarray: 1
    """
    ...


@overload
def prod(a: object, axis: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def prod(a: numpy.ndarray, axis: int):
    """
    usage.dask: 4
    usage.scipy: 7
    usage.xarray: 1
    """
    ...


@overload
def prod(
    a: Union[numpy.ndarray, int, List[int], Tuple[Union[None, int], ...]],
    dtype: Literal["i8"] = ...,
    axis: Union[None, int] = ...,
):
    """
    usage.pandas: 52
    """
    ...


@overload
def prod(a: Tuple[numpy.int64]):
    """
    usage.scipy: 6
    """
    ...


@overload
def prod(a: Tuple[numpy.int64, numpy.int64]):
    """
    usage.scipy: 2
    """
    ...


@overload
def prod(a: Tuple[numpy.int64, numpy.int64, numpy.int64]):
    """
    usage.scipy: 2
    """
    ...


@overload
def prod(a: Tuple[int], axis: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def prod(a: Tuple[int, int], axis: int):
    """
    usage.scipy: 3
    """
    ...


@overload
def prod(a: Tuple[None, ...], axis: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def prod(a: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def prod(a: Tuple[float], axis: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def prod(a: List[numpy.float64]):
    """
    usage.dask: 3
    """
    ...


@overload
def prod(a: numpy.ma.core.MaskedArray):
    """
    usage.dask: 3
    """
    ...


@overload
def prod(a: numpy.ma.core.MaskedArray, axis: int):
    """
    usage.dask: 6
    """
    ...


@overload
def prod(a: numpy.ma.core.MaskedArray, keepdims: bool):
    """
    usage.dask: 2
    """
    ...


@overload
def prod(a: numpy.ma.core.MaskedArray, axis: int, keepdims: bool):
    """
    usage.dask: 4
    """
    ...


@overload
def prod(a: List[Union[int, numpy.float64]]):
    """
    usage.dask: 2
    """
    ...


@overload
def prod(a: Tuple[int, int, int], dtype: Literal["f4"]):
    """
    usage.dask: 1
    """
    ...


@overload
def prod(a: Tuple[int, int, int], dtype: Literal["i4"]):
    """
    usage.dask: 1
    """
    ...


@overload
def prod(a: numpy.ndarray, keepdims: bool):
    """
    usage.dask: 5
    """
    ...


@overload
def prod(a: numpy.ndarray, axis: Tuple[None, ...]):
    """
    usage.dask: 3
    """
    ...


@overload
def prod(a: numpy.ndarray, dtype: Literal["f8"]):
    """
    usage.dask: 2
    """
    ...


@overload
def prod(a: numpy.ndarray, dtype: Literal["i8"]):
    """
    usage.dask: 2
    """
    ...


@overload
def prod(a: numpy.ndarray, axis: int, keepdims: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def prod(a: numpy.ndarray, axis: Tuple[None, ...], keepdims: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def prod(a: numpy.ndarray, axis: Tuple[int, int]):
    """
    usage.dask: 1
    """
    ...


@overload
def prod(a: Tuple[int], dtype: Type[int]):
    """
    usage.dask: 1
    """
    ...


@overload
def prod(a: Tuple[int, int], dtype: Type[int]):
    """
    usage.dask: 1
    """
    ...


@overload
def prod(a: dask.dataframe.core.DataFrame, axis: int, out: dask.dataframe.core.Series):
    """
    usage.dask: 1
    """
    ...


@overload
def prod(a: dask.dataframe.core.Series, axis: None, out: dask.dataframe.core.Scalar):
    """
    usage.dask: 1
    """
    ...


@overload
def prod(a: dask.dataframe.core.Series):
    """
    usage.dask: 2
    """
    ...


@overload
def prod(a: pandas.core.series.Series):
    """
    usage.dask: 1
    """
    ...


@overload
def prod(a: dask.dataframe.core.DataFrame):
    """
    usage.dask: 2
    """
    ...


@overload
def prod(a: pandas.core.frame.DataFrame):
    """
    usage.dask: 1
    """
    ...


@overload
def prod(a: List[numpy.ndarray], axis: int, dtype: Type[numpy.float64]):
    """
    usage.sklearn: 3
    """
    ...


def prod(
    a: object,
    axis: Union[int, None, Tuple[Union[None, int], ...]] = ...,
    dtype: Union[Type[numpy.float64], Type[int], Literal["i8", "f8", "i4", "f4"]] = ...,
    out: Union[dask.dataframe.core.Scalar, dask.dataframe.core.Series] = ...,
    keepdims: bool = ...,
):
    """
    usage.dask: 100
    usage.matplotlib: 4
    usage.pandas: 52
    usage.scipy: 63
    usage.skimage: 9
    usage.sklearn: 10
    usage.xarray: 22
    """
    ...


def product(*args: Literal["v", "t"]):
    """
    usage.pandas: 1
    usage.skimage: 14
    usage.sklearn: 5
    """
    ...


@overload
def promote_types(_0: numpy.dtype, _1: numpy.dtype, /):
    """
    usage.dask: 6
    usage.pandas: 55
    usage.scipy: 11
    usage.skimage: 1
    """
    ...


@overload
def promote_types(_0: numpy.dtype, _1: Literal["float64"], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def promote_types(_0: numpy.dtype, _1: Type[numpy.float32], /):
    """
    usage.matplotlib: 9
    """
    ...


@overload
def promote_types(_0: numpy.dtype, _1: Type[float], /):
    """
    usage.dask: 1
    """
    ...


def promote_types(
    _0: numpy.dtype,
    _1: Union[Type[float], Type[numpy.float32], numpy.dtype, Literal["float64"]],
    /,
):
    """
    usage.dask: 7
    usage.matplotlib: 9
    usage.pandas: 55
    usage.scipy: 13
    usage.skimage: 1
    """
    ...


@overload
def ptp(a: Union[numpy.ndarray, pandas.core.series.Series]):
    """
    usage.pandas: 2
    """
    ...


@overload
def ptp(a: numpy.ndarray):
    """
    usage.matplotlib: 8
    usage.sklearn: 1
    """
    ...


@overload
def ptp(a: numpy.ndarray, axis: int):
    """
    usage.dask: 1
    usage.matplotlib: 1
    usage.sklearn: 1
    """
    ...


@overload
def ptp(a: numpy.ndarray, axis: None):
    """
    usage.dask: 1
    """
    ...


@overload
def ptp(a: List[int]):
    """
    usage.sklearn: 7
    """
    ...


def ptp(
    a: Union[numpy.ndarray, pandas.core.series.Series, List[int]],
    axis: Union[int, None] = ...,
):
    """
    usage.dask: 2
    usage.matplotlib: 9
    usage.pandas: 2
    usage.sklearn: 9
    """
    ...


@overload
def putmask(
    _0: Union[
        numpy.ndarray,
        pandas.core.arrays.interval.IntervalArray,
        pandas.core.arrays.categorical.Categorical,
    ],
    _1: Union[numpy.ndarray, pandas.core.series.Series, Literal["foo"]],
    _2: object,
    /,
):
    """
    usage.pandas: 177
    """
    ...


@overload
def putmask(_0: numpy.ndarray, _1: numpy.int64, _2: float, /):
    """
    usage.scipy: 2
    """
    ...


@overload
def putmask(_0: numpy.ndarray, _1: numpy.ndarray, _2: float, /):
    """
    usage.scipy: 8
    """
    ...


@overload
def putmask(_0: numpy.ndarray, _1: bool, _2: float, /):
    """
    usage.scipy: 2
    """
    ...


@overload
def putmask(_0: numpy.ndarray, _1: numpy.ndarray, _2: numpy.ndarray, /):
    """
    usage.matplotlib: 4
    """
    ...


def putmask(
    _0: Union[
        numpy.ndarray,
        pandas.core.arrays.interval.IntervalArray,
        pandas.core.arrays.categorical.Categorical,
    ],
    _1: Union[
        numpy.ndarray, pandas.core.series.Series, numpy.int64, bool, Literal["foo"]
    ],
    _2: object,
    /,
):
    """
    usage.matplotlib: 4
    usage.pandas: 177
    usage.scipy: 12
    """
    ...


def quantile(
    a: numpy.ndarray,
    q: numpy.ndarray,
    axis: numpy.ndarray,
    interpolation: Literal["linear"],
):
    """
    usage.xarray: 1
    """
    ...


@overload
def ravel(a: Tuple[int, int, int]):
    """
    usage.scipy: 3
    usage.skimage: 1
    """
    ...


@overload
def ravel(a: numpy.int64):
    """
    usage.skimage: 1
    """
    ...


@overload
def ravel(a: Tuple[int, int, int, int]):
    """
    usage.skimage: 1
    """
    ...


@overload
def ravel(a: int):
    """
    usage.skimage: 1
    usage.sklearn: 2
    usage.xarray: 1
    """
    ...


@overload
def ravel(a: numpy.ndarray):
    """
    usage.dask: 1
    usage.matplotlib: 22
    usage.scipy: 110
    usage.skimage: 1
    usage.sklearn: 55
    usage.xarray: 27
    """
    ...


@overload
def ravel(a: Tuple[numpy.float64, numpy.float64]):
    """
    usage.skimage: 1
    """
    ...


@overload
def ravel(a: float):
    """
    usage.skimage: 1
    usage.sklearn: 2
    usage.xarray: 1
    """
    ...


@overload
def ravel(a: numpy.float64):
    """
    usage.skimage: 1
    usage.xarray: 1
    """
    ...


@overload
def ravel(a: List[numpy.float64]):
    """
    usage.skimage: 1
    usage.sklearn: 1
    usage.xarray: 1
    """
    ...


@overload
def ravel(a: numpy.matrix):
    """
    usage.scipy: 9
    usage.skimage: 3
    usage.sklearn: 8
    """
    ...


@overload
def ravel(a: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def ravel(a: numpy.float32):
    """
    usage.xarray: 1
    """
    ...


@overload
def ravel(a: numpy.bytes_):
    """
    usage.xarray: 1
    """
    ...


@overload
def ravel(a: numpy.uint8):
    """
    usage.xarray: 1
    """
    ...


@overload
def ravel(a: numpy.int8):
    """
    usage.xarray: 1
    """
    ...


@overload
def ravel(a: numpy.int16):
    """
    usage.xarray: 1
    """
    ...


@overload
def ravel(a: bytes):
    """
    usage.xarray: 1
    """
    ...


@overload
def ravel(a: numpy.int32):
    """
    usage.xarray: 1
    """
    ...


@overload
def ravel(a: pandas.core.indexes.datetimes.DatetimeIndex):
    """
    usage.xarray: 1
    """
    ...


@overload
def ravel(a: xarray.coding.cftimeindex.CFTimeIndex):
    """
    usage.xarray: 1
    """
    ...


@overload
def ravel(a: pandas.core.indexes.numeric.Int64Index):
    """
    usage.xarray: 1
    """
    ...


@overload
def ravel(a: pandas.core.indexes.numeric.Float64Index):
    """
    usage.xarray: 1
    """
    ...


@overload
def ravel(a: pandas.core.indexes.base.Index):
    """
    usage.xarray: 1
    """
    ...


@overload
def ravel(a: pandas.core.indexes.multi.MultiIndex):
    """
    usage.xarray: 1
    """
    ...


@overload
def ravel(a: pandas.core.indexes.interval.IntervalIndex):
    """
    usage.xarray: 1
    """
    ...


@overload
def ravel(a: xarray.core.variable.IndexVariable):
    """
    usage.xarray: 1
    """
    ...


@overload
def ravel(a: pandas.core.indexes.range.RangeIndex):
    """
    usage.xarray: 1
    """
    ...


@overload
def ravel(a: xarray.core.variable.Variable):
    """
    usage.xarray: 1
    """
    ...


@overload
def ravel(a: Union[pandas.core.series.Series, pandas.core.frame.DataFrame]):
    """
    usage.pandas: 2
    """
    ...


@overload
def ravel(a: List[None]):
    """
    usage.scipy: 3
    """
    ...


@overload
def ravel(a: List[float]):
    """
    usage.scipy: 10
    """
    ...


@overload
def ravel(a: List[int]):
    """
    usage.matplotlib: 1
    usage.scipy: 16
    usage.sklearn: 3
    """
    ...


@overload
def ravel(a: List[Union[int, float]]):
    """
    usage.scipy: 4
    """
    ...


@overload
def ravel(a: List[Union[float, int]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ravel(a: list):
    """
    usage.scipy: 4
    """
    ...


@overload
def ravel(a: List[List[float]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ravel(a: List[list]):
    """
    usage.scipy: 1
    """
    ...


@overload
def ravel(a: List[Union[float, None]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def ravel(a: List[List[int]]):
    """
    usage.matplotlib: 1
    usage.sklearn: 1
    """
    ...


@overload
def ravel(a: numpy.ndarray, order: Literal["K"]):
    """
    usage.sklearn: 3
    """
    ...


@overload
def ravel(a: List[numpy.ndarray]):
    """
    usage.sklearn: 4
    """
    ...


@overload
def ravel(a: List[Literal["spam", "egg"]]):
    """
    usage.sklearn: 1
    """
    ...


def ravel(a: object, order: Literal["K"] = ...):
    """
    usage.dask: 1
    usage.matplotlib: 25
    usage.pandas: 2
    usage.scipy: 162
    usage.skimage: 12
    usage.sklearn: 80
    usage.xarray: 49
    """
    ...


@overload
def ravel_multi_index(_0: List[int], _1: Tuple[int], /, *, order: Literal["F"]):
    """
    usage.skimage: 1
    """
    ...


@overload
def ravel_multi_index(
    _0: List[int], _1: Tuple[int, int, int], /, *, order: Literal["C"]
):
    """
    usage.skimage: 1
    """
    ...


@overload
def ravel_multi_index(_0: List[int], _1: Tuple[int, int], /, *, order: Literal["C"]):
    """
    usage.skimage: 1
    """
    ...


@overload
def ravel_multi_index(
    _0: List[int], _1: Tuple[int, int, int, int], /, *, order: Literal["C"]
):
    """
    usage.skimage: 1
    """
    ...


@overload
def ravel_multi_index(
    _0: List[int], _1: Tuple[int, int, int, int, int], /, *, order: Literal["C"]
):
    """
    usage.skimage: 1
    """
    ...


@overload
def ravel_multi_index(_0: List[int], _1: Tuple[int, int], /, *, order: Literal["F"]):
    """
    usage.skimage: 1
    """
    ...


@overload
def ravel_multi_index(_0: Tuple[int], _1: Tuple[int], /, *, order: Literal["C"]):
    """
    usage.skimage: 1
    """
    ...


@overload
def ravel_multi_index(
    _0: Tuple[int, int], _1: Tuple[int, int], /, *, order: Literal["C"]
):
    """
    usage.skimage: 1
    """
    ...


@overload
def ravel_multi_index(
    _0: Tuple[int, int, int], _1: Tuple[int, int, int], /, *, order: Literal["C"]
):
    """
    usage.skimage: 1
    """
    ...


@overload
def ravel_multi_index(
    _0: Tuple[int, int, int, int],
    _1: Tuple[int, int, int, int],
    /,
    *,
    order: Literal["C"],
):
    """
    usage.skimage: 1
    """
    ...


@overload
def ravel_multi_index(_0: Tuple[int], _1: Tuple[int], /, *, order: Literal["F"]):
    """
    usage.skimage: 1
    """
    ...


@overload
def ravel_multi_index(
    _0: Tuple[int, int], _1: Tuple[int, int], /, *, order: Literal["F"]
):
    """
    usage.skimage: 1
    """
    ...


@overload
def ravel_multi_index(
    _0: Tuple[int, int, int], _1: Tuple[int, int, int], /, *, order: Literal["F"]
):
    """
    usage.skimage: 1
    """
    ...


@overload
def ravel_multi_index(
    _0: Tuple[int, int, int, int],
    _1: Tuple[int, int, int, int],
    /,
    *,
    order: Literal["F"],
):
    """
    usage.skimage: 1
    """
    ...


@overload
def ravel_multi_index(_0: Tuple[numpy.ndarray, numpy.ndarray], _1: Tuple[int, int], /):
    """
    usage.skimage: 1
    """
    ...


@overload
def ravel_multi_index(_0: numpy.ndarray, _1: Tuple[int, int], /):
    """
    usage.skimage: 1
    """
    ...


@overload
def ravel_multi_index(
    _0: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray], _1: Tuple[int, int, int], /
):
    """
    usage.skimage: 1
    """
    ...


@overload
def ravel_multi_index(_0: numpy.ndarray, _1: Tuple[int, int, int], /):
    """
    usage.skimage: 1
    """
    ...


@overload
def ravel_multi_index(_0: List[numpy.ndarray], _1: numpy.ndarray, /):
    """
    usage.scipy: 3
    """
    ...


@overload
def ravel_multi_index(_0: List[Tuple[int, int]], _1: Tuple[int, int], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def ravel_multi_index(
    _0: Tuple[numpy.int64, numpy.int64, numpy.int64], _1: Tuple[int, int, int], /
):
    """
    usage.dask: 1
    """
    ...


@overload
def ravel_multi_index(_0: Tuple[numpy.int64], _1: Tuple[int], /):
    """
    usage.dask: 1
    """
    ...


@overload
def ravel_multi_index(_0: Tuple[numpy.int64, numpy.int64], _1: Tuple[int, int], /):
    """
    usage.dask: 1
    """
    ...


def ravel_multi_index(
    _0: Union[
        Tuple[Union[int, numpy.ndarray, numpy.int64], ...],
        numpy.ndarray,
        List[Union[Tuple[int, int], int, numpy.ndarray]],
    ],
    _1: Union[Tuple[int, ...], numpy.ndarray],
    /,
    *,
    order: Literal["F", "C"] = ...,
):
    """
    usage.dask: 3
    usage.matplotlib: 1
    usage.scipy: 3
    usage.skimage: 18
    """
    ...


@overload
def real(val: numpy.ndarray):
    """
    usage.dask: 17
    usage.scipy: 64
    usage.skimage: 7
    usage.sklearn: 5
    """
    ...


@overload
def real(val: float):
    """
    usage.scipy: 5
    usage.skimage: 1
    """
    ...


@overload
def real(val: xarray.core.dataarray.DataArray):
    """
    usage.xarray: 1
    """
    ...


@overload
def real(val: numpy.complex128):
    """
    usage.pandas: 1
    usage.scipy: 16
    """
    ...


@overload
def real(val: List[complex]):
    """
    usage.scipy: 1
    """
    ...


@overload
def real(val: complex):
    """
    usage.scipy: 6
    """
    ...


@overload
def real(val: numpy.float64):
    """
    usage.scipy: 10
    """
    ...


@overload
def real(val: int):
    """
    usage.scipy: 3
    """
    ...


@overload
def real(val: numpy.poly1d):
    """
    usage.scipy: 1
    """
    ...


@overload
def real(val: dask.array.core.Array):
    """
    usage.dask: 1
    """
    ...


@overload
def real(val: pandas.core.series.Series):
    """
    usage.dask: 5
    """
    ...


@overload
def real(val: dask.dataframe.core.Series):
    """
    usage.dask: 2
    """
    ...


@overload
def real(val: pandas.core.frame.DataFrame):
    """
    usage.dask: 5
    """
    ...


@overload
def real(val: dask.dataframe.core.DataFrame):
    """
    usage.dask: 2
    """
    ...


def real(val: object):
    """
    usage.dask: 32
    usage.pandas: 1
    usage.scipy: 106
    usage.skimage: 8
    usage.sklearn: 5
    usage.xarray: 1
    """
    ...


@overload
def repeat(a: numpy.ndarray, repeats: int, axis: int):
    """
    usage.dask: 4
    usage.matplotlib: 16
    usage.scipy: 1
    usage.sklearn: 3
    usage.xarray: 4
    """
    ...


@overload
def repeat(
    _0: object = ...,
    _1: int = ...,
    /,
    a: object = ...,
    repeats: object = ...,
    axis: int = ...,
    *,
    foo: Literal["bar"] = ...,
):
    """
    usage.pandas: 168
    """
    ...


@overload
def repeat(a: numpy.ndarray, repeats: int):
    """
    usage.matplotlib: 8
    usage.scipy: 14
    usage.sklearn: 6
    """
    ...


@overload
def repeat(a: numpy.int16, repeats: int):
    """
    usage.scipy: 2
    """
    ...


@overload
def repeat(a: numpy.int32, repeats: int):
    """
    usage.scipy: 2
    """
    ...


@overload
def repeat(a: numpy.float32, repeats: int):
    """
    usage.scipy: 11
    """
    ...


@overload
def repeat(a: numpy.float64, repeats: int):
    """
    usage.scipy: 2
    usage.sklearn: 2
    """
    ...


@overload
def repeat(a: bytes, repeats: int):
    """
    usage.scipy: 2
    """
    ...


@overload
def repeat(a: numpy.complex64, repeats: int):
    """
    usage.scipy: 2
    """
    ...


@overload
def repeat(a: List[int], repeats: List[int]):
    """
    usage.scipy: 1
    """
    ...


@overload
def repeat(a: numpy.ndarray, repeats: Tuple[int], axis: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def repeat(a: List[int], repeats: int):
    """
    usage.matplotlib: 1
    usage.scipy: 4
    usage.sklearn: 1
    """
    ...


@overload
def repeat(a: numpy.ndarray, repeats: numpy.ndarray):
    """
    usage.scipy: 2
    usage.sklearn: 12
    """
    ...


@overload
def repeat(a: int, repeats: int):
    """
    usage.scipy: 2
    usage.sklearn: 3
    """
    ...


@overload
def repeat(a: float, repeats: int):
    """
    usage.scipy: 1
    usage.sklearn: 9
    """
    ...


@overload
def repeat(a: range, repeats: numpy.ndarray):
    """
    usage.scipy: 1
    """
    ...


@overload
def repeat(a: int, repeats: numpy.int64):
    """
    usage.sklearn: 4
    """
    ...


@overload
def repeat(a: numpy.ndarray, repeats: numpy.ndarray, axis: int):
    """
    usage.sklearn: 13
    """
    ...


@overload
def repeat(a: numpy.int64, repeats: int):
    """
    usage.sklearn: 2
    """
    ...


@overload
def repeat(a: List[float], repeats: int):
    """
    usage.sklearn: 2
    """
    ...


@overload
def repeat(a: float, repeats: Tuple[int]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def repeat(a: List[int], repeats: float):
    """
    usage.sklearn: 3
    """
    ...


@overload
def repeat(a: range, repeats: int):
    """
    usage.sklearn: 1
    """
    ...


@overload
def repeat(a: numpy.str_, repeats: int):
    """
    usage.sklearn: 1
    """
    ...


@overload
def repeat(a: List[List[int]], repeats: numpy.ndarray, axis: int):
    """
    usage.sklearn: 1
    """
    ...


@overload
def repeat(a: List[int], repeats: numpy.ndarray, axis: int):
    """
    usage.sklearn: 1
    """
    ...


@overload
def repeat(a: List[numpy.ndarray], repeats: int, axis: int):
    """
    usage.sklearn: 1
    """
    ...


@overload
def repeat(a: List[float], repeats: numpy.ndarray):
    """
    usage.sklearn: 2
    """
    ...


def repeat(
    _0: object = ...,
    _1: int = ...,
    /,
    a: object = ...,
    repeats: object = ...,
    axis: int = ...,
    *,
    foo: Literal["bar"] = ...,
):
    """
    usage.dask: 4
    usage.matplotlib: 25
    usage.pandas: 168
    usage.scipy: 48
    usage.sklearn: 69
    usage.xarray: 4
    """
    ...


@overload
def require(
    a: numpy.ndarray, dtype: Type[numpy.uint8], requirements: List[Literal["C"]]
):
    """
    usage.skimage: 1
    """
    ...


@overload
def require(a: numpy.ndarray, dtype: numpy.dtype, requirements: Literal["F"]):
    """
    usage.scipy: 8
    """
    ...


@overload
def require(a: numpy.ndarray, dtype: numpy.dtype, requirements: Literal["C"]):
    """
    usage.scipy: 8
    """
    ...


@overload
def require(a: numpy.ndarray, requirements: Literal["W"]):
    """
    usage.sklearn: 6
    """
    ...


def require(
    a: numpy.ndarray,
    requirements: Union[Literal["W", "C", "F"], List[Literal["C"]]],
    dtype: Union[numpy.dtype, Type[numpy.uint8]] = ...,
):
    """
    usage.scipy: 16
    usage.skimage: 1
    usage.sklearn: 6
    """
    ...


@overload
def reshape(a: List[int], newshape: List[int]):
    """
    usage.skimage: 2
    """
    ...


@overload
def reshape(a: numpy.ndarray, newshape: List[int]):
    """
    usage.scipy: 3
    usage.skimage: 2
    """
    ...


@overload
def reshape(a: numpy.ndarray, newshape: Tuple[int, int]):
    """
    usage.matplotlib: 2
    usage.scipy: 22
    usage.skimage: 11
    usage.sklearn: 50
    usage.xarray: 3
    """
    ...


@overload
def reshape(a: numpy.ndarray, newshape: Tuple[int]):
    """
    usage.scipy: 5
    usage.skimage: 3
    usage.sklearn: 1
    """
    ...


@overload
def reshape(a: numpy.ndarray, newshape: Tuple[int, int, int]):
    """
    usage.scipy: 9
    usage.skimage: 5
    usage.sklearn: 1
    usage.xarray: 1
    """
    ...


@overload
def reshape(a: numpy.ndarray, newshape: Tuple[int, int, int, int]):
    """
    usage.skimage: 4
    usage.sklearn: 1
    usage.xarray: 2
    """
    ...


@overload
def reshape(a: numpy.ndarray, newshape: Tuple[int, int, int, int, int]):
    """
    usage.skimage: 2
    """
    ...


@overload
def reshape(a: numpy.ndarray, newshape: Tuple[numpy.int64, numpy.int64]):
    """
    usage.scipy: 2
    usage.skimage: 1
    """
    ...


@overload
def reshape(a: numpy.ndarray, newshape: Tuple[int, numpy.int64], order: Literal["F"]):
    """
    usage.skimage: 3
    """
    ...


@overload
def reshape(a: List[float], newshape: Tuple[int, int]):
    """
    usage.sklearn: 3
    usage.xarray: 2
    """
    ...


@overload
def reshape(a: List[float], newshape: Tuple[int]):
    """
    usage.xarray: 7
    """
    ...


@overload
def reshape(a: List[float], newshape: Tuple[None, ...]):
    """
    usage.xarray: 1
    """
    ...


@overload
def reshape(
    a: Union[numpy.ndarray, List[Literal["A2", "A0", "A4", "A3"]]],
    newshape: Tuple[int, int],
):
    """
    usage.pandas: 6
    """
    ...


@overload
def reshape(a: numpy.ndarray, newshape: Tuple[int, numpy.int64]):
    """
    usage.scipy: 1
    usage.sklearn: 2
    """
    ...


@overload
def reshape(a: numpy.ndarray, newshape: Tuple[numpy.int64]):
    """
    usage.scipy: 5
    """
    ...


@overload
def reshape(
    a: numpy.ndarray,
    newshape: Tuple[numpy.int64, numpy.int64, numpy.int64, numpy.int64],
):
    """
    usage.scipy: 1
    """
    ...


@overload
def reshape(a: List[int], newshape: Tuple[int, int]):
    """
    usage.scipy: 1
    usage.sklearn: 3
    """
    ...


@overload
def reshape(a: numpy.ndarray, newshape: Tuple[numpy.int64, numpy.int64, numpy.int64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def reshape(a: numpy.ndarray, newshape: int):
    """
    usage.matplotlib: 3
    """
    ...


@overload
def reshape(a: List[numpy.float64], newshape: Tuple[int, int]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def reshape(a: List[numpy.int64], newshape: Tuple[int, int]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def reshape(a: List[numpy.ndarray], newshape: Tuple[int, int, int]):
    """
    usage.sklearn: 6
    """
    ...


@overload
def reshape(
    a: Tuple[numpy.ndarray, numpy.ndarray], newshape: Tuple[int, int, int, int]
):
    """
    usage.sklearn: 2
    """
    ...


@overload
def reshape(a: Tuple[numpy.ndarray, numpy.ndarray], newshape: Tuple[int, int, int]):
    """
    usage.sklearn: 3
    """
    ...


@overload
def reshape(
    a: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray],
    newshape: Tuple[int, int, int, int],
):
    """
    usage.sklearn: 2
    """
    ...


@overload
def reshape(
    a: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray],
    newshape: Tuple[int, int, int],
):
    """
    usage.sklearn: 3
    """
    ...


@overload
def reshape(
    a: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray],
    newshape: Tuple[int, int, int, int],
):
    """
    usage.sklearn: 2
    """
    ...


@overload
def reshape(
    a: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray],
    newshape: Tuple[int, int, int],
):
    """
    usage.sklearn: 3
    """
    ...


@overload
def reshape(
    a: Tuple[
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
    ],
    newshape: Tuple[int, int, int, int],
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def reshape(
    a: Tuple[
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
    ],
    newshape: Tuple[int, int, int],
):
    """
    usage.sklearn: 2
    """
    ...


@overload
def reshape(
    a: Tuple[
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
    ],
    newshape: Tuple[int, int, int, int],
):
    """
    usage.sklearn: 2
    """
    ...


@overload
def reshape(
    a: Tuple[
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
    ],
    newshape: Tuple[int, int, int],
):
    """
    usage.sklearn: 3
    """
    ...


@overload
def reshape(
    a: Tuple[
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
    ],
    newshape: Tuple[int, int, int, int],
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def reshape(
    a: Tuple[
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
    ],
    newshape: Tuple[int, int, int],
):
    """
    usage.sklearn: 2
    """
    ...


@overload
def reshape(a: List[List[int]], newshape: Tuple[int, int]):
    """
    usage.sklearn: 2
    """
    ...


def reshape(
    a: Union[Tuple[numpy.ndarray, ...], list, numpy.ndarray],
    newshape: Union[Tuple[Union[int, numpy.int64, None], ...], List[int], int],
    order: Literal["F"] = ...,
):
    """
    usage.matplotlib: 5
    usage.pandas: 6
    usage.scipy: 50
    usage.skimage: 33
    usage.sklearn: 97
    usage.xarray: 16
    """
    ...


@overload
def resize(a: List[bool], new_shape: int):
    """
    usage.pandas: 3
    """
    ...


@overload
def resize(a: numpy.ndarray, new_shape: int):
    """
    usage.matplotlib: 5
    usage.scipy: 22
    usage.sklearn: 4
    """
    ...


@overload
def resize(a: numpy.ndarray, new_shape: Tuple[int, int, int]):
    """
    usage.scipy: 1
    """
    ...


@overload
def resize(a: int, new_shape: int):
    """
    usage.scipy: 2
    """
    ...


@overload
def resize(a: bool, new_shape: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def resize(a: numpy.ndarray, new_shape: Tuple[int]):
    """
    usage.matplotlib: 8
    usage.scipy: 4
    """
    ...


@overload
def resize(a: numpy.ndarray, new_shape: Tuple[int, int]):
    """
    usage.matplotlib: 2
    usage.scipy: 1
    usage.sklearn: 11
    """
    ...


@overload
def resize(a: List[int], new_shape: Tuple[int]):
    """
    usage.matplotlib: 2
    """
    ...


def resize(
    a: Union[numpy.ndarray, int, bool, List[Union[int, bool]]],
    new_shape: Union[int, Tuple[int, ...]],
):
    """
    usage.matplotlib: 17
    usage.pandas: 3
    usage.scipy: 31
    usage.sklearn: 15
    """
    ...


@overload
def result_type(_0: numpy.dtype, _1: numpy.dtype, _2: Type[numpy.float32], /):
    """
    usage.scipy: 25
    usage.skimage: 7
    """
    ...


@overload
def result_type(_0: numpy.ndarray, /):
    """
    usage.xarray: 21
    """
    ...


@overload
def result_type(_0: numpy.ndarray, _1: numpy.ndarray, /):
    """
    usage.dask: 1
    usage.scipy: 216
    usage.xarray: 25
    """
    ...


@overload
def result_type(_0: dask.array.core.Array, /):
    """
    usage.xarray: 2
    """
    ...


@overload
def result_type(_0: dask.array.core.Array, _1: dask.array.core.Array, /):
    """
    usage.xarray: 1
    """
    ...


@overload
def result_type(
    _0: dask.array.core.Array,
    _1: dask.array.core.Array,
    _2: dask.array.core.Array,
    _3: dask.array.core.Array,
    _4: dask.array.core.Array,
    _5: dask.array.core.Array,
    _6: dask.array.core.Array,
    _7: dask.array.core.Array,
    _8: dask.array.core.Array,
    _9: dask.array.core.Array,
    _10: dask.array.core.Array,
    _11: dask.array.core.Array,
    _12: dask.array.core.Array,
    _13: dask.array.core.Array,
    _14: dask.array.core.Array,
    _15: dask.array.core.Array,
    _16: dask.array.core.Array,
    _17: dask.array.core.Array,
    _18: dask.array.core.Array,
    _19: dask.array.core.Array,
    /,
):
    """
    usage.xarray: 1
    """
    ...


@overload
def result_type(_0: numpy.ndarray, _1: dask.array.core.Array, /):
    """
    usage.xarray: 2
    """
    ...


@overload
def result_type(
    _0: numpy.ndarray,
    _1: numpy.ndarray,
    _2: numpy.ndarray,
    _3: numpy.ndarray,
    _4: numpy.ndarray,
    /,
):
    """
    usage.xarray: 2
    """
    ...


@overload
def result_type(_0: numpy.ndarray, _1: numpy.ndarray, _2: numpy.ndarray, /):
    """
    usage.scipy: 25
    usage.xarray: 6
    """
    ...


@overload
def result_type(
    _0: numpy.ndarray, _1: numpy.ndarray, _2: numpy.ndarray, _3: numpy.ndarray, /
):
    """
    usage.scipy: 14
    usage.xarray: 2
    """
    ...


@overload
def result_type(
    _0: numpy.ndarray,
    _1: numpy.ndarray,
    _2: numpy.ndarray,
    _3: numpy.ndarray,
    _4: numpy.ndarray,
    _5: numpy.ndarray,
    _6: numpy.ndarray,
    _7: numpy.ndarray,
    _8: numpy.ndarray,
    _9: numpy.ndarray,
    /,
):
    """
    usage.xarray: 3
    """
    ...


@overload
def result_type(_0: dask.array.core.Array, _1: numpy.ndarray, /):
    """
    usage.xarray: 4
    """
    ...


@overload
def result_type(
    _0: numpy.ndarray,
    _1: numpy.ndarray,
    _2: numpy.ndarray,
    _3: numpy.ndarray,
    _4: numpy.ndarray,
    _5: numpy.ndarray,
    _6: numpy.ndarray,
    _7: numpy.ndarray,
    /,
):
    """
    usage.xarray: 5
    """
    ...


@overload
def result_type(
    _0: numpy.ndarray,
    _1: numpy.ndarray,
    _2: numpy.ndarray,
    _3: numpy.ndarray,
    _4: numpy.ndarray,
    _5: numpy.ndarray,
    _6: numpy.ndarray,
    _7: numpy.ndarray,
    _8: numpy.ndarray,
    /,
):
    """
    usage.xarray: 2
    """
    ...


@overload
def result_type(
    _0: numpy.ndarray,
    _1: numpy.ndarray,
    _2: numpy.ndarray,
    _3: numpy.ndarray,
    _4: numpy.ndarray,
    _5: numpy.ndarray,
    _6: numpy.ndarray,
    _7: numpy.ndarray,
    _8: numpy.ndarray,
    _9: numpy.ndarray,
    _10: numpy.ndarray,
    _11: numpy.ndarray,
    _12: numpy.ndarray,
    _13: numpy.ndarray,
    _14: numpy.ndarray,
    _15: numpy.ndarray,
    _16: numpy.ndarray,
    _17: numpy.ndarray,
    _18: numpy.ndarray,
    _19: numpy.ndarray,
    /,
):
    """
    usage.xarray: 2
    """
    ...


@overload
def result_type(
    _0: numpy.ndarray,
    _1: numpy.ndarray,
    _2: numpy.ndarray,
    _3: numpy.ndarray,
    _4: numpy.ndarray,
    _5: numpy.ndarray,
    _6: numpy.ndarray,
    _7: numpy.ndarray,
    _8: numpy.ndarray,
    _9: numpy.ndarray,
    _10: numpy.ndarray,
    /,
):
    """
    usage.xarray: 1
    """
    ...


@overload
def result_type(_0: sparse._coo.core.COO, /):
    """
    usage.xarray: 1
    """
    ...


@overload
def result_type(_0: sparse._coo.core.COO, _1: numpy.ndarray, /):
    """
    usage.xarray: 2
    """
    ...


@overload
def result_type(
    _0: numpy.ndarray,
    _1: numpy.ndarray,
    _2: numpy.ndarray,
    _3: numpy.ndarray,
    _4: numpy.ndarray,
    _5: numpy.ndarray,
    _6: numpy.ndarray,
    _7: numpy.ndarray,
    _8: numpy.ndarray,
    _9: numpy.ndarray,
    _10: numpy.ndarray,
    _11: numpy.ndarray,
    /,
):
    """
    usage.xarray: 1
    """
    ...


@overload
def result_type(_0: Type[bool], /):
    """
    usage.xarray: 2
    """
    ...


@overload
def result_type(_0: Type[numpy.bytes_], /):
    """
    usage.xarray: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float32], /):
    """
    usage.xarray: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float64], /):
    """
    usage.xarray: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float32], _1: Type[numpy.float64], /):
    """
    usage.scipy: 17
    usage.xarray: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.str_], /):
    """
    usage.xarray: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int64], /):
    """
    usage.xarray: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.str_], _1: Type[numpy.str_], /):
    """
    usage.xarray: 1
    """
    ...


@overload
def result_type(_0: float, /):
    """
    usage.xarray: 1
    """
    ...


@overload
def result_type(_0: numpy.ndarray, _1: float, /):
    """
    usage.dask: 1
    usage.xarray: 1
    """
    ...


@overload
def result_type(
    _0: numpy.ndarray,
    _1: numpy.ndarray,
    _2: numpy.ndarray,
    _3: numpy.ndarray,
    _4: numpy.ndarray,
    _5: numpy.ndarray,
    _6: numpy.ndarray,
    _7: numpy.ndarray,
    _8: numpy.ndarray,
    _9: numpy.ndarray,
    _10: numpy.ndarray,
    _11: numpy.ndarray,
    _12: numpy.ndarray,
    _13: numpy.ndarray,
    /,
):
    """
    usage.xarray: 1
    """
    ...


@overload
def result_type(_0: sparse._coo.core.COO, _1: sparse._coo.core.COO, /):
    """
    usage.xarray: 1
    """
    ...


@overload
def result_type(_0: numpy.ndarray, _1: sparse._coo.core.COO, /):
    """
    usage.xarray: 2
    """
    ...


@overload
def result_type(
    _0: sparse._coo.core.COO,
    _1: sparse._coo.core.COO,
    _2: sparse._coo.core.COO,
    _3: sparse._coo.core.COO,
    /,
):
    """
    usage.xarray: 1
    """
    ...


@overload
def result_type(
    _0: sparse._coo.core.COO, _1: sparse._coo.core.COO, _2: sparse._coo.core.COO, /
):
    """
    usage.xarray: 1
    """
    ...


@overload
def result_type(_0: object, /):
    """
    usage.xarray: 2
    """
    ...


@overload
def result_type(_0: object, _1: numpy.ndarray, /):
    """
    usage.xarray: 2
    """
    ...


@overload
def result_type(_0: object, _1: object, /):
    """
    usage.xarray: 1
    """
    ...


@overload
def result_type(_0: numpy.ndarray, _1: object, /):
    """
    usage.xarray: 1
    """
    ...


@overload
def result_type(
    _0: object,
    _1: object,
    _2: object,
    _3: object,
    _4: object,
    _5: object,
    _6: object,
    _7: object,
    _8: object,
    _9: object,
    /,
):
    """
    usage.xarray: 1
    """
    ...


@overload
def result_type(_0: object, _1: object, _2: object, /):
    """
    usage.xarray: 1
    """
    ...


@overload
def result_type(_0: object, _1: object, _2: object, _3: object, /):
    """
    usage.xarray: 1
    """
    ...


@overload
def result_type(_0: object, _1: object, _2: object, _3: object, _4: object, /):
    """
    usage.xarray: 1
    """
    ...


@overload
def result_type(
    _0: dask.array.core.Array,
    _1: dask.array.core.Array,
    _2: dask.array.core.Array,
    _3: dask.array.core.Array,
    _4: dask.array.core.Array,
    _5: dask.array.core.Array,
    _6: dask.array.core.Array,
    _7: dask.array.core.Array,
    _8: dask.array.core.Array,
    _9: dask.array.core.Array,
    /,
):
    """
    usage.xarray: 1
    """
    ...


@overload
def result_type(_0: numpy.dtype, /):
    """
    usage.dask: 1
    usage.sklearn: 2
    usage.xarray: 1
    """
    ...


@overload
def result_type(_0: int, /):
    """
    usage.scipy: 1
    usage.xarray: 1
    """
    ...


@overload
def result_type(_0: numpy.dtype, _1: int, /):
    """
    usage.dask: 4
    usage.xarray: 1
    """
    ...


@overload
def result_type(
    _0: object,
    _1: object = ...,
    _2: Union[numpy.dtype, numpy.float64, float, int, type] = ...,
    _3: Union[int, Type[int]] = ...,
    _4: Union[int, Type[int]] = ...,
    _5: Union[int, Type[int]] = ...,
    _6: Union[int, Type[int]] = ...,
    _7: Union[int, Type[int]] = ...,
    _8: Union[int, Type[int]] = ...,
    _9: Union[int, Type[int]] = ...,
    _10: Union[int, Type[int]] = ...,
    _11: Union[int, Type[int]] = ...,
    _12: Union[int, Type[int]] = ...,
    _13: Union[int, Type[int]] = ...,
    _14: Union[int, Type[int]] = ...,
    _15: Union[int, Type[int]] = ...,
    _16: Union[int, Type[int]] = ...,
    _17: Union[int, Type[int]] = ...,
    _18: Union[int, Type[int]] = ...,
    _19: Union[int, Type[int]] = ...,
    _20: Union[int, Type[int]] = ...,
    _21: Union[int, Type[int]] = ...,
    _22: Union[int, Type[int]] = ...,
    _23: Union[int, Type[int]] = ...,
    _24: Union[int, Type[int]] = ...,
    _25: Union[int, Type[int]] = ...,
    _26: Union[int, Type[int]] = ...,
    _27: Union[int, Type[int]] = ...,
    _28: Union[int, Type[int]] = ...,
    _29: Union[int, Type[int]] = ...,
    _30: Union[int, Type[int]] = ...,
    _31: Union[int, Type[int]] = ...,
    _32: Union[int, Type[int]] = ...,
    /,
):
    """
    usage.pandas: 128
    """
    ...


@overload
def result_type(_0: Type[numpy.float32], _1: Type[numpy.float128], /):
    """
    usage.scipy: 9
    """
    ...


@overload
def result_type(_0: Type[numpy.float32], _1: Type[numpy.float32], /):
    """
    usage.scipy: 17
    """
    ...


@overload
def result_type(_0: Type[numpy.float32], _1: Type[int], /):
    """
    usage.scipy: 16
    """
    ...


@overload
def result_type(
    _0: scipy.sparse.linalg.interface._CustomLinearOperator,
    _1: numpy.ndarray,
    _2: Type[float],
    /,
):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(
    _0: scipy.sparse.linalg.interface.MatrixLinearOperator,
    _1: numpy.ndarray,
    _2: Type[float],
    /,
):
    """
    usage.scipy: 2
    """
    ...


@overload
def result_type(_0: numpy.ndarray, _1: numpy.ndarray, _2: Type[numpy.float64], /):
    """
    usage.scipy: 6
    """
    ...


@overload
def result_type(
    _0: numpy.ndarray, _1: numpy.ndarray, _2: numpy.ndarray, _3: Type[numpy.float64], /
):
    """
    usage.scipy: 4
    """
    ...


@overload
def result_type(_0: numpy.ndarray, _1: Type[numpy.complex64], /):
    """
    usage.scipy: 6
    """
    ...


@overload
def result_type(_0: numpy.ndarray, _1: numpy.ndarray, _2: Type[numpy.complex64], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def result_type(
    _0: scipy.sparse.linalg.interface.MatrixLinearOperator,
    _1: numpy.ndarray,
    _2: numpy.ndarray,
    _3: Type[float],
    /,
):
    """
    usage.scipy: 2
    """
    ...


@overload
def result_type(_0: numpy.dtype, _1: numpy.dtype, _2: Type[float], /):
    """
    usage.scipy: 4
    """
    ...


@overload
def result_type(_0: Type[numpy.bool_], _1: Type[numpy.bool_], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.bool_], _1: Type[numpy.int8], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.bool_], _1: Type[numpy.uint8], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.bool_], _1: Type[numpy.int16], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.bool_], _1: Type[numpy.uint16], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.bool_], _1: Type[numpy.int32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.bool_], _1: Type[numpy.uint32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.bool_], _1: Type[numpy.int64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.bool_], _1: Type[numpy.uint64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.bool_], _1: Type[numpy.longlong], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.bool_], _1: Type[numpy.ulonglong], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.bool_], _1: Type[numpy.float32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.bool_], _1: Type[numpy.float64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.bool_], _1: Type[numpy.float128], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.bool_], _1: Type[numpy.complex64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.bool_], _1: Type[numpy.complex128], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.bool_], _1: Type[numpy.complex256], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int8], _1: Type[numpy.bool_], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int8], _1: Type[numpy.int8], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int8], _1: Type[numpy.uint8], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int8], _1: Type[numpy.int16], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int8], _1: Type[numpy.uint16], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int8], _1: Type[numpy.int32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int8], _1: Type[numpy.uint32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int8], _1: Type[numpy.int64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int8], _1: Type[numpy.uint64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int8], _1: Type[numpy.longlong], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int8], _1: Type[numpy.ulonglong], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int8], _1: Type[numpy.float32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int8], _1: Type[numpy.float64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int8], _1: Type[numpy.float128], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int8], _1: Type[numpy.complex64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int8], _1: Type[numpy.complex128], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int8], _1: Type[numpy.complex256], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint8], _1: Type[numpy.bool_], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint8], _1: Type[numpy.int8], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint8], _1: Type[numpy.uint8], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint8], _1: Type[numpy.int16], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint8], _1: Type[numpy.uint16], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint8], _1: Type[numpy.int32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint8], _1: Type[numpy.uint32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint8], _1: Type[numpy.int64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint8], _1: Type[numpy.uint64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint8], _1: Type[numpy.longlong], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint8], _1: Type[numpy.ulonglong], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint8], _1: Type[numpy.float32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint8], _1: Type[numpy.float64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint8], _1: Type[numpy.float128], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint8], _1: Type[numpy.complex64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint8], _1: Type[numpy.complex128], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint8], _1: Type[numpy.complex256], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int16], _1: Type[numpy.bool_], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int16], _1: Type[numpy.int8], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int16], _1: Type[numpy.uint8], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int16], _1: Type[numpy.int16], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int16], _1: Type[numpy.uint16], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int16], _1: Type[numpy.int32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int16], _1: Type[numpy.uint32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int16], _1: Type[numpy.int64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int16], _1: Type[numpy.uint64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int16], _1: Type[numpy.longlong], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int16], _1: Type[numpy.ulonglong], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int16], _1: Type[numpy.float32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int16], _1: Type[numpy.float64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int16], _1: Type[numpy.float128], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int16], _1: Type[numpy.complex64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int16], _1: Type[numpy.complex128], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int16], _1: Type[numpy.complex256], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint16], _1: Type[numpy.bool_], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint16], _1: Type[numpy.int8], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint16], _1: Type[numpy.uint8], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint16], _1: Type[numpy.int16], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint16], _1: Type[numpy.uint16], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint16], _1: Type[numpy.int32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint16], _1: Type[numpy.uint32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint16], _1: Type[numpy.int64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint16], _1: Type[numpy.uint64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint16], _1: Type[numpy.longlong], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint16], _1: Type[numpy.ulonglong], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint16], _1: Type[numpy.float32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint16], _1: Type[numpy.float64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint16], _1: Type[numpy.float128], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint16], _1: Type[numpy.complex64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint16], _1: Type[numpy.complex128], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint16], _1: Type[numpy.complex256], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int32], _1: Type[numpy.bool_], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int32], _1: Type[numpy.int8], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int32], _1: Type[numpy.uint8], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int32], _1: Type[numpy.int16], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int32], _1: Type[numpy.uint16], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int32], _1: Type[numpy.int32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int32], _1: Type[numpy.uint32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int32], _1: Type[numpy.int64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int32], _1: Type[numpy.uint64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int32], _1: Type[numpy.longlong], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int32], _1: Type[numpy.ulonglong], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int32], _1: Type[numpy.float32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int32], _1: Type[numpy.float64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int32], _1: Type[numpy.float128], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int32], _1: Type[numpy.complex64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int32], _1: Type[numpy.complex128], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int32], _1: Type[numpy.complex256], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint32], _1: Type[numpy.bool_], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint32], _1: Type[numpy.int8], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint32], _1: Type[numpy.uint8], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint32], _1: Type[numpy.int16], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint32], _1: Type[numpy.uint16], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint32], _1: Type[numpy.int32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint32], _1: Type[numpy.uint32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint32], _1: Type[numpy.int64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint32], _1: Type[numpy.uint64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint32], _1: Type[numpy.longlong], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint32], _1: Type[numpy.ulonglong], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint32], _1: Type[numpy.float32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint32], _1: Type[numpy.float64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint32], _1: Type[numpy.float128], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint32], _1: Type[numpy.complex64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint32], _1: Type[numpy.complex128], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint32], _1: Type[numpy.complex256], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int64], _1: Type[numpy.bool_], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int64], _1: Type[numpy.int8], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int64], _1: Type[numpy.uint8], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int64], _1: Type[numpy.int16], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int64], _1: Type[numpy.uint16], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int64], _1: Type[numpy.int32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int64], _1: Type[numpy.uint32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int64], _1: Type[numpy.int64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int64], _1: Type[numpy.uint64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int64], _1: Type[numpy.longlong], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int64], _1: Type[numpy.ulonglong], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int64], _1: Type[numpy.float32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int64], _1: Type[numpy.float64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int64], _1: Type[numpy.float128], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int64], _1: Type[numpy.complex64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int64], _1: Type[numpy.complex128], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.int64], _1: Type[numpy.complex256], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint64], _1: Type[numpy.bool_], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint64], _1: Type[numpy.int8], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint64], _1: Type[numpy.uint8], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint64], _1: Type[numpy.int16], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint64], _1: Type[numpy.uint16], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint64], _1: Type[numpy.int32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint64], _1: Type[numpy.uint32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint64], _1: Type[numpy.int64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint64], _1: Type[numpy.uint64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint64], _1: Type[numpy.longlong], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint64], _1: Type[numpy.ulonglong], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint64], _1: Type[numpy.float32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint64], _1: Type[numpy.float64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint64], _1: Type[numpy.float128], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint64], _1: Type[numpy.complex64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint64], _1: Type[numpy.complex128], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.uint64], _1: Type[numpy.complex256], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.longlong], _1: Type[numpy.bool_], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.longlong], _1: Type[numpy.int8], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.longlong], _1: Type[numpy.uint8], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.longlong], _1: Type[numpy.int16], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.longlong], _1: Type[numpy.uint16], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.longlong], _1: Type[numpy.int32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.longlong], _1: Type[numpy.uint32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.longlong], _1: Type[numpy.int64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.longlong], _1: Type[numpy.uint64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.longlong], _1: Type[numpy.longlong], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.longlong], _1: Type[numpy.ulonglong], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.longlong], _1: Type[numpy.float32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.longlong], _1: Type[numpy.float64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.longlong], _1: Type[numpy.float128], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.longlong], _1: Type[numpy.complex64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.longlong], _1: Type[numpy.complex128], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.longlong], _1: Type[numpy.complex256], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.ulonglong], _1: Type[numpy.bool_], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.ulonglong], _1: Type[numpy.int8], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.ulonglong], _1: Type[numpy.uint8], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.ulonglong], _1: Type[numpy.int16], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.ulonglong], _1: Type[numpy.uint16], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.ulonglong], _1: Type[numpy.int32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.ulonglong], _1: Type[numpy.uint32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.ulonglong], _1: Type[numpy.int64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.ulonglong], _1: Type[numpy.uint64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.ulonglong], _1: Type[numpy.longlong], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.ulonglong], _1: Type[numpy.ulonglong], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.ulonglong], _1: Type[numpy.float32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.ulonglong], _1: Type[numpy.float64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.ulonglong], _1: Type[numpy.float128], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.ulonglong], _1: Type[numpy.complex64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.ulonglong], _1: Type[numpy.complex128], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.ulonglong], _1: Type[numpy.complex256], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float32], _1: Type[numpy.bool_], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float32], _1: Type[numpy.int8], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float32], _1: Type[numpy.uint8], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float32], _1: Type[numpy.int16], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float32], _1: Type[numpy.uint16], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float32], _1: Type[numpy.int32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float32], _1: Type[numpy.uint32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float32], _1: Type[numpy.int64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float32], _1: Type[numpy.uint64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float32], _1: Type[numpy.longlong], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float32], _1: Type[numpy.ulonglong], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float32], _1: Type[numpy.complex64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float32], _1: Type[numpy.complex128], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float32], _1: Type[numpy.complex256], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float64], _1: Type[numpy.bool_], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float64], _1: Type[numpy.int8], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float64], _1: Type[numpy.uint8], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float64], _1: Type[numpy.int16], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float64], _1: Type[numpy.uint16], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float64], _1: Type[numpy.int32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float64], _1: Type[numpy.uint32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float64], _1: Type[numpy.int64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float64], _1: Type[numpy.uint64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float64], _1: Type[numpy.longlong], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float64], _1: Type[numpy.ulonglong], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float64], _1: Type[numpy.float32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float64], _1: Type[numpy.float64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float64], _1: Type[numpy.float128], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float64], _1: Type[numpy.complex64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float64], _1: Type[numpy.complex128], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float64], _1: Type[numpy.complex256], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float128], _1: Type[numpy.bool_], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float128], _1: Type[numpy.int8], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float128], _1: Type[numpy.uint8], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float128], _1: Type[numpy.int16], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float128], _1: Type[numpy.uint16], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float128], _1: Type[numpy.int32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float128], _1: Type[numpy.uint32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float128], _1: Type[numpy.int64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float128], _1: Type[numpy.uint64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float128], _1: Type[numpy.longlong], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float128], _1: Type[numpy.ulonglong], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float128], _1: Type[numpy.float32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float128], _1: Type[numpy.float64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float128], _1: Type[numpy.float128], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float128], _1: Type[numpy.complex64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float128], _1: Type[numpy.complex128], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.float128], _1: Type[numpy.complex256], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex64], _1: Type[numpy.bool_], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex64], _1: Type[numpy.int8], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex64], _1: Type[numpy.uint8], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex64], _1: Type[numpy.int16], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex64], _1: Type[numpy.uint16], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex64], _1: Type[numpy.int32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex64], _1: Type[numpy.uint32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex64], _1: Type[numpy.int64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex64], _1: Type[numpy.uint64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex64], _1: Type[numpy.longlong], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex64], _1: Type[numpy.ulonglong], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex64], _1: Type[numpy.float32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex64], _1: Type[numpy.float64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex64], _1: Type[numpy.float128], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex64], _1: Type[numpy.complex64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex64], _1: Type[numpy.complex128], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex64], _1: Type[numpy.complex256], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex128], _1: Type[numpy.bool_], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex128], _1: Type[numpy.int8], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex128], _1: Type[numpy.uint8], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex128], _1: Type[numpy.int16], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex128], _1: Type[numpy.uint16], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex128], _1: Type[numpy.int32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex128], _1: Type[numpy.uint32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex128], _1: Type[numpy.int64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex128], _1: Type[numpy.uint64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex128], _1: Type[numpy.longlong], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex128], _1: Type[numpy.ulonglong], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex128], _1: Type[numpy.float32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex128], _1: Type[numpy.float64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex128], _1: Type[numpy.float128], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex128], _1: Type[numpy.complex64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex128], _1: Type[numpy.complex128], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex128], _1: Type[numpy.complex256], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex256], _1: Type[numpy.bool_], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex256], _1: Type[numpy.int8], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex256], _1: Type[numpy.uint8], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex256], _1: Type[numpy.int16], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex256], _1: Type[numpy.uint16], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex256], _1: Type[numpy.int32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex256], _1: Type[numpy.uint32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex256], _1: Type[numpy.int64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex256], _1: Type[numpy.uint64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex256], _1: Type[numpy.longlong], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex256], _1: Type[numpy.ulonglong], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex256], _1: Type[numpy.float32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex256], _1: Type[numpy.float64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex256], _1: Type[numpy.float128], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex256], _1: Type[numpy.complex64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex256], _1: Type[numpy.complex128], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(_0: Type[numpy.complex256], _1: Type[numpy.complex256], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def result_type(
    _0: numpy.ndarray, _1: numpy.ndarray, _2: numpy.ndarray, _3: numpy.float32, /
):
    """
    usage.scipy: 25
    """
    ...


@overload
def result_type(
    _0: numpy.ndarray, _1: numpy.ndarray, _2: numpy.ndarray, _3: numpy.float64, /
):
    """
    usage.scipy: 25
    """
    ...


@overload
def result_type(
    _0: numpy.ndarray, _1: numpy.ndarray, _2: numpy.ndarray, _3: numpy.float128, /
):
    """
    usage.scipy: 25
    """
    ...


@overload
def result_type(
    _0: numpy.ndarray, _1: numpy.ndarray, _2: numpy.ndarray, _3: numpy.int32, /
):
    """
    usage.scipy: 25
    """
    ...


@overload
def result_type(
    _0: numpy.ndarray, _1: numpy.ndarray, _2: numpy.ndarray, _3: numpy.int64, /
):
    """
    usage.scipy: 25
    """
    ...


@overload
def result_type(_0: numpy.dtype, _1: numpy.dtype, /):
    """
    usage.dask: 18
    usage.sklearn: 4
    """
    ...


@overload
def result_type(_0: numpy.dtype, _1: float, /):
    """
    usage.dask: 4
    """
    ...


@overload
def result_type(_0: numpy.dtype, _1: numpy.int64, /):
    """
    usage.dask: 4
    """
    ...


@overload
def result_type(_0: numpy.dtype, _1: numpy.ndarray, /):
    """
    usage.dask: 4
    """
    ...


@overload
def result_type(_0: int, _1: numpy.dtype, /):
    """
    usage.dask: 4
    """
    ...


@overload
def result_type(_0: int, _1: int, /):
    """
    usage.dask: 1
    """
    ...


@overload
def result_type(_0: int, _1: float, /):
    """
    usage.dask: 1
    """
    ...


@overload
def result_type(_0: int, _1: numpy.int64, /):
    """
    usage.dask: 1
    """
    ...


@overload
def result_type(_0: int, _1: numpy.ndarray, /):
    """
    usage.dask: 1
    """
    ...


@overload
def result_type(_0: float, _1: numpy.dtype, /):
    """
    usage.dask: 4
    """
    ...


@overload
def result_type(_0: float, _1: int, /):
    """
    usage.dask: 1
    """
    ...


@overload
def result_type(_0: float, _1: float, /):
    """
    usage.dask: 1
    """
    ...


@overload
def result_type(_0: float, _1: numpy.int64, /):
    """
    usage.dask: 1
    """
    ...


@overload
def result_type(_0: float, _1: numpy.ndarray, /):
    """
    usage.dask: 1
    """
    ...


@overload
def result_type(_0: numpy.int64, _1: numpy.dtype, /):
    """
    usage.dask: 4
    """
    ...


@overload
def result_type(_0: numpy.int64, _1: int, /):
    """
    usage.dask: 1
    """
    ...


@overload
def result_type(_0: numpy.int64, _1: float, /):
    """
    usage.dask: 1
    """
    ...


@overload
def result_type(_0: numpy.int64, _1: numpy.int64, /):
    """
    usage.dask: 1
    """
    ...


@overload
def result_type(_0: numpy.int64, _1: numpy.ndarray, /):
    """
    usage.dask: 1
    """
    ...


@overload
def result_type(_0: numpy.ndarray, _1: numpy.dtype, /):
    """
    usage.dask: 4
    """
    ...


@overload
def result_type(_0: numpy.ndarray, _1: int, /):
    """
    usage.dask: 1
    """
    ...


@overload
def result_type(_0: numpy.ndarray, _1: numpy.int64, /):
    """
    usage.dask: 1
    """
    ...


@overload
def result_type(
    _0: dask.array.core.Array, _1: dask.array.core.Array, _2: Type[numpy.float64], /
):
    """
    usage.dask: 1
    """
    ...


@overload
def result_type(_0: numpy.dtype, _1: numpy.dtype, _2: Type[numpy.float64], /):
    """
    usage.dask: 2
    """
    ...


@overload
def result_type(_0: numpy.dtype, _1: numpy.dtype, _2: Literal["f8"], /):
    """
    usage.dask: 2
    """
    ...


@overload
def result_type(_0: dask.array.core.Array, _1: Type[numpy.float64], /):
    """
    usage.dask: 1
    """
    ...


@overload
def result_type(_0: numpy.dtype, _1: Type[numpy.float64], /):
    """
    usage.dask: 1
    """
    ...


@overload
def result_type(_0: numpy.int32, _1: numpy.dtype, /):
    """
    usage.dask: 1
    """
    ...


@overload
def result_type(_0: numpy.dtype, _1: numpy.dtype, _2: numpy.dtype, /):
    """
    usage.dask: 2
    usage.sklearn: 7
    """
    ...


@overload
def result_type(_0: numpy.dtype, _1: Type[numpy.float32], /):
    """
    usage.dask: 1
    """
    ...


@overload
def result_type(
    _0: numpy.dtype,
    _1: numpy.dtype,
    _2: numpy.dtype,
    _3: numpy.dtype,
    _4: numpy.dtype,
    /,
):
    """
    usage.dask: 1
    usage.sklearn: 1
    """
    ...


@overload
def result_type(_0: numpy.dtype, _1: numpy.dtype, _2: numpy.dtype, _3: numpy.dtype, /):
    """
    usage.dask: 1
    usage.sklearn: 2
    """
    ...


@overload
def result_type(
    _0: numpy.dtype,
    _1: numpy.dtype,
    _2: numpy.dtype,
    _3: numpy.dtype,
    _4: numpy.dtype,
    _5: numpy.dtype,
    _6: numpy.dtype,
    _7: numpy.dtype,
    _8: numpy.dtype,
    _9: numpy.dtype,
    _10: numpy.dtype,
    _11: numpy.dtype,
    _12: numpy.dtype,
    /,
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def result_type(
    _0: numpy.dtype,
    _1: numpy.dtype,
    _2: numpy.dtype,
    _3: numpy.dtype,
    _4: numpy.dtype,
    _5: numpy.dtype,
    _6: numpy.dtype,
    _7: numpy.dtype,
    _8: numpy.dtype,
    _9: numpy.dtype,
    _10: numpy.dtype,
    _11: numpy.dtype,
    _12: numpy.dtype,
    _13: numpy.dtype,
    _14: numpy.dtype,
    _15: numpy.dtype,
    _16: numpy.dtype,
    _17: numpy.dtype,
    _18: numpy.dtype,
    _19: numpy.dtype,
    /,
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def result_type(
    _0: numpy.dtype,
    _1: numpy.dtype,
    _2: numpy.dtype,
    _3: numpy.dtype,
    _4: numpy.dtype,
    _5: numpy.dtype,
    _6: numpy.dtype,
    _7: numpy.dtype,
    _8: numpy.dtype,
    _9: numpy.dtype,
    _10: numpy.dtype,
    _11: numpy.dtype,
    /,
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def result_type(
    _0: numpy.dtype,
    _1: numpy.dtype,
    _2: numpy.dtype,
    _3: numpy.dtype,
    _4: numpy.dtype,
    _5: numpy.dtype,
    _6: numpy.dtype,
    _7: numpy.dtype,
    _8: numpy.dtype,
    _9: numpy.dtype,
    _10: numpy.dtype,
    _11: numpy.dtype,
    _12: numpy.dtype,
    _13: numpy.dtype,
    _14: numpy.dtype,
    _15: numpy.dtype,
    _16: numpy.dtype,
    _17: numpy.dtype,
    _18: numpy.dtype,
    _19: numpy.dtype,
    _20: numpy.dtype,
    _21: numpy.dtype,
    _22: numpy.dtype,
    _23: numpy.dtype,
    _24: numpy.dtype,
    _25: numpy.dtype,
    _26: numpy.dtype,
    _27: numpy.dtype,
    _28: numpy.dtype,
    _29: numpy.dtype,
    _30: numpy.dtype,
    _31: numpy.dtype,
    _32: numpy.dtype,
    _33: numpy.dtype,
    _34: numpy.dtype,
    _35: numpy.dtype,
    _36: numpy.dtype,
    _37: numpy.dtype,
    _38: numpy.dtype,
    _39: numpy.dtype,
    _40: numpy.dtype,
    _41: numpy.dtype,
    _42: numpy.dtype,
    _43: numpy.dtype,
    _44: numpy.dtype,
    _45: numpy.dtype,
    _46: numpy.dtype,
    _47: numpy.dtype,
    _48: numpy.dtype,
    _49: numpy.dtype,
    _50: numpy.dtype,
    _51: numpy.dtype,
    _52: numpy.dtype,
    _53: numpy.dtype,
    _54: numpy.dtype,
    _55: numpy.dtype,
    _56: numpy.dtype,
    _57: numpy.dtype,
    _58: numpy.dtype,
    _59: numpy.dtype,
    _60: numpy.dtype,
    _61: numpy.dtype,
    _62: numpy.dtype,
    _63: numpy.dtype,
    _64: numpy.dtype,
    _65: numpy.dtype,
    _66: numpy.dtype,
    _67: numpy.dtype,
    _68: numpy.dtype,
    _69: numpy.dtype,
    _70: numpy.dtype,
    _71: numpy.dtype,
    _72: numpy.dtype,
    _73: numpy.dtype,
    _74: numpy.dtype,
    _75: numpy.dtype,
    _76: numpy.dtype,
    _77: numpy.dtype,
    _78: numpy.dtype,
    _79: numpy.dtype,
    _80: numpy.dtype,
    _81: numpy.dtype,
    _82: numpy.dtype,
    _83: numpy.dtype,
    _84: numpy.dtype,
    _85: numpy.dtype,
    _86: numpy.dtype,
    _87: numpy.dtype,
    _88: numpy.dtype,
    _89: numpy.dtype,
    _90: numpy.dtype,
    _91: numpy.dtype,
    _92: numpy.dtype,
    _93: numpy.dtype,
    _94: numpy.dtype,
    _95: numpy.dtype,
    _96: numpy.dtype,
    _97: numpy.dtype,
    _98: numpy.dtype,
    _99: numpy.dtype,
    _100: numpy.dtype,
    _101: numpy.dtype,
    _102: numpy.dtype,
    _103: numpy.dtype,
    _104: numpy.dtype,
    _105: numpy.dtype,
    _106: numpy.dtype,
    _107: numpy.dtype,
    _108: numpy.dtype,
    _109: numpy.dtype,
    _110: numpy.dtype,
    _111: numpy.dtype,
    _112: numpy.dtype,
    _113: numpy.dtype,
    _114: numpy.dtype,
    _115: numpy.dtype,
    _116: numpy.dtype,
    _117: numpy.dtype,
    _118: numpy.dtype,
    _119: numpy.dtype,
    _120: numpy.dtype,
    _121: numpy.dtype,
    _122: numpy.dtype,
    _123: numpy.dtype,
    _124: numpy.dtype,
    _125: numpy.dtype,
    _126: numpy.dtype,
    _127: numpy.dtype,
    _128: numpy.dtype,
    _129: numpy.dtype,
    _130: numpy.dtype,
    _131: numpy.dtype,
    _132: numpy.dtype,
    _133: numpy.dtype,
    _134: numpy.dtype,
    _135: numpy.dtype,
    _136: numpy.dtype,
    _137: numpy.dtype,
    _138: numpy.dtype,
    _139: numpy.dtype,
    _140: numpy.dtype,
    _141: numpy.dtype,
    _142: numpy.dtype,
    _143: numpy.dtype,
    _144: numpy.dtype,
    _145: numpy.dtype,
    _146: numpy.dtype,
    _147: numpy.dtype,
    _148: numpy.dtype,
    _149: numpy.dtype,
    _150: numpy.dtype,
    _151: numpy.dtype,
    _152: numpy.dtype,
    _153: numpy.dtype,
    _154: numpy.dtype,
    _155: numpy.dtype,
    _156: numpy.dtype,
    _157: numpy.dtype,
    _158: numpy.dtype,
    _159: numpy.dtype,
    _160: numpy.dtype,
    _161: numpy.dtype,
    _162: numpy.dtype,
    _163: numpy.dtype,
    _164: numpy.dtype,
    _165: numpy.dtype,
    _166: numpy.dtype,
    _167: numpy.dtype,
    _168: numpy.dtype,
    _169: numpy.dtype,
    _170: numpy.dtype,
    _171: numpy.dtype,
    _172: numpy.dtype,
    _173: numpy.dtype,
    _174: numpy.dtype,
    _175: numpy.dtype,
    _176: numpy.dtype,
    _177: numpy.dtype,
    _178: numpy.dtype,
    _179: numpy.dtype,
    _180: numpy.dtype,
    _181: numpy.dtype,
    _182: numpy.dtype,
    _183: numpy.dtype,
    _184: numpy.dtype,
    _185: numpy.dtype,
    _186: numpy.dtype,
    _187: numpy.dtype,
    _188: numpy.dtype,
    _189: numpy.dtype,
    _190: numpy.dtype,
    _191: numpy.dtype,
    _192: numpy.dtype,
    _193: numpy.dtype,
    _194: numpy.dtype,
    _195: numpy.dtype,
    _196: numpy.dtype,
    _197: numpy.dtype,
    _198: numpy.dtype,
    _199: numpy.dtype,
    /,
):
    """
    usage.sklearn: 1
    """
    ...


def result_type(_0: object, /, *_args: object):
    """
    usage.dask: 80
    usage.pandas: 128
    usage.scipy: 778
    usage.skimage: 7
    usage.sklearn: 20
    usage.xarray: 114
    """
    ...


@overload
def roll(a: numpy.ndarray, shift: int, axis: int):
    """
    usage.dask: 1
    usage.matplotlib: 3
    usage.scipy: 6
    usage.skimage: 8
    usage.xarray: 1
    """
    ...


@overload
def roll(a: List[Union[float, int]], shift: int):
    """
    usage.skimage: 2
    """
    ...


@overload
def roll(a: numpy.ndarray, shift: Tuple[int, int], axis: Tuple[int, int]):
    """
    usage.dask: 1
    usage.skimage: 2
    """
    ...


@overload
def roll(a: numpy.ndarray, shift: int):
    """
    usage.dask: 2
    usage.matplotlib: 1
    usage.scipy: 2
    usage.skimage: 2
    """
    ...


@overload
def roll(a: numpy.ndarray, shift: Union[numpy.ndarray, int], axis: int = ...):
    """
    usage.pandas: 10
    """
    ...


@overload
def roll(a: numpy.ndarray, shift: int, axis: None):
    """
    usage.dask: 1
    """
    ...


def roll(
    a: Union[numpy.ndarray, List[Union[float, int]]],
    shift: Union[int, numpy.ndarray, Tuple[int, int]],
    axis: Union[int, None, Tuple[int, int]] = ...,
):
    """
    usage.dask: 5
    usage.matplotlib: 4
    usage.pandas: 10
    usage.scipy: 8
    usage.skimage: 14
    usage.xarray: 1
    """
    ...


@overload
def rollaxis(a: numpy.ndarray, axis: int):
    """
    usage.dask: 1
    usage.scipy: 47
    usage.skimage: 12
    usage.sklearn: 4
    """
    ...


@overload
def rollaxis(a: numpy.ndarray, axis: int, start: int):
    """
    usage.dask: 3
    usage.scipy: 26
    usage.skimage: 2
    usage.sklearn: 1
    """
    ...


@overload
def rollaxis(a: dask.array.core.Array, axis: int, start: int):
    """
    usage.dask: 1
    """
    ...


def rollaxis(
    a: Union[numpy.ndarray, dask.array.core.Array], axis: int, start: int = ...
):
    """
    usage.dask: 5
    usage.scipy: 73
    usage.skimage: 14
    usage.sklearn: 5
    """
    ...


@overload
def roots(p: numpy.ndarray):
    """
    usage.scipy: 12
    """
    ...


@overload
def roots(p: List[float]):
    """
    usage.scipy: 2
    """
    ...


@overload
def roots(p: List[int]):
    """
    usage.scipy: 9
    """
    ...


def roots(p: Union[List[Union[float, int]], numpy.ndarray]):
    """
    usage.scipy: 23
    """
    ...


@overload
def rot90(m: numpy.ndarray, k: int):
    """
    usage.skimage: 2
    """
    ...


@overload
def rot90(m: numpy.ndarray):
    """
    usage.scipy: 5
    usage.skimage: 5
    """
    ...


def rot90(m: numpy.ndarray, k: int = ...):
    """
    usage.scipy: 5
    usage.skimage: 7
    """
    ...


@overload
def round_(a: float):
    """
    usage.matplotlib: 1
    usage.scipy: 6
    usage.skimage: 1
    """
    ...


@overload
def round_(a: List[Union[int, float]]):
    """
    usage.skimage: 1
    """
    ...


@overload
def round_(a: numpy.ndarray):
    """
    usage.dask: 2
    usage.matplotlib: 4
    usage.scipy: 6
    usage.skimage: 11
    usage.sklearn: 4
    """
    ...


@overload
def round_(a: float, decimals: int):
    """
    usage.scipy: 7
    usage.skimage: 1
    """
    ...


@overload
def round_(a: Tuple[numpy.float64, numpy.float64]):
    """
    usage.skimage: 2
    """
    ...


@overload
def round_(a: Tuple[int, int]):
    """
    usage.skimage: 1
    """
    ...


@overload
def round_(a: numpy.ndarray, decimals: int):
    """
    usage.dask: 3
    usage.matplotlib: 2
    usage.scipy: 12
    usage.skimage: 5
    """
    ...


@overload
def round_(a: Tuple[int, int, int]):
    """
    usage.skimage: 1
    """
    ...


@overload
def round_(a: Tuple[int, int, int, int]):
    """
    usage.skimage: 1
    """
    ...


@overload
def round_(a: List[int]):
    """
    usage.skimage: 1
    """
    ...


@overload
def round_(a: int):
    """
    usage.scipy: 1
    usage.skimage: 1
    """
    ...


@overload
def round_(a: numpy.float64):
    """
    usage.matplotlib: 2
    usage.scipy: 7
    usage.skimage: 1
    usage.sklearn: 5
    """
    ...


@overload
def round_(a: Tuple[numpy.int64, numpy.int64]):
    """
    usage.skimage: 1
    """
    ...


@overload
def round_(a: Tuple[numpy.int64, numpy.int64, numpy.int64]):
    """
    usage.skimage: 1
    """
    ...


@overload
def round_(a: Tuple[float, float]):
    """
    usage.skimage: 1
    """
    ...


@overload
def round_(a: object):
    """
    usage.xarray: 1
    """
    ...


@overload
def round_(a: xarray.core.dataarray.DataArray):
    """
    usage.xarray: 2
    """
    ...


@overload
def round_(
    a: object,
    decimals: int = ...,
    out: Union[pandas.core.series.Series, pandas.core.frame.DataFrame] = ...,
):
    """
    usage.pandas: 12
    """
    ...


@overload
def round_(a: int, decimals: int):
    """
    usage.scipy: 6
    """
    ...


@overload
def round_(a: numpy.ma.core.MaskedArray, decimals: int):
    """
    usage.dask: 2
    usage.scipy: 1
    """
    ...


@overload
def round_(a: scipy.stats.stats.KstestResult, decimals: int):
    """
    usage.scipy: 3
    """
    ...


@overload
def round_(a: numpy.float64, decimals: int):
    """
    usage.scipy: 1
    usage.sklearn: 2
    """
    ...


@overload
def round_(a: dask.array.core.Array):
    """
    usage.dask: 2
    """
    ...


def round_(
    a: object,
    decimals: int = ...,
    out: Union[pandas.core.series.Series, pandas.core.frame.DataFrame] = ...,
):
    """
    usage.dask: 9
    usage.matplotlib: 9
    usage.pandas: 12
    usage.scipy: 50
    usage.skimage: 30
    usage.sklearn: 11
    usage.xarray: 3
    """
    ...


@overload
def save(file: Literal["/tmp/tmpfk_q52db.npy"], arr: numpy.memmap):
    """
    usage.dask: 1
    """
    ...


@overload
def save(file: Literal["/tmp/tmp7pu_zh_l.npy"], arr: numpy.ndarray):
    """
    usage.dask: 1
    """
    ...


@overload
def save(file: Literal["/tmp/tmpd4ay6ms9.npy"], arr: numpy.ndarray):
    """
    usage.dask: 1
    """
    ...


@overload
def save(file: Literal["/tmp/tmp3jfp1gkx.npy"], arr: numpy.ndarray):
    """
    usage.dask: 1
    """
    ...


@overload
def save(file: Literal["/tmp/tmpu7vhvxgk.npy"], arr: numpy.ndarray):
    """
    usage.dask: 1
    """
    ...


@overload
def save(file: Literal["/tmp/tmpjj901750.npy"], arr: numpy.ndarray):
    """
    usage.dask: 1
    """
    ...


def save(file: str, arr: Union[numpy.ndarray, numpy.memmap]):
    """
    usage.dask: 6
    """
    ...


def savez(file: Literal["/tmp/tmpdhsm8ld3.npz"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def savez_compressed(file: Literal["/tmp/tmp1i2bbux4.npz"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def savez_compressed(file: Literal["/tmp/tmpg4wb90xw.npz"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def savez_compressed(file: Literal["/tmp/tmpnhzfk5x1.npz"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def savez_compressed(file: Literal["/tmp/tmpuy3zec9x.npz"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def savez_compressed(file: Literal["/tmp/tmphb49k4ff.npz"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def savez_compressed(file: Literal["/tmp/tmpi0xs623l.npz"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def savez_compressed(file: Literal["/tmp/tmplgjy764d.npz"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def savez_compressed(file: Literal["/tmp/tmpuapqbick.npz"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def savez_compressed(file: Literal["/tmp/tmp_caxy98g.npz"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def savez_compressed(file: Literal["/tmp/tmpjq7zk5do.npz"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def savez_compressed(file: Literal["/tmp/tmpugthn03a.npz"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def savez_compressed(file: Literal["/tmp/tmpcwwz3w6_.npz"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def savez_compressed(file: Literal["/tmp/tmpxmziq2fp.npz"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def savez_compressed(file: Literal["/tmp/tmpr1v07p0x.npz"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def savez_compressed(file: Literal["/tmp/tmp3m2kn7v_.npz"]):
    """
    usage.scipy: 1
    """
    ...


def savez_compressed(file: str):
    """
    usage.scipy: 15
    """
    ...


def sctype2char(sctype: numpy.dtype):
    """
    usage.skimage: 4
    """
    ...


@overload
def searchsorted(a: numpy.ndarray, v: int):
    """
    usage.scipy: 2
    usage.skimage: 2
    usage.sklearn: 3
    """
    ...


@overload
def searchsorted(a: numpy.ndarray, v: numpy.float64):
    """
    usage.matplotlib: 1
    usage.scipy: 13
    usage.skimage: 1
    usage.sklearn: 3
    """
    ...


@overload
def searchsorted(
    a: xarray.coding.cftimeindex.CFTimeIndex,
    v: xarray.coding.cftimeindex.CFTimeIndex,
    side: Literal["left"],
):
    """
    usage.xarray: 1
    """
    ...


@overload
def searchsorted(
    a: xarray.coding.cftimeindex.CFTimeIndex,
    v: xarray.coding.cftimeindex.CFTimeIndex,
    side: Literal["right"],
):
    """
    usage.xarray: 1
    """
    ...


@overload
def searchsorted(a: numpy.ndarray, v: numpy.ndarray):
    """
    usage.matplotlib: 2
    usage.scipy: 9
    usage.sklearn: 51
    usage.xarray: 1
    """
    ...


@overload
def searchsorted(
    a: object, v: object, sorter: range = ..., side: Literal["right"] = ...
):
    """
    usage.pandas: 24
    """
    ...


@overload
def searchsorted(a: numpy.ndarray, v: List[int]):
    """
    usage.scipy: 7
    """
    ...


@overload
def searchsorted(a: numpy.ndarray, v: float):
    """
    usage.scipy: 1
    """
    ...


@overload
def searchsorted(
    a: List[Union[float, int]],
    v: Tuple[float, float, float, float, float, float, float, float, float, float],
):
    """
    usage.scipy: 1
    """
    ...


@overload
def searchsorted(a: numpy.ndarray, v: numpy.ndarray, side: Literal["left"]):
    """
    usage.dask: 3
    usage.scipy: 3
    """
    ...


@overload
def searchsorted(a: numpy.ndarray, v: numpy.ndarray, side: Literal["right"]):
    """
    usage.dask: 3
    usage.scipy: 11
    """
    ...


@overload
def searchsorted(a: numpy.ndarray, v: List[float]):
    """
    usage.scipy: 2
    """
    ...


@overload
def searchsorted(a: numpy.ndarray, v: float, side: Literal["right"]):
    """
    usage.scipy: 1
    usage.sklearn: 2
    """
    ...


@overload
def searchsorted(
    a: numpy.ndarray, v: numpy.ma.core.MaskedArray, side: Literal["right"]
):
    """
    usage.scipy: 1
    """
    ...


@overload
def searchsorted(
    a: numpy.ma.core.MaskedArray, v: numpy.ma.core.MaskedArray, side: Literal["right"]
):
    """
    usage.scipy: 1
    """
    ...


@overload
def searchsorted(a: Tuple[int, int], v: numpy.ndarray, side: Literal["right"]):
    """
    usage.dask: 3
    """
    ...


@overload
def searchsorted(a: List[int], v: int, side: Literal["right"]):
    """
    usage.dask: 3
    """
    ...


@overload
def searchsorted(
    a: Tuple[int, int, int, int], v: numpy.ndarray, side: Literal["right"]
):
    """
    usage.dask: 1
    """
    ...


@overload
def searchsorted(a: Tuple[int], v: numpy.ndarray, side: Literal["right"]):
    """
    usage.dask: 1
    """
    ...


@overload
def searchsorted(a: Tuple[int, int, int], v: numpy.ndarray, side: Literal["right"]):
    """
    usage.dask: 1
    """
    ...


@overload
def searchsorted(
    a: Tuple[int, int, int, int, int], v: numpy.ndarray, side: Literal["right"]
):
    """
    usage.dask: 1
    """
    ...


@overload
def searchsorted(
    a: Tuple[int, int, int, int, int, int, int, int, int, int],
    v: numpy.ndarray,
    side: Literal["right"],
):
    """
    usage.dask: 1
    """
    ...


@overload
def searchsorted(a: numpy.ndarray, v: numpy.float64, side: Literal["right"]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def searchsorted(a: numpy.ndarray, v: Literal["bar"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def searchsorted(a: numpy.ndarray, v: Literal["baz"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def searchsorted(a: numpy.ndarray, v: Literal["foo"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def searchsorted(a: numpy.ndarray, v: numpy.int64):
    """
    usage.sklearn: 1
    """
    ...


@overload
def searchsorted(a: numpy.ndarray, v: Literal["label_not_present"]):
    """
    usage.sklearn: 1
    """
    ...


def searchsorted(
    a: object, v: object, side: Literal["right", "left"] = ..., sorter: range = ...
):
    """
    usage.dask: 17
    usage.matplotlib: 3
    usage.pandas: 24
    usage.scipy: 52
    usage.skimage: 3
    usage.sklearn: 66
    usage.xarray: 3
    """
    ...


@overload
def select(condlist: List[numpy.ndarray], choicelist: List[numpy.ndarray]):
    """
    usage.scipy: 1
    """
    ...


@overload
def select(condlist: List[numpy.bool_], choicelist: List[numpy.float64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def select(
    condlist: List[numpy.ndarray], choicelist: List[numpy.ndarray], default: int
):
    """
    usage.scipy: 4
    """
    ...


@overload
def select(
    condlist: List[numpy.ndarray],
    choicelist: List[Union[numpy.ndarray, float]],
    default: int,
):
    """
    usage.scipy: 1
    """
    ...


def select(
    condlist: List[Union[numpy.bool_, numpy.ndarray]],
    choicelist: List[Union[float, numpy.float64, numpy.ndarray]],
    default: int = ...,
):
    """
    usage.scipy: 7
    """
    ...


@overload
def set_printoptions(precision: int):
    """
    usage.skimage: 1
    """
    ...


@overload
def set_printoptions(precision: int, threshold: int, edgeitems: int, linewidth: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def set_printoptions(
    precision: int,
    threshold: int,
    edgeitems: int,
    linewidth: int,
    suppress: bool,
    nanstr: Literal["nan"],
    infstr: Literal["inf"],
    formatter: None,
    sign: Literal["-"],
    floatmode: Literal["maxprec"],
    *,
    legacy: bool,
):
    """
    usage.sklearn: 1
    usage.xarray: 1
    """
    ...


@overload
def set_printoptions(threshold: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def set_printoptions(precision: int, threshold: int, edgeitems: int):
    """
    usage.sklearn: 1
    """
    ...


def set_printoptions(
    precision: int = ...,
    threshold: int = ...,
    edgeitems: int = ...,
    linewidth: int = ...,
    suppress: bool = ...,
    nanstr: Literal["nan"] = ...,
    infstr: Literal["inf"] = ...,
    formatter: None = ...,
    sign: Literal["-"] = ...,
    floatmode: Literal["maxprec"] = ...,
    *,
    legacy: bool = ...,
):
    """
    usage.skimage: 1
    usage.sklearn: 2
    usage.xarray: 3
    """
    ...


@overload
def setdiff1d(ar1: numpy.ndarray, ar2: numpy.ndarray, assume_unique: bool):
    """
    usage.pandas: 3
    usage.scipy: 1
    usage.sklearn: 24
    """
    ...


@overload
def setdiff1d(ar1: numpy.ndarray, ar2: numpy.ndarray):
    """
    usage.sklearn: 9
    """
    ...


@overload
def setdiff1d(ar1: numpy.ndarray, ar2: List[int], assume_unique: bool):
    """
    usage.sklearn: 6
    """
    ...


@overload
def setdiff1d(
    ar1: numpy.ndarray, ar2: List[Literal["1", "2", "0"]], assume_unique: bool
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def setdiff1d(
    ar1: numpy.ndarray, ar2: List[Literal["3", "1", "2", "0"]], assume_unique: bool
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def setdiff1d(
    ar1: numpy.ndarray, ar2: List[Literal["bird", "ant"]], assume_unique: bool
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def setdiff1d(
    ar1: numpy.ndarray, ar2: List[Literal["cat", "ant"]], assume_unique: bool
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def setdiff1d(
    ar1: numpy.ndarray, ar2: List[Literal["bird", "cat"]], assume_unique: bool
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def setdiff1d(ar1: numpy.ndarray, ar2: List[Literal["ant"]], assume_unique: bool):
    """
    usage.sklearn: 1
    """
    ...


@overload
def setdiff1d(ar1: numpy.ndarray, ar2: List[Literal["bird"]], assume_unique: bool):
    """
    usage.sklearn: 1
    """
    ...


@overload
def setdiff1d(ar1: numpy.ndarray, ar2: List[Literal["cat"]], assume_unique: bool):
    """
    usage.sklearn: 1
    """
    ...


@overload
def setdiff1d(
    ar1: numpy.ndarray, ar2: List[Literal["spam", "eggs"]], assume_unique: bool
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def setdiff1d(ar1: numpy.ndarray, ar2: List[int]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def setdiff1d(ar1: List[int], ar2: numpy.ndarray):
    """
    usage.sklearn: 2
    """
    ...


def setdiff1d(
    ar1: Union[numpy.ndarray, List[int]],
    ar2: Union[List[Union[int, str]], numpy.ndarray],
    assume_unique: bool = ...,
):
    """
    usage.pandas: 3
    usage.scipy: 1
    usage.sklearn: 52
    """
    ...


@overload
def seterr(invalid: Literal["ignore"]):
    """
    usage.skimage: 1
    """
    ...


@overload
def seterr(
    divide: Literal["warn"],
    over: Literal["warn"],
    under: Literal["ignore"],
    invalid: Literal["warn"],
):
    """
    usage.dask: 1
    usage.skimage: 1
    usage.sklearn: 3
    """
    ...


@overload
def seterr(all: Literal["ignore"]):
    """
    usage.dask: 1
    usage.sklearn: 2
    """
    ...


@overload
def seterr(all: Literal["raise"]):
    """
    usage.sklearn: 1
    """
    ...


def seterr(
    divide: Literal["warn"] = ...,
    over: Literal["warn"] = ...,
    under: Literal["ignore"] = ...,
    invalid: Literal["warn", "ignore"] = ...,
):
    """
    usage.dask: 2
    usage.skimage: 2
    usage.sklearn: 6
    """
    ...


@overload
def shape(a: numpy.ndarray):
    """
    usage.matplotlib: 9
    usage.scipy: 180
    usage.skimage: 1
    usage.sklearn: 22
    usage.xarray: 9
    """
    ...


@overload
def shape(a: numpy.ma.core.MaskedArray):
    """
    usage.matplotlib: 1
    usage.xarray: 3
    """
    ...


@overload
def shape(a: int):
    """
    usage.scipy: 4
    """
    ...


@overload
def shape(a: List[Union[float, int]]):
    """
    usage.scipy: 2
    """
    ...


@overload
def shape(a: scipy.sparse.csr.csr_matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def shape(a: float):
    """
    usage.scipy: 5
    """
    ...


@overload
def shape(a: List[numpy.ndarray]):
    """
    usage.matplotlib: 10
    usage.scipy: 1
    """
    ...


@overload
def shape(a: numpy.float64):
    """
    usage.scipy: 3
    """
    ...


@overload
def shape(a: numpy.bool_):
    """
    usage.scipy: 18
    """
    ...


@overload
def shape(a: numpy.int64):
    """
    usage.scipy: 18
    """
    ...


@overload
def shape(a: List[int]):
    """
    usage.matplotlib: 6
    usage.scipy: 4
    """
    ...


@overload
def shape(a: List[float]):
    """
    usage.matplotlib: 6
    usage.scipy: 5
    """
    ...


@overload
def shape(a: List[Union[int, float]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def shape(a: List[numpy.float64]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def shape(a: List[Union[float, None]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def shape(a: List[List[int]]):
    """
    usage.matplotlib: 4
    """
    ...


@overload
def shape(a: List[list]):
    """
    usage.matplotlib: 3
    """
    ...


@overload
def shape(a: list):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def shape(a: List[numpy.int64]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def shape(a: dask.array.core.Array):
    """
    usage.dask: 1
    """
    ...


def shape(a: object):
    """
    usage.dask: 1
    usage.matplotlib: 46
    usage.scipy: 242
    usage.skimage: 1
    usage.sklearn: 22
    usage.xarray: 12
    """
    ...


def shares_memory(_0: numpy.ndarray, _1: numpy.ndarray, /):
    """
    usage.pandas: 11
    """
    ...


@overload
def sinc(x: numpy.ndarray):
    """
    usage.dask: 3
    usage.scipy: 6
    """
    ...


@overload
def sinc(x: List[int]):
    """
    usage.scipy: 1
    """
    ...


@overload
def sinc(x: float):
    """
    usage.scipy: 1
    """
    ...


@overload
def sinc(x: pandas.core.series.Series):
    """
    usage.dask: 5
    """
    ...


@overload
def sinc(x: dask.dataframe.core.Series):
    """
    usage.dask: 2
    """
    ...


@overload
def sinc(x: pandas.core.frame.DataFrame):
    """
    usage.dask: 5
    """
    ...


@overload
def sinc(x: dask.dataframe.core.DataFrame):
    """
    usage.dask: 2
    """
    ...


def sinc(x: object):
    """
    usage.dask: 17
    usage.scipy: 8
    """
    ...


@overload
def size(a: Union[pandas.core.series.Series, numpy.ndarray]):
    """
    usage.pandas: 3
    """
    ...


@overload
def size(a: numpy.ndarray):
    """
    usage.matplotlib: 6
    usage.scipy: 33
    usage.sklearn: 19
    """
    ...


@overload
def size(a: numpy.ndarray, axis: int):
    """
    usage.matplotlib: 4
    usage.scipy: 7
    usage.sklearn: 1
    """
    ...


@overload
def size(a: numpy.float64):
    """
    usage.scipy: 3
    """
    ...


@overload
def size(a: int):
    """
    usage.scipy: 2
    """
    ...


@overload
def size(a: float):
    """
    usage.scipy: 1
    """
    ...


@overload
def size(a: complex):
    """
    usage.scipy: 1
    """
    ...


@overload
def size(a: List[float]):
    """
    usage.scipy: 3
    """
    ...


@overload
def size(a: List[Union[int, float]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def size(a: List[int]):
    """
    usage.matplotlib: 3
    usage.scipy: 2
    usage.sklearn: 2
    """
    ...


@overload
def size(a: List[complex]):
    """
    usage.scipy: 1
    """
    ...


@overload
def size(a: List[numpy.float64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def size(a: numpy.complex128):
    """
    usage.scipy: 1
    """
    ...


@overload
def size(a: list):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def size(a: List[List[Literal["2017-01-01T00:00:00", "2017-01-02T00:00:00"]]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def size(a: List[List[str]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def size(a: List[list]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def size(a: Tuple[numpy.ndarray, numpy.ndarray]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def size(a: List[List[int]]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def size(a: List[Union[range, list]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def size(a: List[range]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def size(a: List[Union[float, int]]):
    """
    usage.matplotlib: 1
    """
    ...


def size(a: object, axis: int = ...):
    """
    usage.matplotlib: 25
    usage.pandas: 3
    usage.scipy: 56
    usage.sklearn: 22
    """
    ...


@overload
def sort(a: numpy.ndarray):
    """
    usage.dask: 6
    usage.matplotlib: 4
    usage.pandas: 33
    usage.scipy: 163
    usage.skimage: 13
    usage.sklearn: 39
    usage.xarray: 2
    """
    ...


@overload
def sort(a: numpy.ndarray, axis: int):
    """
    usage.dask: 7
    usage.scipy: 1
    usage.skimage: 1
    usage.sklearn: 3
    """
    ...


@overload
def sort(a: List[Union[int, complex]]):
    """
    usage.scipy: 4
    """
    ...


@overload
def sort(a: List[Union[complex, float]]):
    """
    usage.scipy: 2
    """
    ...


@overload
def sort(a: List[complex]):
    """
    usage.scipy: 13
    """
    ...


@overload
def sort(a: List[Union[complex, int]]):
    """
    usage.scipy: 4
    """
    ...


@overload
def sort(a: List[Union[numpy.complex128, complex]]):
    """
    usage.scipy: 3
    """
    ...


@overload
def sort(a: List[float]):
    """
    usage.scipy: 6
    usage.sklearn: 3
    """
    ...


@overload
def sort(a: List[Union[float, complex]]):
    """
    usage.scipy: 8
    """
    ...


@overload
def sort(a: numpy.ndarray, axis: None):
    """
    usage.scipy: 2
    """
    ...


@overload
def sort(a: numpy.ma.core.MaskedArray):
    """
    usage.scipy: 2
    """
    ...


@overload
def sort(a: List[int]):
    """
    usage.scipy: 5
    usage.sklearn: 1
    """
    ...


@overload
def sort(a: List[numpy.float64]):
    """
    usage.scipy: 2
    usage.sklearn: 1
    """
    ...


@overload
def sort(a: list):
    """
    usage.scipy: 2
    """
    ...


@overload
def sort(a: dask.array.core.Array):
    """
    usage.dask: 1
    """
    ...


@overload
def sort(a: List[Union[int, float]]):
    """
    usage.sklearn: 1
    """
    ...


def sort(
    a: Union[
        List[Union[numpy.complex128, float, complex, int, numpy.float64]],
        numpy.ndarray,
        numpy.ma.core.MaskedArray,
        dask.array.core.Array,
    ],
    axis: Union[int, None] = ...,
):
    """
    usage.dask: 14
    usage.matplotlib: 4
    usage.pandas: 33
    usage.scipy: 217
    usage.skimage: 14
    usage.sklearn: 48
    usage.xarray: 2
    """
    ...


def sort_complex(a: numpy.ndarray):
    """
    usage.scipy: 2
    """
    ...


@overload
def split(ary: numpy.ndarray, indices_or_sections: int):
    """
    usage.skimage: 1
    """
    ...


@overload
def split(ary: numpy.ndarray, indices_or_sections: List[int], axis: int):
    """
    usage.pandas: 4
    usage.scipy: 8
    """
    ...


@overload
def split(ary: numpy.ndarray, indices_or_sections: numpy.ndarray):
    """
    usage.matplotlib: 2
    usage.sklearn: 7
    """
    ...


def split(
    ary: numpy.ndarray,
    indices_or_sections: Union[numpy.ndarray, int, List[int]],
    axis: int = ...,
):
    """
    usage.matplotlib: 2
    usage.pandas: 4
    usage.scipy: 8
    usage.skimage: 1
    usage.sklearn: 7
    """
    ...


@overload
def squeeze(a: numpy.ndarray):
    """
    usage.scipy: 21
    usage.skimage: 11
    usage.sklearn: 16
    """
    ...


@overload
def squeeze(a: numpy.ndarray, axis: int):
    """
    usage.dask: 1
    usage.scipy: 1
    usage.skimage: 7
    """
    ...


@overload
def squeeze(a: numpy.ndarray, axis: Tuple[int]):
    """
    usage.xarray: 1
    """
    ...


@overload
def squeeze(a: numpy.ndarray, axis: Tuple[int, int]):
    """
    usage.dask: 1
    usage.scipy: 1
    usage.xarray: 1
    """
    ...


@overload
def squeeze(
    a: Union[pandas.core.frame.DataFrame, numpy.ndarray, pandas.core.series.Series]
):
    """
    usage.pandas: 5
    """
    ...


@overload
def squeeze(a: numpy.float64):
    """
    usage.scipy: 6
    usage.sklearn: 1
    """
    ...


@overload
def squeeze(a: float):
    """
    usage.scipy: 3
    usage.sklearn: 1
    """
    ...


@overload
def squeeze(a: numpy.ndarray, axis: None):
    """
    usage.dask: 1
    usage.scipy: 2
    """
    ...


@overload
def squeeze(a: int, axis: None):
    """
    usage.scipy: 1
    """
    ...


@overload
def squeeze(a: List[float]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def squeeze(a: int):
    """
    usage.sklearn: 1
    """
    ...


@overload
def squeeze(a: List[int]):
    """
    usage.sklearn: 2
    """
    ...


def squeeze(a: object, axis: Union[int, None, Tuple[int, ...]] = ...):
    """
    usage.dask: 3
    usage.pandas: 5
    usage.scipy: 35
    usage.skimage: 18
    usage.sklearn: 23
    usage.xarray: 2
    """
    ...


@overload
def stack(arrays: List[numpy.ndarray], axis: int):
    """
    usage.dask: 21
    usage.matplotlib: 8
    usage.skimage: 12
    usage.xarray: 24
    """
    ...


@overload
def stack(arrays: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray], axis: int):
    """
    usage.skimage: 6
    """
    ...


@overload
def stack(arrays: List[numpy.float64], axis: int):
    """
    usage.skimage: 2
    """
    ...


@overload
def stack(arrays: Tuple[numpy.ndarray, numpy.float64, numpy.float64], axis: int):
    """
    usage.skimage: 2
    """
    ...


@overload
def stack(arrays: Tuple[numpy.float64, numpy.ndarray, numpy.float64], axis: int):
    """
    usage.skimage: 2
    """
    ...


@overload
def stack(arrays: Tuple[numpy.float64, numpy.float64, numpy.ndarray], axis: int):
    """
    usage.skimage: 2
    """
    ...


@overload
def stack(arrays: List[numpy.ndarray]):
    """
    usage.dask: 2
    usage.scipy: 1
    usage.skimage: 2
    usage.xarray: 2
    """
    ...


@overload
def stack(arrays: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray]):
    """
    usage.xarray: 1
    """
    ...


@overload
def stack(arrays: List[xarray.core.dataarray.DataArray], axis: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def stack(arrays: List[float], axis: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def stack(arrays: List[sparse._coo.core.COO], axis: int):
    """
    usage.xarray: 2
    """
    ...


@overload
def stack(arrays: list, axis: int):
    """
    usage.dask: 2
    usage.xarray: 3
    """
    ...


@overload
def stack(arrays: Tuple[numpy.ndarray, numpy.ndarray]):
    """
    usage.dask: 1
    usage.scipy: 2
    """
    ...


@overload
def stack(arrays: Tuple[numpy.ndarray, numpy.ndarray], axis: int):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def stack(arrays: List[dask.array.core.Array]):
    """
    usage.dask: 2
    """
    ...


@overload
def stack(arrays: list):
    """
    usage.dask: 1
    """
    ...


@overload
def stack(arrays: List[numpy.ma.core.MaskedArray], axis: int):
    """
    usage.dask: 2
    """
    ...


@overload
def stack(arrays: Tuple[numpy.ndarray]):
    """
    usage.dask: 1
    """
    ...


def stack(
    arrays: Union[list, Tuple[Union[numpy.ndarray, numpy.float64], ...]],
    axis: int = ...,
):
    """
    usage.dask: 32
    usage.matplotlib: 10
    usage.scipy: 3
    usage.skimage: 28
    usage.xarray: 34
    """
    ...


@overload
def std(a: numpy.ndarray):
    """
    usage.dask: 9
    usage.scipy: 4
    usage.skimage: 1
    usage.sklearn: 8
    usage.xarray: 1
    """
    ...


@overload
def std(a: numpy.ndarray, axis: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def std(a: object, axis: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def std(a: numpy.ndarray, axis: int):
    """
    usage.dask: 9
    usage.sklearn: 6
    usage.xarray: 3
    """
    ...


@overload
def std(a: object, axis: int):
    """
    usage.xarray: 2
    """
    ...


@overload
def std(a: object):
    """
    usage.xarray: 1
    """
    ...


@overload
def std(a: xarray.core.dataarray.DataArray):
    """
    usage.xarray: 1
    """
    ...


@overload
def std(a: numpy.ndarray, axis: None, dtype: None, ddof: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def std(a: object, axis: None, dtype: None, ddof: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def std(a: xarray.core.dataset.Dataset):
    """
    usage.xarray: 1
    """
    ...


@overload
def std(a: object, axis: int, dtype: None, ddof: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def std(a: numpy.ndarray, axis: int, dtype: None, ddof: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def std(a: numpy.ndarray, axis: Tuple[int, int]):
    """
    usage.dask: 1
    usage.xarray: 1
    """
    ...


@overload
def std(
    a: Union[numpy.ndarray, pandas.core.series.Series],
    axis: Union[None, int] = ...,
    ddof: int = ...,
):
    """
    usage.pandas: 20
    """
    ...


@overload
def std(a: list):
    """
    usage.scipy: 1
    """
    ...


@overload
def std(a: numpy.ndarray, axis: int, ddof: int):
    """
    usage.scipy: 6
    """
    ...


@overload
def std(a: numpy.ndarray, axis: None, ddof: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def std(a: numpy.ndarray, axis: Tuple[int, int], ddof: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def std(a: numpy.ma.core.MaskedArray, axis: int, ddof: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def std(a: numpy.ma.core.MaskedArray):
    """
    usage.dask: 3
    """
    ...


@overload
def std(a: numpy.ma.core.MaskedArray, axis: int):
    """
    usage.dask: 6
    """
    ...


@overload
def std(a: numpy.ma.core.MaskedArray, keepdims: bool):
    """
    usage.dask: 2
    """
    ...


@overload
def std(a: numpy.ma.core.MaskedArray, axis: int, keepdims: bool):
    """
    usage.dask: 4
    """
    ...


@overload
def std(a: numpy.ndarray, keepdims: bool):
    """
    usage.dask: 5
    """
    ...


@overload
def std(a: numpy.ndarray, axis: Tuple[None, ...]):
    """
    usage.dask: 3
    """
    ...


@overload
def std(a: numpy.ndarray, dtype: Literal["f8"]):
    """
    usage.dask: 2
    """
    ...


@overload
def std(a: numpy.ndarray, dtype: Literal["i8"]):
    """
    usage.dask: 2
    """
    ...


@overload
def std(a: numpy.ndarray, axis: int, keepdims: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def std(a: numpy.ndarray, axis: Tuple[None, ...], keepdims: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def std(a: List[int]):
    """
    usage.dask: 1
    """
    ...


@overload
def std(
    a: dask.dataframe.core.DataFrame,
    axis: int,
    out: dask.dataframe.core.Series,
    ddof: int,
):
    """
    usage.dask: 1
    """
    ...


@overload
def std(
    a: dask.dataframe.core.Series,
    axis: None,
    out: dask.dataframe.core.Scalar,
    ddof: int,
):
    """
    usage.dask: 1
    """
    ...


@overload
def std(a: pandas.core.series.Series, ddof: int):
    """
    usage.dask: 2
    """
    ...


@overload
def std(a: numpy.ndarray, ddof: int):
    """
    usage.dask: 2
    """
    ...


def std(
    a: object,
    axis: Union[int, None, Tuple[Union[None, int], ...]] = ...,
    out: Union[dask.dataframe.core.Scalar, dask.dataframe.core.Series] = ...,
    keepdims: bool = ...,
    dtype: Union[Literal["i8", "f8"], None] = ...,
    ddof: int = ...,
):
    """
    usage.dask: 55
    usage.pandas: 20
    usage.scipy: 14
    usage.skimage: 1
    usage.sklearn: 14
    usage.xarray: 16
    """
    ...


@overload
def sum(a: numpy.ndarray):
    """
    usage.dask: 16
    usage.matplotlib: 13
    usage.scipy: 181
    usage.skimage: 91
    usage.sklearn: 250
    usage.xarray: 2
    """
    ...


@overload
def sum(a: numpy.ndarray, axis: int):
    """
    usage.dask: 7
    usage.matplotlib: 14
    usage.scipy: 128
    usage.skimage: 14
    usage.sklearn: 105
    usage.xarray: 9
    """
    ...


@overload
def sum(a: List[numpy.ndarray], axis: int):
    """
    usage.skimage: 6
    """
    ...


@overload
def sum(a: Tuple[int, int]):
    """
    usage.dask: 1
    usage.skimage: 1
    """
    ...


@overload
def sum(a: Tuple[int, int, int]):
    """
    usage.dask: 1
    usage.skimage: 1
    usage.sklearn: 1
    """
    ...


@overload
def sum(a: numpy.ndarray, axis: Tuple[int, int]):
    """
    usage.dask: 2
    usage.scipy: 1
    usage.skimage: 1
    usage.xarray: 4
    """
    ...


@overload
def sum(a: numpy.ndarray, axis: Tuple[int]):
    """
    usage.dask: 1
    usage.xarray: 2
    """
    ...


@overload
def sum(a: dask.array.core.Array, axis: Tuple[int]):
    """
    usage.xarray: 1
    """
    ...


@overload
def sum(a: numpy.ndarray, axis: None):
    """
    usage.scipy: 2
    usage.xarray: 6
    """
    ...


@overload
def sum(a: numpy.ndarray, axis: Tuple[int, int], dtype: None):
    """
    usage.xarray: 3
    """
    ...


@overload
def sum(a: numpy.ndarray, axis: None, dtype: None):
    """
    usage.scipy: 1
    usage.xarray: 4
    """
    ...


@overload
def sum(a: xarray.core.dataarray.DataArray):
    """
    usage.xarray: 3
    """
    ...


@overload
def sum(a: numpy.ndarray, axis: int, dtype: None):
    """
    usage.scipy: 1
    usage.xarray: 4
    """
    ...


@overload
def sum(a: numpy.ndarray, axis: Tuple[None, ...]):
    """
    usage.dask: 4
    usage.xarray: 1
    """
    ...


@overload
def sum(a: numpy.ndarray, axis: int, keepdims: bool):
    """
    usage.dask: 1
    usage.scipy: 5
    usage.sklearn: 1
    usage.xarray: 1
    """
    ...


@overload
def sum(a: numpy.bool_, axis: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def sum(a: List[Tuple[int, int]], axis: int):
    """
    usage.xarray: 2
    """
    ...


@overload
def sum(a: numpy.ndarray, axis: None, dtype: Type[float]):
    """
    usage.xarray: 3
    """
    ...


@overload
def sum(a: dask.array.core.Array, axis: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def sum(a: numpy.ndarray, axis: None, dtype: Type[float], keepdims: bool):
    """
    usage.xarray: 2
    """
    ...


@overload
def sum(a: numpy.ndarray, axis: None, dtype: None, keepdims: bool):
    """
    usage.xarray: 1
    """
    ...


@overload
def sum(a: numpy.ndarray, axis: int, dtype: Type[float]):
    """
    usage.xarray: 3
    """
    ...


@overload
def sum(a: dask.array.core.Array, axis: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def sum(a: numpy.ndarray, axis: int, dtype: Type[float], keepdims: bool):
    """
    usage.xarray: 2
    """
    ...


@overload
def sum(a: numpy.ndarray, axis: int, dtype: None, keepdims: bool):
    """
    usage.xarray: 1
    """
    ...


@overload
def sum(a: sparse._coo.core.COO, axis: Tuple[int]):
    """
    usage.xarray: 2
    """
    ...


@overload
def sum(a: sparse._coo.core.COO, axis: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def sum(a: sparse._coo.core.COO, axis: int):
    """
    usage.xarray: 2
    """
    ...


@overload
def sum(a: sparse._coo.core.COO, axis: None, dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def sum(a: xarray.core.dataarray.DataArray, axis: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def sum(a: sparse._coo.core.COO, axis: int, dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def sum(a: object, axis: None, dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def sum(a: object, axis: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def sum(a: object):
    """
    usage.dask: 1
    usage.xarray: 1
    """
    ...


@overload
def sum(a: object, axis: int):
    """
    usage.xarray: 2
    """
    ...


@overload
def sum(a: xarray.core.dataset.Dataset):
    """
    usage.xarray: 1
    """
    ...


@overload
def sum(a: object, axis: int, dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def sum(a: numpy.ndarray, axis: Tuple[int], dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def sum(a: numpy.ndarray, axis: Tuple[int, int, int], dtype: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def sum(a: numpy.ndarray, axis: Tuple[int, int, int]):
    """
    usage.xarray: 1
    """
    ...


@overload
def sum(
    a: object,
    axis: Union[int, None] = ...,
    dtype: Type[numpy.int64] = ...,
    out: numpy.float64 = ...,
    initial: int = ...,
    keepdims: bool = ...,
):
    """
    usage.pandas: 38
    """
    ...


@overload
def sum(a: numpy.ndarray, dtype: Type[int]):
    """
    usage.scipy: 2
    """
    ...


@overload
def sum(a: List[numpy.float64]):
    """
    usage.scipy: 23
    usage.sklearn: 3
    """
    ...


@overload
def sum(a: List[float]):
    """
    usage.matplotlib: 2
    usage.scipy: 5
    """
    ...


@overload
def sum(a: scipy.sparse.csr.csr_matrix, axis: int):
    """
    usage.scipy: 5
    """
    ...


@overload
def sum(a: numpy.poly1d):
    """
    usage.scipy: 1
    """
    ...


@overload
def sum(a: numpy.matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def sum(a: scipy.sparse.csr.csr_matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def sum(a: scipy.sparse.csc.csc_matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def sum(a: scipy.sparse.dok.dok_matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def sum(a: scipy.sparse.lil.lil_matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def sum(a: scipy.sparse.coo.coo_matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def sum(a: scipy.sparse.dia.dia_matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def sum(a: scipy.sparse.bsr.bsr_matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def sum(a: List[int]):
    """
    usage.scipy: 3
    usage.sklearn: 6
    """
    ...


@overload
def sum(a: numpy.ndarray, axis: None, keepdims: bool):
    """
    usage.scipy: 2
    """
    ...


@overload
def sum(a: numpy.ndarray, axis: Tuple[int, int], keepdims: bool):
    """
    usage.dask: 1
    usage.scipy: 2
    """
    ...


@overload
def sum(a: numpy.float64, axis: None, keepdims: bool):
    """
    usage.scipy: 2
    """
    ...


@overload
def sum(a: List[Union[int, float]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def sum(a: numpy.float64):
    """
    usage.scipy: 1
    usage.sklearn: 2
    """
    ...


@overload
def sum(a: numpy.ma.core.MaskedArray, axis: None, dtype: None):
    """
    usage.scipy: 1
    """
    ...


@overload
def sum(a: numpy.ma.core.MaskedArray, axis: int, dtype: None):
    """
    usage.scipy: 1
    """
    ...


@overload
def sum(a: List[numpy.int64], dtype: Type[float]):
    """
    usage.scipy: 54
    """
    ...


@overload
def sum(a: list, dtype: Type[float]):
    """
    usage.scipy: 6
    """
    ...


@overload
def sum(a: list):
    """
    usage.scipy: 2
    """
    ...


@overload
def sum(a: numpy.ma.core.MaskedArray):
    """
    usage.dask: 3
    usage.matplotlib: 1
    usage.scipy: 2
    """
    ...


@overload
def sum(a: numpy.matrix, axis: int, dtype: None):
    """
    usage.scipy: 1
    """
    ...


@overload
def sum(a: numpy.ndarray, dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def sum(a: numpy.ndarray, axis: Tuple[int], dtype: numpy.dtype, keepdims: bool):
    """
    usage.dask: 25
    """
    ...


@overload
def sum(a: numpy.ndarray, axis: int, dtype: Literal["u4"]):
    """
    usage.dask: 1
    """
    ...


@overload
def sum(a: List[numpy.int64]):
    """
    usage.dask: 1
    """
    ...


@overload
def sum(a: numpy.ndarray, axis: Tuple[int, int], dtype: numpy.dtype, keepdims: bool):
    """
    usage.dask: 17
    """
    ...


@overload
def sum(a: dask.array.core.Array):
    """
    usage.dask: 4
    """
    ...


@overload
def sum(a: object, axis: Tuple[int], dtype: numpy.dtype, keepdims: bool):
    """
    usage.dask: 2
    """
    ...


@overload
def sum(a: object, axis: Tuple[int, int], dtype: numpy.dtype, keepdims: bool):
    """
    usage.dask: 5
    """
    ...


@overload
def sum(
    a: numpy.ndarray, axis: Tuple[int, int, int], dtype: numpy.dtype, keepdims: bool
):
    """
    usage.dask: 10
    """
    ...


@overload
def sum(a: numpy.ma.core.MaskedArray, axis: int):
    """
    usage.dask: 6
    """
    ...


@overload
def sum(a: numpy.ma.core.MaskedArray, keepdims: bool):
    """
    usage.dask: 2
    """
    ...


@overload
def sum(a: numpy.ma.core.MaskedArray, axis: int, keepdims: bool):
    """
    usage.dask: 4
    """
    ...


@overload
def sum(
    a: numpy.ma.core.MaskedArray,
    axis: Tuple[int, int],
    dtype: numpy.dtype,
    keepdims: bool,
):
    """
    usage.dask: 10
    """
    ...


@overload
def sum(
    a: numpy.ma.core.MaskedArray, axis: Tuple[int], dtype: numpy.dtype, keepdims: bool
):
    """
    usage.dask: 10
    """
    ...


@overload
def sum(a: numpy.ma.core.MaskedArray, axis: Tuple[int, int], keepdims: bool):
    """
    usage.dask: 2
    """
    ...


@overload
def sum(
    a: numpy.ma.core.MaskedArray,
    axis: Tuple[int, int],
    dtype: Literal["f8"],
    keepdims: bool,
):
    """
    usage.dask: 1
    """
    ...


@overload
def sum(a: numpy.ma.core.MaskedArray, axis: Tuple[int], keepdims: bool):
    """
    usage.dask: 2
    """
    ...


@overload
def sum(
    a: numpy.ma.core.MaskedArray, axis: Tuple[int], dtype: Literal["f8"], keepdims: bool
):
    """
    usage.dask: 1
    """
    ...


@overload
def sum(a: numpy.ndarray, axis: Tuple[None, ...], dtype: numpy.dtype, keepdims: bool):
    """
    usage.dask: 15
    """
    ...


@overload
def sum(a: numpy.ndarray, axis: Tuple[None, ...], dtype: Literal["f4"], keepdims: bool):
    """
    usage.dask: 2
    """
    ...


@overload
def sum(a: numpy.ndarray, axis: int, dtype: Literal["f4"], keepdims: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def sum(a: numpy.ndarray, axis: Tuple[int], dtype: Literal["f4"], keepdims: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def sum(a: numpy.ndarray, axis: Tuple[int, int], dtype: Literal["f4"], keepdims: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def sum(a: numpy.ndarray, axis: None, dtype: Literal["f4"], keepdims: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def sum(a: numpy.ndarray, axis: Tuple[None, ...], dtype: Literal["i4"], keepdims: bool):
    """
    usage.dask: 2
    """
    ...


@overload
def sum(a: numpy.ndarray, axis: int, dtype: Literal["i4"], keepdims: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def sum(a: numpy.ndarray, axis: Tuple[int], dtype: Literal["i4"], keepdims: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def sum(a: numpy.ndarray, axis: Tuple[int, int], dtype: Literal["i4"], keepdims: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def sum(a: numpy.ndarray, axis: None, dtype: Literal["i4"], keepdims: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def sum(a: numpy.ndarray, keepdims: bool):
    """
    usage.dask: 5
    """
    ...


@overload
def sum(a: numpy.ndarray, dtype: Literal["f8"]):
    """
    usage.dask: 2
    """
    ...


@overload
def sum(a: numpy.ndarray, dtype: Literal["i8"]):
    """
    usage.dask: 2
    """
    ...


@overload
def sum(a: numpy.ndarray, axis: Tuple[int], dtype: Literal["f8"], keepdims: bool):
    """
    usage.dask: 11
    """
    ...


@overload
def sum(a: numpy.ndarray, axis: Tuple[int], dtype: Literal["i8"], keepdims: bool):
    """
    usage.dask: 10
    """
    ...


@overload
def sum(a: numpy.ndarray, axis: Tuple[int], keepdims: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def sum(a: numpy.ndarray, axis: Tuple[None, ...], keepdims: bool):
    """
    usage.dask: 2
    """
    ...


@overload
def sum(a: numpy.ndarray, axis: Tuple[int, int], dtype: Literal["f8"], keepdims: bool):
    """
    usage.dask: 2
    """
    ...


@overload
def sum(a: dask.array.core.Array, axis: int, out: dask.array.core.Array):
    """
    usage.dask: 1
    """
    ...


@overload
def sum(a: Tuple[int]):
    """
    usage.dask: 1
    """
    ...


@overload
def sum(a: Tuple[int, int, int, int, int]):
    """
    usage.dask: 1
    """
    ...


@overload
def sum(a: pandas.core.series.Series):
    """
    usage.dask: 3
    """
    ...


@overload
def sum(a: dask.dataframe.core.DataFrame, axis: int, out: dask.dataframe.core.Series):
    """
    usage.dask: 1
    """
    ...


@overload
def sum(a: dask.dataframe.core.Series, axis: None, out: dask.dataframe.core.Scalar):
    """
    usage.dask: 1
    """
    ...


@overload
def sum(a: dask.dataframe.core.Series):
    """
    usage.dask: 2
    """
    ...


@overload
def sum(a: dask.dataframe.core.DataFrame):
    """
    usage.dask: 2
    """
    ...


@overload
def sum(a: pandas.core.frame.DataFrame):
    """
    usage.dask: 1
    """
    ...


@overload
def sum(a: float):
    """
    usage.sklearn: 1
    """
    ...


@overload
def sum(a: int):
    """
    usage.sklearn: 1
    """
    ...


@overload
def sum(a: numpy.ndarray, axis: None, dtype: Type[numpy.float64]):
    """
    usage.sklearn: 3
    """
    ...


@overload
def sum(a: Tuple[float]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def sum(a: numpy.ndarray, dtype: Type[numpy.float64]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def sum(a: Tuple[float, float, float, float, float, float, float, float, float, float]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def sum(a: Tuple[float, float, float, float, float, float]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def sum(a: Tuple[float, float, float]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def sum(a: numpy.ndarray, axis: int, out: numpy.ndarray):
    """
    usage.sklearn: 1
    """
    ...


@overload
def sum(a: numpy.ndarray, axis: int, dtype: Type[numpy.float64]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def sum(a: List[List[float]], axis: int):
    """
    usage.sklearn: 10
    """
    ...


@overload
def sum(a: numpy.ndarray, axis: int, dtype: Type[int]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def sum(a: numpy.float32):
    """
    usage.sklearn: 1
    """
    ...


@overload
def sum(a: Tuple[float, float]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def sum(a: List[int], axis: None, dtype: Type[numpy.float64]):
    """
    usage.sklearn: 1
    """
    ...


def sum(
    a: object,
    axis: Union[None, int, Tuple[Union[None, int], ...]] = ...,
    out: Union[
        numpy.ndarray,
        numpy.float64,
        dask.dataframe.core.Scalar,
        dask.array.core.Array,
        dask.dataframe.core.Series,
    ] = ...,
    dtype: object = ...,
    keepdims: bool = ...,
):
    """
    usage.dask: 216
    usage.matplotlib: 30
    usage.pandas: 38
    usage.scipy: 442
    usage.skimage: 114
    usage.sklearn: 397
    usage.xarray: 75
    """
    ...


@overload
def swapaxes(a: numpy.ndarray, axis1: int, axis2: int):
    """
    usage.dask: 4
    usage.scipy: 48
    usage.skimage: 2
    usage.sklearn: 2
    usage.xarray: 8
    """
    ...


@overload
def swapaxes(a: object, axis1: int, axis2: int):
    """
    usage.xarray: 1
    """
    ...


def swapaxes(a: object, axis1: int, axis2: int):
    """
    usage.dask: 4
    usage.scipy: 48
    usage.skimage: 2
    usage.sklearn: 2
    usage.xarray: 9
    """
    ...


@overload
def take(a: numpy.ndarray, indices: numpy.ndarray):
    """
    usage.scipy: 1
    usage.skimage: 1
    usage.sklearn: 3
    """
    ...


@overload
def take(a: numpy.ndarray, indices: int, axis: int):
    """
    usage.dask: 1
    usage.scipy: 22
    usage.xarray: 2
    """
    ...


@overload
def take(a: numpy.ndarray, indices: List[int], axis: int):
    """
    usage.dask: 1
    usage.xarray: 10
    """
    ...


@overload
def take(a: numpy.ndarray, indices: numpy.ndarray, axis: int):
    """
    usage.dask: 1
    usage.scipy: 21
    usage.sklearn: 1
    usage.xarray: 1
    """
    ...


@overload
def take(
    a: Union[
        pandas.core.indexes.numeric.Float64Index,
        numpy.ndarray,
        pandas.core.indexes.base.Index,
        pandas.core.indexes.numeric.Int64Index,
        List[Literal["#2ca02c", "#ff7f0e", "#1f77b4"]],
    ],
    indices: Union[numpy.ndarray, int, List[int]],
    axis: int = ...,
):
    """
    usage.pandas: 52
    """
    ...


@overload
def take(a: Tuple[int], indices: Tuple[int]):
    """
    usage.scipy: 2
    """
    ...


@overload
def take(a: Tuple[int, int], indices: Tuple[int]):
    """
    usage.scipy: 2
    """
    ...


@overload
def take(a: Tuple[int, int], indices: Tuple[int, int]):
    """
    usage.scipy: 2
    """
    ...


@overload
def take(a: Tuple[int, int, int], indices: Tuple[int, int]):
    """
    usage.scipy: 2
    """
    ...


@overload
def take(a: Tuple[int, int, int], indices: Tuple[int]):
    """
    usage.scipy: 2
    """
    ...


@overload
def take(a: Tuple[int, int, int], indices: Tuple[int, int, int]):
    """
    usage.scipy: 2
    """
    ...


@overload
def take(a: Tuple[int], indices: numpy.ndarray, axis: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def take(a: Tuple[int, int], indices: numpy.ndarray, axis: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def take(a: Tuple[int, int, int, int], indices: numpy.ndarray, axis: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def take(a: List[float], indices: List[int]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def take(a: numpy.ndarray, indices: List[int]):
    """
    usage.matplotlib: 3
    """
    ...


@overload
def take(a: List[int], indices: List[int]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def take(a: numpy.ndarray, indices: numpy.ndarray, mode: Literal["clip"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def take(a: List[Literal["three", "two", "one"]], indices: numpy.ndarray):
    """
    usage.sklearn: 1
    """
    ...


@overload
def take(a: List[Literal["two", "one"]], indices: numpy.ndarray):
    """
    usage.sklearn: 1
    """
    ...


@overload
def take(a: List[int], indices: numpy.ndarray):
    """
    usage.sklearn: 1
    """
    ...


@overload
def take(a: Tuple[int, int, int], indices: numpy.ndarray):
    """
    usage.sklearn: 2
    """
    ...


def take(
    a: object,
    indices: Union[numpy.ndarray, int, Tuple[int, ...], List[int]],
    axis: int = ...,
    mode: Literal["clip"] = ...,
):
    """
    usage.dask: 3
    usage.matplotlib: 5
    usage.pandas: 52
    usage.scipy: 59
    usage.skimage: 1
    usage.sklearn: 10
    usage.xarray: 13
    """
    ...


def take_along_axis(arr: numpy.ndarray, indices: numpy.ndarray, axis: int):
    """
    usage.dask: 3
    usage.skimage: 1
    """
    ...


@overload
def tensordot(a: numpy.ndarray, b: numpy.ndarray, axes: Tuple[int, int]):
    """
    usage.dask: 4
    usage.matplotlib: 1
    usage.skimage: 1
    """
    ...


@overload
def tensordot(a: numpy.ndarray, b: range, axes: List[int]):
    """
    usage.xarray: 1
    """
    ...


@overload
def tensordot(a: numpy.ndarray, b: numpy.ndarray, axes: Tuple[List[int], List[int]]):
    """
    usage.xarray: 3
    """
    ...


@overload
def tensordot(a: numpy.ndarray, b: numpy.ndarray, axes: List[int]):
    """
    usage.xarray: 1
    """
    ...


@overload
def tensordot(a: numpy.ndarray, b: numpy.ndarray, axes: int):
    """
    usage.dask: 7
    usage.scipy: 2
    """
    ...


@overload
def tensordot(a: numpy.ndarray, b: numpy.ndarray, axes: Tuple[Tuple[int], Tuple[int]]):
    """
    usage.dask: 6
    """
    ...


@overload
def tensordot(a: object, b: object, axes: Tuple[Tuple[int], Tuple[int]]):
    """
    usage.dask: 1
    """
    ...


@overload
def tensordot(
    a: numpy.ndarray, b: numpy.ndarray, axes: Tuple[Tuple[int, int], Tuple[int, int]]
):
    """
    usage.dask: 3
    """
    ...


@overload
def tensordot(
    a: numpy.ndarray, b: numpy.ndarray, axes: Tuple[Tuple[None, ...], Tuple[None, ...]]
):
    """
    usage.dask: 1
    """
    ...


@overload
def tensordot(
    a: numpy.ndarray,
    b: numpy.ndarray,
    axes: Tuple[
        Tuple[int, int, int, int, int, int, int, int, int, int],
        Tuple[int, int, int, int, int, int, int, int, int, int],
    ],
):
    """
    usage.dask: 1
    """
    ...


def tensordot(
    a: object,
    b: object,
    axes: Union[
        int,
        Tuple[
            Union[List[int], int, Tuple[Union[None, int], ...]],
            Union[List[int], int, Tuple[Union[None, int], ...]],
        ],
        List[int],
    ],
):
    """
    usage.dask: 23
    usage.matplotlib: 1
    usage.scipy: 2
    usage.skimage: 1
    usage.xarray: 5
    """
    ...


@overload
def tile(A: List[int], reps: Tuple[int, int]):
    """
    usage.skimage: 2
    usage.sklearn: 2
    """
    ...


@overload
def tile(A: numpy.ndarray, reps: Tuple[int, int]):
    """
    usage.dask: 4
    usage.matplotlib: 15
    usage.scipy: 6
    usage.skimage: 8
    usage.sklearn: 8
    usage.xarray: 1
    """
    ...


@overload
def tile(A: numpy.ndarray, reps: Tuple[int, int, int]):
    """
    usage.dask: 2
    usage.skimage: 2
    usage.xarray: 5
    """
    ...


@overload
def tile(A: numpy.ndarray, reps: List[int]):
    """
    usage.scipy: 27
    usage.skimage: 1
    """
    ...


@overload
def tile(A: numpy.ndarray, reps: Tuple[int, int, int, int]):
    """
    usage.dask: 2
    usage.skimage: 1
    """
    ...


@overload
def tile(A: Tuple[int, int], reps: List[int]):
    """
    usage.skimage: 1
    """
    ...


@overload
def tile(
    A: Union[
        numpy.ndarray,
        range,
        pandas.core.indexes.base.Index,
        List[Union[numpy.int8, int, Literal["c", "b", "a"]]],
    ],
    reps: Union[int, numpy.int64, Tuple[int, ...], List[int]],
):
    """
    usage.pandas: 49
    """
    ...


@overload
def tile(A: numpy.ndarray, reps: int):
    """
    usage.dask: 4
    usage.matplotlib: 9
    usage.scipy: 12
    usage.sklearn: 3
    """
    ...


@overload
def tile(A: Tuple[numpy.int64, numpy.float64, numpy.float64], reps: Tuple[int, int]):
    """
    usage.scipy: 2
    """
    ...


@overload
def tile(A: Tuple[numpy.int64, numpy.float64], reps: Tuple[int, int]):
    """
    usage.scipy: 2
    """
    ...


@overload
def tile(A: Tuple[numpy.int64], reps: Tuple[int, int]):
    """
    usage.scipy: 2
    """
    ...


@overload
def tile(A: List[Union[float, int]], reps: int):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def tile(A: Tuple[float, numpy.float64], reps: Tuple[int, int]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def tile(A: List[List[int]], reps: int):
    """
    usage.dask: 1
    """
    ...


@overload
def tile(A: List[List[int]], reps: Tuple[int, int]):
    """
    usage.dask: 1
    """
    ...


@overload
def tile(A: List[List[int]], reps: Tuple[int, int, int, int]):
    """
    usage.dask: 1
    """
    ...


@overload
def tile(A: numpy.ndarray, reps: Tuple[int]):
    """
    usage.dask: 3
    """
    ...


@overload
def tile(A: numpy.float64, reps: int):
    """
    usage.sklearn: 2
    """
    ...


@overload
def tile(A: List[numpy.int64], reps: List[int]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def tile(A: List[float], reps: Tuple[int, int]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def tile(
    A: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray],
    reps: Tuple[int, int, int],
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def tile(A: List[numpy.float64], reps: int):
    """
    usage.sklearn: 2
    """
    ...


@overload
def tile(A: List[None], reps: int):
    """
    usage.sklearn: 1
    """
    ...


@overload
def tile(A: Tuple[numpy.ndarray, numpy.ndarray], reps: Tuple[int, int, int]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def tile(
    A: Tuple[
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
    ],
    reps: Tuple[int, int, int],
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def tile(
    A: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray], reps: Tuple[int, int, int]
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def tile(A: int, reps: int):
    """
    usage.sklearn: 1
    """
    ...


@overload
def tile(A: range, reps: int):
    """
    usage.sklearn: 2
    """
    ...


@overload
def tile(A: List[numpy.str_], reps: List[int]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def tile(A: int, reps: Tuple[int, int]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def tile(A: Literal["one"], reps: Tuple[int, int]):
    """
    usage.sklearn: 1
    """
    ...


def tile(A: object, reps: Union[List[int], int, numpy.int64, Tuple[int, ...]]):
    """
    usage.dask: 18
    usage.matplotlib: 26
    usage.pandas: 49
    usage.scipy: 51
    usage.skimage: 15
    usage.sklearn: 31
    usage.xarray: 6
    """
    ...


@overload
def trace(a: numpy.ndarray):
    """
    usage.scipy: 2
    usage.sklearn: 7
    """
    ...


@overload
def trace(a: numpy.ndarray, dtype: Type[numpy.float64]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def trace(a: numpy.ndarray, axis1: int, axis2: int):
    """
    usage.sklearn: 2
    """
    ...


def trace(a: numpy.ndarray, axis1: int = ..., axis2: int = ...):
    """
    usage.scipy: 2
    usage.sklearn: 11
    """
    ...


@overload
def transpose(a: List[numpy.ndarray]):
    """
    usage.matplotlib: 2
    usage.skimage: 2
    usage.sklearn: 18
    """
    ...


@overload
def transpose(a: numpy.ndarray, axes: numpy.ndarray):
    """
    usage.skimage: 3
    """
    ...


@overload
def transpose(a: numpy.ndarray):
    """
    usage.matplotlib: 3
    usage.scipy: 74
    usage.skimage: 3
    usage.sklearn: 11
    """
    ...


@overload
def transpose(a: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray]):
    """
    usage.skimage: 4
    """
    ...


@overload
def transpose(a: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray]):
    """
    usage.skimage: 1
    """
    ...


@overload
def transpose(a: Tuple[numpy.ndarray, numpy.ndarray]):
    """
    usage.scipy: 6
    usage.skimage: 3
    """
    ...


@overload
def transpose(a: numpy.ndarray, axes: Tuple[int, int, int, int]):
    """
    usage.dask: 2
    usage.scipy: 1
    usage.skimage: 2
    usage.sklearn: 2
    """
    ...


@overload
def transpose(a: numpy.ndarray, axes: List[int]):
    """
    usage.matplotlib: 5
    usage.scipy: 9
    usage.skimage: 1
    """
    ...


@overload
def transpose(a: numpy.ndarray, axes: Tuple[int, int, int]):
    """
    usage.dask: 5
    usage.scipy: 8
    usage.skimage: 1
    usage.sklearn: 1
    usage.xarray: 3
    """
    ...


@overload
def transpose(a: Tuple[numpy.ndarray]):
    """
    usage.skimage: 1
    """
    ...


@overload
def transpose(a: numpy.ndarray, axes: Tuple[int, int]):
    """
    usage.dask: 7
    usage.scipy: 1
    usage.xarray: 3
    """
    ...


@overload
def transpose(a: sparse._coo.core.COO, axes: Tuple[int, int]):
    """
    usage.xarray: 1
    """
    ...


@overload
def transpose(a: object, axes: Tuple[int, int]):
    """
    usage.dask: 2
    usage.xarray: 1
    """
    ...


@overload
def transpose(a: object, axes: int = ...):
    """
    usage.pandas: 18
    """
    ...


@overload
def transpose(a: List[int]):
    """
    usage.scipy: 8
    """
    ...


@overload
def transpose(a: numpy.ndarray, axes: Tuple[numpy.int64]):
    """
    usage.scipy: 2
    """
    ...


@overload
def transpose(a: numpy.ndarray, axes: Tuple[int]):
    """
    usage.dask: 4
    usage.scipy: 1
    """
    ...


@overload
def transpose(a: numpy.ndarray, axes: Tuple[numpy.int64, numpy.int64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def transpose(
    a: numpy.ndarray, axes: Tuple[numpy.int64, numpy.int64, numpy.int64, numpy.int64]
):
    """
    usage.scipy: 1
    """
    ...


@overload
def transpose(a: scipy.sparse.csr.csr_matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def transpose(a: scipy.sparse.csc.csc_matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def transpose(a: scipy.sparse.dok.dok_matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def transpose(a: scipy.sparse.lil.lil_matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def transpose(a: scipy.sparse.coo.coo_matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def transpose(a: scipy.sparse.dia.dia_matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def transpose(a: scipy.sparse.bsr.bsr_matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def transpose(a: numpy.ma.core.MaskedArray):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def transpose(a: numpy.ndarray, axes: Tuple[None, ...]):
    """
    usage.dask: 3
    """
    ...


@overload
def transpose(a: numpy.ma.core.MaskedArray, axes: Tuple[int, int, int]):
    """
    usage.dask: 2
    """
    ...


@overload
def transpose(a: List[List[int]]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def transpose(a: List[List[Union[int, float]]]):
    """
    usage.sklearn: 3
    """
    ...


@overload
def transpose(a: List[Union[numpy.ndarray, List[int]]]):
    """
    usage.sklearn: 1
    """
    ...


def transpose(
    a: object,
    axes: Union[
        Tuple[Union[None, numpy.int64, int], ...], List[int], int, numpy.ndarray
    ] = ...,
):
    """
    usage.dask: 25
    usage.matplotlib: 12
    usage.pandas: 18
    usage.scipy: 119
    usage.skimage: 21
    usage.sklearn: 37
    usage.xarray: 8
    """
    ...


@overload
def trapz(
    y: xarray.core.dataarray.DataArray, x: xarray.core.dataarray.DataArray, axis: int
):
    """
    usage.xarray: 2
    """
    ...


@overload
def trapz(y: dask.array.core.Array, x: numpy.ndarray, axis: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def trapz(y: numpy.ndarray, x: numpy.ndarray, axis: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def trapz(y: numpy.ndarray, x: numpy.ndarray):
    """
    usage.scipy: 1
    usage.sklearn: 2
    """
    ...


def trapz(
    y: Union[numpy.ndarray, xarray.core.dataarray.DataArray, dask.array.core.Array],
    x: Union[numpy.ndarray, xarray.core.dataarray.DataArray],
    axis: int = ...,
):
    """
    usage.scipy: 1
    usage.sklearn: 2
    usage.xarray: 4
    """
    ...


@overload
def tri(N: int):
    """
    usage.skimage: 2
    usage.sklearn: 1
    """
    ...


@overload
def tri(N: int, M: int, k: int):
    """
    usage.skimage: 6
    """
    ...


@overload
def tri(N: int, dtype: Type[numpy.int32]):
    """
    usage.skimage: 1
    """
    ...


@overload
def tri(N: int, M: int, k: int, dtype: Type[numpy.bool_]):
    """
    usage.scipy: 1
    """
    ...


def tri(
    N: int,
    M: int = ...,
    k: int = ...,
    dtype: Union[Type[numpy.bool_], Type[numpy.int32]] = ...,
):
    """
    usage.scipy: 1
    usage.skimage: 9
    usage.sklearn: 1
    """
    ...


@overload
def tril(m: numpy.ndarray):
    """
    usage.dask: 6
    usage.matplotlib: 1
    usage.scipy: 57
    usage.skimage: 1
    """
    ...


@overload
def tril(m: numpy.ndarray, k: int):
    """
    usage.dask: 1
    usage.scipy: 31
    usage.sklearn: 1
    """
    ...


def tril(m: numpy.ndarray, k: int = ...):
    """
    usage.dask: 7
    usage.matplotlib: 1
    usage.scipy: 88
    usage.skimage: 1
    usage.sklearn: 1
    """
    ...


@overload
def tril_indices(n: int):
    """
    usage.scipy: 6
    """
    ...


@overload
def tril_indices(n: int, k: int):
    """
    usage.scipy: 9
    usage.sklearn: 1
    """
    ...


def tril_indices(n: int, k: int = ...):
    """
    usage.scipy: 15
    usage.sklearn: 1
    """
    ...


def tril_indices_from(arr: numpy.ndarray, k: int):
    """
    usage.scipy: 2
    """
    ...


@overload
def trim_zeros(filt: numpy.ndarray, trim: Literal["f"]):
    """
    usage.scipy: 7
    """
    ...


@overload
def trim_zeros(filt: numpy.ndarray, trim: Literal["b"]):
    """
    usage.scipy: 6
    """
    ...


def trim_zeros(filt: numpy.ndarray, trim: Literal["b", "f"]):
    """
    usage.scipy: 13
    """
    ...


@overload
def triu(m: numpy.ndarray):
    """
    usage.dask: 7
    usage.scipy: 182
    usage.skimage: 1
    """
    ...


@overload
def triu(m: numpy.ndarray, k: int):
    """
    usage.dask: 1
    usage.scipy: 23
    """
    ...


def triu(m: numpy.ndarray, k: int = ...):
    """
    usage.dask: 8
    usage.scipy: 205
    usage.skimage: 1
    """
    ...


@overload
def triu_indices(n: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def triu_indices(n: int, k: int):
    """
    usage.scipy: 1
    usage.sklearn: 2
    """
    ...


def triu_indices(n: int, k: int = ...):
    """
    usage.scipy: 2
    usage.sklearn: 2
    """
    ...


@overload
def triu_indices_from(arr: numpy.ndarray, k: int):
    """
    usage.scipy: 2
    """
    ...


@overload
def triu_indices_from(arr: numpy.ndarray):
    """
    usage.scipy: 4
    """
    ...


def triu_indices_from(arr: numpy.ndarray, k: int = ...):
    """
    usage.scipy: 6
    """
    ...


@overload
def union1d(ar1: List[complex], ar2: numpy.ndarray):
    """
    usage.scipy: 13
    """
    ...


@overload
def union1d(ar1: List[Union[complex, float]], ar2: numpy.ndarray):
    """
    usage.scipy: 10
    """
    ...


@overload
def union1d(ar1: list, ar2: numpy.ndarray):
    """
    usage.scipy: 1
    """
    ...


@overload
def union1d(ar1: List[int], ar2: numpy.ndarray):
    """
    usage.scipy: 1
    """
    ...


@overload
def union1d(ar1: dask.array.core.Array, ar2: dask.array.core.Array):
    """
    usage.dask: 1
    """
    ...


@overload
def union1d(ar1: numpy.ndarray, ar2: numpy.ndarray):
    """
    usage.dask: 1
    usage.sklearn: 12
    """
    ...


def union1d(
    ar1: Union[numpy.ndarray, dask.array.core.Array, List[Union[int, float, complex]]],
    ar2: Union[numpy.ndarray, dask.array.core.Array],
):
    """
    usage.dask: 2
    usage.scipy: 25
    usage.sklearn: 12
    """
    ...


@overload
def unique(ar: numpy.ndarray, return_inverse: bool):
    """
    usage.scipy: 14
    usage.skimage: 4
    usage.sklearn: 125
    usage.xarray: 3
    """
    ...


@overload
def unique(ar: numpy.ndarray):
    """
    usage.dask: 7
    usage.matplotlib: 6
    usage.scipy: 39
    usage.skimage: 46
    usage.sklearn: 383
    usage.xarray: 10
    """
    ...


@overload
def unique(ar: numpy.ndarray, return_inverse: bool, return_counts: bool):
    """
    usage.skimage: 3
    usage.sklearn: 2
    """
    ...


@overload
def unique(ar: numpy.ndarray, return_counts: bool):
    """
    usage.scipy: 5
    usage.skimage: 7
    usage.sklearn: 1
    """
    ...


@overload
def unique(ar: numpy.ndarray, return_index: bool):
    """
    usage.scipy: 5
    usage.skimage: 4
    usage.sklearn: 1
    """
    ...


@overload
def unique(ar: xarray.core.dataarray.DataArray):
    """
    usage.xarray: 2
    """
    ...


@overload
def unique(
    ar: Union[
        pandas.core.series.Series,
        numpy.ndarray,
        pandas.core.arrays.categorical.Categorical,
        List[str],
    ],
    return_inverse: bool = ...,
    return_index: bool = ...,
):
    """
    usage.pandas: 22
    """
    ...


@overload
def unique(ar: List[float]):
    """
    usage.scipy: 2
    usage.sklearn: 3
    """
    ...


@overload
def unique(ar: numpy.ndarray, axis: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def unique(ar: numpy.ma.core.MaskedArray):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def unique(ar: numpy.ndarray, return_index: bool, return_inverse: bool):
    """
    usage.matplotlib: 1
    usage.sklearn: 6
    """
    ...


@overload
def unique(ar: List[numpy.int64]):
    """
    usage.dask: 4
    """
    ...


@overload
def unique(ar: List[numpy.float64]):
    """
    usage.dask: 5
    usage.sklearn: 2
    """
    ...


@overload
def unique(ar: List[numpy.complex128]):
    """
    usage.dask: 3
    """
    ...


@overload
def unique(ar: List[numpy.bool_]):
    """
    usage.dask: 3
    """
    ...


@overload
def unique(ar: List[numpy.float32]):
    """
    usage.dask: 2
    """
    ...


@overload
def unique(
    ar: numpy.ndarray, return_index: bool, return_inverse: bool, return_counts: bool
):
    """
    usage.dask: 2
    """
    ...


@overload
def unique(ar: pandas.core.series.Series):
    """
    usage.dask: 3
    usage.sklearn: 1
    """
    ...


@overload
def unique(ar: List[int]):
    """
    usage.sklearn: 26
    """
    ...


@overload
def unique(ar: numpy.memmap):
    """
    usage.sklearn: 2
    """
    ...


@overload
def unique(ar: List[Literal["copyright", "beer", "pizza", "the"]]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def unique(ar: List[Literal["copyright", "beer", "burger", "pizza", "the"]]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def unique(ar: List[Literal["copyright", "beer", "burger", "the"]]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def unique(ar: List[Literal["copyright", "coke", "burger", "the"]]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def unique(ar: List[Literal["burger", "coke", "the"]]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def unique(ar: List[Literal["copyright", "celeri", "salad", "the"]]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def unique(ar: List[Literal["copyright", "water", "sparkling", "salad", "the"]]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def unique(ar: List[Literal["copyright", "celeri", "the"]]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def unique(ar: List[Literal["water", "salad", "tomato", "the"]]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def unique(ar: List[Literal["copyright", "water", "salad", "tomato", "the"]]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def unique(ar: List[Literal["three", "two", "one"]]):
    """
    usage.sklearn: 3
    """
    ...


@overload
def unique(ar: List[Union[float, int]], return_inverse: bool):
    """
    usage.sklearn: 1
    """
    ...


@overload
def unique(ar: List[Literal["b", "a"]]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def unique(ar: List[Literal["b", "c", "a"]]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def unique(ar: List[Literal["3", "2", "1"]]):
    """
    usage.sklearn: 2
    """
    ...


def unique(
    ar: object,
    return_index: bool = ...,
    return_inverse: bool = ...,
    return_counts: bool = ...,
):
    """
    usage.dask: 29
    usage.matplotlib: 8
    usage.pandas: 22
    usage.scipy: 66
    usage.skimage: 64
    usage.sklearn: 572
    usage.xarray: 15
    """
    ...


def unpackbits(_0: numpy.ndarray, /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def unravel_index(_0: numpy.int64, _1: Tuple[int, int], /):
    """
    usage.dask: 1
    usage.skimage: 8
    usage.sklearn: 1
    """
    ...


@overload
def unravel_index(_0: numpy.ndarray, _1: Tuple[int, int], /):
    """
    usage.skimage: 2
    """
    ...


@overload
def unravel_index(_0: numpy.int64, _1: Tuple[int, int, int], /):
    """
    usage.dask: 1
    usage.skimage: 4
    """
    ...


@overload
def unravel_index(_0: numpy.int64, _1: Tuple[int, int, int, int], /):
    """
    usage.skimage: 2
    """
    ...


@overload
def unravel_index(_0: int, _1: Tuple[int, int], /):
    """
    usage.scipy: 1
    usage.skimage: 1
    """
    ...


@overload
def unravel_index(_0: int, _1: Tuple[int, int, int], /):
    """
    usage.skimage: 1
    """
    ...


@overload
def unravel_index(_0: int, _1: Tuple[int, int], _2: Literal["F"], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def unravel_index(_0: numpy.ndarray, _1: List[int], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def unravel_index(_0: numpy.ndarray, _1: numpy.ndarray, /):
    """
    usage.scipy: 1
    """
    ...


@overload
def unravel_index(_0: List[numpy.int64], _1: Tuple[int, int], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def unravel_index(_0: List[int], _1: Tuple[int, int], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def unravel_index(_0: numpy.int64, _1: Tuple[int], /):
    """
    usage.dask: 1
    """
    ...


@overload
def unravel_index(_0: numpy.ndarray, _1: Tuple[None, ...], /):
    """
    usage.dask: 1
    """
    ...


@overload
def unravel_index(_0: numpy.ndarray, _1: Tuple[int], _2: Literal["C"], /):
    """
    usage.dask: 1
    """
    ...


@overload
def unravel_index(_0: numpy.ndarray, /, *, order: Literal["C"], shape: Tuple[int]):
    """
    usage.dask: 1
    """
    ...


@overload
def unravel_index(_0: numpy.ndarray, _1: Tuple[int], _2: Literal["F"], /):
    """
    usage.dask: 1
    """
    ...


@overload
def unravel_index(_0: numpy.ndarray, /, *, order: Literal["F"], shape: Tuple[int]):
    """
    usage.dask: 1
    """
    ...


@overload
def unravel_index(_0: numpy.ndarray, _1: Tuple[int, int], _2: Literal["C"], /):
    """
    usage.dask: 1
    """
    ...


@overload
def unravel_index(_0: numpy.ndarray, /, *, order: Literal["C"], shape: Tuple[int, int]):
    """
    usage.dask: 1
    """
    ...


@overload
def unravel_index(_0: numpy.ndarray, _1: Tuple[int, int], _2: Literal["F"], /):
    """
    usage.dask: 1
    """
    ...


@overload
def unravel_index(_0: numpy.ndarray, /, *, order: Literal["F"], shape: Tuple[int, int]):
    """
    usage.dask: 1
    """
    ...


def unravel_index(
    _0: Union[numpy.int64, int, numpy.ndarray, List[Union[int, numpy.int64]]],
    _1: Union[Tuple[Union[None, int], ...], numpy.ndarray, List[int]] = ...,
    _2: Literal["F", "C"] = ...,
    /,
    *,
    order: Literal["F", "C"] = ...,
    shape: Tuple[int, ...] = ...,
):
    """
    usage.dask: 12
    usage.matplotlib: 2
    usage.scipy: 4
    usage.skimage: 18
    usage.sklearn: 1
    """
    ...


@overload
def unwrap(p: numpy.ndarray):
    """
    usage.scipy: 5
    """
    ...


@overload
def unwrap(p: numpy.ndarray, axis: int):
    """
    usage.matplotlib: 3
    """
    ...


def unwrap(p: numpy.ndarray, axis: int = ...):
    """
    usage.matplotlib: 3
    usage.scipy: 5
    """
    ...


@overload
def vander(x: numpy.ndarray, N: int):
    """
    usage.scipy: 1
    usage.sklearn: 1
    """
    ...


@overload
def vander(x: numpy.ndarray):
    """
    usage.scipy: 1
    """
    ...


def vander(x: numpy.ndarray, N: int = ...):
    """
    usage.scipy: 2
    usage.sklearn: 1
    """
    ...


@overload
def var(a: numpy.ndarray, axis: int):
    """
    usage.dask: 4
    usage.scipy: 1
    usage.sklearn: 30
    usage.xarray: 4
    """
    ...


@overload
def var(a: numpy.ndarray, axis: None):
    """
    usage.xarray: 5
    """
    ...


@overload
def var(a: numpy.ndarray, axis: Tuple[None, ...]):
    """
    usage.dask: 3
    usage.xarray: 1
    """
    ...


@overload
def var(a: numpy.ndarray, axis: None, ddof: int):
    """
    usage.xarray: 3
    """
    ...


@overload
def var(a: numpy.ndarray, axis: None, dtype: Type[float]):
    """
    usage.xarray: 3
    """
    ...


@overload
def var(a: numpy.ndarray, axis: int, ddof: int):
    """
    usage.scipy: 14
    usage.sklearn: 13
    usage.xarray: 3
    """
    ...


@overload
def var(a: numpy.ndarray, axis: int, dtype: Type[float]):
    """
    usage.xarray: 3
    """
    ...


@overload
def var(a: object, axis: None):
    """
    usage.xarray: 1
    """
    ...


@overload
def var(a: object):
    """
    usage.dask: 1
    usage.xarray: 1
    """
    ...


@overload
def var(a: xarray.core.dataarray.DataArray):
    """
    usage.xarray: 1
    """
    ...


@overload
def var(a: numpy.ndarray, axis: None, dtype: None, ddof: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def var(a: object, axis: None, dtype: None, ddof: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def var(a: xarray.core.dataset.Dataset):
    """
    usage.xarray: 1
    """
    ...


@overload
def var(a: object, axis: int, dtype: None, ddof: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def var(a: numpy.ndarray, axis: int, dtype: None, ddof: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def var(a: object, axis: int):
    """
    usage.xarray: 1
    """
    ...


@overload
def var(
    a: Union[numpy.ndarray, pandas.core.series.Series],
    axis: Union[None, int] = ...,
    ddof: int = ...,
):
    """
    usage.pandas: 13
    """
    ...


@overload
def var(a: numpy.ndarray):
    """
    usage.dask: 20
    usage.scipy: 3
    usage.sklearn: 8
    """
    ...


@overload
def var(a: List[float], ddof: int):
    """
    usage.scipy: 1
    """
    ...


@overload
def var(a: dask.array.core.Array):
    """
    usage.dask: 2
    """
    ...


@overload
def var(a: numpy.ma.core.MaskedArray):
    """
    usage.dask: 3
    """
    ...


@overload
def var(a: numpy.ma.core.MaskedArray, axis: int):
    """
    usage.dask: 6
    """
    ...


@overload
def var(a: numpy.ma.core.MaskedArray, keepdims: bool):
    """
    usage.dask: 2
    """
    ...


@overload
def var(a: numpy.ma.core.MaskedArray, axis: int, keepdims: bool):
    """
    usage.dask: 4
    """
    ...


@overload
def var(a: numpy.ndarray, keepdims: bool):
    """
    usage.dask: 5
    """
    ...


@overload
def var(a: numpy.ndarray, dtype: Literal["f8"]):
    """
    usage.dask: 2
    """
    ...


@overload
def var(a: numpy.ndarray, dtype: Literal["i8"]):
    """
    usage.dask: 2
    """
    ...


@overload
def var(a: numpy.ndarray, axis: int, keepdims: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def var(a: numpy.ndarray, axis: Tuple[None, ...], keepdims: bool):
    """
    usage.dask: 1
    """
    ...


@overload
def var(a: numpy.ndarray, axis: Tuple[int, int]):
    """
    usage.dask: 1
    """
    ...


@overload
def var(
    a: dask.dataframe.core.DataFrame,
    axis: int,
    out: dask.dataframe.core.Series,
    ddof: int,
):
    """
    usage.dask: 1
    """
    ...


@overload
def var(
    a: dask.dataframe.core.Series,
    axis: None,
    out: dask.dataframe.core.Scalar,
    ddof: int,
):
    """
    usage.dask: 1
    """
    ...


@overload
def var(a: numpy.ndarray, ddof: int):
    """
    usage.sklearn: 4
    """
    ...


def var(
    a: object,
    axis: Union[int, None, Tuple[Union[int, None], ...]] = ...,
    out: Union[dask.dataframe.core.Scalar, dask.dataframe.core.Series] = ...,
    keepdims: bool = ...,
    dtype: Union[Literal["i8", "f8"], Type[float], None] = ...,
    ddof: int = ...,
):
    """
    usage.dask: 59
    usage.pandas: 13
    usage.scipy: 19
    usage.sklearn: 55
    usage.xarray: 31
    """
    ...


def vdot(_0: numpy.ndarray, _1: numpy.ndarray, /):
    """
    usage.dask: 2
    usage.scipy: 14
    """
    ...


def vsplit(ary: numpy.ndarray, indices_or_sections: int):
    """
    usage.sklearn: 2
    """
    ...


@overload
def vstack(tup: Tuple[List[int], List[int]]):
    """
    usage.scipy: 2
    usage.skimage: 1
    """
    ...


@overload
def vstack(tup: Tuple[List[float], List[Union[int, float]]]):
    """
    usage.skimage: 1
    """
    ...


@overload
def vstack(tup: Tuple[numpy.ndarray, numpy.ndarray]):
    """
    usage.dask: 3
    usage.matplotlib: 9
    usage.scipy: 86
    usage.skimage: 4
    usage.sklearn: 35
    """
    ...


@overload
def vstack(tup: Tuple[List[numpy.int64], List[numpy.int64]]):
    """
    usage.skimage: 1
    """
    ...


@overload
def vstack(tup: List[numpy.ndarray]):
    """
    usage.dask: 3
    usage.matplotlib: 70
    usage.pandas: 49
    usage.scipy: 72
    usage.skimage: 23
    usage.sklearn: 101
    """
    ...


@overload
def vstack(tup: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray]):
    """
    usage.matplotlib: 3
    usage.scipy: 6
    usage.skimage: 2
    usage.sklearn: 6
    """
    ...


@overload
def vstack(tup: Tuple[numpy.float64, numpy.float64, numpy.float64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def vstack(tup: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray]):
    """
    usage.scipy: 7
    usage.sklearn: 2
    """
    ...


@overload
def vstack(tup: Tuple[numpy.ndarray, List[List[int]]]):
    """
    usage.scipy: 2
    """
    ...


@overload
def vstack(tup: Tuple[List[float], List[float]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def vstack(
    tup: Tuple[
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
    ]
):
    """
    usage.scipy: 2
    usage.sklearn: 2
    """
    ...


@overload
def vstack(
    tup: Tuple[
        numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray
    ]
):
    """
    usage.scipy: 1
    """
    ...


@overload
def vstack(tup: List[List[int]]):
    """
    usage.scipy: 2
    """
    ...


@overload
def vstack(tup: List[Tuple[int, int]]):
    """
    usage.scipy: 2
    """
    ...


@overload
def vstack(tup: List[Tuple[int, int, int]]):
    """
    usage.scipy: 2
    """
    ...


@overload
def vstack(tup: List[Tuple[int, int, int, int]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def vstack(tup: List[Tuple[int, int, int, int, int]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def vstack(tup: List[Tuple[int, ...]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def vstack(tup: List[List[float]]):
    """
    usage.scipy: 5
    """
    ...


@overload
def vstack(tup: List[Tuple[numpy.float64, numpy.float64]]):
    """
    usage.scipy: 3
    """
    ...


@overload
def vstack(tup: Tuple[numpy.ndarray, List[int]]):
    """
    usage.scipy: 2
    """
    ...


@overload
def vstack(tup: Tuple[numpy.ndarray, numpy.ndarray, List[float]]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def vstack(tup: Tuple[numpy.ma.core.MaskedArray, numpy.ma.core.MaskedArray]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def vstack(
    tup: List[Union[List[Union[numpy.ndarray, Tuple[int, int]]], numpy.ndarray]]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def vstack(tup: List[Union[Tuple[int, int], numpy.ndarray]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def vstack(tup: Tuple[numpy.ndarray]):
    """
    usage.matplotlib: 1
    usage.sklearn: 5
    """
    ...


@overload
def vstack(tup: List[Tuple[float, float, float, float]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def vstack(tup: List[Union[List[numpy.float64], numpy.ndarray]]):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def vstack(tup: List[Union[numpy.ndarray, List[numpy.float64]]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def vstack(
    tup: Tuple[
        List[Union[int, numpy.float64]], numpy.ndarray, List[Union[int, numpy.float64]]
    ]
):
    """
    usage.matplotlib: 2
    """
    ...


@overload
def vstack(
    tup: Tuple[
        List[Union[float, numpy.float64]],
        numpy.ndarray,
        List[Union[float, numpy.float64]],
        List[Union[float, numpy.float64]],
    ]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def vstack(
    tup: Tuple[
        List[Union[float, numpy.float64]],
        numpy.ndarray,
        List[Union[float, numpy.float64]],
    ]
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def vstack(tup: Tuple[List[int]]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def vstack(tup: List[numpy.flatiter]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def vstack(tup: numpy.ndarray):
    """
    usage.dask: 1
    """
    ...


@overload
def vstack(tup: dask.array.core.Array):
    """
    usage.dask: 2
    """
    ...


@overload
def vstack(tup: object):
    """
    usage.dask: 1
    """
    ...


@overload
def vstack(tup: Tuple[List[List[Union[int, float]]], List[List[int]], List[List[int]]]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def vstack(tup: List[pandas.core.series.Series]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def vstack(tup: Tuple[List[int], numpy.ndarray]):
    """
    usage.sklearn: 5
    """
    ...


@overload
def vstack(tup: List[float]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def vstack(tup: List[Union[List[List[int]], numpy.ndarray]]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def vstack(
    tup: Tuple[
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
        numpy.ndarray,
    ]
):
    """
    usage.sklearn: 1
    """
    ...


@overload
def vstack(tup: Tuple[List[List[int]], numpy.ndarray]):
    """
    usage.sklearn: 1
    """
    ...


def vstack(tup: object):
    """
    usage.dask: 10
    usage.matplotlib: 98
    usage.pandas: 49
    usage.scipy: 199
    usage.skimage: 32
    usage.sklearn: 164
    """
    ...


@overload
def where(_0: numpy.bool_, _1: float, _2: int, /):
    """
    usage.skimage: 1
    """
    ...


@overload
def where(_0: numpy.ndarray, _1: float, _2: int, /):
    """
    usage.scipy: 1
    usage.skimage: 3
    """
    ...


@overload
def where(_0: numpy.ndarray, _1: numpy.ndarray, _2: numpy.ndarray, /):
    """
    usage.dask: 14
    usage.matplotlib: 1
    usage.scipy: 50
    usage.skimage: 1
    usage.sklearn: 1
    usage.xarray: 9
    """
    ...


@overload
def where(_0: numpy.ndarray, _1: float, _2: numpy.ndarray, /):
    """
    usage.dask: 3
    usage.scipy: 17
    usage.skimage: 1
    usage.xarray: 7
    """
    ...


@overload
def where(_0: numpy.bool_, _1: numpy.float64, _2: numpy.float64, /):
    """
    usage.scipy: 5
    usage.skimage: 1
    """
    ...


@overload
def where(_0: numpy.bool_, _1: float, _2: numpy.float64, /):
    """
    usage.scipy: 2
    usage.skimage: 1
    usage.xarray: 2
    """
    ...


@overload
def where(_0: numpy.ndarray, _1: numpy.ndarray, _2: int, /):
    """
    usage.dask: 7
    usage.scipy: 3
    usage.skimage: 4
    usage.xarray: 1
    """
    ...


@overload
def where(_0: numpy.ndarray, /):
    """
    usage.dask: 2
    usage.matplotlib: 1
    usage.scipy: 12
    usage.skimage: 12
    usage.sklearn: 63
    """
    ...


@overload
def where(_0: dask.array.core.Array, /):
    """
    usage.skimage: 1
    """
    ...


@overload
def where(_0: numpy.ndarray, _1: int, _2: int, /):
    """
    usage.scipy: 18
    usage.skimage: 1
    """
    ...


@overload
def where(_0: numpy.bool_, _1: numpy.ndarray, _2: numpy.ndarray, /):
    """
    usage.dask: 2
    usage.scipy: 2
    usage.xarray: 3
    """
    ...


@overload
def where(_0: bool, _1: float, _2: numpy.float64, /):
    """
    usage.scipy: 6
    usage.xarray: 1
    """
    ...


@overload
def where(_0: List[bool], _1: numpy.ndarray, _2: numpy.ndarray, /):
    """
    usage.xarray: 2
    """
    ...


@overload
def where(_0: sparse._coo.core.COO, _1: sparse._coo.core.COO, _2: numpy.ndarray, /):
    """
    usage.xarray: 1
    """
    ...


@overload
def where(_0: bool, _1: numpy.ndarray, _2: numpy.ndarray, /):
    """
    usage.dask: 2
    usage.scipy: 1
    usage.xarray: 1
    """
    ...


@overload
def where(_0: dask.array.core.Array, _1: float, _2: dask.array.core.Array, /):
    """
    usage.xarray: 1
    """
    ...


@overload
def where(
    _0: numpy.ndarray, _1: float, _2: pandas.core.indexes.numeric.Float64Index, /
):
    """
    usage.xarray: 1
    """
    ...


@overload
def where(_0: sparse._coo.core.COO, _1: numpy.ndarray, _2: sparse._coo.core.COO, /):
    """
    usage.xarray: 1
    """
    ...


@overload
def where(_0: sparse._coo.core.COO, _1: numpy.ndarray, _2: numpy.ndarray, /):
    """
    usage.xarray: 1
    """
    ...


@overload
def where(
    _0: sparse._coo.core.COO, _1: sparse._coo.core.COO, _2: sparse._coo.core.COO, /
):
    """
    usage.xarray: 1
    """
    ...


@overload
def where(_0: numpy.ndarray, _1: numpy.ndarray, _2: sparse._coo.core.COO, /):
    """
    usage.xarray: 1
    """
    ...


@overload
def where(_0: numpy.ndarray, _1: sparse._coo.core.COO, _2: numpy.ndarray, /):
    """
    usage.xarray: 1
    """
    ...


@overload
def where(_0: numpy.ndarray, _1: object, _2: numpy.ndarray, /):
    """
    usage.xarray: 2
    """
    ...


@overload
def where(_0: numpy.ndarray, _1: object, _2: object, /):
    """
    usage.xarray: 1
    """
    ...


@overload
def where(_0: numpy.ndarray, _1: numpy.ndarray, _2: object, /):
    """
    usage.xarray: 2
    """
    ...


@overload
def where(_0: object, _1: object = ..., _2: object = ..., /):
    """
    usage.pandas: 175
    """
    ...


@overload
def where(_0: bool, _1: int, _2: int, /):
    """
    usage.scipy: 2
    """
    ...


@overload
def where(_0: numpy.ndarray, _1: numpy.ndarray, _2: float, /):
    """
    usage.dask: 6
    usage.matplotlib: 1
    usage.scipy: 20
    """
    ...


@overload
def where(_0: numpy.ndarray, _1: int, _2: numpy.ndarray, /):
    """
    usage.dask: 7
    usage.matplotlib: 1
    usage.scipy: 10
    usage.sklearn: 4
    """
    ...


@overload
def where(_0: numpy.ndarray, _1: numpy.float64, _2: numpy.float64, /):
    """
    usage.scipy: 3
    """
    ...


@overload
def where(_0: numpy.ndarray, _1: bool, _2: bool, /):
    """
    usage.scipy: 1
    """
    ...


@overload
def where(_0: numpy.ndarray, _1: float, _2: float, /):
    """
    usage.scipy: 6
    """
    ...


@overload
def where(_0: numpy.ndarray, _1: numpy.float64, _2: numpy.ndarray, /):
    """
    usage.dask: 1
    usage.scipy: 2
    """
    ...


@overload
def where(_0: bool, _1: float, _2: float, /):
    """
    usage.scipy: 5
    """
    ...


@overload
def where(_0: bool, _1: numpy.ndarray, _2: float, /):
    """
    usage.scipy: 2
    """
    ...


@overload
def where(_0: numpy.bool_, _1: int, _2: int, /):
    """
    usage.scipy: 1
    """
    ...


@overload
def where(_0: numpy.bool_, _1: numpy.float64, _2: float, /):
    """
    usage.dask: 1
    usage.scipy: 4
    """
    ...


@overload
def where(_0: bool, _1: numpy.float64, _2: numpy.ndarray, /):
    """
    usage.scipy: 1
    """
    ...


@overload
def where(_0: bool, _1: numpy.float64, _2: float, /):
    """
    usage.scipy: 4
    """
    ...


@overload
def where(_0: numpy.bool_, _1: float, _2: float, /):
    """
    usage.scipy: 1
    """
    ...


@overload
def where(_0: bool, _1: float, _2: numpy.ndarray, /):
    """
    usage.scipy: 2
    """
    ...


@overload
def where(_0: bool, _1: numpy.float64, _2: numpy.float64, /):
    """
    usage.scipy: 1
    """
    ...


@overload
def where(_0: bool, _1: numpy.float128, _2: numpy.float128, /):
    """
    usage.scipy: 1
    """
    ...


@overload
def where(_0: numpy.ndarray, _1: numpy.float128, _2: numpy.float128, /):
    """
    usage.scipy: 1
    """
    ...


@overload
def where(_0: numpy.bool_, _1: int, _2: numpy.float64, /):
    """
    usage.dask: 1
    usage.scipy: 3
    """
    ...


@overload
def where(_0: bool, _1: int, _2: float, /):
    """
    usage.scipy: 1
    """
    ...


@overload
def where(_0: numpy.ndarray, _1: bool, _2: numpy.ndarray, /):
    """
    usage.scipy: 1
    """
    ...


@overload
def where(_0: numpy.ndarray, _1: Literal["hello"], _2: numpy.ndarray, /):
    """
    usage.scipy: 1
    """
    ...


@overload
def where(_0: numpy.ndarray, _1: Literal["Polymerization"], _2: numpy.ndarray, /):
    """
    usage.scipy: 1
    """
    ...


@overload
def where(_0: numpy.ndarray, _1: Literal["Oxidation"], _2: numpy.ndarray, /):
    """
    usage.scipy: 1
    """
    ...


@overload
def where(_0: numpy.ndarray, _1: Literal["Reduction"], _2: numpy.ndarray, /):
    """
    usage.scipy: 1
    """
    ...


@overload
def where(_0: numpy.ndarray, _1: numpy.ndarray, _2: numpy.ma.core.MaskedArray, /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def where(
    _0: numpy.ndarray, _1: numpy.ma.core.MaskedArray, _2: numpy.ma.core.MaskedArray, /
):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def where(_0: numpy.ndarray, _1: numpy.float32, _2: numpy.float32, /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def where(_0: numpy.ma.core.MaskedArray, _1: numpy.ma.core.MaskedArray, _2: float, /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def where(_0: int, _1: numpy.ndarray, _2: int, /):
    """
    usage.dask: 1
    """
    ...


@overload
def where(_0: int, _1: numpy.ndarray, _2: numpy.ndarray, /):
    """
    usage.dask: 2
    """
    ...


@overload
def where(_0: bool, _1: numpy.ndarray, _2: int, /):
    """
    usage.dask: 1
    """
    ...


@overload
def where(_0: numpy.bool_, _1: numpy.ndarray, _2: int, /):
    """
    usage.dask: 1
    """
    ...


@overload
def where(_0: numpy.ndarray, _1: numpy.int32, _2: numpy.ndarray, /):
    """
    usage.dask: 2
    """
    ...


@overload
def where(_0: bool, _1: numpy.int32, _2: numpy.ndarray, /):
    """
    usage.dask: 1
    """
    ...


@overload
def where(_0: dask.array.core.Array, _1: int, _2: dask.array.core.Array, /):
    """
    usage.dask: 3
    """
    ...


@overload
def where(_0: dask.array.core.Array, _1: numpy.float64, _2: dask.array.core.Array, /):
    """
    usage.dask: 1
    """
    ...


@overload
def where(_0: List[bool], /):
    """
    usage.sklearn: 2
    """
    ...


@overload
def where(_0: numpy.matrix, /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def where(_0: numpy.ndarray, _1: numpy.int64, _2: numpy.int64, /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def where(_0: numpy.ndarray, _1: numpy.bool_, _2: numpy.bool_, /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def where(_0: numpy.ndarray, _1: Literal["a"], _2: Literal["b"], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def where(_0: numpy.ndarray, _1: numpy.int64, _2: numpy.ndarray, /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def where(_0: numpy.ndarray, _1: numpy.str_, _2: numpy.str_, /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def where(_0: numpy.ndarray, _1: Literal["two"], _2: Literal["one"], /):
    """
    usage.sklearn: 1
    """
    ...


def where(_0: object, _1: object = ..., _2: object = ..., /):
    """
    usage.dask: 58
    usage.matplotlib: 8
    usage.pandas: 175
    usage.scipy: 193
    usage.skimage: 26
    usage.sklearn: 77
    usage.xarray: 39
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: Type[float]):
    """
    usage.scipy: 12
    usage.skimage: 6
    usage.sklearn: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, int, int], /, *, dtype: Type[numpy.float64]):
    """
    usage.scipy: 6
    usage.skimage: 11
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: Type[numpy.int64]):
    """
    usage.scipy: 4
    usage.skimage: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /):
    """
    usage.dask: 4
    usage.matplotlib: 25
    usage.sample-usage: 1
    usage.scipy: 204
    usage.skimage: 228
    usage.sklearn: 164
    usage.xarray: 26
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: Type[numpy.float64]):
    """
    usage.scipy: 57
    usage.skimage: 50
    usage.sklearn: 11
    """
    ...


@overload
def zeros(_0: Tuple[int, int, int], /):
    """
    usage.dask: 1
    usage.matplotlib: 6
    usage.scipy: 38
    usage.skimage: 73
    usage.sklearn: 12
    usage.xarray: 13
    """
    ...


@overload
def zeros(_0: Tuple[int, int], _1: Literal["uint8"], /):
    """
    usage.skimage: 39
    """
    ...


@overload
def zeros(_0: Tuple[int, int, int], _1: Literal["uint8"], /):
    """
    usage.skimage: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: Type[numpy.uint8]):
    """
    usage.scipy: 2
    usage.skimage: 55
    """
    ...


@overload
def zeros(_0: int, /, *, dtype: Type[int]):
    """
    usage.dask: 2
    usage.scipy: 16
    usage.skimage: 3
    usage.sklearn: 15
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: Type[int]):
    """
    usage.scipy: 2
    usage.skimage: 35
    usage.sklearn: 10
    """
    ...


@overload
def zeros(_0: Tuple[int, int, int], /, *, dtype: Type[numpy.uint8]):
    """
    usage.matplotlib: 2
    usage.skimage: 3
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: Type[bool]):
    """
    usage.matplotlib: 3
    usage.scipy: 7
    usage.skimage: 28
    usage.sklearn: 2
    """
    ...


@overload
def zeros(_0: Tuple[int, int, int], /, *, dtype: Type[bool]):
    """
    usage.skimage: 6
    """
    ...


@overload
def zeros(_0: int, /):
    """
    usage.dask: 3
    usage.matplotlib: 38
    usage.scipy: 263
    usage.skimage: 15
    usage.sklearn: 133
    usage.xarray: 10
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: Type[numpy.float32]):
    """
    usage.scipy: 24
    usage.skimage: 5
    usage.sklearn: 3
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: Type[bool], order: Literal["C"]):
    """
    usage.skimage: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: Literal["float32"]):
    """
    usage.scipy: 1
    usage.skimage: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: Literal["float64"]):
    """
    usage.scipy: 1
    usage.skimage: 5
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: Literal["uint8"]):
    """
    usage.scipy: 1
    usage.skimage: 5
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: Literal["int"]):
    """
    usage.skimage: 2
    """
    ...


@overload
def zeros(_0: int, /, *, dtype: Type[bool]):
    """
    usage.matplotlib: 5
    usage.scipy: 5
    usage.skimage: 2
    usage.sklearn: 24
    """
    ...


@overload
def zeros(_0: Tuple[int, int], _1: Type[numpy.uint8], /):
    """
    usage.scipy: 10
    usage.skimage: 6
    """
    ...


@overload
def zeros(_0: Tuple[int, int, int, int, int], /):
    """
    usage.skimage: 3
    """
    ...


@overload
def zeros(_0: Tuple[int], /, *, dtype: Type[numpy.float64]):
    """
    usage.scipy: 10
    usage.skimage: 2
    usage.sklearn: 4
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: Literal["float"]):
    """
    usage.skimage: 2
    usage.sklearn: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, int, int, int], /):
    """
    usage.scipy: 5
    usage.skimage: 18
    usage.sklearn: 1
    usage.xarray: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: numpy.dtype):
    """
    usage.scipy: 96
    usage.skimage: 7
    usage.sklearn: 38
    """
    ...


@overload
def zeros(_0: Tuple[int], /, *, dtype: numpy.dtype):
    """
    usage.scipy: 22
    usage.skimage: 6
    usage.sklearn: 3
    """
    ...


@overload
def zeros(_0: Tuple[int, int], _1: Type[float], /):
    """
    usage.matplotlib: 6
    usage.scipy: 5
    usage.skimage: 4
    """
    ...


@overload
def zeros(_0: Tuple[numpy.int64], _1: numpy.dtype, /):
    """
    usage.skimage: 2
    """
    ...


@overload
def zeros(_0: Tuple[int, int], _1: Type[int], /):
    """
    usage.skimage: 8
    """
    ...


@overload
def zeros(
    _0: Tuple[int, int, int, int], /, *, dtype: Type[numpy.uint32], order: Literal["C"]
):
    """
    usage.skimage: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: Type[numpy.uint32]):
    """
    usage.scipy: 2
    usage.skimage: 3
    """
    ...


@overload
def zeros(_0: List[int], /, *, dtype: numpy.dtype):
    """
    usage.scipy: 12
    usage.skimage: 2
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: Type[numpy.uint16]):
    """
    usage.scipy: 1
    usage.skimage: 7
    """
    ...


@overload
def zeros(_0: List[int], /):
    """
    usage.matplotlib: 2
    usage.scipy: 31
    usage.skimage: 3
    usage.sklearn: 6
    """
    ...


@overload
def zeros(_0: Tuple[int, int, int], /, *, dtype: Type[float]):
    """
    usage.scipy: 1
    usage.skimage: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: Type[complex]):
    """
    usage.scipy: 4
    usage.skimage: 1
    """
    ...


@overload
def zeros(_0: Tuple[int], /):
    """
    usage.scipy: 38
    usage.skimage: 5
    usage.sklearn: 16
    usage.xarray: 4
    """
    ...


@overload
def zeros(_0: List[int], /, *, dtype: Type[numpy.uint8]):
    """
    usage.scipy: 1
    usage.skimage: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, int], _1: Literal["double"], /):
    """
    usage.skimage: 1
    """
    ...


@overload
def zeros(_0: int, /, *, dtype: Type[numpy.uint8]):
    """
    usage.scipy: 1
    usage.skimage: 2
    usage.sklearn: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, int, int], /, *, dtype: Type[numpy.float32]):
    """
    usage.skimage: 3
    """
    ...


@overload
def zeros(_0: Tuple[int, int, int, int], /, *, dtype: Type[numpy.float32]):
    """
    usage.skimage: 2
    """
    ...


@overload
def zeros(_0: Tuple[int, int, int, int, int], /, *, dtype: Type[numpy.float32]):
    """
    usage.skimage: 1
    """
    ...


@overload
def zeros(_0: numpy.int64, /, *, dtype: numpy.dtype):
    """
    usage.skimage: 5
    usage.sklearn: 2
    """
    ...


@overload
def zeros(_0: Tuple[int, int], _1: Type[bool], /):
    """
    usage.scipy: 13
    usage.skimage: 7
    """
    ...


@overload
def zeros(_0: int, _1: Literal["bool"], /):
    """
    usage.skimage: 1
    """
    ...


@overload
def zeros(_0: int, /, *, dtype: Type[numpy.float64]):
    """
    usage.matplotlib: 7
    usage.scipy: 17
    usage.skimage: 1
    usage.sklearn: 18
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: Type[numpy.uint64]):
    """
    usage.scipy: 2
    usage.skimage: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, int, int], /, *, dtype: Type[int]):
    """
    usage.skimage: 4
    """
    ...


@overload
def zeros(_0: Tuple[int, int, int, int], /, *, dtype: Type[int]):
    """
    usage.skimage: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: Type[numpy.int8]):
    """
    usage.scipy: 4
    usage.skimage: 2
    """
    ...


@overload
def zeros(_0: Tuple[int, int, int], /, *, dtype: Type[numpy.int8]):
    """
    usage.skimage: 1
    """
    ...


@overload
def zeros(_0: Tuple[int], _1: Type[bool], /):
    """
    usage.skimage: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, int, int], _1: Type[bool], /):
    """
    usage.skimage: 4
    """
    ...


@overload
def zeros(_0: Tuple[int, int], _1: Type[numpy.uint16], /):
    """
    usage.scipy: 10
    usage.skimage: 2
    """
    ...


@overload
def zeros(_0: Tuple[int, int, int], _1: Type[numpy.uint16], /):
    """
    usage.skimage: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, int, int], _1: Type[int], /):
    """
    usage.skimage: 6
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: Type[numpy.bool_]):
    """
    usage.scipy: 1
    usage.skimage: 4
    """
    ...


@overload
def zeros(_0: Tuple[int], /, *, dtype: Type[bool]):
    """
    usage.scipy: 3
    usage.skimage: 1
    usage.sklearn: 2
    usage.xarray: 1
    """
    ...


@overload
def zeros(_0: Tuple[int], /, *, dtype: Type[numpy.uint8], order: Literal["F"]):
    """
    usage.skimage: 1
    """
    ...


@overload
def zeros(
    _0: Tuple[int, int, int], /, *, dtype: Type[numpy.uint8], order: Literal["C"]
):
    """
    usage.skimage: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: Type[numpy.uint8], order: Literal["C"]):
    """
    usage.skimage: 1
    """
    ...


@overload
def zeros(
    _0: Tuple[int, int, int, int], /, *, dtype: Type[numpy.uint8], order: Literal["C"]
):
    """
    usage.skimage: 1
    """
    ...


@overload
def zeros(
    _0: Tuple[int, int, int, int, int],
    /,
    *,
    dtype: Type[numpy.uint8],
    order: Literal["C"],
):
    """
    usage.skimage: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: Type[numpy.uint8], order: Literal["F"]):
    """
    usage.skimage: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, int, int, int], /, *, dtype: Type[numpy.uint8]):
    """
    usage.skimage: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, int, int], /, *, dtype: numpy.dtype):
    """
    usage.matplotlib: 3
    usage.scipy: 24
    usage.skimage: 4
    usage.xarray: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, int, int, int], /, *, dtype: numpy.dtype):
    """
    usage.scipy: 8
    usage.skimage: 4
    """
    ...


@overload
def zeros(_0: Tuple[int, int, int, int, int], /, *, dtype: numpy.dtype):
    """
    usage.scipy: 2
    usage.skimage: 2
    """
    ...


@overload
def zeros(_0: Tuple[int, int, int], _1: numpy.dtype, /):
    """
    usage.matplotlib: 3
    usage.scipy: 15
    usage.skimage: 2
    """
    ...


@overload
def zeros(_0: Tuple[int, int, int], /, *, dtype: Literal["float64"]):
    """
    usage.scipy: 1
    usage.skimage: 2
    """
    ...


@overload
def zeros(_0: Tuple[int, int, int], /, *, dtype: Literal["float32"]):
    """
    usage.skimage: 2
    """
    ...


@overload
def zeros(_0: numpy.ndarray, /):
    """
    usage.skimage: 1
    """
    ...


@overload
def zeros(_0: list, /):
    """
    usage.scipy: 1
    usage.skimage: 2
    """
    ...


@overload
def zeros(_0: List[int], _1: numpy.dtype, /):
    """
    usage.scipy: 41
    usage.skimage: 1
    """
    ...


@overload
def zeros(_0: int, _1: Type[int], /):
    """
    usage.scipy: 2
    usage.skimage: 4
    """
    ...


@overload
def zeros(_0: Tuple[int, numpy.int64], /):
    """
    usage.scipy: 1
    usage.skimage: 1
    usage.sklearn: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, int, int, int], /, *, dtype: Type[numpy.float64]):
    """
    usage.scipy: 1
    usage.skimage: 3
    """
    ...


@overload
def zeros(_0: Tuple[int, int, int, int, int], /, *, dtype: Type[numpy.float64]):
    """
    usage.skimage: 2
    """
    ...


@overload
def zeros(_0: Tuple[int, int, int, int, int, int], /, *, dtype: Type[numpy.float64]):
    """
    usage.skimage: 2
    """
    ...


@overload
def zeros(
    _0: Tuple[int, int, int, int, int, int, int], /, *, dtype: Type[numpy.float64]
):
    """
    usage.skimage: 2
    """
    ...


@overload
def zeros(_0: Tuple[int, int], _1: Type[numpy.bool_], /):
    """
    usage.skimage: 2
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: Literal["bool"]):
    """
    usage.scipy: 1
    usage.skimage: 2
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: Literal["int8"]):
    """
    usage.scipy: 1
    usage.skimage: 2
    """
    ...


@overload
def zeros(_0: numpy.int64, /):
    """
    usage.matplotlib: 2
    usage.scipy: 4
    usage.skimage: 2
    usage.sklearn: 2
    """
    ...


@overload
def zeros(_0: int, /, *, dtype: Type[numpy.int64]):
    """
    usage.scipy: 18
    usage.sklearn: 6
    usage.xarray: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: Literal["S1"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def zeros(_0: Tuple[int], /, *, dtype: Type[numpy.bytes_]):
    """
    usage.xarray: 1
    """
    ...


@overload
def zeros(_0: Tuple[None, ...], /):
    """
    usage.scipy: 7
    usage.xarray: 1
    """
    ...


@overload
def zeros(_0: Tuple[int], /, *, dtype: Literal["bool"]):
    """
    usage.xarray: 1
    """
    ...


@overload
def zeros(*, dtype: Type[float], shape: Tuple[int, int]):
    """
    usage.xarray: 8
    """
    ...


@overload
def zeros(*, dtype: Type[int], shape: Tuple[int, int]):
    """
    usage.xarray: 8
    """
    ...


@overload
def zeros(
    _0: Union[int, numpy.int64, Tuple[int, ...]] = ...,
    _1: Union[numpy.dtype, Literal["float64", "float32"]] = ...,
    /,
    *,
    dtype: Union[
        Literal["uint64", "float64", "bool", "i4,f4,a10", "int64"], numpy.dtype, type
    ] = ...,
    shape: Tuple[int, int] = ...,
):
    """
    usage.pandas: 125
    """
    ...


@overload
def zeros(_0: Tuple[int], /, *, dtype: Literal["i"]):
    """
    usage.scipy: 4
    """
    ...


@overload
def zeros(_0: int, /, *, dtype: Type[numpy.complex128]):
    """
    usage.scipy: 19
    """
    ...


@overload
def zeros(_0: int, /, *, dtype: Type[numpy.complex256]):
    """
    usage.scipy: 5
    """
    ...


@overload
def zeros(_0: int, /, *, dtype: Type[numpy.complex64]):
    """
    usage.scipy: 10
    """
    ...


@overload
def zeros(_0: Tuple[int], _1: Type[float], /):
    """
    usage.scipy: 11
    usage.sklearn: 1
    """
    ...


@overload
def zeros(_0: Tuple[int], _1: numpy.dtype, /):
    """
    usage.scipy: 24
    """
    ...


@overload
def zeros(_0: Tuple[int], _1: Type[complex], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: numpy.dtype, order: None):
    """
    usage.scipy: 15
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: numpy.dtype, order: Literal["f"]):
    """
    usage.scipy: 15
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, order: Literal["F"]):
    """
    usage.scipy: 4
    """
    ...


@overload
def zeros(_0: int, _1: Literal["float"], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: Type[numpy.float64], order: Literal["F"]):
    """
    usage.scipy: 2
    usage.sklearn: 1
    """
    ...


@overload
def zeros(_0: int, _1: Type[float], /):
    """
    usage.scipy: 9
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: numpy.dtype, order: Literal["F"]):
    """
    usage.dask: 1
    usage.scipy: 11
    usage.sklearn: 6
    """
    ...


@overload
def zeros(_0: Tuple[int, int, int, int, int, int], /, *, dtype: numpy.dtype):
    """
    usage.scipy: 3
    """
    ...


@overload
def zeros(_0: Tuple[int], /, *, dtype: Type[numpy.int32]):
    """
    usage.scipy: 3
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: Type[numpy.complex128]):
    """
    usage.scipy: 26
    """
    ...


@overload
def zeros(_0: Tuple[int, int, int], /, *, dtype: Type[numpy.complex128]):
    """
    usage.scipy: 2
    """
    ...


@overload
def zeros(_0: Tuple[int, numpy.int64], /, *, dtype: numpy.dtype):
    """
    usage.scipy: 21
    usage.sklearn: 1
    """
    ...


@overload
def zeros(_0: int, /, *, dtype: Type[numpy.int32]):
    """
    usage.scipy: 11
    usage.sklearn: 2
    """
    ...


@overload
def zeros(_0: Tuple[None, ...], _1: numpy.dtype, /):
    """
    usage.scipy: 7
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: Literal["f8"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: List[Tuple[str, Type[object]]]):
    """
    usage.scipy: 5
    """
    ...


@overload
def zeros(
    _0: Tuple[int, int], /, *, dtype: List[Tuple[Literal["my_fieldname"], Type[object]]]
):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(
    _0: Tuple[int], /, *, dtype: List[Tuple[Literal["f1", "f2"], Literal["f8", "S10"]]]
):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: int, _1: numpy.dtype, /):
    """
    usage.scipy: 109
    """
    ...


@overload
def zeros(_0: int, _1: Type[numpy.int32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(
    _0: Tuple[int],
    /,
    *,
    dtype: List[
        Tuple[
            Literal["mdtype", "byte_count", "val"], Union[Literal["<u2"], numpy.dtype]
        ]
    ],
):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[int], /, *, dtype: List[Tuple[Union[str, numpy.dtype, int], ...]]):
    """
    usage.scipy: 10
    """
    ...


@overload
def zeros(
    _0: Tuple[int],
    /,
    *,
    dtype: List[
        Tuple[
            Literal["byte_count", "mdtype", "val"], Union[Literal[">u2"], numpy.dtype]
        ]
    ],
):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: List[Tuple[Literal["f1"], Literal["f"]]]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: int, /, *, dtype: numpy.dtype):
    """
    usage.dask: 7
    usage.scipy: 59
    usage.sklearn: 44
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: Literal["intp"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: Literal["uint64"]):
    """
    usage.scipy: 2
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: Literal["d"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: Literal["D"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: int, /, *, dtype: Literal["intc"]):
    """
    usage.scipy: 2
    """
    ...


@overload
def zeros(_0: int, /, *, dtype: Literal["intp"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: numpy.dtype, order: Literal["c"]):
    """
    usage.scipy: 15
    """
    ...


@overload
def zeros(_0: int, /, *, dtype: Literal["uint64"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: int, /, *, dtype: Literal["float"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: int, /, *, dtype: Literal["complex"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, int], _1: Literal["D"], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: Type[numpy.int32]):
    """
    usage.scipy: 14
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: Type[numpy.complex64]):
    """
    usage.scipy: 20
    """
    ...


@overload
def zeros(_0: numpy.ndarray, /, *, dtype: numpy.dtype):
    """
    usage.scipy: 6
    """
    ...


@overload
def zeros(_0: Tuple[int, int], _1: Literal["f"], _2: Literal["F"], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def zeros(_0: Tuple[int, int], _1: Literal["d"], _2: Literal["F"], /):
    """
    usage.scipy: 7
    """
    ...


@overload
def zeros(_0: Tuple[int, int], _1: Literal["F"], _2: Literal["F"], /):
    """
    usage.scipy: 3
    """
    ...


@overload
def zeros(_0: Tuple[int, int], _1: Literal["D"], _2: Literal["F"], /):
    """
    usage.scipy: 3
    """
    ...


@overload
def zeros(_0: Tuple[int, int], _1: Literal["d"], /):
    """
    usage.scipy: 14
    """
    ...


@overload
def zeros(_0: Tuple[int, int], _1: Literal["l"], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, int, int, int], /, *, dtype: Type[numpy.complex128]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, int], _1: numpy.dtype, /):
    """
    usage.matplotlib: 3
    usage.scipy: 24
    """
    ...


@overload
def zeros(
    _0: Tuple[int, int],
    _1: List[Tuple[Literal["a", "junk"], Union[numpy.dtype, Literal["S1"]]]],
    /,
):
    """
    usage.scipy: 4
    """
    ...


@overload
def zeros(
    _0: Tuple[int],
    _1: List[Tuple[Literal["a", "junk"], Union[numpy.dtype, Literal["S1"]]]],
    /,
):
    """
    usage.scipy: 4
    """
    ...


@overload
def zeros(_0: int, _1: Type[numpy.int64], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def zeros(_0: Tuple[int, int], _1: Type[numpy.float32], /):
    """
    usage.scipy: 18
    """
    ...


@overload
def zeros(_0: Tuple[int, int], _1: Type[numpy.float64], /):
    """
    usage.scipy: 18
    """
    ...


@overload
def zeros(_0: Tuple[int, int], _1: Type[numpy.complex64], /):
    """
    usage.scipy: 5
    """
    ...


@overload
def zeros(_0: Tuple[int, int], _1: Type[numpy.complex128], /):
    """
    usage.scipy: 7
    """
    ...


@overload
def zeros(_0: Tuple[int, numpy.int64], /, *, dtype: Type[numpy.float32]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, numpy.int64], /, *, dtype: Type[numpy.float64]):
    """
    usage.scipy: 1
    usage.sklearn: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, numpy.int64], /, *, dtype: Type[numpy.complex64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, numpy.int64], /, *, dtype: Type[numpy.complex128]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: int, /, *, dtype: Type[numpy.float32]):
    """
    usage.scipy: 8
    """
    ...


@overload
def zeros(_0: int, /, *, dtype: Type[float]):
    """
    usage.dask: 1
    usage.matplotlib: 1
    usage.scipy: 6
    usage.sklearn: 2
    """
    ...


@overload
def zeros(_0: List[int], /, *, dtype: Literal["int32"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[int], /, *, dtype: Type[numpy.uint8]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[int], /, *, dtype: Type[numpy.uint16]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[int], /, *, dtype: Type[numpy.uint32]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[int], /, *, dtype: Type[numpy.uint64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[int], /, *, dtype: Type[numpy.int8]):
    """
    usage.scipy: 2
    """
    ...


@overload
def zeros(_0: Tuple[int], /, *, dtype: Type[numpy.int16]):
    """
    usage.matplotlib: 1
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[int], /, *, dtype: Type[numpy.int64]):
    """
    usage.scipy: 2
    """
    ...


@overload
def zeros(_0: Tuple[int], /, *, dtype: Type[numpy.float32]):
    """
    usage.scipy: 3
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: Literal["uint16"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: Literal["uint32"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: Literal["int16"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: Literal["int32"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: Literal["int64"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[int], /, *, dtype: Literal["uint64"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[int], /, *, dtype: Literal["float64"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[int], /, *, dtype: Literal["int64"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[int], /, *, dtype: Literal["float16"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: numpy.int64, _1: numpy.dtype, /):
    """
    usage.scipy: 20
    """
    ...


@overload
def zeros(_0: numpy.int64, _1: Type[int], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def zeros(_0: List[int], /, *, dtype: Type[numpy.int8]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: List[int], /, *, dtype: Type[numpy.int16]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: List[int], /, *, dtype: Type[numpy.uint16]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: List[int], /, *, dtype: Type[numpy.int32]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: List[int], /, *, dtype: Type[numpy.uint32]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: List[int], /, *, dtype: Type[numpy.int64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: List[int], /, *, dtype: Type[numpy.uint64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: List[int], /, *, dtype: Type[numpy.float32]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: List[int], /, *, dtype: Type[numpy.float64]):
    """
    usage.matplotlib: 5
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: List[int], _1: Type[numpy.int8], /):
    """
    usage.scipy: 17
    """
    ...


@overload
def zeros(_0: List[int], _1: Type[numpy.uint8], /):
    """
    usage.scipy: 17
    """
    ...


@overload
def zeros(_0: List[int], _1: Type[numpy.int16], /):
    """
    usage.scipy: 17
    """
    ...


@overload
def zeros(_0: List[int], _1: Type[numpy.uint16], /):
    """
    usage.scipy: 17
    """
    ...


@overload
def zeros(_0: List[int], _1: Type[numpy.int32], /):
    """
    usage.scipy: 17
    """
    ...


@overload
def zeros(_0: List[int], _1: Type[numpy.uint32], /):
    """
    usage.scipy: 17
    """
    ...


@overload
def zeros(_0: List[int], _1: Type[numpy.int64], /):
    """
    usage.scipy: 17
    """
    ...


@overload
def zeros(_0: List[int], _1: Type[numpy.uint64], /):
    """
    usage.scipy: 17
    """
    ...


@overload
def zeros(_0: List[int], _1: Type[numpy.float32], /):
    """
    usage.scipy: 17
    """
    ...


@overload
def zeros(_0: List[int], _1: Type[numpy.float64], /):
    """
    usage.scipy: 17
    """
    ...


@overload
def zeros(_0: list, /, *, dtype: Type[int]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: List[int], /, *, dtype: Type[int]):
    """
    usage.scipy: 4
    usage.sklearn: 1
    """
    ...


@overload
def zeros(_0: numpy.int64, _1: Type[numpy.int64], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def zeros(_0: Tuple[int], _1: Type[object], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: Type[numpy.int16]):
    """
    usage.matplotlib: 1
    usage.scipy: 2
    usage.sklearn: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, int], _1: Type[numpy.int8], /):
    """
    usage.scipy: 10
    """
    ...


@overload
def zeros(_0: Tuple[int, int], _1: Type[numpy.int16], /):
    """
    usage.scipy: 10
    """
    ...


@overload
def zeros(_0: Tuple[int, int], _1: Type[numpy.int32], /):
    """
    usage.scipy: 13
    """
    ...


@overload
def zeros(_0: Tuple[int, int], _1: Type[numpy.uint32], /):
    """
    usage.scipy: 10
    """
    ...


@overload
def zeros(_0: Tuple[int, int], _1: Type[numpy.int64], /):
    """
    usage.scipy: 10
    """
    ...


@overload
def zeros(_0: Tuple[int, int], _1: Type[numpy.uint64], /):
    """
    usage.scipy: 10
    """
    ...


@overload
def zeros(_0: Tuple[None, ...], /, *, dtype: Type[numpy.float64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[None, ...], /, *, dtype: Type[numpy.int8]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[None, ...], /, *, dtype: Type[numpy.uint8]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[None, ...], /, *, dtype: Type[numpy.int16]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[None, ...], /, *, dtype: Type[numpy.uint16]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[None, ...], /, *, dtype: Type[numpy.int32]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[None, ...], /, *, dtype: Type[numpy.uint32]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[None, ...], /, *, dtype: Type[numpy.int64]):
    """
    usage.scipy: 2
    """
    ...


@overload
def zeros(_0: Tuple[None, ...], /, *, dtype: Type[numpy.uint64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[None, ...], /, *, dtype: Type[numpy.float32]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: List[int], /, *, dtype: Literal["float64"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: List[int], /, *, dtype: Literal["int64"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[int], /, *, dtype: Literal["float32"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[numpy.int64, numpy.int64], /, *, dtype: Literal["float64"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(
    _0: Tuple[numpy.int64, numpy.int64, numpy.int64], /, *, dtype: Literal["float64"]
):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, int, int], /, *, dtype: Type[numpy.int32]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: List[int], _1: Type[bool], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[None, ...], /, *, dtype: Type[bool]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: list, _1: Type[numpy.int8], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: list, _1: Type[numpy.uint8], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: list, _1: Type[numpy.int16], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: list, _1: Type[numpy.uint16], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: list, _1: Type[numpy.int32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: list, _1: Type[numpy.uint32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: list, _1: Type[numpy.int64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: list, _1: Type[numpy.uint64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: list, _1: Type[numpy.float32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: list, _1: Type[numpy.float64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: int, _1: Type[numpy.float64], /):
    """
    usage.dask: 1
    usage.scipy: 10
    usage.sklearn: 2
    """
    ...


@overload
def zeros(_0: Tuple[int], _1: Type[numpy.float64], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: int, _1: Literal["S60"], /):
    """
    usage.scipy: 4
    """
    ...


@overload
def zeros(_0: Tuple[int], _1: Type[numpy.int32], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[numpy.int64, int], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def zeros(_0: List[Union[int, numpy.int64]], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: int, /, *, dtype: Literal["d"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: Literal["double"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: numpy.int64, /, *, dtype: Type[numpy.float64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[int], /, *, dtype: Type[int]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: int, /, *, dtype: Literal["D"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[int], _1: Literal["l"], /):
    """
    usage.scipy: 3
    """
    ...


@overload
def zeros(_0: Tuple[int], _1: Literal["d"], /):
    """
    usage.scipy: 11
    """
    ...


@overload
def zeros(_0: int, _1: Type[numpy.complex128], /):
    """
    usage.scipy: 8
    """
    ...


@overload
def zeros(_0: int, _1: Literal["d"], /):
    """
    usage.matplotlib: 3
    usage.scipy: 11
    """
    ...


@overload
def zeros(_0: int, _1: Type[bool], /):
    """
    usage.matplotlib: 1
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: numpy.ndarray, /, *, dtype: numpy.dtype, order: Literal["C"]):
    """
    usage.dask: 1
    usage.scipy: 4
    """
    ...


@overload
def zeros(_0: Tuple[int], /, *, dtype: Type[numpy.complex64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[int], _1: Literal["D"], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, int, int], _1: Literal["l"], /):
    """
    usage.scipy: 3
    """
    ...


@overload
def zeros(_0: int, _1: Literal["f"], /):
    """
    usage.scipy: 14
    """
    ...


@overload
def zeros(_0: int, _1: Literal["F"], /):
    """
    usage.scipy: 5
    """
    ...


@overload
def zeros(_0: Tuple[int, int], _1: Type[complex], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, int, int, int], _1: Literal["d"], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def zeros(_0: int, /, *, dtype: Type[numpy.bool_]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, int], _1: Literal["f"], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def zeros(_0: int, _1: Literal["int"], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def zeros(_0: int, /, *, dtype: Literal["f"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, int], _1: Literal["F"], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: int, _1: Literal["D"], /):
    """
    usage.scipy: 2
    """
    ...


@overload
def zeros(_0: int, /, *, dtype: Literal["F"]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: int, /, *, dtype: Type[complex]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, numpy.int64], /, *, dtype: Type[int]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, numpy.int64], /, *, dtype: Type[complex]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: int, /, *, dtype: Type[numpy.uint64]):
    """
    usage.scipy: 6
    """
    ...


@overload
def zeros(_0: int, /, *, dtype: Type[numpy.float128]):
    """
    usage.scipy: 4
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: numpy.dtype, order: Literal["C"]):
    """
    usage.dask: 1
    usage.scipy: 1
    usage.sklearn: 4
    """
    ...


@overload
def zeros(_0: Tuple[int], /, *, dtype: Type[numpy.bool_]):
    """
    usage.scipy: 3
    """
    ...


@overload
def zeros(_0: Tuple[None, ...], _1: Literal["d"], /):
    """
    usage.scipy: 4
    """
    ...


@overload
def zeros(_0: Tuple[int], /, *, dtype: Type[float]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[numpy.int64, int, int], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: Tuple[None, ...], /, *, dtype: Type[numpy.bool_]):
    """
    usage.scipy: 2
    """
    ...


@overload
def zeros(_0: Tuple[int, int, int], /, *, dtype: Type[numpy.bool_]):
    """
    usage.scipy: 2
    """
    ...


@overload
def zeros(_0: Tuple[int, int, int, int], /, *, dtype: Type[numpy.bool_]):
    """
    usage.scipy: 2
    """
    ...


@overload
def zeros(_0: Tuple[int, int, int], _1: Literal["d"], /):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros(_0: int, /, *, dtype: Type[numpy.int8]):
    """
    usage.matplotlib: 4
    """
    ...


@overload
def zeros(*, shape: int):
    """
    usage.matplotlib: 1
    usage.sklearn: 4
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: Type[numpy.float128]):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def zeros(_0: Tuple[numpy.int64, numpy.int64], /):
    """
    usage.matplotlib: 1
    """
    ...


@overload
def zeros(_0: int, /, *, dtype: Literal[">f8"]):
    """
    usage.dask: 1
    """
    ...


@overload
def zeros(_0: int, /, *, dtype: Literal["<f4"]):
    """
    usage.dask: 1
    """
    ...


@overload
def zeros(_0: int, /, *, dtype: Literal["<f8"]):
    """
    usage.dask: 1
    """
    ...


@overload
def zeros(*, shape: Tuple[int, int]):
    """
    usage.dask: 13
    usage.sklearn: 11
    """
    ...


@overload
def zeros(*, shape: Tuple[int, int, int]):
    """
    usage.dask: 8
    """
    ...


@overload
def zeros(_0: List[int], /, *, dtype: numpy.dtype, order: Literal["C"]):
    """
    usage.dask: 1
    """
    ...


@overload
def zeros(_0: List[int], /, *, dtype: numpy.dtype, order: Literal["F"]):
    """
    usage.dask: 1
    """
    ...


@overload
def zeros(_0: numpy.ndarray, /, *, dtype: numpy.dtype, order: Literal["F"]):
    """
    usage.dask: 1
    """
    ...


@overload
def zeros(_0: Tuple[None, ...], /, *, dtype: numpy.dtype):
    """
    usage.dask: 3
    """
    ...


@overload
def zeros(_0: int, /, *, order: Literal["C"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, order: Literal["C"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def zeros(*, dtype: Type[numpy.float64], shape: Tuple[int, int]):
    """
    usage.sklearn: 6
    """
    ...


@overload
def zeros(_0: int, /, *, dtype: Type[numpy.float64], order: Literal["C"]):
    """
    usage.sklearn: 3
    """
    ...


@overload
def zeros(*, dtype: numpy.dtype, shape: Tuple[int, int]):
    """
    usage.sklearn: 4
    """
    ...


@overload
def zeros(_0: int, /, *, dtype: Type[object]):
    """
    usage.sklearn: 3
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: Type[numpy.float64], order: Literal["C"]):
    """
    usage.sklearn: 3
    """
    ...


@overload
def zeros(*, dtype: Type[numpy.float64], shape: int):
    """
    usage.sklearn: 1
    """
    ...


@overload
def zeros(_0: int, /, *, order: Literal["f"]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def zeros(_0: Tuple[int, int, int], _1: Type[float], /):
    """
    usage.sklearn: 1
    """
    ...


@overload
def zeros(*, dtype: Type[numpy.float64], order: Literal["C"], shape: int):
    """
    usage.sklearn: 2
    """
    ...


@overload
def zeros(_0: int, /, *, dtype: Type[numpy.int32], order: Literal["C"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def zeros(_0: Tuple[int], /, *, dtype: numpy.dtype, order: Literal["F"]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def zeros(_0: Tuple[int, int], /, *, dtype: Type[numpy.float32], order: Literal["F"]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def zeros(_0: Tuple[int], /, *, dtype: Type[numpy.float64], order: Literal["C"]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def zeros(*, shape: List[int]):
    """
    usage.sklearn: 1
    """
    ...


@overload
def zeros(_0: int, /, *, dtype: Literal["int"]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def zeros(*, dtype: numpy.dtype, shape: int):
    """
    usage.sklearn: 4
    """
    ...


def zeros(
    *_args: object,
    dtype: Union[
        type,
        str,
        numpy.dtype,
        List[Tuple[Union[str, Type[object], numpy.dtype, int], ...]],
    ] = ...,
    order: Union[Literal["C", "F", "f", "c"], None] = ...,
    shape: Union[List[int], Tuple[int, ...], int] = ...,
):
    """
    usage.dask: 52
    usage.matplotlib: 124
    usage.pandas: 125
    usage.sample-usage: 1
    usage.scipy: 2106
    usage.skimage: 757
    usage.sklearn: 597
    usage.xarray: 77
    """
    ...


@overload
def zeros_like(a: numpy.ndarray):
    """
    usage.dask: 3
    usage.matplotlib: 20
    usage.scipy: 109
    usage.skimage: 46
    usage.sklearn: 64
    usage.xarray: 3
    """
    ...


@overload
def zeros_like(a: Tuple[int, int]):
    """
    usage.skimage: 1
    """
    ...


@overload
def zeros_like(a: Tuple[int, int, int]):
    """
    usage.skimage: 1
    """
    ...


@overload
def zeros_like(a: numpy.ndarray, dtype: Type[bool]):
    """
    usage.scipy: 2
    usage.skimage: 6
    usage.sklearn: 3
    usage.xarray: 40
    """
    ...


@overload
def zeros_like(a: numpy.ndarray, dtype: Type[numpy.float64]):
    """
    usage.scipy: 3
    usage.skimage: 8
    usage.sklearn: 1
    """
    ...


@overload
def zeros_like(a: numpy.ndarray, dtype: Type[numpy.float32]):
    """
    usage.scipy: 3
    usage.skimage: 1
    """
    ...


@overload
def zeros_like(a: numpy.ndarray, dtype: Type[numpy.uint8]):
    """
    usage.skimage: 1
    """
    ...


@overload
def zeros_like(a: numpy.ndarray, dtype: Type[numpy.int32]):
    """
    usage.skimage: 1
    """
    ...


@overload
def zeros_like(a: numpy.ndarray, dtype: Type[numpy.uint8], order: Literal["C"]):
    """
    usage.skimage: 2
    """
    ...


@overload
def zeros_like(a: numpy.ndarray, dtype: Type[numpy.bool_]):
    """
    usage.skimage: 1
    """
    ...


@overload
def zeros_like(a: sparse._coo.core.COO, dtype: Type[bool]):
    """
    usage.xarray: 1
    """
    ...


@overload
def zeros_like(a: object, dtype: Type[bool]):
    """
    usage.xarray: 1
    """
    ...


@overload
def zeros_like(a: object):
    """
    usage.xarray: 2
    """
    ...


@overload
def zeros_like(a: xarray.core.dataarray.DataArray):
    """
    usage.xarray: 2
    """
    ...


@overload
def zeros_like(
    a: Union[pandas.core.indexes.datetimes.DatetimeIndex, numpy.ndarray],
    dtype: Literal["int64"] = ...,
):
    """
    usage.pandas: 20
    """
    ...


@overload
def zeros_like(a: numpy.matrix):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros_like(a: numpy.ndarray, dtype: Type[int]):
    """
    usage.scipy: 5
    usage.sklearn: 2
    """
    ...


@overload
def zeros_like(a: numpy.ndarray, dtype: Type[numpy.complex64]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros_like(a: numpy.ndarray, dtype: Type[numpy.complex128]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros_like(a: numpy.ndarray, dtype: Type[float]):
    """
    usage.scipy: 4
    """
    ...


@overload
def zeros_like(a: numpy.ndarray, dtype: Type[complex]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros_like(a: List[float], dtype: Type[int]):
    """
    usage.scipy: 1
    """
    ...


@overload
def zeros_like(a: numpy.ndarray, dtype: numpy.dtype):
    """
    usage.scipy: 4
    """
    ...


@overload
def zeros_like(a: numpy.ndarray, order: Literal["C"]):
    """
    usage.dask: 1
    """
    ...


@overload
def zeros_like(a: numpy.ndarray, order: Literal["F"]):
    """
    usage.dask: 1
    """
    ...


@overload
def zeros_like(a: numpy.ndarray, shape: None):
    """
    usage.dask: 1
    """
    ...


@overload
def zeros_like(a: numpy.ndarray, shape: Tuple[int, int]):
    """
    usage.dask: 3
    """
    ...


@overload
def zeros_like(a: numpy.ndarray, shape: int):
    """
    usage.dask: 1
    """
    ...


@overload
def zeros_like(a: numpy.ndarray, shape: Tuple[int, int, int]):
    """
    usage.dask: 1
    """
    ...


@overload
def zeros_like(a: numpy.ndarray, shape: Tuple[int, int, int, int, int]):
    """
    usage.dask: 1
    """
    ...


@overload
def zeros_like(a: numpy.ndarray, dtype: numpy.dtype, shape: int):
    """
    usage.dask: 2
    """
    ...


@overload
def zeros_like(a: numpy.ndarray, dtype: Type[numpy.uint8], order: Literal["F"]):
    """
    usage.sklearn: 2
    """
    ...


@overload
def zeros_like(a: int):
    """
    usage.sklearn: 3
    """
    ...


@overload
def zeros_like(a: numpy.ndarray, dtype: Type[numpy.int64]):
    """
    usage.sklearn: 1
    """
    ...


def zeros_like(
    a: object,
    dtype: Union[type, Type[bool], Literal["int64"], numpy.dtype] = ...,
    shape: Union[int, Tuple[int, ...], None] = ...,
    order: Literal["F", "C"] = ...,
):
    """
    usage.dask: 14
    usage.matplotlib: 20
    usage.pandas: 20
    usage.scipy: 135
    usage.skimage: 68
    usage.sklearn: 76
    usage.xarray: 49
    """
    ...


class AxisError:
    pass


class bool_:

    # usage.dask: 1
    __module__: ClassVar[object]

    # usage.pandas: 2
    __name__: ClassVar[object]

    # usage.pandas: 2
    type: ClassVar[object]

    @overload
    @classmethod
    def __ne__(cls, _0: numpy.dtype, /):
        """
        usage.scipy: 27
        usage.skimage: 1
        """
        ...

    @overload
    @classmethod
    def __ne__(
        cls, _0: Union[pandas._libs.missing.NAType, bool, numpy.dtype, numpy.bool_], /
    ):
        """
        usage.pandas: 16
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: numpy.bool_, /):
        """
        usage.matplotlib: 4
        usage.scipy: 2
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: numpy.ndarray, /):
        """
        usage.sklearn: 1
        """
        ...

    @classmethod
    def __ne__(
        cls,
        _0: Union[
            numpy.ndarray, numpy.dtype, pandas._libs.missing.NAType, bool, numpy.bool_
        ],
        /,
    ):
        """
        usage.matplotlib: 4
        usage.pandas: 16
        usage.scipy: 29
        usage.skimage: 1
        usage.sklearn: 1
        """
        ...

    # usage.dask: 4
    # usage.pandas: 3
    # usage.scipy: 2
    dtype: object

    # usage.dask: 5
    # usage.pandas: 3
    # usage.scipy: 3
    ndim: object

    # usage.dask: 7
    # usage.matplotlib: 1
    # usage.scipy: 2
    shape: object

    # usage.scipy: 1
    size: object

    # usage.pandas: 1
    values: object

    @overload
    def __add__(
        self,
        _0: Union[
            numpy.bool_, pandas.core.arrays.boolean.BooleanArray, int, numpy.ndarray
        ],
        /,
    ):
        """
        usage.pandas: 7
        """
        ...

    @overload
    def __add__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.longlong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.ulonglong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float64, /):
        """
        usage.matplotlib: 1
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex256, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: int, /):
        """
        usage.scipy: 1
        """
        ...

    def __add__(self, _0: object, /):
        """
        usage.matplotlib: 1
        usage.pandas: 7
        usage.scipy: 18
        """
        ...

    @overload
    def __and__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 93
        usage.xarray: 1
        """
        ...

    @overload
    def __and__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 31
        usage.xarray: 1
        """
        ...

    @overload
    def __and__(
        self,
        _0: Union[pandas.core.arrays.boolean.BooleanArray, numpy.bool_, numpy.ndarray],
        /,
    ):
        """
        usage.pandas: 9
        """
        ...

    @overload
    def __and__(self, _0: numpy.int64, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __and__(self, _0: bool, /):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def __and__(self, _0: int, /):
        """
        usage.scipy: 2
        """
        ...

    def __and__(self, _0: object, /):
        """
        usage.pandas: 9
        usage.scipy: 135
        usage.xarray: 2
        """
        ...

    def __bool__(self, /):
        """
        usage.dask: 12
        usage.matplotlib: 14
        usage.pandas: 66
        usage.scipy: 40
        usage.skimage: 18
        usage.sklearn: 67
        usage.xarray: 3
        """
        ...

    @overload
    def __eq__(self, _0: numpy.bool_, /):
        """
        usage.dask: 2
        usage.matplotlib: 10
        usage.scipy: 22
        usage.xarray: 2
        """
        ...

    @overload
    def __eq__(self, _0: bool, /):
        """
        usage.matplotlib: 1
        usage.scipy: 1
        usage.sklearn: 3
        usage.xarray: 2
        """
        ...

    @overload
    def __eq__(self, _0: object, /):
        """
        usage.pandas: 94
        """
        ...

    @overload
    def __eq__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 2
        usage.sklearn: 7
        """
        ...

    @overload
    def __eq__(self, _0: Literal["force accept"], /):
        """
        usage.scipy: 1
        """
        ...

    def __eq__(self, _0: object, /):
        """
        usage.dask: 2
        usage.matplotlib: 11
        usage.pandas: 94
        usage.scipy: 26
        usage.sklearn: 10
        usage.xarray: 4
        """
        ...

    def __floordiv__(
        self, _0: Union[numpy.ndarray, pandas.core.arrays.boolean.BooleanArray], /
    ):
        """
        usage.pandas: 2
        """
        ...

    def __ge__(self, _0: pandas._libs.missing.NAType, /):
        """
        usage.pandas: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, None, None, None], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, None], /):
        """
        usage.dask: 1
        """
        ...

    def __getitem__(self, _0: Tuple[Union[None, ellipsis], ...], /):
        """
        usage.dask: 2
        """
        ...

    @overload
    def __gt__(self, _0: pandas._libs.missing.NAType, /):
        """
        usage.pandas: 1
        """
        ...

    @overload
    def __gt__(self, _0: numpy.float64, /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __gt__(self, _0: float, /):
        """
        usage.sklearn: 1
        """
        ...

    def __gt__(self, _0: Union[float, pandas._libs.missing.NAType, numpy.float64], /):
        """
        usage.matplotlib: 1
        usage.pandas: 1
        usage.sklearn: 1
        """
        ...

    def __iand__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 1
        """
        ...

    def __invert__(self, /):
        """
        usage.dask: 1
        usage.matplotlib: 1
        usage.pandas: 1
        usage.scipy: 12
        usage.skimage: 3
        usage.xarray: 1
        """
        ...

    def __ior__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __le__(self, _0: pandas._libs.missing.NAType, /):
        """
        usage.pandas: 2
        """
        ...

    @overload
    def __le__(self, _0: int, /):
        """
        usage.sklearn: 1
        """
        ...

    def __le__(self, _0: Union[int, pandas._libs.missing.NAType], /):
        """
        usage.pandas: 2
        usage.sklearn: 1
        """
        ...

    @overload
    def __lt__(self, _0: pandas._libs.missing.NAType, /):
        """
        usage.pandas: 1
        """
        ...

    @overload
    def __lt__(self, _0: numpy.float64, /):
        """
        usage.matplotlib: 1
        """
        ...

    def __lt__(self, _0: Union[numpy.float64, pandas._libs.missing.NAType], /):
        """
        usage.matplotlib: 1
        usage.pandas: 1
        """
        ...

    def __mod__(
        self, _0: Union[numpy.ndarray, pandas.core.arrays.boolean.BooleanArray], /
    ):
        """
        usage.pandas: 2
        """
        ...

    @overload
    def __mul__(
        self, _0: Union[numpy.ndarray, pandas.core.arrays.boolean.BooleanArray], /
    ):
        """
        usage.pandas: 2
        """
        ...

    @overload
    def __mul__(self, _0: int, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __mul__(self, _0: numpy.int64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __mul__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __mul__(self, _0: bool, /):
        """
        usage.scipy: 2
        """
        ...

    def __mul__(self, _0: object, /):
        """
        usage.pandas: 2
        usage.scipy: 10
        """
        ...

    @overload
    def __or__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 5
        usage.xarray: 2
        """
        ...

    @overload
    def __or__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 5
        usage.xarray: 1
        """
        ...

    @overload
    def __or__(self, _0: bool, /):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __or__(
        self, _0: Union[pandas.core.arrays.boolean.BooleanArray, numpy.bool_], /
    ):
        """
        usage.pandas: 3
        """
        ...

    def __or__(
        self,
        _0: Union[
            numpy.bool_, numpy.ndarray, bool, pandas.core.arrays.boolean.BooleanArray
        ],
        /,
    ):
        """
        usage.pandas: 3
        usage.scipy: 10
        usage.xarray: 5
        """
        ...

    def __pow__(
        self,
        _0: Union[
            pandas._libs.missing.NAType,
            pandas.core.arrays.boolean.BooleanArray,
            numpy.ndarray,
        ],
        /,
    ):
        """
        usage.pandas: 3
        """
        ...

    @overload
    def __radd__(self, _0: Union[pandas._libs.missing.NAType, numpy.bool_], /):
        """
        usage.pandas: 6
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float64, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int64, /):
        """
        usage.scipy: 14
        """
        ...

    @overload
    def __radd__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.longlong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.ulonglong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex256, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __radd__(self, _0: int, /):
        """
        usage.scipy: 6
        """
        ...

    def __radd__(self, _0: object, /):
        """
        usage.pandas: 6
        usage.scipy: 41
        """
        ...

    @overload
    def __rand__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 93
        usage.xarray: 1
        """
        ...

    @overload
    def __rand__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 50
        usage.xarray: 1
        """
        ...

    @overload
    def __rand__(self, _0: dask.array.core.Array, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __rand__(
        self, _0: Union[pandas.core.arrays.boolean.BooleanArray, numpy.bool_], /
    ):
        """
        usage.pandas: 9
        """
        ...

    @overload
    def __rand__(self, _0: int, /):
        """
        usage.scipy: 18
        """
        ...

    @overload
    def __rand__(self, _0: numpy.int64, /):
        """
        usage.scipy: 20
        """
        ...

    @overload
    def __rand__(self, _0: bool, /):
        """
        usage.scipy: 8
        """
        ...

    def __rand__(self, _0: object, /):
        """
        usage.pandas: 9
        usage.scipy: 189
        usage.xarray: 3
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.float64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rmul__(self, _0: float, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.int64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 4
        """
        ...

    def __rmul__(
        self,
        _0: Union[numpy.bool_, numpy.int64, numpy.float64, float, numpy.ndarray],
        /,
    ):
        """
        usage.scipy: 11
        """
        ...

    @overload
    def __ror__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 5
        usage.xarray: 2
        """
        ...

    @overload
    def __ror__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 1
        usage.xarray: 1
        """
        ...

    @overload
    def __ror__(self, _0: bool, /):
        """
        usage.scipy: 1
        usage.xarray: 2
        """
        ...

    @overload
    def __ror__(
        self, _0: Union[pandas.core.arrays.boolean.BooleanArray, numpy.bool_], /
    ):
        """
        usage.pandas: 3
        """
        ...

    def __ror__(
        self,
        _0: Union[
            bool, numpy.bool_, numpy.ndarray, pandas.core.arrays.boolean.BooleanArray
        ],
        /,
    ):
        """
        usage.pandas: 3
        usage.scipy: 7
        usage.xarray: 5
        """
        ...

    @overload
    def __rpow__(self, _0: int, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __rpow__(self, _0: pandas._libs.missing.NAType, /):
        """
        usage.pandas: 1
        """
        ...

    def __rpow__(self, _0: Union[pandas._libs.missing.NAType, int], /):
        """
        usage.pandas: 1
        usage.skimage: 1
        """
        ...

    def __rsub__(self, _0: int, /):
        """
        usage.scipy: 13
        """
        ...

    @overload
    def __rxor__(self, _0: pandas.core.arrays.boolean.BooleanArray, /):
        """
        usage.pandas: 1
        """
        ...

    @overload
    def __rxor__(self, _0: numpy.bool_, /):
        """
        usage.matplotlib: 3
        """
        ...

    def __rxor__(
        self, _0: Union[numpy.bool_, pandas.core.arrays.boolean.BooleanArray], /
    ):
        """
        usage.matplotlib: 3
        usage.pandas: 1
        """
        ...

    def __sub__(
        self, _0: Union[numpy.ndarray, pandas.core.arrays.boolean.BooleanArray], /
    ):
        """
        usage.pandas: 2
        """
        ...

    def __truediv__(
        self, _0: Union[numpy.ndarray, pandas.core.arrays.boolean.BooleanArray], /
    ):
        """
        usage.pandas: 2
        """
        ...

    @overload
    def __xor__(self, _0: pandas.core.arrays.boolean.BooleanArray, /):
        """
        usage.pandas: 1
        """
        ...

    @overload
    def __xor__(self, _0: numpy.bool_, /):
        """
        usage.matplotlib: 3
        """
        ...

    def __xor__(
        self, _0: Union[numpy.bool_, pandas.core.arrays.boolean.BooleanArray], /
    ):
        """
        usage.matplotlib: 3
        usage.pandas: 1
        """
        ...

    def all(self, /):
        """
        usage.dask: 1
        usage.pandas: 4
        usage.scipy: 3
        usage.sklearn: 1
        usage.xarray: 9
        """
        ...

    def any(self, /):
        """
        usage.dask: 1
        usage.pandas: 6
        usage.scipy: 10
        usage.xarray: 2
        """
        ...

    @overload
    def astype(self, _0: numpy.dtype, /):
        """
        usage.pandas: 1
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.float64], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.float32], /):
        """
        usage.matplotlib: 2
        """
        ...

    def astype(self, _0: Union[type, numpy.dtype], /):
        """
        usage.matplotlib: 3
        usage.pandas: 1
        """
        ...

    def item(self, /):
        """
        usage.pandas: 12
        """
        ...

    def squeeze(self, /):
        """
        usage.pandas: 1
        """
        ...

    def sum(self, /):
        """
        usage.scipy: 2
        """
        ...


class broadcast:

    # usage.scipy: 2
    # usage.xarray: 4
    shape: object


class bytes_:

    # usage.matplotlib: 1
    __mro__: ClassVar[object]

    # usage.pandas: 2
    __name__: ClassVar[object]

    # usage.dask: 1
    ndim: object

    def __add__(self, _0: float, /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.ndarray, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.bytes_, /):
        """
        usage.pandas: 2
        """
        ...

    def __eq__(self, _0: Union[numpy.bytes_, numpy.ndarray], /):
        """
        usage.pandas: 2
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: slice[int, int, int], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: slice[None, None, None], /):
        """
        usage.xarray: 1
        """
        ...

    def __getitem__(
        self, _0: slice[Union[int, None], Union[int, None], Union[int, None]], /
    ):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __iadd__(self, _0: bytes, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __iadd__(self, _0: numpy.bytes_, /):
        """
        usage.xarray: 1
        """
        ...

    def __iadd__(self, _0: Union[numpy.bytes_, bytes], /):
        """
        usage.xarray: 2
        """
        ...

    def __radd__(self, _0: bytes, /):
        """
        usage.xarray: 1
        """
        ...

    def decode(self, /, encoding: Literal["utf-8"]):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def find(self, _0: numpy.bytes_, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def find(self, _0: numpy.bytes_, _1: int, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def find(self, _0: numpy.bytes_, _1: int, _2: int, /):
        """
        usage.xarray: 1
        """
        ...

    def find(self, _0: numpy.bytes_, _1: int = ..., _2: int = ..., /):
        """
        usage.xarray: 3
        """
        ...

    @overload
    def rfind(self, _0: numpy.bytes_, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def rfind(self, _0: numpy.bytes_, _1: int, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def rfind(self, _0: numpy.bytes_, _1: int, _2: int, /):
        """
        usage.xarray: 1
        """
        ...

    def rfind(self, _0: numpy.bytes_, _1: int = ..., _2: int = ..., /):
        """
        usage.xarray: 3
        """
        ...

    def upper(self, /):
        """
        usage.xarray: 1
        """
        ...


class complex128:

    # usage.pandas: 2
    __name__: ClassVar[object]

    # usage.scipy: 1
    __class__: object

    # usage.dask: 1
    # usage.pandas: 4
    # usage.scipy: 16
    dtype: object

    # usage.scipy: 2
    flags: object

    # usage.scipy: 25
    # usage.skimage: 1
    imag: object

    # usage.dask: 5
    # usage.pandas: 1
    ndim: object

    # usage.matplotlib: 2
    # usage.scipy: 32
    # usage.skimage: 1
    real: object

    # usage.dask: 5
    shape: object

    # usage.scipy: 1
    size: object

    @overload
    def __add__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 21
        """
        ...

    @overload
    def __add__(self, _0: complex, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __add__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: int, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex64, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __add__(self, _0: numpy.int32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.longlong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.ulonglong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex256, /):
        """
        usage.scipy: 1
        """
        ...

    def __add__(self, _0: object, /):
        """
        usage.scipy: 46
        """
        ...

    def __bool__(self, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 1
        usage.skimage: 1
        """
        ...

    @overload
    def __eq__(
        self, _0: Union[numpy.ndarray, float, complex, int, numpy.complex128], /
    ):
        """
        usage.pandas: 6
        """
        ...

    @overload
    def __eq__(self, _0: int, /):
        """
        usage.scipy: 8
        """
        ...

    @overload
    def __eq__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 4
        """
        ...

    def __eq__(
        self, _0: Union[numpy.complex128, int, numpy.ndarray, float, complex], /
    ):
        """
        usage.pandas: 6
        usage.scipy: 13
        usage.skimage: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, None, None], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, None, None, None], /):
        """
        usage.dask: 1
        """
        ...

    def __getitem__(self, _0: Tuple[Union[None, ellipsis], ...], /):
        """
        usage.dask: 2
        """
        ...

    @overload
    def __gt__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __gt__(self, _0: numpy.float64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __gt__(self, _0: float, /):
        """
        usage.scipy: 1
        """
        ...

    def __gt__(self, _0: Union[float, numpy.complex128, numpy.float64], /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __iadd__(self, _0: numpy.float64, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __iadd__(self, _0: numpy.complex64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __iadd__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __iadd__(self, _0: complex, /):
        """
        usage.scipy: 3
        """
        ...

    def __iadd__(
        self, _0: Union[complex, numpy.complex64, numpy.float64, numpy.complex128], /
    ):
        """
        usage.scipy: 10
        """
        ...

    def __isub__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __itruediv__(self, _0: numpy.float64, /):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __itruediv__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 1
        """
        ...

    def __itruediv__(self, _0: Union[numpy.complex128, numpy.float64], /):
        """
        usage.scipy: 1
        usage.skimage: 2
        """
        ...

    @overload
    def __lt__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __lt__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __lt__(self, _0: int, /):
        """
        usage.scipy: 1
        """
        ...

    def __lt__(self, _0: Union[int, numpy.complex128, numpy.ndarray], /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __mul__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 30
        usage.skimage: 2
        """
        ...

    @overload
    def __mul__(self, _0: numpy.float64, /):
        """
        usage.scipy: 10
        """
        ...

    @overload
    def __mul__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 52
        """
        ...

    @overload
    def __mul__(self, _0: float, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __mul__(self, _0: int, /):
        """
        usage.scipy: 7
        """
        ...

    @overload
    def __mul__(self, _0: scipy.signal.ltisys.StateSpaceContinuous, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __mul__(self, _0: scipy.sparse.csr.csr_matrix, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __mul__(self, _0: numpy.complex64, /):
        """
        usage.scipy: 1
        """
        ...

    def __mul__(self, _0: object, /):
        """
        usage.scipy: 106
        usage.skimage: 2
        """
        ...

    @overload
    def __ne__(self, _0: complex, /):
        """
        usage.pandas: 1
        """
        ...

    @overload
    def __ne__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 10
        """
        ...

    @overload
    def __ne__(self, _0: int, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __ne__(self, _0: float, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __ne__(self, _0: numpy.complex64, /):
        """
        usage.scipy: 1
        """
        ...

    def __ne__(
        self, _0: Union[float, numpy.complex128, int, numpy.complex64, complex], /
    ):
        """
        usage.pandas: 1
        usage.scipy: 16
        """
        ...

    def __neg__(self, /):
        """
        usage.scipy: 17
        """
        ...

    @overload
    def __pow__(self, _0: numpy.float64, /):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def __pow__(self, _0: int, /):
        """
        usage.scipy: 8
        """
        ...

    @overload
    def __pow__(self, _0: float, /):
        """
        usage.scipy: 2
        """
        ...

    def __pow__(self, _0: Union[float, numpy.float64, int], /):
        """
        usage.scipy: 15
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int64, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 21
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float64, /):
        """
        usage.scipy: 9
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float32, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __radd__(self, _0: float, /):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def __radd__(self, _0: complex, /):
        """
        usage.scipy: 7
        """
        ...

    @overload
    def __radd__(self, _0: int, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __radd__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.longlong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.ulonglong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex256, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex64, /):
        """
        usage.scipy: 1
        """
        ...

    def __radd__(self, _0: object, /):
        """
        usage.scipy: 64
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 30
        usage.skimage: 2
        """
        ...

    @overload
    def __rmul__(self, _0: float, /):
        """
        usage.scipy: 17
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 14
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.float64, /):
        """
        usage.scipy: 19
        """
        ...

    @overload
    def __rmul__(self, _0: int, /):
        """
        usage.scipy: 18
        """
        ...

    @overload
    def __rmul__(self, _0: scipy.signal.ltisys.StateSpaceContinuous, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rmul__(self, _0: complex, /):
        """
        usage.scipy: 6
        """
        ...

    @overload
    def __rmul__(self, _0: scipy.sparse.linalg.interface._AdjointMatrixOperator, /):
        """
        usage.scipy: 1
        """
        ...

    def __rmul__(self, _0: object, /):
        """
        usage.scipy: 106
        usage.skimage: 2
        """
        ...

    @overload
    def __rsub__(self, _0: float, /):
        """
        usage.scipy: 2
        usage.skimage: 1
        """
        ...

    @overload
    def __rsub__(self, _0: numpy.int64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rsub__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 28
        """
        ...

    @overload
    def __rsub__(self, _0: complex, /):
        """
        usage.scipy: 8
        """
        ...

    @overload
    def __rsub__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 7
        """
        ...

    @overload
    def __rsub__(self, _0: numpy.float64, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __rsub__(self, _0: int, /):
        """
        usage.scipy: 3
        """
        ...

    def __rsub__(self, _0: object, /):
        """
        usage.scipy: 53
        usage.skimage: 1
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 26
        usage.skimage: 1
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 8
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.float64, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __rtruediv__(self, _0: int, /):
        """
        usage.scipy: 7
        """
        ...

    @overload
    def __rtruediv__(self, _0: float, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __rtruediv__(self, _0: scipy.signal.ltisys.StateSpaceContinuous, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rtruediv__(self, _0: complex, /):
        """
        usage.scipy: 1
        """
        ...

    def __rtruediv__(self, _0: object, /):
        """
        usage.scipy: 50
        usage.skimage: 1
        """
        ...

    @overload
    def __sub__(self, _0: int, /):
        """
        usage.scipy: 14
        """
        ...

    @overload
    def __sub__(self, _0: complex, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __sub__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 28
        """
        ...

    @overload
    def __sub__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 4
        """
        ...

    def __sub__(self, _0: Union[numpy.ndarray, numpy.complex128, int, complex], /):
        """
        usage.scipy: 48
        """
        ...

    @overload
    def __truediv__(self, _0: numpy.float64, /):
        """
        usage.scipy: 5
        usage.skimage: 1
        """
        ...

    @overload
    def __truediv__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 26
        usage.skimage: 1
        """
        ...

    @overload
    def __truediv__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 1
        usage.skimage: 1
        """
        ...

    @overload
    def __truediv__(self, _0: int, /):
        """
        usage.scipy: 7
        """
        ...

    @overload
    def __truediv__(self, _0: scipy.signal.ltisys.StateSpaceContinuous, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __truediv__(self, _0: float, /):
        """
        usage.scipy: 6
        """
        ...

    def __truediv__(self, _0: object, /):
        """
        usage.scipy: 46
        usage.skimage: 3
        """
        ...

    def conj(self, /):
        """
        usage.scipy: 10
        usage.skimage: 1
        """
        ...

    def conjugate(self, /):
        """
        usage.scipy: 1
        """
        ...


class complex256:

    # usage.scipy: 8
    dtype: object

    # usage.dask: 1
    ndim: object

    # usage.scipy: 1
    size: object

    @overload
    def __add__(self, _0: numpy.complex256, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.longlong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.ulonglong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float64, /):
        """
        usage.scipy: 1
        """
        ...

    def __add__(self, _0: object, /):
        """
        usage.scipy: 18
        """
        ...

    def __bool__(self, /):
        """
        usage.scipy: 1
        """
        ...

    def __iadd__(self, _0: numpy.complex256, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __mul__(self, _0: int, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __mul__(self, _0: numpy.complex256, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __mul__(self, _0: float, /):
        """
        usage.scipy: 2
        """
        ...

    def __mul__(self, _0: Union[float, int, numpy.complex256], /):
        """
        usage.scipy: 6
        """
        ...

    def __ne__(self, _0: numpy.complex256, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __radd__(self, _0: float, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex256, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __radd__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.longlong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.ulonglong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 1
        """
        ...

    def __radd__(self, _0: object, /):
        """
        usage.scipy: 20
        """
        ...

    @overload
    def __rmul__(self, _0: int, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.complex256, /):
        """
        usage.scipy: 1
        """
        ...

    def __rmul__(self, _0: Union[numpy.complex256, int, numpy.ndarray], /):
        """
        usage.scipy: 4
        """
        ...

    def __rsub__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 1
        """
        ...

    def __sub__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __truediv__(self, _0: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __truediv__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 2
        """
        ...

    def __truediv__(self, _0: Union[numpy.ndarray, int], /):
        """
        usage.scipy: 3
        """
        ...

    def conj(self, /):
        """
        usage.scipy: 1
        """
        ...


class complex64:

    # usage.pandas: 2
    __name__: ClassVar[object]

    # usage.scipy: 9
    dtype: object

    # usage.scipy: 2
    imag: object

    # usage.dask: 2
    ndim: object

    # usage.scipy: 10
    real: object

    # usage.scipy: 1
    size: object

    @overload
    def __add__(self, _0: numpy.complex64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.longlong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.ulonglong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex256, /):
        """
        usage.scipy: 1
        """
        ...

    def __add__(self, _0: object, /):
        """
        usage.scipy: 17
        """
        ...

    def __bool__(self, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.complex64, /):
        """
        usage.pandas: 2
        """
        ...

    @overload
    def __eq__(self, _0: int, /):
        """
        usage.scipy: 1
        """
        ...

    def __eq__(self, _0: Union[int, numpy.complex64], /):
        """
        usage.pandas: 2
        usage.scipy: 1
        """
        ...

    def __getitem__(self, _0: Tuple[ellipsis, None, None], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __iadd__(self, _0: complex, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __iadd__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __iadd__(self, _0: numpy.complex64, /):
        """
        usage.scipy: 1
        """
        ...

    def __iadd__(self, _0: Union[numpy.complex64, complex, numpy.complex128], /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __mul__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 22
        """
        ...

    @overload
    def __mul__(self, _0: numpy.complex64, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __mul__(self, _0: float, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __mul__(self, _0: int, /):
        """
        usage.scipy: 3
        """
        ...

    def __mul__(self, _0: Union[int, numpy.complex64, numpy.ndarray, float], /):
        """
        usage.scipy: 29
        """
        ...

    @overload
    def __ne__(self, _0: numpy.complex64, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __ne__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 1
        """
        ...

    def __ne__(self, _0: Union[numpy.complex128, numpy.complex64], /):
        """
        usage.scipy: 3
        """
        ...

    def __pow__(self, _0: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: float, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __radd__(self, _0: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __radd__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.longlong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.ulonglong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex256, /):
        """
        usage.scipy: 1
        """
        ...

    def __radd__(self, _0: object, /):
        """
        usage.scipy: 21
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.complex64, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __rmul__(self, _0: float, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __rmul__(self, _0: int, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 1
        """
        ...

    def __rmul__(
        self, _0: Union[numpy.complex128, float, numpy.ndarray, numpy.complex64, int], /
    ):
        """
        usage.scipy: 14
        """
        ...

    def __rsub__(self, _0: float, /):
        """
        usage.scipy: 1
        """
        ...

    def __truediv__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 1
        """
        ...

    def conj(self, /):
        """
        usage.scipy: 2
        """
        ...


class datetime64:

    # usage.matplotlib: 1
    __mro__: ClassVar[object]

    # usage.pandas: 8
    __name__: ClassVar[object]

    @classmethod
    def __ne__(
        cls,
        _0: Union[
            pandas._libs.tslibs.nattype.NaTType,
            pandas._libs.tslibs.timestamps.Timestamp,
            Type[numpy.datetime64],
            Literal["unix", "2020-07-13T05:05:56.369928+00:00"],
        ],
        /,
    ):
        """
        usage.pandas: 6
        """
        ...

    # usage.dask: 1
    # usage.pandas: 8
    # usage.xarray: 3
    dtype: object

    # usage.dask: 1
    # usage.pandas: 1
    ndim: object

    # usage.matplotlib: 1
    tzinfo: object

    @overload
    def __add__(self, _0: numpy.ndarray, /):
        """
        usage.xarray: 4
        """
        ...

    @overload
    def __add__(self, _0: object, /):
        """
        usage.pandas: 32
        """
        ...

    def __add__(self, _0: object, /):
        """
        usage.pandas: 32
        usage.xarray: 4
        """
        ...

    @overload
    def __eq__(self, _0: xarray.core.dataarray.DataArray, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __eq__(self, _0: xarray.core.variable.Variable, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.ndarray, /):
        """
        usage.xarray: 4
        """
        ...

    @overload
    def __eq__(self, _0: numpy.datetime64, /):
        """
        usage.xarray: 8
        """
        ...

    @overload
    def __eq__(self, _0: object, /):
        """
        usage.pandas: 32
        """
        ...

    def __eq__(self, _0: object, /):
        """
        usage.pandas: 32
        usage.xarray: 14
        """
        ...

    @overload
    def __ge__(
        self, _0: Union[numpy.ndarray, pandas.core.indexes.datetimes.DatetimeIndex], /
    ):
        """
        usage.pandas: 5
        """
        ...

    @overload
    def __ge__(self, _0: pandas._libs.tslibs.timestamps.Timestamp, /):
        """
        usage.dask: 1
        """
        ...

    def __ge__(
        self,
        _0: Union[
            pandas._libs.tslibs.timestamps.Timestamp,
            pandas.core.indexes.datetimes.DatetimeIndex,
            numpy.ndarray,
        ],
        /,
    ):
        """
        usage.dask: 1
        usage.pandas: 5
        """
        ...

    @overload
    def __le__(self, _0: pandas.core.indexes.datetimes.DatetimeIndex, /):
        """
        usage.pandas: 3
        """
        ...

    @overload
    def __le__(self, _0: pandas._libs.tslibs.timestamps.Timestamp, /):
        """
        usage.dask: 1
        """
        ...

    def __le__(
        self,
        _0: Union[
            pandas._libs.tslibs.timestamps.Timestamp,
            pandas.core.indexes.datetimes.DatetimeIndex,
        ],
        /,
    ):
        """
        usage.dask: 1
        usage.pandas: 3
        """
        ...

    def __lt__(self, _0: pandas.core.indexes.datetimes.DatetimeIndex, /):
        """
        usage.pandas: 2
        """
        ...

    def __radd__(self, _0: object, /):
        """
        usage.pandas: 24
        """
        ...

    @overload
    def __rsub__(self, _0: numpy.ndarray, /):
        """
        usage.matplotlib: 1
        usage.xarray: 2
        """
        ...

    @overload
    def __rsub__(self, _0: object, /):
        """
        usage.pandas: 28
        """
        ...

    @overload
    def __rsub__(self, _0: numpy.datetime64, /):
        """
        usage.matplotlib: 2
        """
        ...

    def __rsub__(self, _0: object, /):
        """
        usage.matplotlib: 3
        usage.pandas: 28
        usage.xarray: 2
        """
        ...

    @overload
    def __sub__(self, _0: object, /):
        """
        usage.pandas: 25
        """
        ...

    @overload
    def __sub__(self, _0: numpy.datetime64, /):
        """
        usage.matplotlib: 2
        """
        ...

    def __sub__(self, _0: object, /):
        """
        usage.matplotlib: 2
        usage.pandas: 25
        """
        ...

    @overload
    def astype(self, _0: Union[str, type], /):
        """
        usage.pandas: 25
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.int64], /):
        """
        usage.matplotlib: 2
        """
        ...

    @overload
    def astype(self, _0: Literal["datetime64[s]"], /):
        """
        usage.matplotlib: 2
        """
        ...

    @overload
    def astype(self, _0: numpy.dtype, /):
        """
        usage.dask: 3
        """
        ...

    def astype(self, _0: Union[numpy.dtype, str, type, Type[numpy.int64]], /):
        """
        usage.dask: 3
        usage.matplotlib: 4
        usage.pandas: 25
        """
        ...

    def item(self, /):
        """
        usage.pandas: 1
        """
        ...

    def view(self, _0: Union[Literal["i8"], Type[numpy.int64]], /):
        """
        usage.pandas: 7
        """
        ...


class dtype:

    # usage.dask: 1
    __module__: ClassVar[object]

    # usage.scipy: 7
    alignment: object

    # usage.dask: 2
    # usage.pandas: 1
    base: object

    # usage.scipy: 69
    # usage.xarray: 14
    byteorder: object

    # usage.pandas: 1
    # usage.scipy: 389
    # usage.skimage: 12
    # usage.sklearn: 2
    # usage.xarray: 3
    char: object

    # usage.pandas: 6
    # usage.scipy: 5
    descr: object

    # usage.dask: 15
    # usage.pandas: 48
    # usage.scipy: 43
    fields: object

    # usage.dask: 33
    # usage.scipy: 44
    hasobject: object

    # usage.matplotlib: 19
    # usage.scipy: 6
    # usage.xarray: 26
    isnative: object

    # usage.dask: 38
    # usage.pandas: 130
    # usage.scipy: 61
    # usage.skimage: 41
    # usage.sklearn: 11
    # usage.xarray: 37
    itemsize: object

    # usage.dask: 75
    # usage.matplotlib: 42
    # usage.pandas: 643
    # usage.scipy: 263
    # usage.skimage: 60
    # usage.sklearn: 285
    # usage.xarray: 550
    kind: object

    # usage.xarray: 5
    metadata: object

    # usage.dask: 6
    # usage.pandas: 263
    # usage.scipy: 32
    # usage.skimage: 6
    # usage.sklearn: 6
    name: object

    # usage.dask: 6
    # usage.pandas: 125
    # usage.scipy: 4
    names: object

    # usage.dask: 21
    # usage.pandas: 25
    # usage.scipy: 17
    shape: object

    # usage.scipy: 51
    str: object

    # usage.dask: 9
    # usage.matplotlib: 5
    # usage.pandas: 1037
    # usage.scipy: 195
    # usage.skimage: 65
    # usage.sklearn: 16
    # usage.xarray: 75
    type: object

    @overload
    def __eq__(self, _0: numpy.dtype, /):
        """
        usage.dask: 222
        usage.scipy: 140
        usage.skimage: 80
        usage.sklearn: 266
        usage.xarray: 192
        """
        ...

    @overload
    def __eq__(self, _0: Type[bool], /):
        """
        usage.dask: 17
        usage.scipy: 15
        usage.skimage: 39
        usage.sklearn: 8
        usage.xarray: 24
        """
        ...

    @overload
    def __eq__(self, _0: Type[numpy.uint8], /):
        """
        usage.matplotlib: 6
        usage.scipy: 1
        usage.skimage: 5
        usage.sklearn: 3
        """
        ...

    @overload
    def __eq__(self, _0: Type[numpy.float64], /):
        """
        usage.dask: 9
        usage.matplotlib: 1
        usage.scipy: 36
        usage.skimage: 13
        usage.sklearn: 86
        usage.xarray: 8
        """
        ...

    @overload
    def __eq__(self, _0: Type[numpy.uint16], /):
        """
        usage.matplotlib: 1
        usage.scipy: 1
        usage.skimage: 8
        """
        ...

    @overload
    def __eq__(self, _0: Type[numpy.float32], /):
        """
        usage.dask: 9
        usage.scipy: 21
        usage.skimage: 3
        usage.sklearn: 89
        usage.xarray: 9
        """
        ...

    @overload
    def __eq__(self, _0: Literal["bool"], /):
        """
        usage.dask: 2
        usage.matplotlib: 1
        usage.skimage: 14
        usage.xarray: 2
        """
        ...

    @overload
    def __eq__(self, _0: Type[numpy.float16], /):
        """
        usage.scipy: 16
        usage.skimage: 1
        usage.xarray: 2
        """
        ...

    @overload
    def __eq__(self, _0: Type[float], /):
        """
        usage.dask: 2
        usage.scipy: 1
        usage.skimage: 6
        usage.sklearn: 8
        usage.xarray: 10
        """
        ...

    @overload
    def __eq__(self, _0: Literal["float64"], /):
        """
        usage.dask: 5
        usage.skimage: 4
        usage.sklearn: 2
        """
        ...

    @overload
    def __eq__(self, _0: Type[numpy.int8], /):
        """
        usage.scipy: 1
        usage.skimage: 4
        """
        ...

    @overload
    def __eq__(self, _0: Type[numpy.int16], /):
        """
        usage.dask: 3
        usage.scipy: 1
        usage.skimage: 2
        usage.sklearn: 1
        """
        ...

    @overload
    def __eq__(self, _0: Type[numpy.int32], /):
        """
        usage.dask: 4
        usage.scipy: 1
        usage.skimage: 1
        usage.sklearn: 12
        usage.xarray: 2
        """
        ...

    @overload
    def __eq__(self, _0: Type[numpy.int64], /):
        """
        usage.dask: 9
        usage.scipy: 6
        usage.skimage: 1
        usage.sklearn: 12
        usage.xarray: 4
        """
        ...

    @overload
    def __eq__(self, _0: Type[numpy.longlong], /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __eq__(self, _0: Type[numpy.uint32], /):
        """
        usage.scipy: 1
        usage.skimage: 1
        """
        ...

    @overload
    def __eq__(self, _0: Type[numpy.uint64], /):
        """
        usage.scipy: 4
        usage.skimage: 1
        """
        ...

    @overload
    def __eq__(self, _0: Type[numpy.ulonglong], /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __eq__(self, _0: Literal["float32"], /):
        """
        usage.dask: 2
        usage.scipy: 5
        usage.skimage: 1
        """
        ...

    @overload
    def __eq__(self, _0: Literal["O"], /):
        """
        usage.xarray: 5
        """
        ...

    @overload
    def __eq__(self, _0: Literal["datetime64[ns]"], /):
        """
        usage.xarray: 9
        """
        ...

    @overload
    def __eq__(self, _0: Literal["S1"], /):
        """
        usage.xarray: 23
        """
        ...

    @overload
    def __eq__(self, _0: Literal["timedelta64[ns]"], /):
        """
        usage.xarray: 3
        """
        ...

    @overload
    def __eq__(self, _0: Literal["f4"], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __eq__(self, _0: Type[object], /):
        """
        usage.dask: 22
        usage.scipy: 4
        usage.sklearn: 55
        usage.xarray: 6
        """
        ...

    @overload
    def __eq__(self, _0: Literal["int64"], /):
        """
        usage.dask: 2
        usage.sklearn: 3
        usage.xarray: 5
        """
        ...

    @overload
    def __eq__(self, _0: Literal["S3"], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __eq__(self, _0: Type[int], /):
        """
        usage.dask: 1
        usage.sklearn: 3
        usage.xarray: 5
        """
        ...

    @overload
    def __eq__(self, _0: Type[numpy.bool_], /):
        """
        usage.scipy: 9
        usage.xarray: 3
        """
        ...

    @overload
    def __eq__(self, _0: Type[numpy.object_], /):
        """
        usage.dask: 2
        usage.scipy: 16
        usage.sklearn: 2
        usage.xarray: 1
        """
        ...

    @overload
    def __eq__(self, _0: Type[numpy.str_], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __eq__(self, _0: Type[numpy.complex128], /):
        """
        usage.scipy: 18
        usage.xarray: 1
        """
        ...

    @overload
    def __eq__(self, _0: Type[numpy.complex64], /):
        """
        usage.scipy: 14
        usage.xarray: 1
        """
        ...

    @overload
    def __eq__(self, _0: Type[numpy.timedelta64], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __eq__(self, _0: Type[numpy.datetime64], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __eq__(self, _0: Literal["object"], /):
        """
        usage.dask: 3
        usage.sklearn: 1
        usage.xarray: 1
        """
        ...

    @overload
    def __eq__(self, _0: object, /):
        """
        usage.pandas: 2263
        """
        ...

    @overload
    def __eq__(self, _0: Type[numpy.float128], /):
        """
        usage.scipy: 18
        """
        ...

    @overload
    def __eq__(self, _0: Type[numpy.complex256], /):
        """
        usage.scipy: 6
        """
        ...

    @overload
    def __eq__(self, _0: Literal["float"], /):
        """
        usage.dask: 1
        usage.scipy: 6
        """
        ...

    @overload
    def __eq__(self, _0: Literal["f8"], /):
        """
        usage.dask: 3
        """
        ...

    @overload
    def __eq__(self, _0: Literal["u4"], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __eq__(self, _0: Literal["i8"], /):
        """
        usage.dask: 7
        """
        ...

    @overload
    def __eq__(self, _0: Literal["uint8"], /):
        """
        usage.dask: 2
        """
        ...

    @overload
    def __eq__(self, _0: Literal["M8[ns]"], /):
        """
        usage.dask: 1
        """
        ...

    def __eq__(self, _0: object, /):
        """
        usage.dask: 329
        usage.matplotlib: 9
        usage.pandas: 2263
        usage.scipy: 341
        usage.skimage: 186
        usage.sklearn: 551
        usage.xarray: 321
        """
        ...

    def __ge__(self, _0: numpy.dtype, /):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def __getitem__(self, _0: str, /):
        """
        usage.pandas: 58
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["a"], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["col1"], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["col2"], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["text"], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["values"], /):
        """
        usage.dask: 4
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["indices"], /):
        """
        usage.dask: 3
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["inverse"], /):
        """
        usage.dask: 3
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["counts"], /):
        """
        usage.dask: 3
        """
        ...

    def __getitem__(self, _0: str, /):
        """
        usage.dask: 17
        usage.pandas: 58
        """
        ...

    @overload
    def __gt__(self, _0: numpy.dtype, /):
        """
        usage.pandas: 17
        usage.scipy: 4
        """
        ...

    @overload
    def __gt__(self, _0: Type[numpy.int32], /):
        """
        usage.scipy: 2
        """
        ...

    def __gt__(self, _0: Union[numpy.dtype, Type[numpy.int32]], /):
        """
        usage.pandas: 17
        usage.scipy: 6
        """
        ...

    def __le__(self, _0: numpy.dtype, /):
        """
        usage.scipy: 5
        """
        ...

    def __lt__(self, _0: numpy.dtype, /):
        """
        usage.pandas: 17
        usage.scipy: 4
        """
        ...

    @overload
    def __ne__(self, _0: numpy.dtype, /):
        """
        usage.dask: 194
        usage.scipy: 246
        usage.skimage: 22
        usage.sklearn: 30
        usage.xarray: 38
        """
        ...

    @overload
    def __ne__(self, _0: Type[bool], /):
        """
        usage.dask: 1
        usage.skimage: 4
        usage.sklearn: 4
        """
        ...

    @overload
    def __ne__(self, _0: Type[numpy.bool_], /):
        """
        usage.scipy: 27
        usage.skimage: 1
        """
        ...

    @overload
    def __ne__(self, _0: Literal["S1"], /):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __ne__(self, _0: Type[object], /):
        """
        usage.dask: 3
        usage.sklearn: 7
        usage.xarray: 13
        """
        ...

    @overload
    def __ne__(self, _0: object, /):
        """
        usage.pandas: 457
        """
        ...

    @overload
    def __ne__(self, _0: Type[numpy.float64], /):
        """
        usage.dask: 1
        usage.matplotlib: 2
        usage.scipy: 11
        usage.sklearn: 13
        """
        ...

    @overload
    def __ne__(self, _0: Literal["i"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __ne__(self, _0: Type[numpy.int64], /):
        """
        usage.dask: 2
        usage.scipy: 5
        """
        ...

    @overload
    def __ne__(self, _0: Type[numpy.uint8], /):
        """
        usage.matplotlib: 19
        usage.sklearn: 2
        """
        ...

    @overload
    def __ne__(self, _0: Literal["O"], /):
        """
        usage.dask: 27
        """
        ...

    @overload
    def __ne__(self, _0: Literal["f8"], /):
        """
        usage.dask: 6
        """
        ...

    @overload
    def __ne__(self, _0: Literal["i8"], /):
        """
        usage.dask: 7
        """
        ...

    @overload
    def __ne__(self, _0: Type[numpy.object_], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __ne__(self, _0: Literal["u4"], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __ne__(self, _0: Type[numpy.float32], /):
        """
        usage.dask: 2
        usage.sklearn: 3
        """
        ...

    @overload
    def __ne__(self, _0: Type[numpy.int8], /):
        """
        usage.dask: 2
        """
        ...

    @overload
    def __ne__(self, _0: Literal["bool"], /):
        """
        usage.dask: 2
        usage.sklearn: 2
        """
        ...

    @overload
    def __ne__(self, _0: Literal["float64"], /):
        """
        usage.dask: 2
        """
        ...

    @overload
    def __ne__(self, _0: Type[int], /):
        """
        usage.dask: 2
        usage.sklearn: 2
        """
        ...

    @overload
    def __ne__(self, _0: Type[float], /):
        """
        usage.dask: 2
        usage.sklearn: 3
        """
        ...

    @overload
    def __ne__(self, _0: Type[numpy.int32], /):
        """
        usage.dask: 1
        usage.sklearn: 5
        """
        ...

    @overload
    def __ne__(self, _0: None, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __ne__(self, _0: Type[numpy.uint32], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __ne__(self, _0: Type[numpy.uint64], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __ne__(self, _0: List[Tuple[Literal["values"], numpy.dtype]], /):
        """
        usage.dask: 2
        """
        ...

    @overload
    def __ne__(
        self,
        _0: List[
            Tuple[Literal["values", "indices"], Union[numpy.dtype, Type[numpy.int64]]]
        ],
        /,
    ):
        """
        usage.dask: 2
        """
        ...

    @overload
    def __ne__(
        self,
        _0: List[
            Tuple[Literal["values", "inverse"], Union[numpy.dtype, Type[numpy.int64]]]
        ],
        /,
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __ne__(
        self,
        _0: List[
            Tuple[
                Literal["values", "indices", "inverse"],
                Union[numpy.dtype, Type[numpy.int64]],
            ]
        ],
        /,
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __ne__(
        self,
        _0: List[
            Tuple[Literal["values", "counts"], Union[numpy.dtype, Type[numpy.int64]]]
        ],
        /,
    ):
        """
        usage.dask: 2
        """
        ...

    @overload
    def __ne__(
        self,
        _0: List[
            Tuple[
                Literal["values", "indices", "counts"],
                Union[numpy.dtype, Type[numpy.int64]],
            ]
        ],
        /,
    ):
        """
        usage.dask: 2
        """
        ...

    @overload
    def __ne__(
        self,
        _0: List[
            Tuple[
                Literal["values", "inverse", "counts"],
                Union[numpy.dtype, Type[numpy.int64]],
            ]
        ],
        /,
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __ne__(
        self,
        _0: List[
            Tuple[
                Literal["values", "indices", "inverse", "counts"],
                Union[numpy.dtype, Type[numpy.int64]],
            ]
        ],
        /,
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __ne__(self, _0: Literal["float"], /):
        """
        usage.dask: 1
        """
        ...

    def __ne__(self, _0: object, /):
        """
        usage.dask: 272
        usage.matplotlib: 21
        usage.pandas: 457
        usage.scipy: 290
        usage.skimage: 27
        usage.sklearn: 71
        usage.xarray: 53
        """
        ...

    @overload
    def __rmod__(self, _0: str, /):
        """
        usage.scipy: 4
        usage.skimage: 1
        usage.sklearn: 3
        usage.xarray: 1
        """
        ...

    @overload
    def __rmod__(self, _0: Literal[", dtype=%s"], /):
        """
        usage.dask: 2
        """
        ...

    def __rmod__(self, _0: str, /):
        """
        usage.dask: 2
        usage.scipy: 4
        usage.skimage: 1
        usage.sklearn: 3
        usage.xarray: 1
        """
        ...

    @overload
    def newbyteorder(self, _0: Literal["="], /):
        """
        usage.scipy: 6
        usage.xarray: 1
        """
        ...

    @overload
    def newbyteorder(self, _0: Literal["S"], /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def newbyteorder(self, _0: Literal["native"], /):
        """
        usage.scipy: 15
        """
        ...

    @overload
    def newbyteorder(self, _0: Literal[">"], /):
        """
        usage.scipy: 11
        """
        ...

    @overload
    def newbyteorder(self, _0: Literal["<"], /):
        """
        usage.scipy: 11
        """
        ...

    @overload
    def newbyteorder(self, _0: Literal["B"], /):
        """
        usage.scipy: 6
        """
        ...

    @overload
    def newbyteorder(self, /):
        """
        usage.scipy: 12
        """
        ...

    def newbyteorder(self, _0: str = ..., /):
        """
        usage.scipy: 64
        usage.xarray: 1
        """
        ...


class errstate:
    pass


class finfo:

    # usage.dask: 1
    # usage.pandas: 4
    # usage.scipy: 119
    # usage.skimage: 10
    # usage.sklearn: 46
    eps: object

    # usage.pandas: 7
    # usage.scipy: 3
    # usage.skimage: 2
    # usage.sklearn: 4
    max: object

    # usage.scipy: 1
    maxexp: object

    # usage.pandas: 3
    # usage.skimage: 2
    # usage.sklearn: 5
    min: object

    # usage.scipy: 1
    minexp: object

    # usage.scipy: 2
    nmant: object

    # usage.scipy: 5
    precision: object

    # usage.matplotlib: 1
    # usage.scipy: 1
    # usage.sklearn: 5
    resolution: object

    # usage.matplotlib: 1
    # usage.scipy: 4
    # usage.sklearn: 2
    tiny: object


class flagsobj:

    # usage.scipy: 26
    # usage.skimage: 2
    c_contiguous: object

    # usage.scipy: 20
    # usage.sklearn: 2
    contiguous: object

    # usage.pandas: 4
    # usage.scipy: 14
    # usage.skimage: 1
    # usage.sklearn: 2
    f_contiguous: object

    # usage.scipy: 1
    fortran: object

    # usage.scipy: 1
    # usage.xarray: 1
    owndata: object

    # usage.matplotlib: 2
    # usage.pandas: 14
    # usage.scipy: 13
    # usage.skimage: 3
    # usage.sklearn: 7
    # usage.xarray: 4
    writeable: bool

    @overload
    def __getitem__(self, _0: Literal["C_CONTIGUOUS"], /):
        """
        usage.scipy: 1
        usage.sklearn: 11
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["F_CONTIGUOUS"], /):
        """
        usage.sklearn: 8
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["ALIGNED"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["FORTRAN"], /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["CONTIGUOUS"], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["WRITEABLE"], /):
        """
        usage.sklearn: 2
        """
        ...

    def __getitem__(self, _0: str, /):
        """
        usage.scipy: 7
        usage.sklearn: 21
        usage.xarray: 4
        """
        ...

    def __setitem__(self, _0: Literal["WRITEABLE"], _1: bool, /):
        """
        usage.scipy: 1
        """
        ...


class flatiter:
    @overload
    def __eq__(self, _0: int, /):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __eq__(self, _0: numpy.int64, /):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __eq__(self, _0: numpy.float64, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.float32, /):
        """
        usage.sklearn: 1
        """
        ...

    def __eq__(self, _0: Union[numpy.float64, numpy.float32, int, numpy.int64], /):
        """
        usage.skimage: 4
        usage.sklearn: 2
        """
        ...

    @overload
    def __getitem__(self, _0: int, /):
        """
        usage.dask: 1
        usage.matplotlib: 4
        usage.scipy: 4
        usage.skimage: 3
        usage.sklearn: 5
        usage.xarray: 6
        """
        ...

    @overload
    def __getitem__(self, _0: numpy.int64, /):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __getitem__(self, _0: slice[None, int, None], /):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(self, _0: slice[int, None, int], /):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(self, _0: numpy.ndarray, /):
        """
        usage.pandas: 1
        """
        ...

    @overload
    def __getitem__(self, _0: slice[None, None, None], /):
        """
        usage.scipy: 1
        usage.sklearn: 28
        """
        ...

    @overload
    def __getitem__(self, _0: slice[int, None, int], /):
        """
        usage.matplotlib: 1
        """
        ...

    def __getitem__(
        self,
        _0: Union[
            int,
            numpy.ndarray,
            numpy.int64,
            slice[Union[int, None], Union[None, int], Union[int, None]],
        ],
        /,
    ):
        """
        usage.dask: 1
        usage.matplotlib: 5
        usage.pandas: 1
        usage.scipy: 5
        usage.skimage: 5
        usage.sklearn: 33
        usage.xarray: 10
        """
        ...

    def __iter__(self, /):
        """
        usage.matplotlib: 14
        usage.scipy: 3
        usage.skimage: 2
        usage.sklearn: 4
        usage.xarray: 8
        """
        ...

    @overload
    def __setitem__(self, _0: List[int], _1: numpy.ndarray, /):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(self, _0: numpy.ndarray, _1: float, /):
        """
        usage.scipy: 1
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(self, _0: numpy.ndarray, _1: numpy.ndarray, /):
        """
        usage.pandas: 11
        """
        ...

    @overload
    def __setitem__(self, _0: slice[None, None, None], _1: numpy.ndarray, /):
        """
        usage.scipy: 7
        usage.sklearn: 37
        """
        ...

    @overload
    def __setitem__(self, _0: slice[None, None, None], _1: int, /):
        """
        usage.scipy: 1
        usage.sklearn: 6
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: Tuple[str, int], /):
        """
        usage.dask: 2
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: Tuple[str, int, int], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: Tuple[str, int, int, int], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: Tuple[Literal["A"], int, int], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: Tuple[str, int, int, int, int], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __setitem__(self, _0: slice[int, None, int], _1: int, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: slice[None, None, None], _1: float, /):
        """
        usage.sklearn: 1
        """
        ...

    def __setitem__(
        self,
        _0: Union[
            slice[Union[None, int], None, Union[None, int]],
            List[int],
            numpy.ndarray,
            int,
        ],
        _1: Union[numpy.ndarray, int, float, Tuple[Union[str, int], ...]],
        /,
    ):
        """
        usage.dask: 6
        usage.pandas: 11
        usage.scipy: 9
        usage.skimage: 2
        usage.sklearn: 45
        usage.xarray: 1
        """
        ...


class float128:

    # usage.pandas: 1
    # usage.scipy: 10
    dtype: object

    # usage.dask: 1
    ndim: object

    # usage.scipy: 2
    real: object

    # usage.scipy: 1
    size: object

    @overload
    def __add__(self, _0: int, /):
        """
        usage.pandas: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float128, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __add__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.longlong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.ulonglong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float64, /):
        """
        usage.matplotlib: 2
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex256, /):
        """
        usage.scipy: 1
        """
        ...

    def __add__(self, _0: object, /):
        """
        usage.matplotlib: 2
        usage.pandas: 1
        usage.scipy: 20
        """
        ...

    def __bool__(self, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __eq__(self, _0: int, /):
        """
        usage.pandas: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __eq__(self, _0: Literal["scott"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __eq__(self, _0: Literal["silverman"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.float128, /):
        """
        usage.matplotlib: 2
        """
        ...

    @overload
    def __eq__(self, _0: numpy.float64, /):
        """
        usage.matplotlib: 1
        """
        ...

    def __eq__(
        self,
        _0: Union[
            numpy.float128,
            numpy.float64,
            int,
            numpy.ndarray,
            Literal["silverman", "scott"],
        ],
        /,
    ):
        """
        usage.matplotlib: 3
        usage.pandas: 1
        usage.scipy: 3
        """
        ...

    @overload
    def __gt__(self, _0: int, /):
        """
        usage.matplotlib: 1
        usage.pandas: 1
        """
        ...

    @overload
    def __gt__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __gt__(self, _0: numpy.float64, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __gt__(self, _0: numpy.float128, /):
        """
        usage.matplotlib: 3
        usage.scipy: 2
        """
        ...

    def __gt__(self, _0: Union[int, numpy.float128, numpy.float64, numpy.ndarray], /):
        """
        usage.matplotlib: 4
        usage.pandas: 1
        usage.scipy: 5
        """
        ...

    def __iadd__(self, _0: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __imul__(self, _0: numpy.float128, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __imul__(self, _0: int, /):
        """
        usage.scipy: 1
        """
        ...

    def __imul__(self, _0: Union[int, numpy.float128], /):
        """
        usage.scipy: 3
        """
        ...

    def __le__(self, _0: Union[float, int], /):
        """
        usage.pandas: 3
        """
        ...

    @overload
    def __lt__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __lt__(self, _0: float, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __lt__(self, _0: numpy.float64, /):
        """
        usage.matplotlib: 1
        usage.scipy: 2
        """
        ...

    @overload
    def __lt__(self, _0: numpy.float128, /):
        """
        usage.matplotlib: 3
        usage.scipy: 2
        """
        ...

    @overload
    def __lt__(self, _0: int, /):
        """
        usage.matplotlib: 1
        """
        ...

    def __lt__(
        self, _0: Union[int, numpy.float64, numpy.float128, float, numpy.ndarray], /
    ):
        """
        usage.matplotlib: 5
        usage.scipy: 6
        """
        ...

    @overload
    def __mul__(self, _0: Union[numpy.float64, numpy.float128], /):
        """
        usage.pandas: 8
        """
        ...

    @overload
    def __mul__(self, _0: float, /):
        """
        usage.scipy: 6
        """
        ...

    @overload
    def __mul__(self, _0: numpy.float64, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __mul__(self, _0: int, /):
        """
        usage.scipy: 6
        """
        ...

    @overload
    def __mul__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __mul__(self, _0: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    def __mul__(
        self, _0: Union[numpy.ndarray, numpy.float64, float, int, numpy.float128], /
    ):
        """
        usage.pandas: 8
        usage.scipy: 20
        """
        ...

    def __ne__(self, _0: numpy.float128, /):
        """
        usage.scipy: 4
        """
        ...

    def __neg__(self, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __pow__(self, _0: Union[int, float], /):
        """
        usage.pandas: 2
        """
        ...

    @overload
    def __pow__(self, _0: int, /):
        """
        usage.scipy: 2
        """
        ...

    def __pow__(self, _0: Union[int, float], /):
        """
        usage.pandas: 2
        usage.scipy: 2
        """
        ...

    @overload
    def __radd__(self, _0: float, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float128, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __radd__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.longlong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.ulonglong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex256, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: int, /):
        """
        usage.matplotlib: 2
        """
        ...

    def __radd__(self, _0: object, /):
        """
        usage.matplotlib: 2
        usage.scipy: 23
        """
        ...

    @overload
    def __rmul__(self, _0: Union[int, numpy.float128], /):
        """
        usage.pandas: 8
        """
        ...

    @overload
    def __rmul__(self, _0: float, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.float64, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __rmul__(self, _0: int, /):
        """
        usage.matplotlib: 2
        usage.scipy: 5
        """
        ...

    @overload
    def __rmul__(self, _0: complex, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 2
        """
        ...

    def __rmul__(self, _0: object, /):
        """
        usage.matplotlib: 2
        usage.pandas: 8
        usage.scipy: 15
        """
        ...

    @overload
    def __rsub__(self, _0: Union[numpy.ndarray, numpy.float128], /):
        """
        usage.pandas: 9
        """
        ...

    @overload
    def __rsub__(self, _0: float, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __rsub__(self, _0: numpy.float128, /):
        """
        usage.matplotlib: 1
        """
        ...

    def __rsub__(self, _0: Union[numpy.float128, numpy.ndarray, float], /):
        """
        usage.matplotlib: 1
        usage.pandas: 9
        usage.scipy: 4
        """
        ...

    @overload
    def __rtruediv__(self, _0: Union[numpy.float64, numpy.float128], /):
        """
        usage.pandas: 8
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 1
        """
        ...

    def __rtruediv__(self, _0: Union[numpy.ndarray, numpy.float128, numpy.float64], /):
        """
        usage.pandas: 8
        usage.scipy: 1
        """
        ...

    @overload
    def __sub__(self, _0: Union[int, numpy.float128, numpy.ndarray], /):
        """
        usage.pandas: 9
        """
        ...

    @overload
    def __sub__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __sub__(self, _0: numpy.float64, /):
        """
        usage.matplotlib: 2
        usage.scipy: 1
        """
        ...

    @overload
    def __sub__(self, _0: numpy.float128, /):
        """
        usage.matplotlib: 1
        """
        ...

    def __sub__(self, _0: Union[numpy.float128, numpy.float64, int, numpy.ndarray], /):
        """
        usage.matplotlib: 3
        usage.pandas: 9
        usage.scipy: 2
        """
        ...

    @overload
    def __truediv__(self, _0: numpy.float128, /):
        """
        usage.pandas: 8
        """
        ...

    @overload
    def __truediv__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __truediv__(self, _0: int, /):
        """
        usage.scipy: 1
        """
        ...

    def __truediv__(self, _0: Union[numpy.ndarray, int, numpy.float128], /):
        """
        usage.pandas: 8
        usage.scipy: 3
        """
        ...

    @overload
    def astype(self, _0: numpy.dtype, /):
        """
        usage.pandas: 3
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.complex256], /):
        """
        usage.scipy: 1
        """
        ...

    def astype(self, _0: Union[Type[numpy.complex256], numpy.dtype], /):
        """
        usage.pandas: 3
        usage.scipy: 1
        """
        ...

    def item(self, /):
        """
        usage.matplotlib: 1
        """
        ...


class float16:

    # usage.scipy: 1
    dtype: object

    # usage.dask: 1
    ndim: object

    # usage.scipy: 1
    real: object

    def __eq__(self, _0: int, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __gt__(self, _0: numpy.float64, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __gt__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 3
        """
        ...

    def __gt__(self, _0: Union[numpy.ndarray, numpy.float64], /):
        """
        usage.scipy: 3
        usage.skimage: 1
        """
        ...

    def __lt__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 3
        """
        ...

    def __mul__(self, _0: int, /):
        """
        usage.scipy: 1
        """
        ...

    def __ne__(self, _0: numpy.float64, /):
        """
        usage.scipy: 1
        """
        ...

    def __pow__(self, _0: int, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __rmul__(self, _0: float, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.ndarray, /):
        """
        usage.skimage: 1
        """
        ...

    def __rmul__(self, _0: Union[numpy.ndarray, float], /):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __rsub__(self, _0: numpy.float16, /):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __rsub__(self, _0: numpy.ndarray, /):
        """
        usage.skimage: 1
        """
        ...

    def __rsub__(self, _0: Union[numpy.ndarray, numpy.float16], /):
        """
        usage.skimage: 3
        """
        ...

    def __sub__(self, _0: numpy.float16, /):
        """
        usage.skimage: 2
        """
        ...


class float32:

    # usage.dask: 1
    __module__: ClassVar[object]

    # usage.pandas: 4
    __name__: ClassVar[object]

    # usage.dask: 6
    shape: ClassVar[object]

    @overload
    @classmethod
    def __ne__(cls, _0: numpy.dtype, /):
        """
        usage.dask: 2
        usage.sklearn: 3
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: numpy.float32, /):
        """
        usage.scipy: 6
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: int, /):
        """
        usage.matplotlib: 1
        usage.scipy: 2
        usage.sklearn: 1
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: numpy.float64, /):
        """
        usage.scipy: 1
        """
        ...

    @classmethod
    def __ne__(cls, _0: Union[numpy.dtype, int, numpy.float32, numpy.float64], /):
        """
        usage.dask: 2
        usage.matplotlib: 1
        usage.scipy: 9
        usage.sklearn: 4
        """
        ...

    # usage.dask: 1
    # usage.pandas: 4
    # usage.scipy: 13
    # usage.sklearn: 2
    # usage.xarray: 1
    dtype: object

    # usage.dask: 4
    # usage.pandas: 1
    ndim: object

    # usage.scipy: 12
    real: object

    # usage.scipy: 1
    size: object

    # usage.pandas: 1
    values: object

    @overload
    def __add__(self, _0: int, /):
        """
        usage.skimage: 1
        usage.sklearn: 2
        """
        ...

    @overload
    def __add__(self, _0: numpy.float64, /):
        """
        usage.dask: 2
        usage.matplotlib: 1
        usage.scipy: 1
        usage.skimage: 1
        usage.sklearn: 3
        """
        ...

    @overload
    def __add__(
        self,
        _0: Union[
            pandas.core.arrays.timedeltas.TimedeltaArray, int, pandas.core.series.Series
        ],
        /,
    ):
        """
        usage.pandas: 3
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __add__(self, _0: numpy.float32, /):
        """
        usage.dask: 1
        usage.scipy: 4
        usage.sklearn: 3
        """
        ...

    @overload
    def __add__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.longlong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.ulonglong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex256, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.ndarray, /):
        """
        usage.sklearn: 1
        """
        ...

    def __add__(self, _0: object, /):
        """
        usage.dask: 3
        usage.matplotlib: 1
        usage.pandas: 3
        usage.scipy: 22
        usage.skimage: 2
        usage.sklearn: 9
        """
        ...

    def __bool__(self, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 11
        usage.skimage: 1
        usage.sklearn: 5
        usage.xarray: 2
        """
        ...

    @overload
    def __eq__(self, _0: numpy.float32, /):
        """
        usage.matplotlib: 4
        usage.scipy: 2
        usage.skimage: 2
        usage.sklearn: 4
        usage.xarray: 2
        """
        ...

    @overload
    def __eq__(self, _0: float, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __eq__(self, _0: int, /):
        """
        usage.dask: 1
        usage.matplotlib: 1
        usage.scipy: 3
        usage.skimage: 2
        usage.sklearn: 4
        """
        ...

    @overload
    def __eq__(self, _0: Union[numpy.float64, numpy.float32, int], /):
        """
        usage.pandas: 9
        """
        ...

    @overload
    def __eq__(self, _0: Literal["scott"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __eq__(self, _0: Literal["silverman"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.float64, /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.flatiter, /):
        """
        usage.sklearn: 1
        """
        ...

    def __eq__(self, _0: object, /):
        """
        usage.dask: 1
        usage.matplotlib: 6
        usage.pandas: 9
        usage.scipy: 18
        usage.skimage: 6
        usage.sklearn: 14
        usage.xarray: 4
        """
        ...

    @overload
    def __ge__(self, _0: int, /):
        """
        usage.pandas: 1
        usage.skimage: 1
        usage.sklearn: 4
        """
        ...

    @overload
    def __ge__(self, _0: numpy.float32, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __ge__(self, _0: numpy.float64, /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def __ge__(self, _0: float, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __ge__(self, _0: numpy.ndarray, /):
        """
        usage.sklearn: 1
        """
        ...

    def __ge__(
        self, _0: Union[float, numpy.float64, numpy.float32, int, numpy.ndarray], /
    ):
        """
        usage.pandas: 1
        usage.skimage: 1
        usage.sklearn: 9
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, None], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, None, None], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, None, None, None], /):
        """
        usage.dask: 1
        """
        ...

    def __getitem__(self, _0: Tuple[Union[ellipsis, None], ...], /):
        """
        usage.dask: 3
        """
        ...

    @overload
    def __gt__(self, _0: int, /):
        """
        usage.matplotlib: 2
        usage.pandas: 1
        usage.scipy: 1
        usage.skimage: 2
        usage.sklearn: 4
        """
        ...

    @overload
    def __gt__(self, _0: float, /):
        """
        usage.skimage: 3
        """
        ...

    @overload
    def __gt__(self, _0: numpy.float64, /):
        """
        usage.matplotlib: 1
        usage.skimage: 1
        usage.sklearn: 2
        usage.xarray: 1
        """
        ...

    @overload
    def __gt__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __gt__(self, _0: numpy.float32, /):
        """
        usage.matplotlib: 1
        usage.sklearn: 1
        """
        ...

    def __gt__(
        self, _0: Union[numpy.float64, int, numpy.float32, numpy.ndarray, float], /
    ):
        """
        usage.matplotlib: 4
        usage.pandas: 1
        usage.scipy: 4
        usage.skimage: 6
        usage.sklearn: 7
        usage.xarray: 1
        """
        ...

    @overload
    def __iadd__(self, _0: int, /):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __iadd__(self, _0: numpy.float32, /):
        """
        usage.scipy: 1
        usage.sklearn: 2
        """
        ...

    @overload
    def __iadd__(self, _0: numpy.float64, /):
        """
        usage.scipy: 1
        """
        ...

    def __iadd__(self, _0: Union[numpy.float32, int, numpy.float64], /):
        """
        usage.scipy: 2
        usage.sklearn: 2
        usage.xarray: 2
        """
        ...

    @overload
    def __itruediv__(self, _0: float, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __itruediv__(self, _0: int, /):
        """
        usage.sklearn: 1
        """
        ...

    def __itruediv__(self, _0: Union[int, float], /):
        """
        usage.scipy: 1
        usage.sklearn: 1
        """
        ...

    @overload
    def __le__(self, _0: int, /):
        """
        usage.pandas: 2
        usage.sklearn: 2
        """
        ...

    @overload
    def __le__(self, _0: float, /):
        """
        usage.scipy: 2
        usage.sklearn: 1
        """
        ...

    @overload
    def __le__(self, _0: numpy.float64, /):
        """
        usage.sklearn: 4
        """
        ...

    @overload
    def __le__(self, _0: numpy.float32, /):
        """
        usage.sklearn: 1
        """
        ...

    def __le__(self, _0: Union[numpy.float32, numpy.float64, float, int], /):
        """
        usage.pandas: 2
        usage.scipy: 2
        usage.sklearn: 8
        """
        ...

    @overload
    def __lt__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 3
        usage.skimage: 1
        usage.sklearn: 1
        """
        ...

    @overload
    def __lt__(self, _0: float, /):
        """
        usage.scipy: 1
        usage.skimage: 5
        usage.sklearn: 3
        """
        ...

    @overload
    def __lt__(self, _0: numpy.float64, /):
        """
        usage.matplotlib: 1
        usage.scipy: 2
        usage.skimage: 1
        usage.sklearn: 4
        usage.xarray: 1
        """
        ...

    @overload
    def __lt__(self, _0: int, /):
        """
        usage.matplotlib: 1
        usage.skimage: 1
        usage.sklearn: 4
        usage.xarray: 1
        """
        ...

    @overload
    def __lt__(self, _0: numpy.float32, /):
        """
        usage.matplotlib: 1
        usage.sklearn: 1
        """
        ...

    def __lt__(
        self, _0: Union[numpy.float64, int, numpy.ndarray, float, numpy.float32], /
    ):
        """
        usage.matplotlib: 3
        usage.scipy: 6
        usage.skimage: 8
        usage.sklearn: 13
        usage.xarray: 2
        """
        ...

    @overload
    def __mul__(self, _0: int, /):
        """
        usage.dask: 1
        usage.scipy: 10
        usage.skimage: 1
        usage.sklearn: 4
        """
        ...

    @overload
    def __mul__(
        self,
        _0: Union[
            pandas.core.arrays.timedeltas.TimedeltaArray,
            numpy.float64,
            pandas.core.series.Series,
        ],
        /,
    ):
        """
        usage.pandas: 4
        """
        ...

    @overload
    def __mul__(self, _0: float, /):
        """
        usage.scipy: 11
        usage.sklearn: 2
        """
        ...

    @overload
    def __mul__(self, _0: numpy.float64, /):
        """
        usage.scipy: 7
        """
        ...

    @overload
    def __mul__(self, _0: complex, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __mul__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 25
        usage.sklearn: 10
        """
        ...

    @overload
    def __mul__(self, _0: numpy.float32, /):
        """
        usage.scipy: 2
        usage.sklearn: 2
        """
        ...

    @overload
    def __mul__(self, _0: scipy.signal.ltisys.StateSpaceContinuous, /):
        """
        usage.scipy: 1
        """
        ...

    def __mul__(self, _0: object, /):
        """
        usage.dask: 1
        usage.pandas: 4
        usage.scipy: 57
        usage.skimage: 1
        usage.sklearn: 18
        """
        ...

    def __neg__(self, /):
        """
        usage.scipy: 3
        usage.sklearn: 2
        """
        ...

    @overload
    def __pow__(self, _0: int, /):
        """
        usage.pandas: 1
        usage.scipy: 2
        usage.skimage: 1
        usage.sklearn: 2
        """
        ...

    @overload
    def __pow__(self, _0: float, /):
        """
        usage.scipy: 4
        """
        ...

    def __pow__(self, _0: Union[int, float], /):
        """
        usage.pandas: 1
        usage.scipy: 6
        usage.skimage: 1
        usage.sklearn: 2
        """
        ...

    @overload
    def __radd__(self, _0: pandas.core.arrays.timedeltas.TimedeltaArray, /):
        """
        usage.pandas: 1
        """
        ...

    @overload
    def __radd__(self, _0: float, /):
        """
        usage.matplotlib: 1
        usage.scipy: 2
        usage.sklearn: 3
        """
        ...

    @overload
    def __radd__(self, _0: int, /):
        """
        usage.matplotlib: 1
        usage.scipy: 1
        usage.sklearn: 2
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float32, /):
        """
        usage.dask: 1
        usage.scipy: 4
        usage.sklearn: 3
        """
        ...

    @overload
    def __radd__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 2
        usage.sklearn: 8
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float64, /):
        """
        usage.matplotlib: 1
        usage.scipy: 2
        usage.sklearn: 2
        """
        ...

    @overload
    def __radd__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.longlong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.ulonglong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex256, /):
        """
        usage.scipy: 1
        """
        ...

    def __radd__(self, _0: object, /):
        """
        usage.dask: 1
        usage.matplotlib: 3
        usage.pandas: 1
        usage.scipy: 26
        usage.sklearn: 18
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["%.8e\n"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["%.7e\n"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rmod__(self, _0: str, /):
        """
        usage.sklearn: 2
        """
        ...

    def __rmod__(self, _0: str, /):
        """
        usage.scipy: 2
        usage.sklearn: 2
        """
        ...

    @overload
    def __rmul__(self, _0: float, /):
        """
        usage.matplotlib: 1
        usage.scipy: 15
        usage.skimage: 2
        usage.sklearn: 10
        """
        ...

    @overload
    def __rmul__(self, _0: int, /):
        """
        usage.dask: 2
        usage.scipy: 83
        usage.skimage: 1
        usage.sklearn: 4
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 3
        usage.skimage: 1
        usage.sklearn: 2
        """
        ...

    @overload
    def __rmul__(self, _0: Union[pandas.core.series.Series, numpy.ndarray], /):
        """
        usage.pandas: 3
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.float64, /):
        """
        usage.scipy: 12
        usage.sklearn: 2
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.ma.core.MaskedArray, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.float32, /):
        """
        usage.scipy: 2
        usage.sklearn: 2
        """
        ...

    @overload
    def __rmul__(self, _0: scipy.signal.ltisys.StateSpaceContinuous, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rmul__(self, _0: complex, /):
        """
        usage.scipy: 2
        """
        ...

    def __rmul__(self, _0: object, /):
        """
        usage.dask: 2
        usage.matplotlib: 1
        usage.pandas: 3
        usage.scipy: 119
        usage.skimage: 4
        usage.sklearn: 20
        """
        ...

    @overload
    def __rsub__(self, _0: numpy.float32, /):
        """
        usage.dask: 1
        usage.matplotlib: 1
        usage.pandas: 7
        usage.scipy: 1
        usage.skimage: 2
        usage.sklearn: 3
        """
        ...

    @overload
    def __rsub__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 1
        usage.skimage: 1
        usage.sklearn: 3
        """
        ...

    @overload
    def __rsub__(self, _0: float, /):
        """
        usage.scipy: 1
        usage.sklearn: 2
        """
        ...

    @overload
    def __rsub__(self, _0: int, /):
        """
        usage.sklearn: 4
        """
        ...

    @overload
    def __rsub__(self, _0: numpy.float64, /):
        """
        usage.sklearn: 2
        """
        ...

    def __rsub__(
        self, _0: Union[float, int, numpy.float32, numpy.ndarray, numpy.float64], /
    ):
        """
        usage.dask: 1
        usage.matplotlib: 1
        usage.pandas: 7
        usage.scipy: 3
        usage.skimage: 3
        usage.sklearn: 14
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.float64, /):
        """
        usage.scipy: 2
        usage.skimage: 1
        usage.sklearn: 2
        """
        ...

    @overload
    def __rtruediv__(
        self,
        _0: Union[
            numpy.ndarray,
            pandas._libs.tslibs.timedeltas.Timedelta,
            numpy.float32,
            numpy.float64,
            pandas._libs.tslibs.nattype.NaTType,
        ],
        /,
    ):
        """
        usage.pandas: 14
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.ndarray, /):
        """
        usage.matplotlib: 1
        usage.scipy: 11
        usage.sklearn: 4
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.float32, /):
        """
        usage.dask: 1
        usage.scipy: 1
        usage.sklearn: 4
        """
        ...

    @overload
    def __rtruediv__(self, _0: scipy.signal.ltisys.StateSpaceContinuous, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rtruediv__(self, _0: int, /):
        """
        usage.scipy: 1
        usage.sklearn: 2
        """
        ...

    @overload
    def __rtruediv__(self, _0: float, /):
        """
        usage.scipy: 2
        usage.sklearn: 1
        """
        ...

    def __rtruediv__(self, _0: object, /):
        """
        usage.dask: 1
        usage.matplotlib: 1
        usage.pandas: 14
        usage.scipy: 18
        usage.skimage: 1
        usage.sklearn: 13
        """
        ...

    @overload
    def __sub__(self, _0: numpy.ndarray, /):
        """
        usage.skimage: 1
        usage.sklearn: 1
        """
        ...

    @overload
    def __sub__(self, _0: numpy.float64, /):
        """
        usage.skimage: 2
        usage.sklearn: 2
        """
        ...

    @overload
    def __sub__(self, _0: numpy.float32, /):
        """
        usage.dask: 1
        usage.matplotlib: 1
        usage.scipy: 1
        usage.skimage: 2
        usage.sklearn: 3
        """
        ...

    @overload
    def __sub__(
        self,
        _0: Union[
            pandas.core.arrays.timedeltas.TimedeltaArray,
            int,
            numpy.float32,
            pandas.core.series.Series,
        ],
        /,
    ):
        """
        usage.pandas: 7
        """
        ...

    @overload
    def __sub__(self, _0: int, /):
        """
        usage.dask: 1
        usage.scipy: 1
        """
        ...

    @overload
    def __sub__(self, _0: float, /):
        """
        usage.sklearn: 1
        """
        ...

    def __sub__(self, _0: object, /):
        """
        usage.dask: 2
        usage.matplotlib: 1
        usage.pandas: 7
        usage.scipy: 2
        usage.skimage: 5
        usage.sklearn: 7
        """
        ...

    @overload
    def __truediv__(self, _0: float, /):
        """
        usage.skimage: 1
        usage.sklearn: 1
        """
        ...

    @overload
    def __truediv__(self, _0: numpy.float64, /):
        """
        usage.skimage: 1
        usage.sklearn: 4
        """
        ...

    @overload
    def __truediv__(
        self,
        _0: Union[
            int,
            pandas.core.arrays.timedeltas.TimedeltaArray,
            numpy.float32,
            pandas.core.series.Series,
            float,
        ],
        /,
    ):
        """
        usage.pandas: 14
        """
        ...

    @overload
    def __truediv__(self, _0: numpy.float32, /):
        """
        usage.dask: 1
        usage.scipy: 1
        usage.sklearn: 4
        """
        ...

    @overload
    def __truediv__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __truediv__(self, _0: scipy.signal.ltisys.StateSpaceContinuous, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __truediv__(self, _0: int, /):
        """
        usage.sklearn: 7
        """
        ...

    def __truediv__(self, _0: object, /):
        """
        usage.dask: 1
        usage.pandas: 14
        usage.scipy: 5
        usage.skimage: 2
        usage.sklearn: 16
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.int64], /):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.complex64], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def astype(self, _0: numpy.dtype, /):
        """
        usage.dask: 1
        usage.matplotlib: 2
        """
        ...

    def astype(self, _0: Union[numpy.dtype, type], /):
        """
        usage.dask: 1
        usage.matplotlib: 2
        usage.scipy: 6
        """
        ...

    def conj(self, /):
        """
        usage.scipy: 1
        """
        ...

    def item(self, /):
        """
        usage.matplotlib: 2
        usage.xarray: 1
        """
        ...


class float64:

    # usage.dask: 2
    __module__: ClassVar[object]

    # usage.matplotlib: 1
    __mro__: ClassVar[object]

    # usage.pandas: 4
    __name__: ClassVar[object]

    # usage.pandas: 1
    type: ClassVar[object]

    @overload
    @classmethod
    def __ne__(cls, _0: object, /):
        """
        usage.pandas: 31
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: float, /):
        """
        usage.dask: 1
        usage.matplotlib: 15
        usage.scipy: 10
        usage.skimage: 1
        usage.sklearn: 2
        usage.xarray: 2
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: numpy.float64, /):
        """
        usage.dask: 8
        usage.matplotlib: 14
        usage.scipy: 22
        usage.skimage: 2
        usage.sklearn: 16
        usage.xarray: 4
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: int, /):
        """
        usage.dask: 3
        usage.matplotlib: 14
        usage.scipy: 66
        usage.skimage: 4
        usage.sklearn: 6
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: numpy.dtype, /):
        """
        usage.dask: 1
        usage.matplotlib: 2
        usage.scipy: 11
        usage.sklearn: 13
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: Type[numpy.float64], /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: numpy.int64, /):
        """
        usage.scipy: 1
        usage.sklearn: 1
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: numpy.float32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: numpy.float16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: _pytest.python_api.ApproxScalar, /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: numpy.ndarray, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: Type[inspect._empty], /):
        """
        usage.sklearn: 2
        """
        ...

    @classmethod
    def __ne__(cls, _0: object, /):
        """
        usage.dask: 13
        usage.matplotlib: 45
        usage.pandas: 31
        usage.scipy: 116
        usage.skimage: 7
        usage.sklearn: 43
        usage.xarray: 6
        """
        ...

    # usage.scipy: 1
    __class__: object

    # usage.dask: 12
    # usage.pandas: 9
    # usage.scipy: 26
    # usage.sklearn: 10
    # usage.xarray: 4
    dtype: object

    # usage.scipy: 2
    flags: object

    # usage.scipy: 1
    imag: object

    # usage.scipy: 1
    itemsize: object

    # usage.dask: 6
    # usage.matplotlib: 1
    # usage.pandas: 2
    # usage.scipy: 24
    # usage.skimage: 1
    ndim: object

    # usage.scipy: 15
    real: object

    # usage.dask: 12
    # usage.matplotlib: 1
    # usage.scipy: 10
    # usage.sklearn: 5
    # usage.xarray: 1
    shape: object

    # usage.scipy: 5
    size: object

    # usage.pandas: 1
    values: object

    @overload
    def __add__(self, _0: numpy.float64, /):
        """
        usage.dask: 7
        usage.matplotlib: 180
        usage.scipy: 500
        usage.skimage: 42
        usage.sklearn: 92
        usage.xarray: 5
        """
        ...

    @overload
    def __add__(self, _0: numpy.ndarray, /):
        """
        usage.matplotlib: 3
        usage.scipy: 83
        usage.skimage: 4
        usage.sklearn: 10
        """
        ...

    @overload
    def __add__(self, _0: int, /):
        """
        usage.dask: 12
        usage.matplotlib: 36
        usage.scipy: 122
        usage.skimage: 19
        usage.sklearn: 18
        usage.xarray: 2
        """
        ...

    @overload
    def __add__(self, _0: float, /):
        """
        usage.dask: 2
        usage.matplotlib: 95
        usage.scipy: 120
        usage.skimage: 7
        usage.sklearn: 43
        usage.xarray: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int64, /):
        """
        usage.matplotlib: 1
        usage.scipy: 9
        usage.skimage: 3
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint8, /):
        """
        usage.scipy: 1
        usage.skimage: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.ma.core.MaskedArray, /):
        """
        usage.matplotlib: 1
        usage.xarray: 1
        """
        ...

    @overload
    def __add__(self, _0: object, /):
        """
        usage.pandas: 36
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 9
        """
        ...

    @overload
    def __add__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __add__(self, _0: complex, /):
        """
        usage.scipy: 9
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __add__(self, _0: numpy.ulonglong, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __add__(self, _0: numpy.float32, /):
        """
        usage.matplotlib: 1
        usage.scipy: 2
        usage.sklearn: 2
        """
        ...

    @overload
    def __add__(self, _0: numpy.int8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.longlong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex256, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: List[int], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.ma.core.MaskedConstant, /):
        """
        usage.matplotlib: 3
        """
        ...

    @overload
    def __add__(self, _0: bool, /):
        """
        usage.sklearn: 2
        """
        ...

    def __add__(self, _0: object, /):
        """
        usage.dask: 21
        usage.matplotlib: 321
        usage.pandas: 36
        usage.scipy: 871
        usage.skimage: 76
        usage.sklearn: 167
        usage.xarray: 9
        """
        ...

    def __bool__(self, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __eq__(self, _0: int, /):
        """
        usage.dask: 12
        usage.matplotlib: 75
        usage.scipy: 108
        usage.skimage: 45
        usage.sklearn: 106
        usage.xarray: 8
        """
        ...

    @overload
    def __eq__(self, _0: float, /):
        """
        usage.dask: 7
        usage.matplotlib: 30
        usage.scipy: 51
        usage.skimage: 20
        usage.sklearn: 89
        usage.xarray: 17
        """
        ...

    @overload
    def __eq__(self, _0: numpy.float64, /):
        """
        usage.dask: 10
        usage.matplotlib: 74
        usage.scipy: 88
        usage.skimage: 14
        usage.sklearn: 146
        usage.xarray: 24
        """
        ...

    @overload
    def __eq__(self, _0: numpy.ndarray, /):
        """
        usage.dask: 1
        usage.matplotlib: 3
        usage.scipy: 15
        usage.skimage: 9
        usage.sklearn: 42
        usage.xarray: 4
        """
        ...

    @overload
    def __eq__(self, _0: numpy.int64, /):
        """
        usage.scipy: 2
        usage.skimage: 8
        usage.sklearn: 1
        """
        ...

    @overload
    def __eq__(self, _0: object, /):
        """
        usage.pandas: 381
        """
        ...

    @overload
    def __eq__(self, _0: numpy.ma.core.MaskedArray, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __eq__(self, _0: None, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __eq__(self, _0: Literal["legacy"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __eq__(self, _0: Literal["scott"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __eq__(self, _0: Literal["silverman"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __eq__(self, _0: _pytest.python_api.ApproxScalar, /):
        """
        usage.dask: 4
        usage.matplotlib: 3
        usage.sklearn: 42
        """
        ...

    @overload
    def __eq__(self, _0: numpy.float128, /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.float32, /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __eq__(self, _0: pandas.core.series.Series, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.flatiter, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __eq__(self, _0: Literal["mle"], /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def __eq__(self, _0: Literal["auto"], /):
        """
        usage.sklearn: 1
        """
        ...

    def __eq__(self, _0: object, /):
        """
        usage.dask: 35
        usage.matplotlib: 187
        usage.pandas: 381
        usage.scipy: 272
        usage.skimage: 96
        usage.sklearn: 430
        usage.xarray: 53
        """
        ...

    @overload
    def __floordiv__(self, _0: object, /):
        """
        usage.pandas: 7
        """
        ...

    @overload
    def __floordiv__(self, _0: int, /):
        """
        usage.dask: 1
        usage.matplotlib: 2
        usage.scipy: 1
        """
        ...

    @overload
    def __floordiv__(self, _0: numpy.float64, /):
        """
        usage.matplotlib: 2
        usage.scipy: 1
        """
        ...

    def __floordiv__(self, _0: object, /):
        """
        usage.dask: 1
        usage.matplotlib: 4
        usage.pandas: 7
        usage.scipy: 2
        """
        ...

    @overload
    def __ge__(self, _0: int, /):
        """
        usage.dask: 4
        usage.matplotlib: 16
        usage.scipy: 31
        usage.skimage: 10
        usage.sklearn: 23
        """
        ...

    @overload
    def __ge__(self, _0: numpy.float64, /):
        """
        usage.dask: 3
        usage.matplotlib: 18
        usage.scipy: 115
        usage.skimage: 2
        usage.sklearn: 32
        """
        ...

    @overload
    def __ge__(self, _0: float, /):
        """
        usage.dask: 2
        usage.matplotlib: 5
        usage.scipy: 43
        usage.skimage: 3
        usage.sklearn: 20
        """
        ...

    @overload
    def __ge__(self, _0: xarray.core.dataarray.DataArray, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __ge__(
        self,
        _0: Union[numpy.ndarray, float, int, numpy.float64, pandas.core.series.Series],
        /,
    ):
        """
        usage.pandas: 8
        """
        ...

    @overload
    def __ge__(self, _0: numpy.ndarray, /):
        """
        usage.matplotlib: 15
        usage.scipy: 21
        usage.sklearn: 11
        """
        ...

    @overload
    def __ge__(self, _0: numpy.int64, /):
        """
        usage.scipy: 7
        """
        ...

    @overload
    def __ge__(self, _0: numpy.ma.core.MaskedArray, /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __ge__(self, _0: dask.dataframe.core.Series, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __ge__(self, _0: pandas.core.series.Series, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __ge__(self, _0: dask.dataframe.core.DataFrame, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __ge__(self, _0: pandas.core.frame.DataFrame, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __ge__(self, _0: numpy.float32, /):
        """
        usage.sklearn: 4
        """
        ...

    def __ge__(self, _0: object, /):
        """
        usage.dask: 13
        usage.matplotlib: 55
        usage.pandas: 8
        usage.scipy: 217
        usage.skimage: 15
        usage.sklearn: 90
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, None], /):
        """
        usage.dask: 1
        usage.skimage: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[None, None], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: int, /):
        """
        usage.matplotlib: 1
        usage.scipy: 7
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[None, ...], /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, None, None], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, None, None, None], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, None, None, None, None], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, None, None, None, None, None], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, None, None, None, None, None, None], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[ellipsis, None, None, None, None, None, None, None], /
    ):
        """
        usage.dask: 1
        """
        ...

    def __getitem__(self, _0: Union[Tuple[Union[None, ellipsis], ...], int], /):
        """
        usage.dask: 7
        usage.matplotlib: 1
        usage.scipy: 10
        usage.skimage: 2
        usage.xarray: 1
        """
        ...

    @overload
    def __gt__(self, _0: float, /):
        """
        usage.dask: 10
        usage.matplotlib: 24
        usage.scipy: 124
        usage.skimage: 35
        usage.sklearn: 150
        usage.xarray: 3
        """
        ...

    @overload
    def __gt__(self, _0: numpy.ndarray, /):
        """
        usage.dask: 1
        usage.matplotlib: 5
        usage.scipy: 44
        usage.skimage: 3
        usage.sklearn: 22
        """
        ...

    @overload
    def __gt__(self, _0: numpy.float64, /):
        """
        usage.dask: 10
        usage.matplotlib: 102
        usage.scipy: 201
        usage.skimage: 64
        usage.sklearn: 93
        usage.xarray: 6
        """
        ...

    @overload
    def __gt__(self, _0: int, /):
        """
        usage.dask: 6
        usage.matplotlib: 33
        usage.scipy: 111
        usage.skimage: 19
        usage.sklearn: 34
        usage.xarray: 2
        """
        ...

    @overload
    def __gt__(self, _0: numpy.float32, /):
        """
        usage.matplotlib: 1
        usage.scipy: 2
        usage.skimage: 1
        usage.sklearn: 4
        usage.xarray: 1
        """
        ...

    @overload
    def __gt__(self, _0: numpy.int64, /):
        """
        usage.matplotlib: 4
        usage.scipy: 4
        usage.sklearn: 2
        usage.xarray: 1
        """
        ...

    @overload
    def __gt__(self, _0: xarray.core.dataarray.DataArray, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __gt__(
        self, _0: Union[float, pandas.core.series.Series, int, numpy.float64], /
    ):
        """
        usage.pandas: 15
        """
        ...

    @overload
    def __gt__(self, _0: numpy.float128, /):
        """
        usage.matplotlib: 1
        usage.scipy: 2
        """
        ...

    @overload
    def __gt__(self, _0: numpy.ma.core.MaskedArray, /):
        """
        usage.matplotlib: 1
        usage.scipy: 1
        """
        ...

    @overload
    def __gt__(self, _0: numpy.bool_, /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __gt__(self, _0: numpy.uint16, /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __gt__(self, _0: numpy.uint64, /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __gt__(self, _0: pandas.core.series.Series, /):
        """
        usage.dask: 1
        """
        ...

    def __gt__(self, _0: object, /):
        """
        usage.dask: 28
        usage.matplotlib: 174
        usage.pandas: 15
        usage.scipy: 489
        usage.skimage: 122
        usage.sklearn: 305
        usage.xarray: 14
        """
        ...

    @overload
    def __iadd__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 3
        usage.skimage: 1
        usage.sklearn: 1
        """
        ...

    @overload
    def __iadd__(self, _0: numpy.float64, /):
        """
        usage.dask: 1
        usage.matplotlib: 14
        usage.scipy: 80
        usage.skimage: 7
        usage.sklearn: 57
        usage.xarray: 1
        """
        ...

    @overload
    def __iadd__(self, _0: float, /):
        """
        usage.matplotlib: 3
        usage.pandas: 1
        usage.scipy: 6
        usage.skimage: 1
        usage.sklearn: 2
        usage.xarray: 2
        """
        ...

    @overload
    def __iadd__(self, _0: int, /):
        """
        usage.matplotlib: 8
        usage.scipy: 3
        usage.sklearn: 6
        usage.xarray: 2
        """
        ...

    @overload
    def __iadd__(self, _0: bool, /):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __iadd__(self, _0: numpy.float128, /):
        """
        usage.scipy: 6
        """
        ...

    @overload
    def __iadd__(self, _0: numpy.float32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __iadd__(self, _0: numpy.int64, /):
        """
        usage.sklearn: 3
        """
        ...

    def __iadd__(self, _0: object, /):
        """
        usage.dask: 1
        usage.matplotlib: 25
        usage.pandas: 1
        usage.scipy: 99
        usage.skimage: 9
        usage.sklearn: 69
        usage.xarray: 7
        """
        ...

    def __ifloordiv__(self, _0: int, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __imod__(self, _0: float, /):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __imod__(self, _0: numpy.float64, /):
        """
        usage.matplotlib: 1
        """
        ...

    def __imod__(self, _0: Union[numpy.float64, float], /):
        """
        usage.matplotlib: 1
        usage.skimage: 2
        """
        ...

    @overload
    def __imul__(self, _0: numpy.float64, /):
        """
        usage.scipy: 18
        usage.skimage: 1
        usage.sklearn: 6
        """
        ...

    @overload
    def __imul__(self, _0: int, /):
        """
        usage.dask: 1
        usage.matplotlib: 4
        usage.scipy: 10
        usage.skimage: 4
        usage.sklearn: 3
        """
        ...

    @overload
    def __imul__(self, _0: float, /):
        """
        usage.matplotlib: 7
        usage.scipy: 12
        usage.sklearn: 3
        """
        ...

    @overload
    def __imul__(self, _0: numpy.int64, /):
        """
        usage.scipy: 1
        usage.sklearn: 1
        """
        ...

    @overload
    def __imul__(self, _0: numpy.float128, /):
        """
        usage.scipy: 2
        """
        ...

    def __imul__(
        self, _0: Union[float, numpy.float64, int, numpy.int64, numpy.float128], /
    ):
        """
        usage.dask: 1
        usage.matplotlib: 11
        usage.scipy: 43
        usage.skimage: 5
        usage.sklearn: 13
        """
        ...

    @overload
    def __isub__(self, _0: numpy.float64, /):
        """
        usage.matplotlib: 5
        usage.scipy: 15
        usage.skimage: 1
        usage.sklearn: 17
        """
        ...

    @overload
    def __isub__(self, _0: float, /):
        """
        usage.matplotlib: 6
        usage.pandas: 2
        usage.scipy: 1
        usage.sklearn: 1
        """
        ...

    @overload
    def __isub__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 3
        usage.sklearn: 1
        """
        ...

    @overload
    def __isub__(self, _0: int, /):
        """
        usage.matplotlib: 2
        usage.sklearn: 1
        """
        ...

    def __isub__(self, _0: Union[numpy.ndarray, numpy.float64, int, float], /):
        """
        usage.matplotlib: 13
        usage.pandas: 2
        usage.scipy: 19
        usage.skimage: 1
        usage.sklearn: 20
        """
        ...

    @overload
    def __itruediv__(self, _0: numpy.float64, /):
        """
        usage.scipy: 19
        usage.skimage: 5
        usage.sklearn: 2
        """
        ...

    @overload
    def __itruediv__(self, _0: float, /):
        """
        usage.matplotlib: 1
        usage.scipy: 15
        usage.skimage: 4
        usage.sklearn: 6
        """
        ...

    @overload
    def __itruediv__(self, _0: numpy.float16, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __itruediv__(self, _0: numpy.float32, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __itruediv__(self, _0: numpy.int64, /):
        """
        usage.scipy: 1
        usage.skimage: 1
        usage.sklearn: 1
        """
        ...

    @overload
    def __itruediv__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def __itruediv__(self, _0: int, /):
        """
        usage.matplotlib: 1
        usage.scipy: 4
        usage.sklearn: 7
        """
        ...

    def __itruediv__(self, _0: object, /):
        """
        usage.matplotlib: 2
        usage.scipy: 44
        usage.skimage: 12
        usage.sklearn: 16
        """
        ...

    @overload
    def __le__(self, _0: int, /):
        """
        usage.dask: 5
        usage.matplotlib: 29
        usage.scipy: 48
        usage.skimage: 62
        usage.sklearn: 19
        """
        ...

    @overload
    def __le__(self, _0: numpy.float64, /):
        """
        usage.dask: 3
        usage.matplotlib: 18
        usage.scipy: 115
        usage.skimage: 2
        usage.sklearn: 32
        """
        ...

    @overload
    def __le__(self, _0: float, /):
        """
        usage.dask: 1
        usage.matplotlib: 9
        usage.scipy: 72
        usage.skimage: 4
        usage.sklearn: 17
        """
        ...

    @overload
    def __le__(self, _0: Union[numpy.ndarray, float, numpy.float64, int], /):
        """
        usage.pandas: 13
        """
        ...

    @overload
    def __le__(self, _0: numpy.ndarray, /):
        """
        usage.dask: 2
        usage.matplotlib: 16
        usage.scipy: 21
        usage.sklearn: 5
        """
        ...

    @overload
    def __le__(self, _0: numpy.int64, /):
        """
        usage.scipy: 4
        usage.sklearn: 4
        """
        ...

    @overload
    def __le__(self, _0: pandas.core.series.Series, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __le__(self, _0: numpy.float32, /):
        """
        usage.sklearn: 2
        """
        ...

    def __le__(self, _0: object, /):
        """
        usage.dask: 12
        usage.matplotlib: 72
        usage.pandas: 13
        usage.scipy: 260
        usage.skimage: 68
        usage.sklearn: 79
        """
        ...

    @overload
    def __lt__(self, _0: float, /):
        """
        usage.dask: 8
        usage.matplotlib: 55
        usage.scipy: 164
        usage.skimage: 58
        usage.sklearn: 92
        usage.xarray: 2
        """
        ...

    @overload
    def __lt__(self, _0: int, /):
        """
        usage.dask: 4
        usage.matplotlib: 45
        usage.scipy: 82
        usage.skimage: 37
        usage.sklearn: 34
        usage.xarray: 5
        """
        ...

    @overload
    def __lt__(self, _0: numpy.ndarray, /):
        """
        usage.matplotlib: 4
        usage.scipy: 50
        usage.skimage: 14
        usage.sklearn: 20
        """
        ...

    @overload
    def __lt__(self, _0: numpy.float64, /):
        """
        usage.dask: 10
        usage.matplotlib: 102
        usage.scipy: 201
        usage.skimage: 64
        usage.sklearn: 93
        usage.xarray: 6
        """
        ...

    @overload
    def __lt__(self, _0: numpy.uint8, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __lt__(self, _0: numpy.float32, /):
        """
        usage.matplotlib: 1
        usage.skimage: 1
        usage.sklearn: 2
        usage.xarray: 1
        """
        ...

    @overload
    def __lt__(self, _0: numpy.float16, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __lt__(self, _0: numpy.uint64, /):
        """
        usage.matplotlib: 1
        usage.skimage: 1
        """
        ...

    @overload
    def __lt__(self, _0: numpy.int64, /):
        """
        usage.matplotlib: 2
        usage.scipy: 3
        usage.sklearn: 1
        usage.xarray: 1
        """
        ...

    @overload
    def __lt__(self, _0: xarray.core.dataarray.DataArray, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __lt__(self, _0: Union[float, numpy.ndarray, numpy.float64], /):
        """
        usage.pandas: 5
        """
        ...

    @overload
    def __lt__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __lt__(self, _0: numpy.float128, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __lt__(self, _0: numpy.ma.core.MaskedArray, /):
        """
        usage.matplotlib: 1
        usage.scipy: 2
        """
        ...

    @overload
    def __lt__(self, _0: numpy.bool_, /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __lt__(self, _0: numpy.uint16, /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __lt__(self, _0: pandas.core.series.Series, /):
        """
        usage.dask: 1
        """
        ...

    def __lt__(self, _0: object, /):
        """
        usage.dask: 23
        usage.matplotlib: 213
        usage.pandas: 5
        usage.scipy: 505
        usage.skimage: 177
        usage.sklearn: 242
        usage.xarray: 16
        """
        ...

    @overload
    def __mod__(self, _0: float, /):
        """
        usage.matplotlib: 1
        usage.skimage: 2
        """
        ...

    @overload
    def __mod__(self, _0: int, /):
        """
        usage.matplotlib: 10
        usage.scipy: 1
        usage.skimage: 5
        usage.sklearn: 1
        """
        ...

    @overload
    def __mod__(self, _0: object, /):
        """
        usage.pandas: 11
        """
        ...

    @overload
    def __mod__(self, _0: numpy.float64, /):
        """
        usage.scipy: 3
        """
        ...

    def __mod__(self, _0: object, /):
        """
        usage.matplotlib: 11
        usage.pandas: 11
        usage.scipy: 4
        usage.skimage: 7
        usage.sklearn: 1
        """
        ...

    @overload
    def __mul__(self, _0: numpy.ndarray, /):
        """
        usage.matplotlib: 30
        usage.scipy: 444
        usage.skimage: 28
        usage.sklearn: 115
        usage.xarray: 2
        """
        ...

    @overload
    def __mul__(self, _0: numpy.float64, /):
        """
        usage.dask: 3
        usage.matplotlib: 81
        usage.scipy: 671
        usage.skimage: 30
        usage.sklearn: 75
        usage.xarray: 2
        """
        ...

    @overload
    def __mul__(self, _0: int, /):
        """
        usage.dask: 5
        usage.matplotlib: 35
        usage.scipy: 108
        usage.skimage: 12
        usage.sklearn: 38
        usage.xarray: 1
        """
        ...

    @overload
    def __mul__(self, _0: float, /):
        """
        usage.matplotlib: 66
        usage.scipy: 187
        usage.skimage: 7
        usage.sklearn: 39
        """
        ...

    @overload
    def __mul__(self, _0: object, /):
        """
        usage.pandas: 71
        usage.xarray: 2
        """
        ...

    @overload
    def __mul__(self, _0: numpy.float128, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __mul__(self, _0: numpy.float32, /):
        """
        usage.scipy: 12
        usage.sklearn: 2
        """
        ...

    @overload
    def __mul__(self, _0: numpy.int64, /):
        """
        usage.matplotlib: 1
        usage.scipy: 33
        usage.sklearn: 6
        """
        ...

    @overload
    def __mul__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 19
        """
        ...

    @overload
    def __mul__(self, _0: complex, /):
        """
        usage.scipy: 14
        """
        ...

    @overload
    def __mul__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __mul__(self, _0: scipy.sparse.coo.coo_matrix, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __mul__(self, _0: scipy.sparse.csr.csr_matrix, /):
        """
        usage.scipy: 2
        usage.sklearn: 1
        """
        ...

    @overload
    def __mul__(self, _0: numpy.ma.core.MaskedConstant, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __mul__(self, _0: numpy.ma.core.MaskedArray, /):
        """
        usage.matplotlib: 1
        """
        ...

    def __mul__(self, _0: object, /):
        """
        usage.dask: 8
        usage.matplotlib: 214
        usage.pandas: 71
        usage.scipy: 1498
        usage.skimage: 77
        usage.sklearn: 276
        usage.xarray: 7
        """
        ...

    def __neg__(self, /):
        """
        usage.matplotlib: 81
        usage.pandas: 2
        usage.scipy: 311
        usage.skimage: 22
        usage.sklearn: 54
        usage.xarray: 2
        """
        ...

    def __pos__(self, /):
        """
        usage.scipy: 16
        """
        ...

    @overload
    def __pow__(self, _0: int, /):
        """
        usage.dask: 1
        usage.matplotlib: 9
        usage.scipy: 324
        usage.skimage: 32
        usage.sklearn: 36
        """
        ...

    @overload
    def __pow__(self, _0: float, /):
        """
        usage.dask: 2
        usage.matplotlib: 4
        usage.scipy: 76
        usage.skimage: 4
        usage.sklearn: 6
        """
        ...

    @overload
    def __pow__(self, _0: object, /):
        """
        usage.pandas: 13
        """
        ...

    @overload
    def __pow__(self, _0: numpy.float64, /):
        """
        usage.scipy: 19
        usage.sklearn: 1
        """
        ...

    @overload
    def __pow__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 8
        """
        ...

    def __pow__(self, _0: object, /):
        """
        usage.dask: 3
        usage.matplotlib: 13
        usage.pandas: 13
        usage.scipy: 427
        usage.skimage: 36
        usage.sklearn: 43
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float64, /):
        """
        usage.dask: 7
        usage.matplotlib: 180
        usage.scipy: 500
        usage.skimage: 42
        usage.sklearn: 92
        usage.xarray: 5
        """
        ...

    @overload
    def __radd__(self, _0: numpy.ndarray, /):
        """
        usage.dask: 10
        usage.matplotlib: 10
        usage.scipy: 64
        usage.skimage: 18
        usage.sklearn: 51
        usage.xarray: 1
        """
        ...

    @overload
    def __radd__(self, _0: float, /):
        """
        usage.dask: 2
        usage.matplotlib: 42
        usage.scipy: 120
        usage.skimage: 4
        usage.sklearn: 32
        """
        ...

    @overload
    def __radd__(self, _0: int, /):
        """
        usage.dask: 2
        usage.matplotlib: 29
        usage.scipy: 138
        usage.skimage: 13
        usage.sklearn: 14
        usage.xarray: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int64, /):
        """
        usage.matplotlib: 9
        usage.scipy: 19
        usage.skimage: 2
        usage.sklearn: 1
        usage.xarray: 2
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float32, /):
        """
        usage.dask: 2
        usage.matplotlib: 1
        usage.scipy: 1
        usage.skimage: 1
        usage.sklearn: 3
        """
        ...

    @overload
    def __radd__(self, _0: numpy.ma.core.MaskedArray, /):
        """
        usage.matplotlib: 1
        usage.scipy: 4
        usage.skimage: 1
        """
        ...

    @overload
    def __radd__(self, _0: object, /):
        """
        usage.pandas: 36
        """
        ...

    @overload
    def __radd__(self, _0: numpy.bool_, /):
        """
        usage.matplotlib: 1
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint8, /):
        """
        usage.matplotlib: 1
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint16, /):
        """
        usage.matplotlib: 1
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int32, /):
        """
        usage.scipy: 1
        usage.sklearn: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint64, /):
        """
        usage.dask: 2
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.longlong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.ulonglong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float128, /):
        """
        usage.matplotlib: 2
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex256, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.ma.core.MaskedConstant, /):
        """
        usage.matplotlib: 5
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: pandas.core.series.Series, /):
        """
        usage.dask: 1
        """
        ...

    def __radd__(self, _0: object, /):
        """
        usage.dask: 26
        usage.matplotlib: 282
        usage.pandas: 36
        usage.scipy: 861
        usage.skimage: 81
        usage.sklearn: 194
        usage.xarray: 9
        """
        ...

    @overload
    def __rfloordiv__(self, _0: numpy.ndarray, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __rfloordiv__(
        self,
        _0: Union[
            pandas._libs.tslibs.timedeltas.Timedelta,
            float,
            pandas.core.indexes.numeric.Int64Index,
            numpy.float64,
            int,
        ],
        /,
    ):
        """
        usage.pandas: 6
        """
        ...

    @overload
    def __rfloordiv__(self, _0: numpy.float64, /):
        """
        usage.matplotlib: 2
        usage.scipy: 1
        """
        ...

    @overload
    def __rfloordiv__(self, _0: float, /):
        """
        usage.matplotlib: 6
        """
        ...

    def __rfloordiv__(self, _0: object, /):
        """
        usage.matplotlib: 8
        usage.pandas: 6
        usage.scipy: 1
        usage.skimage: 1
        """
        ...

    @overload
    def __rmod__(self, _0: Union[int, numpy.float64, float], /):
        """
        usage.pandas: 3
        """
        ...

    @overload
    def __rmod__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __rmod__(self, _0: numpy.float64, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["abs-diff: %f"], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["%.16e\n"], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["%.15e\n"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["%.0e\n"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["%.1e\n"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["%.2e\n"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["%.3e\n"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["%.4e\n"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["%.5e\n"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["%.6e\n"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["%.7e\n"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["%.8e\n"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rmod__(self, _0: str, /):
        """
        usage.dask: 2
        usage.matplotlib: 1
        usage.scipy: 6
        usage.sklearn: 12
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["fail forp=%f"], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["%1.1f"], /):
        """
        usage.matplotlib: 3
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["%1.0f"], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __rmod__(self, _0: bytes, /):
        """
        usage.matplotlib: 2
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["%1.2f"], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["%05.2lf"], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["%08.2lf"], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["%1.1f%%"], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["%.2f"], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["%1.10e"], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["%1.3f"], /):
        """
        usage.matplotlib: 3
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["%1.3f setgray\n"], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["%1.3f setgray"], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["%4.2e"], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["%-12g"], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["%2.0f"], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["%G"], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["%1.4f"], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["%1.7f"], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["%1.0e"], /):
        """
        usage.matplotlib: 2
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["%d"], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["%d B"], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["%0.2f kB"], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["%0.2f MB"], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["%.16g"], /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["not %s"], /):
        """
        usage.sklearn: 1
        """
        ...

    def __rmod__(self, _0: object, /):
        """
        usage.dask: 5
        usage.matplotlib: 27
        usage.pandas: 3
        usage.scipy: 29
        usage.sklearn: 15
        """
        ...

    @overload
    def __rmul__(self, _0: float, /):
        """
        usage.dask: 4
        usage.matplotlib: 80
        usage.scipy: 646
        usage.skimage: 67
        usage.sklearn: 137
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.ndarray, /):
        """
        usage.matplotlib: 26
        usage.scipy: 166
        usage.skimage: 29
        usage.sklearn: 38
        """
        ...

    @overload
    def __rmul__(self, _0: int, /):
        """
        usage.dask: 5
        usage.matplotlib: 42
        usage.scipy: 593
        usage.skimage: 46
        usage.sklearn: 79
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.float64, /):
        """
        usage.dask: 3
        usage.matplotlib: 81
        usage.scipy: 671
        usage.skimage: 30
        usage.sklearn: 75
        usage.xarray: 2
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.int64, /):
        """
        usage.dask: 1
        usage.scipy: 22
        usage.skimage: 1
        usage.sklearn: 2
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.ma.core.MaskedArray, /):
        """
        usage.matplotlib: 3
        usage.scipy: 2
        usage.xarray: 1
        """
        ...

    @overload
    def __rmul__(self, _0: object, /):
        """
        usage.pandas: 22
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.float128, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.float32, /):
        """
        usage.scipy: 7
        """
        ...

    @overload
    def __rmul__(self, _0: complex, /):
        """
        usage.scipy: 17
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 10
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.poly1d, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rmul__(self, _0: scipy.sparse.csr.csr_matrix, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.ma.core.MaskedConstant, /):
        """
        usage.matplotlib: 3
        usage.scipy: 1
        """
        ...

    @overload
    def __rmul__(self, _0: kiwisolver.Variable, /):
        """
        usage.matplotlib: 14
        """
        ...

    @overload
    def __rmul__(self, _0: dask.array.core.Array, /):
        """
        usage.dask: 1
        """
        ...

    def __rmul__(self, _0: object, /):
        """
        usage.dask: 14
        usage.matplotlib: 249
        usage.pandas: 22
        usage.scipy: 2141
        usage.skimage: 173
        usage.sklearn: 331
        usage.xarray: 3
        """
        ...

    @overload
    def __rpow__(self, _0: float, /):
        """
        usage.matplotlib: 4
        usage.scipy: 3
        usage.skimage: 1
        """
        ...

    @overload
    def __rpow__(self, _0: int, /):
        """
        usage.matplotlib: 26
        usage.scipy: 18
        usage.skimage: 2
        """
        ...

    @overload
    def __rpow__(
        self,
        _0: Union[pandas._libs.missing.NAType, float, numpy.float64, numpy.int64],
        /,
    ):
        """
        usage.pandas: 4
        """
        ...

    @overload
    def __rpow__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def __rpow__(self, _0: numpy.float64, /):
        """
        usage.scipy: 19
        usage.sklearn: 1
        """
        ...

    @overload
    def __rpow__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 27
        usage.sklearn: 3
        """
        ...

    def __rpow__(self, _0: object, /):
        """
        usage.matplotlib: 30
        usage.pandas: 4
        usage.scipy: 72
        usage.skimage: 3
        usage.sklearn: 4
        """
        ...

    @overload
    def __rsub__(self, _0: int, /):
        """
        usage.dask: 2
        usage.matplotlib: 34
        usage.scipy: 199
        usage.skimage: 8
        usage.sklearn: 55
        usage.xarray: 2
        """
        ...

    @overload
    def __rsub__(self, _0: numpy.float64, /):
        """
        usage.dask: 2
        usage.matplotlib: 222
        usage.scipy: 585
        usage.skimage: 63
        usage.sklearn: 94
        usage.xarray: 6
        """
        ...

    @overload
    def __rsub__(self, _0: numpy.ndarray, /):
        """
        usage.matplotlib: 11
        usage.scipy: 157
        usage.skimage: 31
        usage.sklearn: 51
        usage.xarray: 1
        """
        ...

    @overload
    def __rsub__(self, _0: float, /):
        """
        usage.matplotlib: 37
        usage.scipy: 148
        usage.skimage: 1
        usage.sklearn: 29
        usage.xarray: 1
        """
        ...

    @overload
    def __rsub__(self, _0: numpy.float32, /):
        """
        usage.skimage: 2
        usage.sklearn: 2
        """
        ...

    @overload
    def __rsub__(self, _0: numpy.ma.core.MaskedArray, /):
        """
        usage.matplotlib: 1
        usage.scipy: 6
        usage.skimage: 2
        """
        ...

    @overload
    def __rsub__(self, _0: numpy.int64, /):
        """
        usage.matplotlib: 5
        usage.scipy: 2
        usage.sklearn: 1
        usage.xarray: 2
        """
        ...

    @overload
    def __rsub__(self, _0: xarray.core.dataarray.DataArray, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __rsub__(self, _0: object, /):
        """
        usage.pandas: 26
        """
        ...

    @overload
    def __rsub__(self, _0: List[Union[int, float]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rsub__(self, _0: complex, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rsub__(self, _0: numpy.float128, /):
        """
        usage.matplotlib: 2
        usage.scipy: 1
        """
        ...

    @overload
    def __rsub__(self, _0: kiwisolver.Variable, /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __rsub__(self, _0: numpy.ma.core.MaskedConstant, /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __rsub__(self, _0: pandas.core.series.Series, /):
        """
        usage.dask: 9
        """
        ...

    @overload
    def __rsub__(self, _0: numpy.memmap, /):
        """
        usage.sklearn: 1
        """
        ...

    def __rsub__(self, _0: object, /):
        """
        usage.dask: 13
        usage.matplotlib: 314
        usage.pandas: 26
        usage.scipy: 1100
        usage.skimage: 107
        usage.sklearn: 233
        usage.xarray: 13
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.ndarray, /):
        """
        usage.matplotlib: 24
        usage.scipy: 190
        usage.skimage: 35
        usage.sklearn: 86
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.float64, /):
        """
        usage.dask: 8
        usage.matplotlib: 91
        usage.scipy: 406
        usage.skimage: 49
        usage.sklearn: 94
        usage.xarray: 1
        """
        ...

    @overload
    def __rtruediv__(self, _0: int, /):
        """
        usage.dask: 3
        usage.matplotlib: 9
        usage.scipy: 100
        usage.skimage: 12
        usage.sklearn: 23
        usage.xarray: 1
        """
        ...

    @overload
    def __rtruediv__(self, _0: float, /):
        """
        usage.dask: 5
        usage.matplotlib: 39
        usage.scipy: 141
        usage.skimage: 5
        usage.sklearn: 42
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 5
        usage.skimage: 1
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.float32, /):
        """
        usage.skimage: 1
        usage.sklearn: 4
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.int64, /):
        """
        usage.matplotlib: 1
        usage.scipy: 10
        usage.skimage: 1
        usage.sklearn: 3
        """
        ...

    @overload
    def __rtruediv__(self, _0: xarray.core.dataarray.DataArray, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __rtruediv__(self, _0: object, /):
        """
        usage.pandas: 61
        """
        ...

    @overload
    def __rtruediv__(self, _0: complex, /):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.poly1d, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.ma.core.MaskedArray, /):
        """
        usage.matplotlib: 1
        usage.scipy: 7
        """
        ...

    @overload
    def __rtruediv__(self, _0: kiwisolver.Term, /):
        """
        usage.matplotlib: 10
        """
        ...

    @overload
    def __rtruediv__(self, _0: dask.array.core.Array, /):
        """
        usage.dask: 2
        """
        ...

    @overload
    def __rtruediv__(self, _0: scipy.sparse.csr.csr_matrix, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.memmap, /):
        """
        usage.sklearn: 2
        """
        ...

    def __rtruediv__(self, _0: object, /):
        """
        usage.dask: 18
        usage.matplotlib: 175
        usage.pandas: 61
        usage.scipy: 868
        usage.skimage: 104
        usage.sklearn: 255
        usage.xarray: 3
        """
        ...

    def __setitem__(self, _0: numpy.bool_, _1: float, /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __sub__(self, _0: numpy.float64, /):
        """
        usage.dask: 2
        usage.matplotlib: 222
        usage.scipy: 585
        usage.skimage: 63
        usage.sklearn: 94
        usage.xarray: 6
        """
        ...

    @overload
    def __sub__(self, _0: float, /):
        """
        usage.dask: 1
        usage.matplotlib: 90
        usage.scipy: 215
        usage.skimage: 8
        usage.sklearn: 24
        usage.xarray: 2
        """
        ...

    @overload
    def __sub__(self, _0: int, /):
        """
        usage.dask: 5
        usage.matplotlib: 29
        usage.scipy: 221
        usage.skimage: 78
        usage.sklearn: 18
        usage.xarray: 6
        """
        ...

    @overload
    def __sub__(self, _0: numpy.ndarray, /):
        """
        usage.matplotlib: 11
        usage.scipy: 68
        usage.skimage: 4
        usage.sklearn: 12
        """
        ...

    @overload
    def __sub__(self, _0: numpy.uint8, /):
        """
        usage.matplotlib: 1
        usage.skimage: 1
        """
        ...

    @overload
    def __sub__(self, _0: object, /):
        """
        usage.pandas: 28
        """
        ...

    @overload
    def __sub__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __sub__(self, _0: numpy.int64, /):
        """
        usage.matplotlib: 3
        usage.scipy: 5
        usage.sklearn: 3
        """
        ...

    @overload
    def __sub__(self, _0: complex, /):
        """
        usage.scipy: 7
        """
        ...

    @overload
    def __sub__(self, _0: numpy.ma.core.MaskedArray, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __sub__(self, _0: List[int], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __sub__(self, _0: dask.array.core.Array, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __sub__(self, _0: numpy.float32, /):
        """
        usage.sklearn: 2
        """
        ...

    def __sub__(self, _0: object, /):
        """
        usage.dask: 9
        usage.matplotlib: 357
        usage.pandas: 28
        usage.scipy: 1106
        usage.skimage: 154
        usage.sklearn: 153
        usage.xarray: 14
        """
        ...

    @overload
    def __truediv__(self, _0: float, /):
        """
        usage.matplotlib: 75
        usage.scipy: 199
        usage.skimage: 25
        usage.sklearn: 21
        usage.xarray: 3
        """
        ...

    @overload
    def __truediv__(self, _0: numpy.float64, /):
        """
        usage.dask: 8
        usage.matplotlib: 91
        usage.scipy: 406
        usage.skimage: 49
        usage.sklearn: 94
        usage.xarray: 1
        """
        ...

    @overload
    def __truediv__(self, _0: int, /):
        """
        usage.dask: 12
        usage.matplotlib: 40
        usage.scipy: 206
        usage.skimage: 16
        usage.sklearn: 85
        usage.xarray: 3
        """
        ...

    @overload
    def __truediv__(self, _0: numpy.float32, /):
        """
        usage.scipy: 2
        usage.skimage: 1
        usage.sklearn: 2
        """
        ...

    @overload
    def __truediv__(self, _0: numpy.int16, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __truediv__(self, _0: numpy.uint8, /):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __truediv__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 45
        usage.skimage: 1
        usage.sklearn: 4
        """
        ...

    @overload
    def __truediv__(self, _0: numpy.int64, /):
        """
        usage.dask: 2
        usage.scipy: 9
        usage.skimage: 1
        usage.sklearn: 5
        usage.xarray: 1
        """
        ...

    @overload
    def __truediv__(self, _0: object, /):
        """
        usage.pandas: 61
        """
        ...

    @overload
    def __truediv__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __truediv__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __truediv__(self, _0: complex, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __truediv__(self, _0: numpy.ma.core.MaskedConstant, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __truediv__(self, _0: numpy.ma.core.MaskedArray, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __truediv__(self, _0: dask.array.core.Array, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __truediv__(self, _0: numpy.memmap, /):
        """
        usage.sklearn: 1
        """
        ...

    def __truediv__(self, _0: object, /):
        """
        usage.dask: 23
        usage.matplotlib: 206
        usage.pandas: 61
        usage.scipy: 878
        usage.skimage: 96
        usage.sklearn: 212
        usage.xarray: 8
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.int64], /):
        """
        usage.scipy: 5
        usage.skimage: 1
        """
        ...

    @overload
    def astype(self, _0: Literal["timedelta64[ns]"], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def astype(self, _0: Type[float], /):
        """
        usage.sklearn: 1
        usage.xarray: 2
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.float64], /):
        """
        usage.matplotlib: 2
        usage.xarray: 1
        """
        ...

    @overload
    def astype(self, _0: Union[Type[int], numpy.dtype], /):
        """
        usage.pandas: 8
        """
        ...

    @overload
    def astype(self, _0: Literal["d"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.complex128], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def astype(self, _0: numpy.dtype, /):
        """
        usage.dask: 3
        usage.scipy: 1
        """
        ...

    @overload
    def astype(self, _0: Type[complex], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def astype(self, _0: Literal["l"], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def astype(self, _0: Type[int], /):
        """
        usage.matplotlib: 1
        usage.scipy: 3
        usage.sklearn: 1
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.float32], /):
        """
        usage.matplotlib: 2
        """
        ...

    @overload
    def astype(self, _0: Literal["f8"], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def astype(self, _0: Literal["i8"], /):
        """
        usage.dask: 1
        """
        ...

    def astype(
        self,
        _0: Union[
            type,
            Type[int],
            Type[numpy.int64],
            numpy.dtype,
            Literal["i8", "f8", "l", "d", "timedelta64[ns]"],
        ],
        /,
    ):
        """
        usage.dask: 5
        usage.matplotlib: 5
        usage.pandas: 8
        usage.scipy: 14
        usage.skimage: 1
        usage.sklearn: 2
        usage.xarray: 4
        """
        ...

    def byteswap(self, /):
        """
        usage.scipy: 1
        """
        ...

    def clip(self, _0: float, _1: float, /):
        """
        usage.scipy: 1
        """
        ...

    def conj(self, /):
        """
        usage.scipy: 1
        """
        ...

    def copy(self, /):
        """
        usage.scipy: 2
        """
        ...

    def item(self, /):
        """
        usage.matplotlib: 3
        usage.pandas: 1
        usage.scipy: 2
        usage.sklearn: 4
        usage.xarray: 3
        """
        ...

    def max(self, /):
        """
        usage.scipy: 2
        """
        ...

    def mean(self, /):
        """
        usage.sklearn: 2
        """
        ...

    def ravel(self, /):
        """
        usage.matplotlib: 1
        usage.scipy: 2
        usage.xarray: 1
        """
        ...

    @overload
    def reshape(self, _0: Tuple[int, int], /):
        """
        usage.dask: 1
        usage.scipy: 1
        """
        ...

    @overload
    def reshape(self, _0: List[int], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def reshape(self, _0: Tuple[None, ...], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def reshape(self, _0: Tuple[int], /):
        """
        usage.dask: 1
        """
        ...

    def reshape(self, _0: Union[Tuple[Union[None, int], ...], List[int]], /):
        """
        usage.dask: 2
        usage.scipy: 5
        """
        ...

    def squeeze(self, /):
        """
        usage.scipy: 3
        usage.xarray: 1
        """
        ...

    def sum(self, /, *, axis: None):
        """
        usage.scipy: 2
        """
        ...

    def tobytes(self, /):
        """
        usage.scipy: 1
        """
        ...


class iinfo:

    # usage.dask: 2
    # usage.pandas: 25
    # usage.scipy: 12
    # usage.skimage: 7
    # usage.sklearn: 13
    max: object

    # usage.pandas: 10
    # usage.scipy: 2
    # usage.skimage: 3
    min: object


class int16:

    # usage.pandas: 3
    __name__: ClassVar[object]

    @overload
    @classmethod
    def __ne__(cls, _0: Union[numpy.int16, Type[numpy.int64]], /):
        """
        usage.pandas: 9
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: numpy.int16, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: int, /):
        """
        usage.sklearn: 1
        """
        ...

    @classmethod
    def __ne__(cls, _0: Union[int, numpy.int16, Type[numpy.int64]], /):
        """
        usage.pandas: 9
        usage.scipy: 2
        usage.sklearn: 1
        """
        ...

    # usage.pandas: 4
    # usage.scipy: 2
    dtype: object

    # usage.dask: 2
    ndim: object

    # usage.scipy: 1
    size: object

    @overload
    def __add__(self, _0: object, /):
        """
        usage.pandas: 9
        """
        ...

    @overload
    def __add__(self, _0: numpy.int16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.longlong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.ulonglong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex256, /):
        """
        usage.scipy: 1
        """
        ...

    def __add__(self, _0: object, /):
        """
        usage.pandas: 9
        usage.scipy: 17
        """
        ...

    def __bool__(self, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __eq__(self, _0: int, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.int64, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 2
        usage.xarray: 1
        """
        ...

    @overload
    def __eq__(self, _0: object, /):
        """
        usage.pandas: 81
        """
        ...

    def __eq__(self, _0: object, /):
        """
        usage.pandas: 81
        usage.scipy: 2
        usage.skimage: 2
        usage.xarray: 1
        """
        ...

    def __floordiv__(
        self, _0: Union[numpy.ndarray, pandas.core.arrays.integer.IntegerArray], /
    ):
        """
        usage.pandas: 2
        """
        ...

    def __ge__(self, _0: int, /):
        """
        usage.pandas: 2
        usage.skimage: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, None, None, None], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, None, None], /):
        """
        usage.dask: 1
        """
        ...

    def __getitem__(self, _0: Tuple[Union[None, ellipsis], ...], /):
        """
        usage.dask: 2
        """
        ...

    def __gt__(self, _0: numpy.int16, /):
        """
        usage.matplotlib: 1
        """
        ...

    def __le__(self, _0: int, /):
        """
        usage.pandas: 2
        """
        ...

    @overload
    def __lt__(self, _0: int, /):
        """
        usage.matplotlib: 1
        usage.skimage: 3
        """
        ...

    @overload
    def __lt__(self, _0: numpy.int16, /):
        """
        usage.matplotlib: 1
        """
        ...

    def __lt__(self, _0: Union[numpy.int16, int], /):
        """
        usage.matplotlib: 2
        usage.skimage: 3
        """
        ...

    def __mod__(
        self, _0: Union[numpy.ndarray, pandas.core.arrays.integer.IntegerArray], /
    ):
        """
        usage.pandas: 2
        """
        ...

    @overload
    def __mul__(
        self,
        _0: Union[
            numpy.ndarray,
            pandas.core.arrays.timedeltas.TimedeltaArray,
            pandas.core.series.Series,
            pandas.core.arrays.integer.IntegerArray,
        ],
        /,
    ):
        """
        usage.pandas: 4
        """
        ...

    @overload
    def __mul__(self, _0: int, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __mul__(self, _0: numpy.int64, /):
        """
        usage.scipy: 1
        """
        ...

    def __mul__(self, _0: object, /):
        """
        usage.pandas: 4
        usage.scipy: 4
        """
        ...

    @overload
    def __pow__(self, _0: int, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __pow__(
        self, _0: Union[numpy.ndarray, pandas.core.arrays.integer.IntegerArray], /
    ):
        """
        usage.pandas: 2
        """
        ...

    def __pow__(
        self, _0: Union[pandas.core.arrays.integer.IntegerArray, numpy.ndarray, int], /
    ):
        """
        usage.pandas: 2
        usage.skimage: 1
        """
        ...

    @overload
    def __radd__(self, _0: Union[pandas._libs.missing.NAType, numpy.int16], /):
        """
        usage.pandas: 6
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int64, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.longlong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.ulonglong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex256, /):
        """
        usage.scipy: 1
        """
        ...

    def __radd__(self, _0: object, /):
        """
        usage.pandas: 6
        usage.scipy: 18
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.ndarray, /):
        """
        usage.pandas: 1
        """
        ...

    @overload
    def __rmul__(self, _0: float, /):
        """
        usage.scipy: 1
        """
        ...

    def __rmul__(self, _0: Union[float, numpy.ndarray], /):
        """
        usage.pandas: 1
        usage.scipy: 1
        """
        ...

    @overload
    def __rsub__(self, _0: numpy.int16, /):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __rsub__(self, _0: pandas.core.arrays.timedeltas.TimedeltaArray, /):
        """
        usage.pandas: 1
        """
        ...

    def __rsub__(
        self, _0: Union[pandas.core.arrays.timedeltas.TimedeltaArray, numpy.int16], /
    ):
        """
        usage.pandas: 1
        usage.skimage: 2
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.float64, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __rtruediv__(
        self,
        _0: Union[
            numpy.ndarray,
            pandas._libs.tslibs.timedeltas.Timedelta,
            pandas._libs.tslibs.nattype.NaTType,
        ],
        /,
    ):
        """
        usage.pandas: 5
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 2
        """
        ...

    def __rtruediv__(
        self,
        _0: Union[
            numpy.ndarray,
            numpy.float64,
            pandas._libs.tslibs.timedeltas.Timedelta,
            pandas._libs.tslibs.nattype.NaTType,
        ],
        /,
    ):
        """
        usage.pandas: 5
        usage.scipy: 2
        usage.skimage: 1
        """
        ...

    @overload
    def __sub__(self, _0: numpy.int16, /):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __sub__(
        self,
        _0: Union[
            int,
            pandas.core.arrays.integer.IntegerArray,
            pandas.core.series.Series,
            pandas.core.arrays.timedeltas.TimedeltaArray,
            numpy.ndarray,
        ],
        /,
    ):
        """
        usage.pandas: 5
        """
        ...

    def __sub__(self, _0: object, /):
        """
        usage.pandas: 5
        usage.skimage: 2
        """
        ...

    def __truediv__(
        self,
        _0: Union[
            numpy.ndarray,
            pandas.core.arrays.timedeltas.TimedeltaArray,
            pandas.core.series.Series,
            pandas.core.arrays.integer.IntegerArray,
        ],
        /,
    ):
        """
        usage.pandas: 4
        """
        ...

    def astype(self, _0: numpy.dtype, /):
        """
        usage.pandas: 1
        """
        ...

    def item(self, /):
        """
        usage.matplotlib: 1
        """
        ...


class int32:

    # usage.dask: 2
    __module__: ClassVar[object]

    # usage.pandas: 3
    __name__: ClassVar[object]

    @overload
    @classmethod
    def __lt__(cls, _0: numpy.dtype, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    @classmethod
    def __lt__(cls, _0: int, /):
        """
        usage.matplotlib: 2
        usage.scipy: 7
        usage.skimage: 2
        usage.sklearn: 6
        """
        ...

    @overload
    @classmethod
    def __lt__(cls, _0: numpy.int32, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    @classmethod
    def __lt__(cls, _0: numpy.int64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    @classmethod
    def __lt__(cls, _0: float, /):
        """
        usage.scipy: 1
        usage.sklearn: 1
        """
        ...

    @overload
    @classmethod
    def __lt__(cls, _0: numpy.ma.core.MaskedConstant, /):
        """
        usage.matplotlib: 1
        """
        ...

    @classmethod
    def __lt__(cls, _0: object, /):
        """
        usage.matplotlib: 3
        usage.scipy: 13
        usage.skimage: 2
        usage.sklearn: 7
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: Union[numpy.int32, Type[numpy.int64]], /):
        """
        usage.pandas: 9
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: Type[numpy.int32], /):
        """
        usage.scipy: 8
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: numpy.int32, /):
        """
        usage.scipy: 12
        usage.sklearn: 2
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: int, /):
        """
        usage.scipy: 11
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: numpy.int64, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: numpy.dtype, /):
        """
        usage.dask: 1
        usage.sklearn: 5
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: numpy.ndarray, /):
        """
        usage.sklearn: 1
        """
        ...

    @classmethod
    def __ne__(cls, _0: object, /):
        """
        usage.dask: 1
        usage.pandas: 9
        usage.scipy: 33
        usage.sklearn: 8
        """
        ...

    # usage.pandas: 4
    # usage.scipy: 5
    # usage.xarray: 1
    dtype: object

    # usage.dask: 3
    # usage.xarray: 1
    ndim: object

    # usage.dask: 5
    shape: object

    # usage.scipy: 1
    size: object

    @overload
    def __add__(
        self,
        _0: Union[
            numpy.int32,
            pandas.core.arrays.integer.IntegerArray,
            pandas.core.series.Series,
            pandas.core.arrays.timedeltas.TimedeltaArray,
            numpy.ndarray,
        ],
        /,
    ):
        """
        usage.pandas: 8
        """
        ...

    @overload
    def __add__(self, _0: int, /):
        """
        usage.dask: 1
        usage.scipy: 8
        usage.sklearn: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int32, /):
        """
        usage.scipy: 1
        usage.sklearn: 2
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int64, /):
        """
        usage.dask: 2
        usage.scipy: 1
        usage.sklearn: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.longlong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.ulonglong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float64, /):
        """
        usage.scipy: 1
        usage.sklearn: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex256, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: bool, /):
        """
        usage.sklearn: 1
        """
        ...

    def __add__(self, _0: object, /):
        """
        usage.dask: 3
        usage.pandas: 8
        usage.scipy: 25
        usage.sklearn: 6
        """
        ...

    def __and__(self, _0: int, /):
        """
        usage.scipy: 8
        """
        ...

    def __bool__(self, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __eq__(self, _0: int, /):
        """
        usage.dask: 1
        usage.matplotlib: 4
        usage.scipy: 23
        usage.skimage: 2
        usage.sklearn: 5
        """
        ...

    @overload
    def __eq__(self, _0: numpy.int64, /):
        """
        usage.dask: 2
        usage.skimage: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 3
        usage.sklearn: 3
        usage.xarray: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.int32, /):
        """
        usage.scipy: 6
        usage.sklearn: 6
        usage.xarray: 2
        """
        ...

    @overload
    def __eq__(
        self,
        _0: Union[
            numpy.int64,
            pandas.core.series.Series,
            numpy.int32,
            int,
            pandas.core.arrays.integer.IntegerArray,
        ],
        /,
    ):
        """
        usage.pandas: 77
        """
        ...

    @overload
    def __eq__(self, _0: Literal["scott"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __eq__(self, _0: Literal["silverman"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __eq__(self, _0: Literal["mle"], /):
        """
        usage.sklearn: 2
        """
        ...

    def __eq__(self, _0: object, /):
        """
        usage.dask: 3
        usage.matplotlib: 4
        usage.pandas: 77
        usage.scipy: 34
        usage.skimage: 3
        usage.sklearn: 16
        usage.xarray: 3
        """
        ...

    def __floordiv__(
        self, _0: Union[numpy.ndarray, pandas.core.arrays.integer.IntegerArray], /
    ):
        """
        usage.pandas: 2
        """
        ...

    @overload
    def __ge__(self, _0: int, /):
        """
        usage.matplotlib: 1
        usage.pandas: 3
        usage.scipy: 5
        usage.skimage: 1
        usage.sklearn: 5
        """
        ...

    @overload
    def __ge__(self, _0: numpy.int32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __ge__(self, _0: float, /):
        """
        usage.sklearn: 1
        """
        ...

    def __ge__(self, _0: Union[float, int, numpy.int32], /):
        """
        usage.matplotlib: 1
        usage.pandas: 3
        usage.scipy: 6
        usage.skimage: 1
        usage.sklearn: 6
        """
        ...

    @overload
    def __getitem__(self, _0: ellipsis, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, None], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, None, None], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, None, None, None], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, None, None, None, None, None], /):
        """
        usage.dask: 1
        """
        ...

    def __getitem__(self, _0: Union[Tuple[Union[ellipsis, None], ...], ellipsis], /):
        """
        usage.dask: 4
        usage.xarray: 1
        """
        ...

    @overload
    def __gt__(self, _0: int, /):
        """
        usage.pandas: 2
        usage.scipy: 13
        usage.sklearn: 2
        """
        ...

    @overload
    def __gt__(self, _0: numpy.int32, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __gt__(self, _0: numpy.int64, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __gt__(self, _0: numpy.ma.core.MaskedConstant, /):
        """
        usage.matplotlib: 1
        """
        ...

    def __gt__(
        self, _0: Union[int, numpy.int32, numpy.int64, numpy.ma.core.MaskedConstant], /
    ):
        """
        usage.matplotlib: 1
        usage.pandas: 2
        usage.scipy: 17
        usage.sklearn: 2
        """
        ...

    @overload
    def __iadd__(self, _0: numpy.int32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __iadd__(self, _0: int, /):
        """
        usage.scipy: 1
        """
        ...

    def __iadd__(self, _0: Union[int, numpy.int32], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __le__(self, _0: int, /):
        """
        usage.pandas: 3
        usage.scipy: 2
        usage.sklearn: 6
        """
        ...

    @overload
    def __le__(self, _0: numpy.int32, /):
        """
        usage.scipy: 1
        """
        ...

    def __le__(self, _0: Union[int, numpy.int32], /):
        """
        usage.pandas: 3
        usage.scipy: 3
        usage.sklearn: 6
        """
        ...

    def __mod__(
        self, _0: Union[numpy.ndarray, pandas.core.arrays.integer.IntegerArray], /
    ):
        """
        usage.pandas: 2
        """
        ...

    @overload
    def __mul__(
        self,
        _0: Union[
            numpy.ndarray,
            pandas.core.arrays.timedeltas.TimedeltaArray,
            pandas.core.series.Series,
            pandas.core.arrays.integer.IntegerArray,
        ],
        /,
    ):
        """
        usage.pandas: 4
        """
        ...

    @overload
    def __mul__(self, _0: int, /):
        """
        usage.dask: 1
        usage.scipy: 6
        """
        ...

    @overload
    def __mul__(self, _0: numpy.int64, /):
        """
        usage.scipy: 1
        """
        ...

    def __mul__(self, _0: object, /):
        """
        usage.dask: 1
        usage.pandas: 4
        usage.scipy: 7
        """
        ...

    def __neg__(self, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __pow__(
        self, _0: Union[numpy.ndarray, pandas.core.arrays.integer.IntegerArray], /
    ):
        """
        usage.pandas: 2
        """
        ...

    @overload
    def __pow__(self, _0: int, /):
        """
        usage.scipy: 2
        """
        ...

    def __pow__(
        self, _0: Union[int, pandas.core.arrays.integer.IntegerArray, numpy.ndarray], /
    ):
        """
        usage.pandas: 2
        usage.scipy: 2
        """
        ...

    @overload
    def __radd__(self, _0: Union[pandas._libs.missing.NAType, numpy.int32], /):
        """
        usage.pandas: 6
        """
        ...

    @overload
    def __radd__(self, _0: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int64, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int32, /):
        """
        usage.scipy: 1
        usage.sklearn: 2
        """
        ...

    @overload
    def __radd__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.longlong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.ulonglong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex256, /):
        """
        usage.scipy: 1
        """
        ...

    def __radd__(self, _0: object, /):
        """
        usage.pandas: 6
        usage.scipy: 20
        usage.sklearn: 2
        """
        ...

    def __rfloordiv__(self, _0: pandas._libs.tslibs.timedeltas.Timedelta, /):
        """
        usage.pandas: 1
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["%i\n"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rmod__(self, _0: str, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["%d"], /):
        """
        usage.sklearn: 1
        """
        ...

    def __rmod__(self, _0: str, /):
        """
        usage.scipy: 2
        usage.sklearn: 1
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.ndarray, /):
        """
        usage.pandas: 1
        usage.sklearn: 1
        """
        ...

    @overload
    def __rmul__(self, _0: int, /):
        """
        usage.dask: 2
        usage.scipy: 1
        """
        ...

    @overload
    def __rmul__(self, _0: float, /):
        """
        usage.scipy: 1
        """
        ...

    def __rmul__(self, _0: Union[numpy.ndarray, float, int], /):
        """
        usage.dask: 2
        usage.pandas: 1
        usage.scipy: 2
        usage.sklearn: 1
        """
        ...

    @overload
    def __rsub__(self, _0: pandas.core.arrays.timedeltas.TimedeltaArray, /):
        """
        usage.pandas: 1
        """
        ...

    @overload
    def __rsub__(self, _0: int, /):
        """
        usage.scipy: 1
        usage.sklearn: 1
        """
        ...

    @overload
    def __rsub__(self, _0: numpy.int32, /):
        """
        usage.dask: 1
        usage.scipy: 2
        usage.sklearn: 4
        """
        ...

    def __rsub__(
        self,
        _0: Union[int, numpy.int32, pandas.core.arrays.timedeltas.TimedeltaArray],
        /,
    ):
        """
        usage.dask: 1
        usage.pandas: 1
        usage.scipy: 3
        usage.sklearn: 5
        """
        ...

    @overload
    def __rtruediv__(
        self,
        _0: Union[
            numpy.ndarray,
            pandas._libs.tslibs.timedeltas.Timedelta,
            pandas._libs.tslibs.nattype.NaTType,
        ],
        /,
    ):
        """
        usage.pandas: 5
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.int32, /):
        """
        usage.dask: 1
        """
        ...

    def __rtruediv__(
        self,
        _0: Union[
            numpy.int32,
            pandas._libs.tslibs.timedeltas.Timedelta,
            pandas._libs.tslibs.nattype.NaTType,
            numpy.ndarray,
        ],
        /,
    ):
        """
        usage.dask: 1
        usage.pandas: 5
        usage.scipy: 2
        """
        ...

    @overload
    def __sub__(
        self,
        _0: Union[
            int,
            pandas.core.arrays.integer.IntegerArray,
            pandas.core.series.Series,
            pandas.core.arrays.timedeltas.TimedeltaArray,
            numpy.ndarray,
        ],
        /,
    ):
        """
        usage.pandas: 5
        """
        ...

    @overload
    def __sub__(self, _0: int, /):
        """
        usage.scipy: 16
        usage.sklearn: 1
        """
        ...

    @overload
    def __sub__(self, _0: numpy.int32, /):
        """
        usage.dask: 1
        usage.scipy: 2
        usage.sklearn: 4
        """
        ...

    def __sub__(self, _0: object, /):
        """
        usage.dask: 1
        usage.pandas: 5
        usage.scipy: 18
        usage.sklearn: 5
        """
        ...

    @overload
    def __truediv__(
        self,
        _0: Union[
            numpy.ndarray,
            pandas.core.arrays.timedeltas.TimedeltaArray,
            pandas.core.series.Series,
            pandas.core.arrays.integer.IntegerArray,
        ],
        /,
    ):
        """
        usage.pandas: 4
        """
        ...

    @overload
    def __truediv__(self, _0: numpy.int32, /):
        """
        usage.dask: 1
        """
        ...

    def __truediv__(
        self,
        _0: Union[
            numpy.int32,
            pandas.core.arrays.integer.IntegerArray,
            pandas.core.series.Series,
            pandas.core.arrays.timedeltas.TimedeltaArray,
            numpy.ndarray,
        ],
        /,
    ):
        """
        usage.dask: 1
        usage.pandas: 4
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.int64], /):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def astype(self, _0: numpy.dtype, /):
        """
        usage.pandas: 1
        """
        ...

    def astype(self, _0: Union[numpy.dtype, Type[numpy.int64]], /):
        """
        usage.pandas: 1
        usage.skimage: 2
        """
        ...


class int64:

    # usage.dask: 1
    __module__: ClassVar[object]

    # usage.matplotlib: 1
    __mro__: ClassVar[object]

    # usage.pandas: 6
    # usage.scipy: 2
    __name__: ClassVar[object]

    # usage.pandas: 1
    type: ClassVar[object]

    @overload
    @classmethod
    def __ne__(cls, _0: object, /):
        """
        usage.pandas: 74
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: int, /):
        """
        usage.dask: 7
        usage.matplotlib: 12
        usage.scipy: 32
        usage.skimage: 4
        usage.sklearn: 25
        usage.xarray: 6
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: numpy.int64, /):
        """
        usage.dask: 4
        usage.scipy: 24
        usage.skimage: 2
        usage.sklearn: 2
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: numpy.dtype, /):
        """
        usage.dask: 2
        usage.scipy: 5
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: float, /):
        """
        usage.dask: 1
        usage.matplotlib: 1
        usage.scipy: 4
        usage.sklearn: 1
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: numpy.float64, /):
        """
        usage.scipy: 1
        usage.sklearn: 1
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: numpy.ndarray, /):
        """
        usage.scipy: 3
        usage.sklearn: 6
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: numpy.int32, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: Literal[""], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: Literal["1"], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: Literal["2"], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: Literal["3"], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: Literal["4"], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: Literal["5"], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: None, /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: Type[inspect._empty], /):
        """
        usage.sklearn: 1
        """
        ...

    @classmethod
    def __ne__(cls, _0: object, /):
        """
        usage.dask: 14
        usage.matplotlib: 20
        usage.pandas: 74
        usage.scipy: 71
        usage.skimage: 6
        usage.sklearn: 36
        usage.xarray: 6
        """
        ...

    # usage.xarray: 1
    coords: object

    # usage.dask: 11
    # usage.pandas: 5
    # usage.scipy: 9
    # usage.xarray: 1
    dtype: object

    # usage.scipy: 3
    itemsize: object

    # usage.dask: 8
    # usage.matplotlib: 1
    # usage.pandas: 3
    # usage.skimage: 1
    ndim: object

    # usage.dask: 10
    # usage.scipy: 1
    # usage.xarray: 1
    shape: object

    # usage.scipy: 1
    size: object

    # usage.pandas: 1
    values: object

    # usage.xarray: 1
    variable: object

    # usage.xarray: 1
    variables: object

    @overload
    def __add__(self, _0: int, /):
        """
        usage.dask: 6
        usage.matplotlib: 25
        usage.scipy: 124
        usage.skimage: 25
        usage.sklearn: 35
        usage.xarray: 7
        """
        ...

    @overload
    def __add__(self, _0: numpy.float64, /):
        """
        usage.matplotlib: 9
        usage.scipy: 19
        usage.skimage: 2
        usage.sklearn: 1
        usage.xarray: 2
        """
        ...

    @overload
    def __add__(self, _0: numpy.int64, /):
        """
        usage.dask: 12
        usage.matplotlib: 10
        usage.scipy: 63
        usage.skimage: 6
        usage.sklearn: 11
        """
        ...

    @overload
    def __add__(self, _0: float, /):
        """
        usage.dask: 1
        usage.matplotlib: 6
        usage.scipy: 20
        usage.skimage: 2
        usage.sklearn: 1
        usage.xarray: 3
        """
        ...

    @overload
    def __add__(self, _0: numpy.ndarray, /):
        """
        usage.dask: 1
        usage.matplotlib: 1
        usage.scipy: 20
        usage.skimage: 2
        """
        ...

    @overload
    def __add__(self, _0: object, /):
        """
        usage.pandas: 63
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __add__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 14
        """
        ...

    @overload
    def __add__(self, _0: numpy.int8, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint8, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __add__(self, _0: numpy.int16, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint16, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __add__(self, _0: numpy.int32, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint32, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __add__(self, _0: numpy.longlong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.ulonglong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex256, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: List[int], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __add__(self, _0: bool, /):
        """
        usage.sklearn: 1
        """
        ...

    def __add__(self, _0: object, /):
        """
        usage.dask: 20
        usage.matplotlib: 52
        usage.pandas: 63
        usage.scipy: 282
        usage.skimage: 37
        usage.sklearn: 49
        usage.xarray: 12
        """
        ...

    @overload
    def __and__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 20
        """
        ...

    @overload
    def __and__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 16
        """
        ...

    @overload
    def __and__(self, _0: numpy.int64, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __and__(self, _0: bool, /):
        """
        usage.dask: 1
        """
        ...

    def __and__(self, _0: Union[numpy.int64, bool, numpy.bool_, numpy.ndarray], /):
        """
        usage.dask: 2
        usage.scipy: 36
        """
        ...

    def __bool__(self, /):
        """
        usage.dask: 1
        usage.scipy: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.flatiter, /):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __eq__(self, _0: numpy.ndarray, /):
        """
        usage.dask: 2
        usage.matplotlib: 4
        usage.scipy: 24
        usage.skimage: 7
        usage.sklearn: 38
        usage.xarray: 10
        """
        ...

    @overload
    def __eq__(self, _0: int, /):
        """
        usage.dask: 32
        usage.matplotlib: 26
        usage.scipy: 115
        usage.skimage: 46
        usage.sklearn: 138
        usage.xarray: 22
        """
        ...

    @overload
    def __eq__(self, _0: numpy.int64, /):
        """
        usage.dask: 40
        usage.matplotlib: 22
        usage.scipy: 28
        usage.skimage: 16
        usage.sklearn: 34
        usage.xarray: 4
        """
        ...

    @overload
    def __eq__(self, _0: numpy.float64, /):
        """
        usage.scipy: 2
        usage.skimage: 8
        usage.sklearn: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.uint8, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.uint64, /):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __eq__(self, _0: numpy.int32, /):
        """
        usage.dask: 2
        usage.skimage: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.int8, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.int16, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.longlong, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.uint16, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.uint32, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.ulonglong, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __eq__(self, _0: dask.array.core.Array, /):
        """
        usage.xarray: 3
        """
        ...

    @overload
    def __eq__(self, _0: xarray.core.dataarray.DataArray, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __eq__(self, _0: xarray.core.variable.Variable, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __eq__(self, _0: object, /):
        """
        usage.pandas: 513
        """
        ...

    @overload
    def __eq__(self, _0: float, /):
        """
        usage.dask: 3
        usage.matplotlib: 2
        usage.scipy: 4
        usage.sklearn: 1
        """
        ...

    @overload
    def __eq__(self, _0: Literal["scott"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __eq__(self, _0: Literal["silverman"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __eq__(self, _0: pandas.core.series.Series, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __eq__(self, _0: None, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.str_, /):
        """
        usage.sklearn: 1
        """
        ...

    def __eq__(self, _0: object, /):
        """
        usage.dask: 81
        usage.matplotlib: 54
        usage.pandas: 513
        usage.scipy: 175
        usage.skimage: 89
        usage.sklearn: 213
        usage.xarray: 41
        """
        ...

    @overload
    def __floordiv__(self, _0: int, /):
        """
        usage.dask: 1
        usage.matplotlib: 2
        usage.scipy: 8
        usage.skimage: 5
        usage.sklearn: 2
        usage.xarray: 1
        """
        ...

    @overload
    def __floordiv__(
        self,
        _0: Union[
            pandas._libs.missing.NAType,
            numpy.ndarray,
            pandas.core.series.Series,
            pandas.core.arrays.integer.IntegerArray,
            int,
        ],
        /,
    ):
        """
        usage.pandas: 6
        """
        ...

    @overload
    def __floordiv__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __floordiv__(self, _0: numpy.int64, /):
        """
        usage.dask: 1
        """
        ...

    def __floordiv__(self, _0: object, /):
        """
        usage.dask: 2
        usage.matplotlib: 2
        usage.pandas: 6
        usage.scipy: 12
        usage.skimage: 5
        usage.sklearn: 2
        usage.xarray: 1
        """
        ...

    @overload
    def __ge__(self, _0: int, /):
        """
        usage.dask: 8
        usage.matplotlib: 6
        usage.scipy: 17
        usage.skimage: 3
        usage.sklearn: 13
        usage.xarray: 2
        """
        ...

    @overload
    def __ge__(self, _0: numpy.ndarray, /):
        """
        usage.matplotlib: 1
        usage.scipy: 5
        usage.skimage: 6
        """
        ...

    @overload
    def __ge__(self, _0: float, /):
        """
        usage.skimage: 1
        usage.sklearn: 2
        """
        ...

    @overload
    def __ge__(self, _0: numpy.int64, /):
        """
        usage.dask: 9
        usage.matplotlib: 3
        usage.scipy: 8
        usage.skimage: 1
        usage.sklearn: 3
        """
        ...

    @overload
    def __ge__(
        self, _0: Union[numpy.ndarray, int, numpy.int64, pandas._libs.missing.NAType], /
    ):
        """
        usage.pandas: 19
        """
        ...

    @overload
    def __ge__(self, _0: numpy.float64, /):
        """
        usage.scipy: 4
        usage.sklearn: 4
        """
        ...

    @overload
    def __ge__(self, _0: dask.dataframe.core.Series, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __ge__(self, _0: pandas.core.series.Series, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __ge__(self, _0: dask.dataframe.core.DataFrame, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __ge__(self, _0: pandas.core.frame.DataFrame, /):
        """
        usage.dask: 1
        """
        ...

    def __ge__(self, _0: object, /):
        """
        usage.dask: 21
        usage.matplotlib: 10
        usage.pandas: 19
        usage.scipy: 34
        usage.skimage: 11
        usage.sklearn: 22
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[None, ellipsis], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: int, /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, None], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, None, None], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, None, None, None], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, None, None, None, None], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, None, None, None, None, None], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[None, None, None, None], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[None, None, None], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[None], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[None, None], /):
        """
        usage.dask: 1
        """
        ...

    def __getitem__(self, _0: Union[Tuple[Union[ellipsis, None], ...], int], /):
        """
        usage.dask: 9
        usage.matplotlib: 1
        usage.xarray: 1
        """
        ...

    @overload
    def __gt__(self, _0: numpy.ndarray, /):
        """
        usage.matplotlib: 1
        usage.scipy: 10
        usage.skimage: 3
        usage.sklearn: 1
        """
        ...

    @overload
    def __gt__(self, _0: int, /):
        """
        usage.dask: 19
        usage.matplotlib: 7
        usage.scipy: 49
        usage.skimage: 12
        usage.sklearn: 37
        """
        ...

    @overload
    def __gt__(self, _0: numpy.int64, /):
        """
        usage.dask: 15
        usage.matplotlib: 16
        usage.scipy: 15
        usage.skimage: 5
        usage.sklearn: 13
        usage.xarray: 2
        """
        ...

    @overload
    def __gt__(self, _0: dask.array.core.Array, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __gt__(self, _0: float, /):
        """
        usage.dask: 9
        usage.scipy: 3
        usage.skimage: 1
        usage.sklearn: 4
        """
        ...

    @overload
    def __gt__(self, _0: numpy.float64, /):
        """
        usage.matplotlib: 2
        usage.scipy: 3
        usage.sklearn: 1
        usage.xarray: 1
        """
        ...

    @overload
    def __gt__(self, _0: numpy.uint8, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __gt__(
        self,
        _0: Union[
            pandas._libs.missing.NAType,
            numpy.int64,
            int,
            pandas.core.series.Series,
            float,
        ],
        /,
    ):
        """
        usage.pandas: 24
        """
        ...

    @overload
    def __gt__(self, _0: numpy.int32, /):
        """
        usage.scipy: 1
        """
        ...

    def __gt__(self, _0: object, /):
        """
        usage.dask: 43
        usage.matplotlib: 26
        usage.pandas: 24
        usage.scipy: 81
        usage.skimage: 22
        usage.sklearn: 56
        usage.xarray: 4
        """
        ...

    @overload
    def __iadd__(self, _0: numpy.int64, /):
        """
        usage.dask: 1
        usage.matplotlib: 1
        usage.scipy: 13
        usage.skimage: 1
        """
        ...

    @overload
    def __iadd__(self, _0: numpy.float64, /):
        """
        usage.scipy: 3
        usage.xarray: 1
        """
        ...

    @overload
    def __iadd__(self, _0: int, /):
        """
        usage.matplotlib: 2
        usage.scipy: 12
        usage.sklearn: 4
        usage.xarray: 2
        """
        ...

    @overload
    def __iadd__(self, _0: Union[int, numpy.int64], /):
        """
        usage.pandas: 3
        """
        ...

    @overload
    def __iadd__(self, _0: numpy.longlong, /):
        """
        usage.scipy: 1
        """
        ...

    def __iadd__(self, _0: Union[int, numpy.longlong, numpy.float64, numpy.int64], /):
        """
        usage.dask: 1
        usage.matplotlib: 3
        usage.pandas: 3
        usage.scipy: 29
        usage.skimage: 1
        usage.sklearn: 4
        usage.xarray: 3
        """
        ...

    def __ifloordiv__(self, _0: int, /):
        """
        usage.pandas: 1
        """
        ...

    def __imod__(self, _0: int, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __imul__(self, _0: numpy.int64, /):
        """
        usage.pandas: 1
        """
        ...

    @overload
    def __imul__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __imul__(self, _0: int, /):
        """
        usage.dask: 1
        usage.scipy: 1
        """
        ...

    def __imul__(self, _0: Union[int, numpy.int64, numpy.ndarray], /):
        """
        usage.dask: 1
        usage.pandas: 1
        usage.scipy: 2
        """
        ...

    @overload
    def __isub__(self, _0: numpy.int64, /):
        """
        usage.skimage: 1
        usage.sklearn: 1
        """
        ...

    @overload
    def __isub__(self, _0: int, /):
        """
        usage.dask: 1
        usage.matplotlib: 1
        usage.scipy: 1
        usage.skimage: 1
        usage.sklearn: 3
        """
        ...

    @overload
    def __isub__(self, _0: Union[numpy.int64, int], /):
        """
        usage.pandas: 6
        """
        ...

    def __isub__(self, _0: Union[int, numpy.int64], /):
        """
        usage.dask: 1
        usage.matplotlib: 1
        usage.pandas: 6
        usage.scipy: 1
        usage.skimage: 2
        usage.sklearn: 4
        """
        ...

    @overload
    def __itruediv__(self, _0: numpy.float64, /):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __itruediv__(self, _0: float, /):
        """
        usage.pandas: 1
        """
        ...

    def __itruediv__(self, _0: Union[float, numpy.float64], /):
        """
        usage.pandas: 1
        usage.skimage: 2
        """
        ...

    @overload
    def __le__(self, _0: numpy.ndarray, /):
        """
        usage.matplotlib: 2
        usage.scipy: 17
        usage.skimage: 1
        """
        ...

    @overload
    def __le__(self, _0: int, /):
        """
        usage.dask: 9
        usage.matplotlib: 3
        usage.scipy: 16
        usage.skimage: 3
        usage.sklearn: 17
        """
        ...

    @overload
    def __le__(self, _0: numpy.int64, /):
        """
        usage.dask: 9
        usage.matplotlib: 3
        usage.scipy: 8
        usage.skimage: 1
        usage.sklearn: 3
        """
        ...

    @overload
    def __le__(
        self,
        _0: Union[pandas._libs.missing.NAType, numpy.ndarray, int, float, numpy.int64],
        /,
    ):
        """
        usage.pandas: 27
        """
        ...

    @overload
    def __le__(self, _0: numpy.float64, /):
        """
        usage.scipy: 7
        """
        ...

    @overload
    def __le__(self, _0: float, /):
        """
        usage.scipy: 1
        usage.sklearn: 2
        """
        ...

    @overload
    def __le__(self, _0: pandas.core.series.Series, /):
        """
        usage.dask: 1
        """
        ...

    def __le__(self, _0: object, /):
        """
        usage.dask: 19
        usage.matplotlib: 8
        usage.pandas: 27
        usage.scipy: 49
        usage.skimage: 5
        usage.sklearn: 22
        """
        ...

    @overload
    def __lt__(self, _0: numpy.int64, /):
        """
        usage.dask: 15
        usage.matplotlib: 16
        usage.scipy: 15
        usage.skimage: 5
        usage.sklearn: 13
        usage.xarray: 2
        """
        ...

    @overload
    def __lt__(self, _0: numpy.ndarray, /):
        """
        usage.matplotlib: 1
        usage.scipy: 2
        usage.skimage: 9
        """
        ...

    @overload
    def __lt__(self, _0: int, /):
        """
        usage.dask: 15
        usage.matplotlib: 13
        usage.scipy: 55
        usage.skimage: 10
        usage.sklearn: 35
        usage.xarray: 3
        """
        ...

    @overload
    def __lt__(self, _0: numpy.float64, /):
        """
        usage.matplotlib: 4
        usage.scipy: 4
        usage.sklearn: 2
        usage.xarray: 1
        """
        ...

    @overload
    def __lt__(self, _0: numpy.uint8, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __lt__(
        self,
        _0: Union[
            pandas._libs.missing.NAType,
            numpy.int64,
            pandas.core.arrays.categorical.Categorical,
            int,
        ],
        /,
    ):
        """
        usage.pandas: 10
        """
        ...

    @overload
    def __lt__(self, _0: float, /):
        """
        usage.dask: 6
        usage.scipy: 4
        usage.sklearn: 3
        """
        ...

    @overload
    def __lt__(self, _0: numpy.int32, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __lt__(self, _0: pandas.core.series.Series, /):
        """
        usage.dask: 2
        """
        ...

    @overload
    def __lt__(self, _0: dask.dataframe.core.Series, /):
        """
        usage.dask: 1
        """
        ...

    def __lt__(self, _0: object, /):
        """
        usage.dask: 39
        usage.matplotlib: 34
        usage.pandas: 10
        usage.scipy: 82
        usage.skimage: 24
        usage.sklearn: 53
        usage.xarray: 7
        """
        ...

    @overload
    def __mod__(self, _0: int, /):
        """
        usage.dask: 1
        usage.matplotlib: 3
        usage.scipy: 11
        usage.skimage: 1
        usage.sklearn: 2
        """
        ...

    @overload
    def __mod__(
        self,
        _0: Union[
            pandas._libs.missing.NAType,
            pandas.core.arrays.integer.IntegerArray,
            int,
            numpy.ndarray,
        ],
        /,
    ):
        """
        usage.pandas: 10
        """
        ...

    @overload
    def __mod__(self, _0: numpy.int64, /):
        """
        usage.dask: 1
        """
        ...

    def __mod__(
        self,
        _0: Union[
            int,
            numpy.ndarray,
            pandas.core.arrays.integer.IntegerArray,
            pandas._libs.missing.NAType,
            numpy.int64,
        ],
        /,
    ):
        """
        usage.dask: 2
        usage.matplotlib: 3
        usage.pandas: 10
        usage.scipy: 11
        usage.skimage: 1
        usage.sklearn: 2
        """
        ...

    @overload
    def __mul__(self, _0: numpy.ndarray, /):
        """
        usage.dask: 2
        usage.scipy: 19
        usage.skimage: 2
        usage.sklearn: 2
        """
        ...

    @overload
    def __mul__(self, _0: numpy.float64, /):
        """
        usage.dask: 1
        usage.scipy: 22
        usage.skimage: 1
        usage.sklearn: 2
        """
        ...

    @overload
    def __mul__(self, _0: numpy.int64, /):
        """
        usage.dask: 1
        usage.scipy: 36
        usage.skimage: 1
        usage.sklearn: 5
        """
        ...

    @overload
    def __mul__(self, _0: int, /):
        """
        usage.dask: 5
        usage.matplotlib: 6
        usage.scipy: 14
        usage.sklearn: 2
        usage.xarray: 1
        """
        ...

    @overload
    def __mul__(self, _0: object, /):
        """
        usage.pandas: 59
        """
        ...

    @overload
    def __mul__(self, _0: float, /):
        """
        usage.matplotlib: 3
        usage.scipy: 10
        usage.sklearn: 8
        """
        ...

    @overload
    def __mul__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __mul__(self, _0: numpy.ma.core.MaskedConstant, /):
        """
        usage.scipy: 1
        """
        ...

    def __mul__(self, _0: object, /):
        """
        usage.dask: 9
        usage.matplotlib: 9
        usage.pandas: 59
        usage.scipy: 103
        usage.skimage: 4
        usage.sklearn: 19
        usage.xarray: 1
        """
        ...

    def __neg__(self, /):
        """
        usage.dask: 5
        usage.matplotlib: 1
        usage.pandas: 3
        usage.scipy: 20
        usage.skimage: 6
        usage.sklearn: 8
        usage.xarray: 1
        """
        ...

    @overload
    def __or__(self, _0: numpy.int64, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __or__(self, _0: bool, /):
        """
        usage.dask: 1
        """
        ...

    def __or__(self, _0: Union[bool, numpy.int64], /):
        """
        usage.dask: 2
        """
        ...

    @overload
    def __pow__(self, _0: int, /):
        """
        usage.dask: 2
        usage.scipy: 13
        usage.skimage: 2
        """
        ...

    @overload
    def __pow__(
        self,
        _0: Union[
            pandas._libs.missing.NAType,
            pandas.core.arrays.integer.IntegerArray,
            pandas.core.series.Series,
            numpy.float64,
            numpy.ndarray,
        ],
        /,
    ):
        """
        usage.pandas: 10
        """
        ...

    @overload
    def __pow__(self, _0: numpy.int64, /):
        """
        usage.dask: 1
        """
        ...

    def __pow__(self, _0: object, /):
        """
        usage.dask: 3
        usage.pandas: 10
        usage.scipy: 13
        usage.skimage: 2
        """
        ...

    @overload
    def __radd__(self, _0: numpy.ndarray, /):
        """
        usage.dask: 2
        usage.matplotlib: 2
        usage.scipy: 4
        usage.skimage: 2
        usage.sklearn: 1
        """
        ...

    @overload
    def __radd__(self, _0: int, /):
        """
        usage.dask: 6
        usage.matplotlib: 8
        usage.scipy: 52
        usage.skimage: 6
        usage.sklearn: 8
        usage.xarray: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float64, /):
        """
        usage.matplotlib: 1
        usage.scipy: 9
        usage.skimage: 3
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int64, /):
        """
        usage.dask: 12
        usage.matplotlib: 10
        usage.scipy: 63
        usage.skimage: 6
        usage.sklearn: 11
        """
        ...

    @overload
    def __radd__(self, _0: object, /):
        """
        usage.pandas: 63
        """
        ...

    @overload
    def __radd__(self, _0: float, /):
        """
        usage.scipy: 2
        usage.sklearn: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int32, /):
        """
        usage.dask: 2
        usage.scipy: 1
        usage.sklearn: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint32, /):
        """
        usage.dask: 2
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.longlong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.ulonglong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex256, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: pandas.core.series.Series, /):
        """
        usage.dask: 2
        """
        ...

    @overload
    def __radd__(self, _0: numpy.memmap, /):
        """
        usage.sklearn: 1
        """
        ...

    def __radd__(self, _0: object, /):
        """
        usage.dask: 26
        usage.matplotlib: 21
        usage.pandas: 63
        usage.scipy: 145
        usage.skimage: 17
        usage.sklearn: 23
        usage.xarray: 1
        """
        ...

    @overload
    def __rand__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __rand__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __rand__(self, _0: numpy.int64, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __rand__(self, _0: bool, /):
        """
        usage.dask: 1
        """
        ...

    def __rand__(self, _0: Union[numpy.int64, bool, numpy.ndarray, numpy.bool_], /):
        """
        usage.dask: 2
        usage.scipy: 8
        """
        ...

    @overload
    def __rfloordiv__(self, _0: int, /):
        """
        usage.dask: 1
        usage.matplotlib: 1
        usage.scipy: 1
        usage.skimage: 1
        usage.sklearn: 2
        """
        ...

    @overload
    def __rfloordiv__(
        self, _0: Union[pandas.core.indexes.numeric.Int64Index, numpy.ndarray], /
    ):
        """
        usage.pandas: 2
        """
        ...

    @overload
    def __rfloordiv__(self, _0: numpy.int64, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __rfloordiv__(self, _0: float, /):
        """
        usage.sklearn: 1
        """
        ...

    def __rfloordiv__(
        self,
        _0: Union[
            int,
            float,
            numpy.ndarray,
            pandas.core.indexes.numeric.Int64Index,
            numpy.int64,
        ],
        /,
    ):
        """
        usage.dask: 2
        usage.matplotlib: 1
        usage.pandas: 2
        usage.scipy: 1
        usage.skimage: 1
        usage.sklearn: 3
        """
        ...

    @overload
    def __rmod__(self, _0: numpy.ndarray, /):
        """
        usage.pandas: 52
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["Size %d failed"], /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["%i\n"], /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __rmod__(self, _0: str, /):
        """
        usage.scipy: 6
        usage.sklearn: 6
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["%-12g"], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["%d B"], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __rmod__(self, _0: numpy.int64, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __rmod__(self, _0: int, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["x%d"], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["%d"], /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["not %s"], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["%s"], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __rmod__(self, _0: Literal['%d [label="(...)"'], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["] ;\n"], /):
        """
        usage.sklearn: 1
        """
        ...

    def __rmod__(self, _0: Union[str, numpy.ndarray, int, numpy.int64], /):
        """
        usage.dask: 3
        usage.matplotlib: 1
        usage.pandas: 52
        usage.scipy: 14
        usage.sklearn: 13
        """
        ...

    @overload
    def __rmul__(self, _0: float, /):
        """
        usage.matplotlib: 1
        usage.scipy: 51
        usage.skimage: 2
        usage.sklearn: 6
        """
        ...

    @overload
    def __rmul__(self, _0: int, /):
        """
        usage.dask: 3
        usage.matplotlib: 3
        usage.scipy: 49
        usage.skimage: 3
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.ndarray, /):
        """
        usage.matplotlib: 3
        usage.scipy: 14
        usage.skimage: 2
        usage.sklearn: 1
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.int64, /):
        """
        usage.dask: 1
        usage.scipy: 36
        usage.skimage: 1
        usage.sklearn: 5
        """
        ...

    @overload
    def __rmul__(self, _0: Tuple[int], /):
        """
        usage.scipy: 2
        usage.xarray: 1
        """
        ...

    @overload
    def __rmul__(self, _0: Tuple[slice[None, None, None]], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __rmul__(self, _0: object, /):
        """
        usage.pandas: 59
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.float64, /):
        """
        usage.matplotlib: 1
        usage.scipy: 33
        usage.sklearn: 6
        """
        ...

    @overload
    def __rmul__(self, _0: complex, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __rmul__(self, _0: scipy.sparse.linalg.interface._CustomLinearOperator, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.int8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.int32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.longlong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.int16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rmul__(self, _0: List[int], /):
        """
        usage.sklearn: 1
        """
        ...

    def __rmul__(self, _0: object, /):
        """
        usage.dask: 4
        usage.matplotlib: 8
        usage.pandas: 59
        usage.scipy: 193
        usage.skimage: 8
        usage.sklearn: 19
        usage.xarray: 2
        """
        ...

    @overload
    def __ror__(self, _0: numpy.int64, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __ror__(self, _0: bool, /):
        """
        usage.dask: 1
        """
        ...

    def __ror__(self, _0: Union[bool, numpy.int64], /):
        """
        usage.dask: 2
        """
        ...

    @overload
    def __rpow__(self, _0: pandas._libs.missing.NAType, /):
        """
        usage.pandas: 1
        """
        ...

    @overload
    def __rpow__(self, _0: int, /):
        """
        usage.dask: 1
        usage.scipy: 8
        """
        ...

    @overload
    def __rpow__(self, _0: float, /):
        """
        usage.matplotlib: 1
        usage.scipy: 3
        """
        ...

    @overload
    def __rpow__(self, _0: numpy.int64, /):
        """
        usage.dask: 1
        """
        ...

    def __rpow__(
        self, _0: Union[numpy.int64, int, pandas._libs.missing.NAType, float], /
    ):
        """
        usage.dask: 2
        usage.matplotlib: 1
        usage.pandas: 1
        usage.scipy: 11
        """
        ...

    @overload
    def __rsub__(self, _0: numpy.ndarray, /):
        """
        usage.matplotlib: 1
        usage.scipy: 6
        usage.skimage: 9
        usage.sklearn: 1
        usage.xarray: 3
        """
        ...

    @overload
    def __rsub__(self, _0: int, /):
        """
        usage.dask: 2
        usage.matplotlib: 2
        usage.scipy: 35
        usage.skimage: 10
        usage.sklearn: 8
        usage.xarray: 3
        """
        ...

    @overload
    def __rsub__(self, _0: numpy.int64, /):
        """
        usage.dask: 1
        usage.matplotlib: 8
        usage.scipy: 45
        usage.skimage: 9
        usage.sklearn: 11
        usage.xarray: 4
        """
        ...

    @overload
    def __rsub__(self, _0: object, /):
        """
        usage.pandas: 32
        """
        ...

    @overload
    def __rsub__(self, _0: float, /):
        """
        usage.matplotlib: 1
        usage.scipy: 2
        usage.sklearn: 2
        """
        ...

    @overload
    def __rsub__(self, _0: numpy.float64, /):
        """
        usage.matplotlib: 3
        usage.scipy: 5
        usage.sklearn: 3
        """
        ...

    def __rsub__(self, _0: object, /):
        """
        usage.dask: 3
        usage.matplotlib: 15
        usage.pandas: 32
        usage.scipy: 93
        usage.skimage: 28
        usage.sklearn: 25
        usage.xarray: 10
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.ndarray, /):
        """
        usage.dask: 1
        usage.matplotlib: 2
        usage.scipy: 23
        usage.skimage: 6
        usage.sklearn: 15
        usage.xarray: 1
        """
        ...

    @overload
    def __rtruediv__(self, _0: int, /):
        """
        usage.dask: 2
        usage.skimage: 2
        usage.sklearn: 2
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.int64, /):
        """
        usage.dask: 2
        usage.scipy: 3
        usage.skimage: 2
        usage.sklearn: 7
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.float64, /):
        """
        usage.dask: 2
        usage.scipy: 9
        usage.skimage: 1
        usage.sklearn: 5
        usage.xarray: 1
        """
        ...

    @overload
    def __rtruediv__(self, _0: float, /):
        """
        usage.dask: 2
        usage.matplotlib: 5
        usage.scipy: 8
        usage.sklearn: 6
        usage.xarray: 1
        """
        ...

    @overload
    def __rtruediv__(
        self,
        _0: Union[
            pandas._libs.tslibs.nattype.NaTType,
            numpy.ndarray,
            pandas._libs.tslibs.timedeltas.Timedelta,
        ],
        /,
    ):
        """
        usage.pandas: 5
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.poly1d, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.ma.core.MaskedConstant, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.ma.core.MaskedArray, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rtruediv__(self, _0: decimal.Decimal, /):
        """
        usage.dask: 1
        """
        ...

    def __rtruediv__(self, _0: object, /):
        """
        usage.dask: 10
        usage.matplotlib: 7
        usage.pandas: 5
        usage.scipy: 47
        usage.skimage: 11
        usage.sklearn: 35
        usage.xarray: 3
        """
        ...

    @overload
    def __rxor__(self, _0: numpy.int64, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __rxor__(self, _0: bool, /):
        """
        usage.dask: 1
        """
        ...

    def __rxor__(self, _0: Union[bool, numpy.int64], /):
        """
        usage.dask: 2
        """
        ...

    @overload
    def __sub__(self, _0: int, /):
        """
        usage.dask: 6
        usage.matplotlib: 12
        usage.scipy: 82
        usage.skimage: 12
        usage.sklearn: 32
        usage.xarray: 2
        """
        ...

    @overload
    def __sub__(self, _0: numpy.int64, /):
        """
        usage.dask: 1
        usage.matplotlib: 8
        usage.scipy: 45
        usage.skimage: 9
        usage.sklearn: 11
        usage.xarray: 4
        """
        ...

    @overload
    def __sub__(self, _0: float, /):
        """
        usage.matplotlib: 5
        usage.scipy: 15
        usage.skimage: 1
        usage.xarray: 2
        """
        ...

    @overload
    def __sub__(self, _0: numpy.float64, /):
        """
        usage.matplotlib: 5
        usage.scipy: 2
        usage.sklearn: 1
        usage.xarray: 2
        """
        ...

    @overload
    def __sub__(self, _0: object, /):
        """
        usage.pandas: 26
        """
        ...

    @overload
    def __sub__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __sub__(self, _0: numpy.ndarray, /):
        """
        usage.matplotlib: 2
        usage.scipy: 5
        usage.sklearn: 2
        """
        ...

    @overload
    def __sub__(self, _0: List[int], /):
        """
        usage.matplotlib: 1
        """
        ...

    def __sub__(self, _0: object, /):
        """
        usage.dask: 7
        usage.matplotlib: 33
        usage.pandas: 26
        usage.scipy: 150
        usage.skimage: 22
        usage.sklearn: 46
        usage.xarray: 10
        """
        ...

    @overload
    def __truediv__(self, _0: int, /):
        """
        usage.dask: 3
        usage.matplotlib: 5
        usage.scipy: 10
        usage.skimage: 7
        usage.sklearn: 10
        """
        ...

    @overload
    def __truediv__(self, _0: numpy.int64, /):
        """
        usage.dask: 2
        usage.scipy: 3
        usage.skimage: 2
        usage.sklearn: 7
        """
        ...

    @overload
    def __truediv__(self, _0: float, /):
        """
        usage.dask: 1
        usage.matplotlib: 3
        usage.scipy: 18
        usage.skimage: 4
        usage.sklearn: 5
        usage.xarray: 2
        """
        ...

    @overload
    def __truediv__(self, _0: numpy.float64, /):
        """
        usage.matplotlib: 1
        usage.scipy: 10
        usage.skimage: 1
        usage.sklearn: 3
        """
        ...

    @overload
    def __truediv__(self, _0: object, /):
        """
        usage.pandas: 22
        """
        ...

    @overload
    def __truediv__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 9
        """
        ...

    def __truediv__(self, _0: object, /):
        """
        usage.dask: 6
        usage.matplotlib: 9
        usage.pandas: 22
        usage.scipy: 50
        usage.skimage: 14
        usage.sklearn: 25
        usage.xarray: 2
        """
        ...

    @overload
    def __xor__(self, _0: numpy.int64, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __xor__(self, _0: bool, /):
        """
        usage.dask: 1
        """
        ...

    def __xor__(self, _0: Union[bool, numpy.int64], /):
        """
        usage.dask: 2
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.int64], /):
        """
        usage.skimage: 3
        """
        ...

    @overload
    def astype(self, _0: numpy.dtype, /):
        """
        usage.dask: 1
        usage.pandas: 3
        """
        ...

    @overload
    def astype(self, _0: Literal["d"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def astype(self, _0: Type[float], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.float64], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.float32], /):
        """
        usage.matplotlib: 2
        """
        ...

    @overload
    def astype(self, _0: Literal["int64"], /):
        """
        usage.dask: 1
        """
        ...

    def astype(
        self,
        _0: Union[
            numpy.dtype, Literal["int64", "d"], Type[float], Type[numpy.int64], type
        ],
        /,
    ):
        """
        usage.dask: 2
        usage.matplotlib: 3
        usage.pandas: 3
        usage.scipy: 3
        usage.skimage: 3
        """
        ...

    def item(self, /):
        """
        usage.pandas: 1
        usage.sklearn: 2
        """
        ...

    def ravel(self, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def reshape(self, _0: List[int], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def reshape(self, _0: Tuple[int], /):
        """
        usage.dask: 1
        """
        ...

    def reshape(self, _0: Union[Tuple[int], List[int]], /):
        """
        usage.dask: 1
        usage.scipy: 2
        """
        ...

    def tolist(self, /):
        """
        usage.xarray: 1
        """
        ...

    def view(self, _0: Literal["M8[ns]", "M8[us]"], /):
        """
        usage.pandas: 2
        """
        ...


class int8:

    # usage.pandas: 3
    __name__: ClassVar[object]

    @overload
    @classmethod
    def __ne__(cls, _0: Union[numpy.int8, Type[numpy.int64]], /):
        """
        usage.pandas: 9
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: numpy.int8, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: numpy.dtype, /):
        """
        usage.dask: 2
        """
        ...

    @classmethod
    def __ne__(cls, _0: Union[numpy.dtype, numpy.int8, Type[numpy.int64]], /):
        """
        usage.dask: 2
        usage.pandas: 9
        usage.scipy: 2
        """
        ...

    # usage.pandas: 3
    # usage.scipy: 2
    dtype: object

    # usage.dask: 2
    ndim: object

    # usage.scipy: 1
    size: object

    @overload
    def __add__(self, _0: object, /):
        """
        usage.pandas: 13
        """
        ...

    @overload
    def __add__(self, _0: numpy.int8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.longlong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.ulonglong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex256, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: int, /):
        """
        usage.matplotlib: 6
        """
        ...

    def __add__(self, _0: object, /):
        """
        usage.matplotlib: 6
        usage.pandas: 13
        usage.scipy: 17
        """
        ...

    def __bool__(self, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __eq__(self, _0: int, /):
        """
        usage.scipy: 1
        usage.skimage: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.int64, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 2
        usage.xarray: 1
        """
        ...

    @overload
    def __eq__(self, _0: object, /):
        """
        usage.pandas: 75
        """
        ...

    @overload
    def __eq__(self, _0: numpy.int8, /):
        """
        usage.matplotlib: 8
        """
        ...

    @overload
    def __eq__(self, _0: importlib._bootstrap.MonotonicConstraint, /):
        """
        usage.sklearn: 2
        """
        ...

    def __eq__(self, _0: object, /):
        """
        usage.matplotlib: 8
        usage.pandas: 75
        usage.scipy: 3
        usage.skimage: 2
        usage.sklearn: 2
        usage.xarray: 1
        """
        ...

    def __floordiv__(
        self, _0: Union[numpy.ndarray, pandas.core.arrays.integer.IntegerArray], /
    ):
        """
        usage.pandas: 2
        """
        ...

    @overload
    def __ge__(self, _0: int, /):
        """
        usage.pandas: 2
        """
        ...

    @overload
    def __ge__(self, _0: numpy.int8, /):
        """
        usage.matplotlib: 4
        """
        ...

    def __ge__(self, _0: Union[numpy.int8, int], /):
        """
        usage.matplotlib: 4
        usage.pandas: 2
        """
        ...

    def __getitem__(self, _0: Tuple[ellipsis, None], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __gt__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __gt__(self, _0: int, /):
        """
        usage.scipy: 1
        """
        ...

    def __gt__(self, _0: Union[int, numpy.ndarray], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __le__(self, _0: int, /):
        """
        usage.pandas: 2
        """
        ...

    @overload
    def __le__(self, _0: numpy.int8, /):
        """
        usage.matplotlib: 4
        """
        ...

    def __le__(self, _0: Union[numpy.int8, int], /):
        """
        usage.matplotlib: 4
        usage.pandas: 2
        """
        ...

    @overload
    def __lt__(self, _0: int, /):
        """
        usage.scipy: 1
        usage.skimage: 1
        """
        ...

    @overload
    def __lt__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 1
        """
        ...

    def __lt__(self, _0: Union[numpy.ndarray, int], /):
        """
        usage.scipy: 2
        usage.skimage: 1
        """
        ...

    def __mod__(
        self, _0: Union[numpy.ndarray, pandas.core.arrays.integer.IntegerArray], /
    ):
        """
        usage.pandas: 2
        """
        ...

    @overload
    def __mul__(
        self,
        _0: Union[
            numpy.ndarray,
            pandas.core.arrays.timedeltas.TimedeltaArray,
            pandas.core.series.Series,
            pandas.core.arrays.integer.IntegerArray,
        ],
        /,
    ):
        """
        usage.pandas: 4
        """
        ...

    @overload
    def __mul__(self, _0: int, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __mul__(self, _0: numpy.int64, /):
        """
        usage.scipy: 1
        """
        ...

    def __mul__(self, _0: object, /):
        """
        usage.pandas: 4
        usage.scipy: 4
        """
        ...

    def __pow__(
        self, _0: Union[numpy.ndarray, pandas.core.arrays.integer.IntegerArray], /
    ):
        """
        usage.pandas: 2
        """
        ...

    @overload
    def __radd__(self, _0: Union[pandas._libs.missing.NAType, numpy.int8], /):
        """
        usage.pandas: 6
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int64, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.longlong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.ulonglong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex256, /):
        """
        usage.scipy: 1
        """
        ...

    def __radd__(self, _0: object, /):
        """
        usage.pandas: 6
        usage.scipy: 18
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.ndarray, /):
        """
        usage.pandas: 1
        """
        ...

    @overload
    def __rmul__(self, _0: float, /):
        """
        usage.scipy: 1
        """
        ...

    def __rmul__(self, _0: Union[float, numpy.ndarray], /):
        """
        usage.pandas: 1
        usage.scipy: 1
        """
        ...

    @overload
    def __rsub__(self, _0: pandas.core.arrays.timedeltas.TimedeltaArray, /):
        """
        usage.pandas: 1
        """
        ...

    @overload
    def __rsub__(self, _0: numpy.int8, /):
        """
        usage.matplotlib: 4
        """
        ...

    def __rsub__(
        self, _0: Union[numpy.int8, pandas.core.arrays.timedeltas.TimedeltaArray], /
    ):
        """
        usage.matplotlib: 4
        usage.pandas: 1
        """
        ...

    @overload
    def __rtruediv__(
        self,
        _0: Union[
            numpy.ndarray,
            pandas._libs.tslibs.timedeltas.Timedelta,
            pandas._libs.tslibs.nattype.NaTType,
        ],
        /,
    ):
        """
        usage.pandas: 5
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 2
        """
        ...

    def __rtruediv__(
        self,
        _0: Union[
            numpy.ndarray,
            pandas._libs.tslibs.nattype.NaTType,
            pandas._libs.tslibs.timedeltas.Timedelta,
        ],
        /,
    ):
        """
        usage.pandas: 5
        usage.scipy: 2
        """
        ...

    @overload
    def __sub__(
        self,
        _0: Union[
            int,
            pandas.core.arrays.integer.IntegerArray,
            pandas.core.series.Series,
            pandas.core.arrays.timedeltas.TimedeltaArray,
            numpy.ndarray,
        ],
        /,
    ):
        """
        usage.pandas: 5
        """
        ...

    @overload
    def __sub__(self, _0: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __sub__(self, _0: numpy.int8, /):
        """
        usage.matplotlib: 4
        """
        ...

    def __sub__(self, _0: object, /):
        """
        usage.matplotlib: 4
        usage.pandas: 5
        usage.scipy: 1
        """
        ...

    def __truediv__(
        self,
        _0: Union[
            numpy.ndarray,
            pandas.core.arrays.timedeltas.TimedeltaArray,
            pandas.core.series.Series,
            pandas.core.arrays.integer.IntegerArray,
        ],
        /,
    ):
        """
        usage.pandas: 4
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.int64], /):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def astype(self, _0: numpy.dtype, /):
        """
        usage.pandas: 1
        """
        ...

    def astype(self, _0: Union[numpy.dtype, Type[numpy.int64]], /):
        """
        usage.pandas: 1
        usage.skimage: 2
        """
        ...

    def item(self, /):
        """
        usage.matplotlib: 1
        """
        ...


class longlong:

    # usage.scipy: 4
    dtype: object

    # usage.dask: 1
    ndim: object

    # usage.scipy: 1
    size: object

    @overload
    def __add__(self, _0: int, /):
        """
        usage.pandas: 1
        usage.scipy: 5
        usage.sklearn: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.longlong, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __add__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.ulonglong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex256, /):
        """
        usage.scipy: 1
        """
        ...

    def __add__(self, _0: object, /):
        """
        usage.pandas: 1
        usage.scipy: 23
        usage.sklearn: 1
        """
        ...

    def __bool__(self, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __eq__(self, _0: int, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.int64, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __eq__(self, _0: Union[numpy.int64, int], /):
        """
        usage.pandas: 8
        """
        ...

    def __eq__(self, _0: Union[int, numpy.int64], /):
        """
        usage.pandas: 8
        usage.skimage: 2
        """
        ...

    @overload
    def __gt__(self, _0: numpy.longlong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __gt__(self, _0: int, /):
        """
        usage.scipy: 1
        usage.sklearn: 2
        """
        ...

    def __gt__(self, _0: Union[int, numpy.longlong], /):
        """
        usage.scipy: 2
        usage.sklearn: 2
        """
        ...

    @overload
    def __lt__(self, _0: int, /):
        """
        usage.scipy: 1
        usage.skimage: 1
        """
        ...

    @overload
    def __lt__(self, _0: numpy.longlong, /):
        """
        usage.scipy: 1
        """
        ...

    def __lt__(self, _0: Union[numpy.longlong, int], /):
        """
        usage.scipy: 2
        usage.skimage: 1
        """
        ...

    @overload
    def __mul__(self, _0: int, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __mul__(self, _0: numpy.int64, /):
        """
        usage.scipy: 1
        """
        ...

    def __mul__(self, _0: Union[numpy.int64, int], /):
        """
        usage.scipy: 4
        """
        ...

    def __ne__(self, _0: numpy.longlong, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __radd__(self, _0: numpy.longlong, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.ulonglong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex256, /):
        """
        usage.scipy: 1
        """
        ...

    def __radd__(self, _0: object, /):
        """
        usage.scipy: 18
        """
        ...

    def __rmul__(self, _0: float, /):
        """
        usage.pandas: 1
        usage.scipy: 1
        """
        ...

    def __rsub__(self, _0: numpy.longlong, /):
        """
        usage.scipy: 1
        """
        ...

    def __sub__(self, _0: numpy.longlong, /):
        """
        usage.scipy: 1
        """
        ...


class matrix:

    # usage.dask: 2
    __module__: ClassVar[object]

    # usage.dask: 1
    __name__: ClassVar[object]

    # usage.scipy: 43
    # usage.skimage: 2
    # usage.sklearn: 2
    A: object

    # usage.scipy: 41
    T: object

    # usage.dask: 1
    # usage.scipy: 8
    __class__: object

    # usage.scipy: 1
    base: object

    # usage.dask: 3
    # usage.scipy: 158
    dtype: object

    # usage.scipy: 9
    flags: object

    # usage.scipy: 1
    flat: object

    # usage.scipy: 3
    imag: numpy.matrix

    # usage.dask: 4
    # usage.scipy: 53
    ndim: object

    # usage.scipy: 4
    real: object

    # usage.dask: 4
    # usage.scipy: 62
    # usage.sklearn: 2
    shape: object

    # usage.scipy: 3
    size: object

    @overload
    def __add__(self, _0: numpy.matrix, /):
        """
        usage.scipy: 713
        """
        ...

    @overload
    def __add__(self, _0: scipy.sparse.csr.csr_matrix, /):
        """
        usage.scipy: 23
        """
        ...

    @overload
    def __add__(self, _0: complex, /):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def __add__(self, _0: scipy.sparse.csc.csc_matrix, /):
        """
        usage.scipy: 23
        """
        ...

    @overload
    def __add__(self, _0: scipy.sparse.dok.dok_matrix, /):
        """
        usage.scipy: 21
        """
        ...

    @overload
    def __add__(self, _0: scipy.sparse.lil.lil_matrix, /):
        """
        usage.scipy: 21
        """
        ...

    @overload
    def __add__(self, _0: scipy.sparse.coo.coo_matrix, /):
        """
        usage.scipy: 21
        """
        ...

    @overload
    def __add__(self, _0: scipy.sparse.dia.dia_matrix, /):
        """
        usage.scipy: 21
        """
        ...

    @overload
    def __add__(self, _0: scipy.sparse.bsr.bsr_matrix, /):
        """
        usage.scipy: 21
        """
        ...

    @overload
    def __add__(self, _0: int, /):
        """
        usage.sklearn: 1
        """
        ...

    def __add__(self, _0: object, /):
        """
        usage.scipy: 869
        usage.sklearn: 1
        """
        ...

    @overload
    def __eq__(self, _0: int, /):
        """
        usage.scipy: 35
        usage.sklearn: 2
        """
        ...

    @overload
    def __eq__(self, _0: numpy.matrix, /):
        """
        usage.scipy: 184
        """
        ...

    @overload
    def __eq__(self, _0: scipy.sparse.csr.csr_matrix, /):
        """
        usage.scipy: 30
        """
        ...

    @overload
    def __eq__(self, _0: float, /):
        """
        usage.scipy: 15
        usage.sklearn: 1
        """
        ...

    @overload
    def __eq__(self, _0: scipy.sparse.csc.csc_matrix, /):
        """
        usage.scipy: 30
        """
        ...

    @overload
    def __eq__(self, _0: scipy.sparse.bsr.bsr_matrix, /):
        """
        usage.scipy: 30
        """
        ...

    @overload
    def __eq__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 1
        """
        ...

    def __eq__(self, _0: object, /):
        """
        usage.scipy: 325
        usage.sklearn: 3
        """
        ...

    @overload
    def __ge__(self, _0: numpy.matrix, /):
        """
        usage.scipy: 360
        """
        ...

    @overload
    def __ge__(self, _0: scipy.sparse.csr.csr_matrix, /):
        """
        usage.scipy: 60
        """
        ...

    @overload
    def __ge__(self, _0: int, /):
        """
        usage.scipy: 121
        """
        ...

    @overload
    def __ge__(self, _0: scipy.sparse.csc.csc_matrix, /):
        """
        usage.scipy: 60
        """
        ...

    @overload
    def __ge__(self, _0: scipy.sparse.bsr.bsr_matrix, /):
        """
        usage.scipy: 60
        """
        ...

    def __ge__(
        self,
        _0: Union[
            scipy.sparse.bsr.bsr_matrix,
            scipy.sparse.csc.csc_matrix,
            scipy.sparse.csr.csr_matrix,
            numpy.matrix,
            int,
        ],
        /,
    ):
        """
        usage.scipy: 661
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[numpy.ndarray, numpy.ndarray], /):
        """
        usage.scipy: 13
        """
        ...

    @overload
    def __getitem__(self, _0: slice[None, None, None], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 10
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, int], /):
        """
        usage.scipy: 17
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, slice[None, None, None]], /):
        """
        usage.scipy: 9
        usage.sklearn: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, None, None], int], /):
        """
        usage.scipy: 23
        """
        ...

    @overload
    def __getitem__(self, _0: int, /):
        """
        usage.dask: 1
        usage.scipy: 15
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, int, None], slice[None, None, None]], /
    ):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, slice[int, int, int]], /):
        """
        usage.scipy: 6
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, slice[int, None, int]], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, int, int], int], /):
        """
        usage.scipy: 7
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, None, int], int], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, int, int], slice[int, int, int]], /):
        """
        usage.dask: 1
        usage.scipy: 4
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, None, int], slice[None, int, None]], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, int, None], slice[int, None, int]], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, None, None], slice[int, None, int]], /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, None, int], slice[int, None, int]], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, int, None], slice[None, int, None]], /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, int, int], slice[None, int, None]], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(self, _0: slice[int, int, int], /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, int, int], slice[None, None, None]], /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, None, None], slice[int, int, int]], /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __getitem__(self, _0: slice[None, int, None], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: slice[int, None, int], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: slice[int, None, int], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: slice[int, int, int], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: slice[None, int, None], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: numpy.int8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, int, None], slice[int, int, int]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, int, None], slice[int, None, int]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, int, None], slice[int, int, int]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, int, None], slice[None, int, None]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, int, None], int], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, int, None], numpy.int8], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, int, int], slice[int, None, int]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, int, int], slice[int, None, int]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, int, int], slice[int, int, int]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, int, int], slice[None, int, None]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, int, int], numpy.int8], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, None, int], slice[int, int, int]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, None, int], slice[int, None, int]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, None, int], slice[int, int, int]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, None, int], slice[None, int, None]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, None, int], slice[None, None, None]], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, None, int], numpy.int8], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, None, int], slice[None, int, None]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, None, int], slice[int, int, int]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, None, int], slice[int, None, int]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, None, int], slice[int, None, int]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, None, int], slice[int, int, int]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, None, int], slice[None, int, None]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, None, int], int], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, None, int], slice[None, None, None]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, None, int], numpy.int8], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, int, int], slice[None, int, None]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, int, int], slice[int, int, int]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, int, int], slice[int, None, int]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, int, int], slice[int, None, int]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, int, int], slice[int, int, int]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, int, int], slice[None, int, None]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, int, int], int], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, int, int], slice[None, None, None]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, int, int], numpy.int8], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, int, None], slice[None, int, None]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, int, None], slice[int, int, int]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, int, None], slice[int, None, int]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, int, None], slice[int, None, int]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, int, None], slice[int, int, int]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, int, None], slice[None, int, None]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, int, None], int], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, int, None], slice[None, None, None]], /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, int, None], numpy.int8], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, slice[None, int, None]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, slice[int, None, int]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, slice[int, int, int]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, slice[None, int, None]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, numpy.int8], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, None, None], slice[None, int, None]], /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, None, None], slice[int, None, int]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, None, None], slice[int, int, int]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, None, None], slice[None, int, None]], /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, None, None], slice[None, None, None]], /
    ):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, None, None], numpy.int8], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[numpy.int8, slice[None, int, None]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[numpy.int8, slice[int, int, int]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[numpy.int8, slice[int, None, int]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[numpy.int8, slice[int, None, int]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[numpy.int8, slice[int, int, int]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[numpy.int8, slice[None, int, None]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[numpy.int8, int], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[numpy.int8, slice[None, None, None]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[numpy.int8, numpy.int8], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: ellipsis, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, ellipsis], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, int], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, None, int], ellipsis], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, slice[int, None, int]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, None, int], int, ellipsis], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, ellipsis, slice[int, None, int]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, int, ellipsis], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, ellipsis, int], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: List[int], /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, List[int]], /):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, None, None], List[int]], /):
        """
        usage.scipy: 7
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, int, int], List[int]], /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[List[int], int], /):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[List[int], slice[None, None, None]], /):
        """
        usage.scipy: 7
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[List[int], slice[int, int, int]], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[List[int], List[int]], /):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[List[List[int]], List[int]], /):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[List[list], List[list]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, None, None], numpy.ndarray], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: numpy.matrix, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[numpy.ndarray, slice[int, int, int]], /):
        """
        usage.scipy: 1
        """
        ...

    def __getitem__(self, _0: object, /):
        """
        usage.dask: 2
        usage.scipy: 266
        usage.sklearn: 2
        """
        ...

    @overload
    def __gt__(self, _0: int, /):
        """
        usage.scipy: 153
        """
        ...

    @overload
    def __gt__(self, _0: numpy.matrix, /):
        """
        usage.scipy: 360
        """
        ...

    @overload
    def __gt__(self, _0: scipy.sparse.csr.csr_matrix, /):
        """
        usage.scipy: 60
        """
        ...

    @overload
    def __gt__(self, _0: float, /):
        """
        usage.scipy: 16
        """
        ...

    @overload
    def __gt__(self, _0: scipy.sparse.csc.csc_matrix, /):
        """
        usage.scipy: 60
        """
        ...

    @overload
    def __gt__(self, _0: scipy.sparse.bsr.bsr_matrix, /):
        """
        usage.scipy: 60
        """
        ...

    def __gt__(self, _0: object, /):
        """
        usage.scipy: 709
        """
        ...

    @overload
    def __imul__(self, _0: int, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __imul__(self, _0: float, /):
        """
        usage.scipy: 2
        """
        ...

    def __imul__(self, _0: Union[float, int], /):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def __itruediv__(self, _0: int, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __itruediv__(self, _0: float, /):
        """
        usage.scipy: 2
        """
        ...

    def __itruediv__(self, _0: Union[float, int], /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __le__(self, _0: numpy.matrix, /):
        """
        usage.scipy: 360
        """
        ...

    @overload
    def __le__(self, _0: int, /):
        """
        usage.scipy: 120
        """
        ...

    @overload
    def __le__(self, _0: scipy.sparse.csr.csr_matrix, /):
        """
        usage.scipy: 60
        """
        ...

    @overload
    def __le__(self, _0: scipy.sparse.csc.csc_matrix, /):
        """
        usage.scipy: 60
        """
        ...

    @overload
    def __le__(self, _0: scipy.sparse.bsr.bsr_matrix, /):
        """
        usage.scipy: 60
        """
        ...

    def __le__(
        self,
        _0: Union[
            scipy.sparse.bsr.bsr_matrix,
            scipy.sparse.csc.csc_matrix,
            int,
            numpy.matrix,
            scipy.sparse.csr.csr_matrix,
        ],
        /,
    ):
        """
        usage.scipy: 660
        """
        ...

    @overload
    def __lt__(self, _0: numpy.matrix, /):
        """
        usage.scipy: 360
        """
        ...

    @overload
    def __lt__(self, _0: int, /):
        """
        usage.scipy: 150
        """
        ...

    @overload
    def __lt__(self, _0: float, /):
        """
        usage.scipy: 15
        """
        ...

    @overload
    def __lt__(self, _0: scipy.sparse.csr.csr_matrix, /):
        """
        usage.scipy: 60
        """
        ...

    @overload
    def __lt__(self, _0: scipy.sparse.csc.csc_matrix, /):
        """
        usage.scipy: 60
        """
        ...

    @overload
    def __lt__(self, _0: scipy.sparse.bsr.bsr_matrix, /):
        """
        usage.scipy: 60
        """
        ...

    def __lt__(self, _0: object, /):
        """
        usage.scipy: 705
        """
        ...

    @overload
    def __matmul__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 9
        usage.skimage: 1
        """
        ...

    @overload
    def __matmul__(self, _0: numpy.matrix, /):
        """
        usage.scipy: 233
        """
        ...

    def __matmul__(self, _0: Union[numpy.matrix, numpy.ndarray], /):
        """
        usage.scipy: 242
        usage.skimage: 1
        """
        ...

    @overload
    def __mul__(self, _0: scipy.sparse.csr.csr_matrix, /):
        """
        usage.scipy: 10
        """
        ...

    @overload
    def __mul__(self, _0: scipy.sparse.coo.coo_matrix, /):
        """
        usage.scipy: 10
        """
        ...

    @overload
    def __mul__(self, _0: scipy.sparse.bsr.bsr_matrix, /):
        """
        usage.scipy: 9
        """
        ...

    @overload
    def __mul__(self, _0: int, /):
        """
        usage.scipy: 7
        """
        ...

    @overload
    def __mul__(self, _0: float, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __mul__(self, _0: scipy.sparse.csc.csc_matrix, /):
        """
        usage.scipy: 10
        """
        ...

    @overload
    def __mul__(self, _0: scipy.sparse.dok.dok_matrix, /):
        """
        usage.scipy: 9
        """
        ...

    @overload
    def __mul__(self, _0: scipy.sparse.lil.lil_matrix, /):
        """
        usage.scipy: 9
        """
        ...

    @overload
    def __mul__(self, _0: scipy.sparse.dia.dia_matrix, /):
        """
        usage.scipy: 1
        """
        ...

    def __mul__(self, _0: object, /):
        """
        usage.scipy: 69
        """
        ...

    @overload
    def __ne__(self, _0: numpy.matrix, /):
        """
        usage.scipy: 180
        """
        ...

    @overload
    def __ne__(self, _0: scipy.sparse.csr.csr_matrix, /):
        """
        usage.scipy: 30
        """
        ...

    @overload
    def __ne__(self, _0: int, /):
        """
        usage.scipy: 60
        """
        ...

    @overload
    def __ne__(self, _0: float, /):
        """
        usage.scipy: 15
        """
        ...

    @overload
    def __ne__(self, _0: scipy.sparse.csc.csc_matrix, /):
        """
        usage.scipy: 30
        """
        ...

    @overload
    def __ne__(self, _0: scipy.sparse.bsr.bsr_matrix, /):
        """
        usage.scipy: 30
        """
        ...

    def __ne__(self, _0: object, /):
        """
        usage.scipy: 345
        """
        ...

    def __neg__(self, /):
        """
        usage.scipy: 6
        usage.skimage: 2
        """
        ...

    def __pow__(self, _0: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.matrix, /):
        """
        usage.scipy: 713
        """
        ...

    @overload
    def __radd__(self, _0: scipy.sparse.csr.csr_matrix, /):
        """
        usage.scipy: 27
        """
        ...

    @overload
    def __radd__(self, _0: scipy.sparse.csc.csc_matrix, /):
        """
        usage.scipy: 27
        """
        ...

    @overload
    def __radd__(self, _0: scipy.sparse.dok.dok_matrix, /):
        """
        usage.scipy: 24
        """
        ...

    @overload
    def __radd__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: scipy.sparse.lil.lil_matrix, /):
        """
        usage.scipy: 24
        """
        ...

    @overload
    def __radd__(self, _0: scipy.sparse.coo.coo_matrix, /):
        """
        usage.scipy: 24
        """
        ...

    @overload
    def __radd__(self, _0: scipy.sparse.dia.dia_matrix, /):
        """
        usage.scipy: 24
        """
        ...

    @overload
    def __radd__(self, _0: scipy.sparse.bsr.bsr_matrix, /):
        """
        usage.scipy: 24
        """
        ...

    def __radd__(self, _0: object, /):
        """
        usage.scipy: 888
        """
        ...

    @overload
    def __rmatmul__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 4
        usage.skimage: 1
        """
        ...

    @overload
    def __rmatmul__(self, _0: numpy.matrix, /):
        """
        usage.scipy: 233
        """
        ...

    def __rmatmul__(self, _0: Union[numpy.matrix, numpy.ndarray], /):
        """
        usage.scipy: 237
        usage.skimage: 1
        """
        ...

    @overload
    def __rmul__(self, _0: scipy.sparse.csc.csc_matrix, /):
        """
        usage.scipy: 32
        """
        ...

    @overload
    def __rmul__(self, _0: scipy.sparse.csr.csr_matrix, /):
        """
        usage.scipy: 24
        """
        ...

    @overload
    def __rmul__(self, _0: scipy.sparse.coo.coo_matrix, /):
        """
        usage.scipy: 32
        """
        ...

    @overload
    def __rmul__(self, _0: float, /):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def __rmul__(self, _0: scipy.sparse.bsr.bsr_matrix, /):
        """
        usage.scipy: 32
        """
        ...

    @overload
    def __rmul__(self, _0: scipy.sparse.linalg.interface._CustomLinearOperator, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __rmul__(self, _0: int, /):
        """
        usage.scipy: 11
        usage.sklearn: 1
        """
        ...

    @overload
    def __rmul__(self, _0: scipy.sparse.dok.dok_matrix, /):
        """
        usage.scipy: 32
        """
        ...

    @overload
    def __rmul__(self, _0: scipy.sparse.lil.lil_matrix, /):
        """
        usage.scipy: 32
        """
        ...

    @overload
    def __rmul__(self, _0: scipy.sparse.dia.dia_matrix, /):
        """
        usage.scipy: 9
        """
        ...

    def __rmul__(self, _0: object, /):
        """
        usage.scipy: 213
        usage.sklearn: 1
        """
        ...

    @overload
    def __rsub__(self, _0: numpy.matrix, /):
        """
        usage.scipy: 222
        """
        ...

    @overload
    def __rsub__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 196
        """
        ...

    @overload
    def __rsub__(self, _0: scipy.sparse.csr.csr_matrix, /):
        """
        usage.scipy: 27
        """
        ...

    @overload
    def __rsub__(self, _0: scipy.sparse.csc.csc_matrix, /):
        """
        usage.scipy: 27
        """
        ...

    @overload
    def __rsub__(self, _0: scipy.sparse.dok.dok_matrix, /):
        """
        usage.scipy: 27
        """
        ...

    @overload
    def __rsub__(self, _0: scipy.sparse.lil.lil_matrix, /):
        """
        usage.scipy: 24
        """
        ...

    @overload
    def __rsub__(self, _0: scipy.sparse.coo.coo_matrix, /):
        """
        usage.scipy: 24
        """
        ...

    @overload
    def __rsub__(self, _0: scipy.sparse.dia.dia_matrix, /):
        """
        usage.scipy: 24
        """
        ...

    @overload
    def __rsub__(self, _0: scipy.sparse.bsr.bsr_matrix, /):
        """
        usage.scipy: 27
        """
        ...

    def __rsub__(self, _0: object, /):
        """
        usage.scipy: 598
        """
        ...

    @overload
    def __rtruediv__(self, _0: float, /):
        """
        usage.scipy: 1
        usage.sklearn: 2
        """
        ...

    @overload
    def __rtruediv__(self, _0: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.ndarray, /):
        """
        usage.sklearn: 1
        """
        ...

    def __rtruediv__(self, _0: Union[float, numpy.ndarray, int], /):
        """
        usage.scipy: 2
        usage.sklearn: 3
        """
        ...

    @overload
    def __setitem__(self, _0: numpy.matrix, _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[None, None, None], int], _1: int, /):
        """
        usage.scipy: 154
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[None, None, None], int], _1: complex, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __setitem__(self, _0: ellipsis, _1: float, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int], _1: float, /):
        """
        usage.scipy: 9
        """
        ...

    @overload
    def __setitem__(self, _0: slice[None, int, None], _1: int, /):
        """
        usage.dask: 1
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: slice[int, int, int], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: slice[int, None, int], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: slice[int, None, int], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: slice[int, int, int], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: slice[None, int, None], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: slice[None, None, None], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: numpy.ndarray, _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: numpy.int8, _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, int, None], slice[None, int, None]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, int, None], slice[int, int, int]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, int, None], slice[int, None, int]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, int, None], slice[int, None, int]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, int, None], slice[int, int, int]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, int, None], slice[None, int, None]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[None, int, None], int], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, int, None], slice[None, None, None]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[None, int, None], numpy.ndarray], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[None, int, None], numpy.int8], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, int, int], slice[None, int, None]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, int, int], slice[int, int, int]], _1: int, /
    ):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, int, int], slice[int, None, int]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, int, int], slice[int, None, int]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, int, int], slice[int, int, int]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, int, int], slice[None, int, None]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[int, int, int], int], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, int, int], slice[None, None, None]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[int, int, int], numpy.ndarray], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[int, int, int], numpy.int8], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, None, int], slice[None, int, None]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, None, int], slice[int, int, int]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, None, int], slice[int, None, int]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, None, int], slice[int, None, int]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, None, int], slice[int, int, int]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, None, int], slice[None, int, None]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[int, None, int], int], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, None, int], slice[None, None, None]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[int, None, int], numpy.ndarray], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[int, None, int], numpy.int8], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, None, int], slice[None, int, None]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, None, int], slice[int, int, int]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, None, int], slice[int, None, int]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, None, int], slice[int, None, int]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, None, int], slice[int, int, int]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, None, int], slice[None, int, None]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[int, None, int], int], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, None, int], slice[None, None, None]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[int, None, int], numpy.ndarray], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[int, None, int], numpy.int8], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, int, int], slice[None, int, None]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, int, int], slice[int, int, int]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, int, int], slice[int, None, int]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, int, int], slice[int, None, int]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, int, int], slice[int, int, int]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, int, int], slice[None, int, None]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[int, int, int], int], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, int, int], slice[None, None, None]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[int, int, int], numpy.ndarray], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[int, int, int], numpy.int8], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, int, None], slice[None, int, None]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, int, None], slice[int, int, int]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, int, None], slice[int, None, int]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, int, None], slice[int, None, int]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, int, None], slice[int, int, int]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, int, None], slice[None, int, None]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[None, int, None], int], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, int, None], slice[None, None, None]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[None, int, None], numpy.ndarray], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[None, int, None], numpy.int8], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, slice[None, int, None]], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, slice[int, int, int]], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, slice[int, None, int]], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, slice[int, None, int]], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, slice[int, int, int]], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, slice[None, int, None]], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int], _1: int, /):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, slice[None, None, None]], _1: int, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, numpy.ndarray], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, numpy.int8], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, None, None], slice[None, int, None]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, None, None], slice[int, int, int]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, None, None], slice[int, None, int]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, None, None], slice[int, None, int]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, None, None], slice[int, int, int]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, None, None], slice[None, int, None]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, None, None], slice[None, None, None]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, None, None], numpy.ndarray], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[None, None, None], numpy.int8], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.ndarray, slice[None, int, None]], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.ndarray, slice[int, int, int]], _1: int, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.ndarray, slice[int, None, int]], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.ndarray, slice[int, None, int]], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.ndarray, slice[int, int, int]], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.ndarray, slice[None, int, None]], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.ndarray, int], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[numpy.ndarray, slice[None, None, None]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.ndarray, numpy.ndarray], _1: int, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.ndarray, numpy.int8], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.int8, slice[None, int, None]], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.int8, slice[int, int, int]], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.int8, slice[int, None, int]], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.int8, slice[int, None, int]], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.int8, slice[int, int, int]], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.int8, slice[None, int, None]], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.int8, int], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.int8, slice[None, None, None]], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.int8, numpy.ndarray], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.int8, numpy.int8], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, slice[int, int, int]], _1: range, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[int, int, int], int], _1: numpy.ndarray, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[Tuple[int, int, int], slice[None, int, None]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[Tuple[int, int, int], Tuple[int, int, int]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[List[int], List[int]], _1: List[int], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[Tuple[int, int, int], Tuple[int, int, int]], _1: List[int], /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[numpy.ndarray, numpy.ndarray], _1: numpy.ndarray, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.ndarray, numpy.ndarray], _1: List[int], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.ndarray, List[int]], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.ndarray, List[List[int]]], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[List[List[int]], List[List[int]]], _1: int, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[List[List[int]], List[List[int]]], _1: numpy.ndarray, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[List[List[int]], List[List[int]]], _1: List[int], /
    ):
        """
        usage.scipy: 1
        """
        ...

    def __setitem__(self, _0: object, _1: object, /):
        """
        usage.dask: 1
        usage.scipy: 303
        """
        ...

    @overload
    def __sub__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 199
        usage.sklearn: 2
        """
        ...

    @overload
    def __sub__(self, _0: numpy.matrix, /):
        """
        usage.scipy: 222
        """
        ...

    @overload
    def __sub__(self, _0: scipy.sparse.csr.csr_matrix, /):
        """
        usage.scipy: 27
        """
        ...

    @overload
    def __sub__(self, _0: scipy.sparse.csc.csc_matrix, /):
        """
        usage.scipy: 27
        """
        ...

    @overload
    def __sub__(self, _0: scipy.sparse.dok.dok_matrix, /):
        """
        usage.scipy: 27
        """
        ...

    @overload
    def __sub__(self, _0: scipy.sparse.lil.lil_matrix, /):
        """
        usage.scipy: 27
        """
        ...

    @overload
    def __sub__(self, _0: scipy.sparse.coo.coo_matrix, /):
        """
        usage.scipy: 27
        """
        ...

    @overload
    def __sub__(self, _0: scipy.sparse.dia.dia_matrix, /):
        """
        usage.scipy: 27
        """
        ...

    @overload
    def __sub__(self, _0: scipy.sparse.bsr.bsr_matrix, /):
        """
        usage.scipy: 27
        """
        ...

    def __sub__(self, _0: object, /):
        """
        usage.scipy: 610
        usage.sklearn: 2
        """
        ...

    @overload
    def __truediv__(self, _0: complex, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __truediv__(self, _0: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __truediv__(self, _0: float, /):
        """
        usage.sklearn: 1
        """
        ...

    def __truediv__(self, _0: Union[float, complex, int], /):
        """
        usage.scipy: 2
        usage.sklearn: 1
        """
        ...

    def all(self, /):
        """
        usage.dask: 2
        usage.scipy: 2
        """
        ...

    def any(self, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def astype(self, _0: Type[complex], /):
        """
        usage.scipy: 60
        """
        ...

    @overload
    def astype(self, _0: Literal["int16"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def astype(self, _0: Type[bool], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def astype(self, _0: Literal["int32"], /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.bool_], /):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.int8], /):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.uint8], /):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.int16], /):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.uint16], /):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.int32], /):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.uint32], /):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.int64], /):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.uint64], /):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.longlong], /):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.ulonglong], /):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.float32], /):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.float64], /):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.float128], /):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.complex64], /):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.complex128], /):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.complex256], /):
        """
        usage.scipy: 5
        """
        ...

    def astype(self, _0: Union[type, Literal["int32", "int16"]], /):
        """
        usage.scipy: 151
        """
        ...

    def conj(self, /):
        """
        usage.scipy: 4
        """
        ...

    def copy(self, /):
        """
        usage.dask: 1
        usage.scipy: 168
        """
        ...

    @overload
    def max(self, /, axis: int):
        """
        usage.scipy: 7
        """
        ...

    @overload
    def max(self, /):
        """
        usage.sklearn: 3
        """
        ...

    def max(self, /, axis: int = ...):
        """
        usage.scipy: 7
        usage.sklearn: 3
        """
        ...

    @overload
    def mean(self, /, dtype: Type[numpy.uint8]):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def mean(self, /, dtype: Type[numpy.int8]):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def mean(self, /, dtype: Type[numpy.complex128]):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def mean(self, /, dtype: Type[numpy.float64]):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def mean(self, /, dtype: Type[numpy.uint32]):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def mean(self, /, dtype: Type[numpy.int32]):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def mean(self, /, dtype: Type[numpy.ulonglong]):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def mean(self, /, dtype: Type[numpy.longlong]):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def mean(self, /, dtype: Type[numpy.complex64]):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def mean(self, /, dtype: Type[numpy.float32]):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def mean(self, /, dtype: Type[numpy.uint16]):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def mean(self, /, dtype: Type[numpy.int16]):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def mean(self, /, dtype: Type[numpy.bool_]):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def mean(self, /, dtype: Type[numpy.complex256]):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def mean(self, /, dtype: Type[numpy.float128]):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def mean(self, /, dtype: Type[numpy.uint64]):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def mean(self, /, dtype: Type[numpy.int64]):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def mean(self, /, axis: None):
        """
        usage.scipy: 30
        """
        ...

    @overload
    def mean(self, /, axis: int):
        """
        usage.scipy: 121
        """
        ...

    @overload
    def mean(self, /, out: numpy.matrix):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def mean(self, /, axis: int, out: numpy.matrix):
        """
        usage.scipy: 1
        """
        ...

    def mean(self, /, axis: Union[int, None] = ..., out: numpy.matrix = ...):
        """
        usage.scipy: 187
        """
        ...

    def min(self, /, axis: int):
        """
        usage.scipy: 7
        """
        ...

    def nonzero(self, /):
        """
        usage.scipy: 1
        usage.sklearn: 2
        """
        ...

    @overload
    def reshape(self, _0: Tuple[int, int], /):
        """
        usage.scipy: 9
        """
        ...

    @overload
    def reshape(self, _0: int, _1: int, /):
        """
        usage.scipy: 9
        usage.sklearn: 2
        """
        ...

    @overload
    def reshape(self, _0: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def reshape(self, _0: Tuple[int, int], /, *, order: Literal["C"]):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def reshape(self, _0: Tuple[int, int], /, *, order: Literal["F"]):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def reshape(self, _0: Tuple[int], /):
        """
        usage.dask: 1
        """
        ...

    def reshape(
        self,
        _0: Union[int, Tuple[int, ...]],
        _1: int = ...,
        /,
        *,
        order: Literal["F", "C"] = ...,
    ):
        """
        usage.dask: 1
        usage.scipy: 21
        usage.sklearn: 2
        """
        ...

    @overload
    def sum(self, /, dtype: None, out: None):
        """
        usage.scipy: 16
        """
        ...

    @overload
    def sum(self, /, axis: Tuple[None, ...], dtype: None, out: None):
        """
        usage.scipy: 24
        """
        ...

    @overload
    def sum(self, /, axis: None):
        """
        usage.scipy: 30
        """
        ...

    @overload
    def sum(self, /, axis: int):
        """
        usage.scipy: 128
        """
        ...

    @overload
    def sum(self, /, dtype: Type[numpy.uint8], out: None):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def sum(self, /, dtype: Type[numpy.int8], out: None):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def sum(self, /, dtype: Type[numpy.complex128], out: None):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def sum(self, /, dtype: Type[numpy.float64], out: None):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def sum(self, /, dtype: Type[numpy.uint32], out: None):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def sum(self, /, dtype: Type[numpy.int32], out: None):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def sum(self, /, dtype: Type[numpy.ulonglong], out: None):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def sum(self, /, dtype: Type[numpy.longlong], out: None):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def sum(self, /, dtype: Type[numpy.complex64], out: None):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def sum(self, /, dtype: Type[numpy.float32], out: None):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def sum(self, /, dtype: Type[numpy.uint16], out: None):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def sum(self, /, dtype: Type[numpy.int16], out: None):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def sum(self, /, dtype: Type[numpy.bool_], out: None):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def sum(self, /, dtype: Type[numpy.complex256], out: None):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def sum(self, /, dtype: Type[numpy.float128], out: None):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def sum(self, /, dtype: Type[numpy.uint64], out: None):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def sum(self, /, dtype: Type[numpy.int64], out: None):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def sum(self, /, out: numpy.matrix):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def sum(self, /, dtype: None, out: numpy.matrix):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def sum(self, /, axis: int, out: numpy.matrix):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def sum(self, /, axis: Tuple[None, ...], dtype: None, out: numpy.matrix):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def sum(self, /, axis: Tuple[None, ...], dtype: Type[numpy.float64], out: None):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def sum(self, /, axis: Tuple[None, ...], dtype: Type[numpy.complex128], out: None):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def sum(self, /, axis: Tuple[None, ...], dtype: Type[numpy.complex64], out: None):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def sum(self, /, axis: Tuple[None, ...], dtype: Type[numpy.float32], out: None):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def sum(self, /, axis: Tuple[None, ...], dtype: Type[numpy.complex256], out: None):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def sum(self, /, axis: Tuple[None, ...], dtype: Type[numpy.float128], out: None):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def sum(self, /, dtype: Type[numpy.float64], out: numpy.matrix):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def sum(
        self, /, axis: Tuple[None, ...], dtype: Type[numpy.float64], out: numpy.matrix
    ):
        """
        usage.scipy: 3
        """
        ...

    def sum(
        self,
        /,
        axis: Union[Tuple[None, ...], int, None] = ...,
        dtype: Union[type, None] = ...,
        out: Union[None, numpy.matrix] = ...,
    ):
        """
        usage.scipy: 271
        """
        ...

    def transpose(self, /):
        """
        usage.scipy: 33
        """
        ...

    @overload
    def view(self, _0: Type[numpy.ndarray], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def view(self, /, *, type: Type[numpy.ndarray]):
        """
        usage.dask: 2
        """
        ...

    def view(
        self, _0: Type[numpy.ndarray] = ..., /, *, type: Type[numpy.ndarray] = ...
    ):
        """
        usage.dask: 2
        usage.scipy: 1
        """
        ...


class memmap:

    # usage.dask: 1
    __module__: ClassVar[object]

    # usage.sklearn: 1
    __name__: ClassVar[object]

    @classmethod
    def __rmod__(cls, _0: str, /):
        """
        usage.sklearn: 1
        """
        ...

    # usage.sklearn: 15
    T: object

    # usage.sklearn: 1
    __class__: object

    # usage.dask: 1
    _mmap: object

    # usage.dask: 5
    base: object

    # usage.dask: 4
    ctypes: object

    # usage.dask: 4
    # usage.scipy: 13
    # usage.sklearn: 7
    dtype: object

    # usage.dask: 6
    # usage.sklearn: 3
    filename: object

    # usage.sklearn: 3
    flags: object

    # usage.dask: 1
    # usage.sklearn: 1
    ndim: object

    # usage.dask: 8
    # usage.scipy: 5
    # usage.sklearn: 21
    shape: object

    # usage.sklearn: 2
    size: object

    # usage.dask: 3
    strides: object

    @overload
    def __add__(self, _0: numpy.memmap, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int64, /):
        """
        usage.sklearn: 1
        """
        ...

    def __add__(self, _0: Union[numpy.int64, numpy.memmap], /):
        """
        usage.dask: 1
        usage.sklearn: 1
        """
        ...

    @overload
    def __getitem__(self, _0: slice[int, int, int], /):
        """
        usage.dask: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, slice[None, None, None]], /):
        """
        usage.dask: 3
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, int, int], slice[None, None, None]], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, None, None], int], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: numpy.ndarray, /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def __getitem__(self, _0: slice[None, int, None], /):
        """
        usage.sklearn: 4
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, None, None], slice[None, int, None]], /
    ):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, None, None], numpy.ndarray], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __getitem__(self, _0: numpy.int64, /):
        """
        usage.sklearn: 3
        """
        ...

    @overload
    def __getitem__(self, _0: int, /):
        """
        usage.sklearn: 4
        """
        ...

    @overload
    def __getitem__(self, _0: slice[int, None, int], /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, None, None], None], /):
        """
        usage.sklearn: 1
        """
        ...

    def __getitem__(
        self,
        _0: Union[
            slice[Union[int, None], Union[int, None], Union[int, None]],
            numpy.int64,
            numpy.ndarray,
            int,
            Tuple[
                Union[int, slice[Union[None, int], Union[None, int], Union[None, int]]],
                Union[int, numpy.ndarray, slice[None, Union[int, None], None], None],
            ],
        ],
        /,
    ):
        """
        usage.dask: 7
        usage.sklearn: 18
        """
        ...

    @overload
    def __isub__(self, _0: numpy.ndarray, /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def __isub__(self, _0: numpy.float64, /):
        """
        usage.sklearn: 2
        """
        ...

    def __isub__(self, _0: Union[numpy.float64, numpy.ndarray], /):
        """
        usage.sklearn: 4
        """
        ...

    def __pow__(self, _0: int, /):
        """
        usage.sklearn: 1
        """
        ...

    def __radd__(self, _0: numpy.memmap, /):
        """
        usage.dask: 1
        """
        ...

    def __rsub__(self, _0: numpy.ndarray, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.ndarray, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.float64, /):
        """
        usage.sklearn: 1
        """
        ...

    def __rtruediv__(self, _0: Union[numpy.float64, numpy.ndarray], /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, None, None], numpy.ndarray], _1: numpy.ndarray, /
    ):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: numpy.int64, _1: numpy.ndarray, /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: numpy.ndarray, /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def __setitem__(self, _0: slice[None, None, None], _1: int, /):
        """
        usage.sklearn: 3
        """
        ...

    def __setitem__(
        self,
        _0: Union[
            slice[None, None, None],
            Tuple[slice[None, None, None], numpy.ndarray],
            numpy.int64,
            int,
        ],
        _1: Union[int, numpy.ndarray],
        /,
    ):
        """
        usage.sklearn: 8
        """
        ...

    @overload
    def __sub__(self, _0: numpy.ndarray, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __sub__(self, _0: numpy.float64, /):
        """
        usage.sklearn: 1
        """
        ...

    def __sub__(self, _0: Union[numpy.float64, numpy.ndarray], /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def __truediv__(self, _0: numpy.ndarray, /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def __truediv__(self, _0: numpy.float64, /):
        """
        usage.sklearn: 2
        """
        ...

    def __truediv__(self, _0: Union[numpy.float64, numpy.ndarray], /):
        """
        usage.sklearn: 4
        """
        ...

    @overload
    def copy(self, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def copy(self, _0: Literal["C"], /):
        """
        usage.sklearn: 1
        """
        ...

    def copy(self, _0: Literal["C"] = ..., /):
        """
        usage.sklearn: 2
        """
        ...

    def item(self, /):
        """
        usage.sklearn: 1
        """
        ...

    def mean(self, /, *, axis: int):
        """
        usage.sklearn: 2
        """
        ...

    def min(self, /):
        """
        usage.sklearn: 1
        """
        ...

    def ravel(self, /):
        """
        usage.sklearn: 1
        """
        ...

    def reshape(self, _0: int, _1: int, /):
        """
        usage.scipy: 7
        """
        ...

    def tolist(self, /):
        """
        usage.sklearn: 7
        """
        ...


class ndarray:

    # usage.pandas: 2
    __array_ufunc__: ClassVar[object]

    # usage.dask: 8
    __module__: ClassVar[object]

    # usage.matplotlib: 1
    __mro__: ClassVar[object]

    # usage.dask: 6
    # usage.pandas: 11
    # usage.sklearn: 1
    __name__: ClassVar[object]

    @overload
    @classmethod
    def __ne__(cls, _0: Type[numpy.ndarray], /):
        """
        usage.scipy: 12
        usage.skimage: 2
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: int, /):
        """
        usage.dask: 3
        usage.matplotlib: 2
        usage.scipy: 148
        usage.skimage: 9
        usage.sklearn: 82
        usage.xarray: 3
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: float, /):
        """
        usage.scipy: 9
        usage.skimage: 1
        usage.sklearn: 9
        usage.xarray: 2
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: numpy.ndarray, /):
        """
        usage.dask: 2
        usage.matplotlib: 18
        usage.scipy: 90
        usage.skimage: 30
        usage.sklearn: 74
        usage.xarray: 4
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: numpy.timedelta64, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: Literal["z"], /):
        """
        usage.xarray: 5
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: object, /):
        """
        usage.pandas: 142
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: numpy.int64, /):
        """
        usage.scipy: 3
        usage.sklearn: 6
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: Tuple[int], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: Tuple[int, int], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: Tuple[int, int, int], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: List[int], /):
        """
        usage.scipy: 2
        usage.sklearn: 1
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: List[List[List[int]]], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: List[List[int]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: Tuple[numpy.float64, numpy.float64, numpy.float64, int], /):
        """
        usage.matplotlib: 2
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: Tuple[float, float, float, float], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: numpy.str_, /):
        """
        usage.sklearn: 6
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: numpy.float64, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: numpy.int32, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: numpy.bool_, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: List[Union[int, float]], /):
        """
        usage.sklearn: 1
        """
        ...

    @classmethod
    def __ne__(cls, _0: object, /):
        """
        usage.dask: 5
        usage.matplotlib: 23
        usage.pandas: 142
        usage.scipy: 273
        usage.skimage: 42
        usage.sklearn: 182
        usage.xarray: 15
        """
        ...

    @classmethod
    def __rmod__(cls, _0: object, /):
        """
        usage.dask: 2
        usage.pandas: 57
        usage.sample-usage: 1
        usage.scipy: 12
        usage.skimage: 1
        usage.sklearn: 11
        usage.xarray: 1
        """
        ...

    # usage.dask: 28
    # usage.matplotlib: 93
    # usage.pandas: 211
    # usage.sample-usage: 1
    # usage.scipy: 1342
    # usage.skimage: 84
    # usage.sklearn: 765
    # usage.xarray: 34
    T: object

    # usage.scipy: 18
    __array_interface__: object

    # usage.dask: 4
    # usage.pandas: 2
    __array_priority__: object

    # usage.dask: 29
    # usage.scipy: 5
    # usage.sklearn: 19
    __class__: object

    # usage.xarray: 1
    attrs: object

    # usage.matplotlib: 2
    # usage.pandas: 87
    # usage.scipy: 37
    # usage.sklearn: 2
    # usage.xarray: 8
    base: object

    # usage.sklearn: 1
    columns: object

    # usage.xarray: 4
    coords: object

    # usage.scipy: 1
    ctypes: object

    # usage.scipy: 3
    # usage.sklearn: 6
    data: object

    # usage.xarray: 2
    dims: object

    # usage.dask: 451
    # usage.matplotlib: 79
    # usage.pandas: 3135
    # usage.sample-usage: 1
    # usage.scipy: 2777
    # usage.skimage: 550
    # usage.sklearn: 1008
    # usage.xarray: 844
    dtype: object

    # usage.matplotlib: 2
    # usage.pandas: 86
    # usage.scipy: 237
    # usage.skimage: 13
    # usage.sklearn: 62
    # usage.xarray: 21
    flags: object

    # usage.dask: 7
    # usage.matplotlib: 33
    # usage.pandas: 14
    # usage.scipy: 31
    # usage.skimage: 21
    # usage.sklearn: 67
    # usage.xarray: 46
    flat: numpy.ndarray

    # usage.dask: 1
    # usage.matplotlib: 2
    # usage.scipy: 144
    # usage.xarray: 3
    imag: numpy.ndarray

    # usage.matplotlib: 2
    index: object

    # usage.pandas: 11
    # usage.scipy: 64
    # usage.skimage: 4
    # usage.sklearn: 2
    itemsize: object

    # usage.dask: 2
    keys: object

    # usage.xarray: 5
    magnitude: object

    # usage.matplotlib: 2
    name: object

    # usage.dask: 11
    # usage.pandas: 46
    # usage.scipy: 19
    # usage.sklearn: 3
    nbytes: object

    # usage.dask: 360
    # usage.matplotlib: 141
    # usage.pandas: 741
    # usage.sample-usage: 1
    # usage.scipy: 1935
    # usage.skimage: 462
    # usage.sklearn: 467
    # usage.xarray: 309
    ndim: object

    # usage.dask: 1
    # usage.matplotlib: 6
    # usage.pandas: 1
    # usage.scipy: 235
    # usage.xarray: 3
    real: object

    # usage.dask: 445
    # usage.matplotlib: 323
    # usage.pandas: 695
    # usage.sample-usage: 2
    # usage.scipy: 4734
    # usage.skimage: 1138
    # usage.sklearn: 3271
    # usage.xarray: 350
    shape: Union[Tuple[Union[int, None], ...], List[int], numpy.ndarray]

    # usage.dask: 16
    # usage.matplotlib: 84
    # usage.pandas: 147
    # usage.sample-usage: 1
    # usage.scipy: 975
    # usage.skimage: 88
    # usage.sklearn: 240
    # usage.xarray: 64
    size: object

    # usage.dask: 29
    # usage.matplotlib: 8
    # usage.pandas: 1
    # usage.scipy: 30
    # usage.skimage: 12
    # usage.sklearn: 7
    # usage.xarray: 4
    strides: Union[Tuple[int, int, int], int]

    # usage.matplotlib: 1
    tzinfo: object

    # usage.xarray: 6
    units: object

    # usage.pandas: 4
    values: object

    # usage.xarray: 3
    variable: object

    # usage.xarray: 4
    variables: object

    @overload
    def __add__(self, _0: float, /):
        """
        usage.dask: 10
        usage.matplotlib: 54
        usage.scipy: 196
        usage.skimage: 28
        usage.sklearn: 61
        usage.xarray: 21
        """
        ...

    @overload
    def __add__(self, _0: numpy.ndarray, /):
        """
        usage.dask: 65
        usage.matplotlib: 213
        usage.sample-usage: 1
        usage.scipy: 1617
        usage.skimage: 177
        usage.sklearn: 274
        usage.xarray: 26
        """
        ...

    @overload
    def __add__(self, _0: numpy.float64, /):
        """
        usage.dask: 10
        usage.matplotlib: 10
        usage.scipy: 64
        usage.skimage: 18
        usage.sklearn: 51
        usage.xarray: 1
        """
        ...

    @overload
    def __add__(self, _0: int, /):
        """
        usage.dask: 77
        usage.matplotlib: 94
        usage.sample-usage: 1
        usage.scipy: 356
        usage.skimage: 41
        usage.sklearn: 94
        usage.xarray: 22
        """
        ...

    @overload
    def __add__(self, _0: numpy.int64, /):
        """
        usage.dask: 2
        usage.matplotlib: 2
        usage.scipy: 4
        usage.skimage: 2
        usage.sklearn: 1
        """
        ...

    @overload
    def __add__(self, _0: dask.array.core.Array, /):
        """
        usage.dask: 5
        usage.skimage: 1
        """
        ...

    @overload
    def __add__(self, _0: bool, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __add__(self, _0: datetime.timedelta, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __add__(self, _0: xarray.coding.cftime_offsets.Day, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __add__(self, _0: xarray.coding.cftime_offsets.Hour, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __add__(self, _0: xarray.core.dataarray.DataArray, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __add__(self, _0: xarray.core.dataset.Dataset, /):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __add__(self, _0: object, /):
        """
        usage.pandas: 272
        """
        ...

    @overload
    def __add__(self, _0: complex, /):
        """
        usage.dask: 6
        usage.scipy: 42
        """
        ...

    @overload
    def __add__(self, _0: List[float], /):
        """
        usage.matplotlib: 8
        usage.scipy: 2
        """
        ...

    @overload
    def __add__(self, _0: List[int], /):
        """
        usage.matplotlib: 2
        usage.scipy: 8
        usage.sklearn: 5
        """
        ...

    @overload
    def __add__(self, _0: scipy.signal.ltisys.StateSpaceContinuous, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float32, /):
        """
        usage.scipy: 2
        usage.sklearn: 8
        """
        ...

    @overload
    def __add__(self, _0: numpy.matrix, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: Tuple[int, int, int], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __add__(self, _0: Tuple[numpy.float64, numpy.float64], /):
        """
        usage.matplotlib: 4
        """
        ...

    @overload
    def __add__(self, _0: Tuple[int, int], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __add__(self, _0: List[numpy.float64], /):
        """
        usage.matplotlib: 5
        """
        ...

    @overload
    def __add__(self, _0: Tuple[numpy.float64, float], /):
        """
        usage.matplotlib: 2
        """
        ...

    @overload
    def __add__(self, _0: List[List[float]], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __add__(self, _0: range, /):
        """
        usage.matplotlib: 2
        """
        ...

    @overload
    def __add__(self, _0: List[List[numpy.int64]], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __add__(self, _0: List[Union[int, float]], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __add__(self, _0: List[Union[numpy.float64, float]], /):
        """
        usage.matplotlib: 2
        """
        ...

    @overload
    def __add__(self, _0: List[Union[float, numpy.float64]], /):
        """
        usage.matplotlib: 2
        """
        ...

    @overload
    def __add__(self, _0: Literal["_"], /):
        """
        usage.dask: 3
        """
        ...

    @overload
    def __add__(self, _0: Literal["_0"], /):
        """
        usage.dask: 3
        """
        ...

    @overload
    def __add__(self, _0: Literal["_1"], /):
        """
        usage.dask: 3
        """
        ...

    @overload
    def __add__(self, _0: Literal["."], /):
        """
        usage.dask: 3
        """
        ...

    @overload
    def __add__(self, _0: Literal[".0"], /):
        """
        usage.dask: 3
        """
        ...

    @overload
    def __add__(self, _0: dask.delayed.Delayed, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.ma.core.MaskedArray, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __add__(self, _0: pandas.core.series.Series, /):
        """
        usage.dask: 2
        """
        ...

    def __add__(self, _0: object, /):
        """
        usage.dask: 194
        usage.matplotlib: 404
        usage.pandas: 272
        usage.sample-usage: 2
        usage.scipy: 2298
        usage.skimage: 268
        usage.sklearn: 494
        usage.xarray: 76
        """
        ...

    @overload
    def __and__(self, _0: numpy.ndarray, /):
        """
        usage.dask: 4
        usage.matplotlib: 46
        usage.scipy: 230
        usage.skimage: 12
        usage.sklearn: 11
        usage.xarray: 1
        """
        ...

    @overload
    def __and__(self, _0: int, /):
        """
        usage.sample-usage: 1
        usage.scipy: 3
        usage.skimage: 2
        """
        ...

    @overload
    def __and__(self, _0: dask.array.core.Array, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __and__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 50
        usage.xarray: 1
        """
        ...

    @overload
    def __and__(self, _0: sparse._coo.core.COO, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __and__(self, _0: Union[int, bool, numpy.ndarray], /):
        """
        usage.pandas: 88
        """
        ...

    @overload
    def __and__(self, _0: numpy.int64, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __and__(self, _0: bool, /):
        """
        usage.dask: 1
        usage.scipy: 8
        """
        ...

    @overload
    def __and__(self, _0: numpy.ma.core.MaskedArray, /):
        """
        usage.matplotlib: 2
        usage.scipy: 1
        """
        ...

    def __and__(self, _0: object, /):
        """
        usage.dask: 5
        usage.matplotlib: 48
        usage.pandas: 88
        usage.sample-usage: 1
        usage.scipy: 296
        usage.skimage: 14
        usage.sklearn: 11
        usage.xarray: 4
        """
        ...

    @overload
    def __array_function__(
        self,
        _0: Callable,
        _1: Tuple[Type[numpy.ndarray]],
        _2: Tuple[numpy.ndarray, numpy.ndarray],
        _3: Dict[Literal["equal_nan"], bool],
        /,
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __array_function__(
        self, _0: Callable, _1: Tuple[None, ...], _2: Tuple[list], _3: dict, /
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __array_function__(
        self,
        _0: Callable,
        _1: Tuple[None, ...],
        _2: Tuple[list],
        _3: Dict[Literal["axis"], int],
        /,
    ):
        """
        usage.dask: 5
        """
        ...

    @overload
    def __array_function__(
        self,
        _0: Callable,
        _1: Tuple[None, ...],
        _2: Tuple[numpy.ndarray, numpy.ndarray],
        _3: dict,
        /,
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __array_function__(
        self,
        _0: Callable,
        _1: Tuple[None, ...],
        _2: Tuple[numpy.ndarray],
        _3: Dict[
            Literal["keepdims", "dtype", "axis"], Union[bool, numpy.dtype, Tuple[int]]
        ],
        /,
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __array_function__(
        self,
        _0: Callable,
        _1: Tuple[None, ...],
        _2: Tuple[numpy.ndarray],
        _3: Dict[Literal["axes"], Tuple[int, int]],
        /,
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __array_function__(
        self,
        _0: Callable,
        _1: Tuple[None, ...],
        _2: Tuple[numpy.ndarray, numpy.ndarray],
        _3: Dict[Literal["axes"], Tuple[Tuple[int], Tuple[int]]],
        /,
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __array_function__(
        self,
        _0: Callable,
        _1: Tuple[None, ...],
        _2: Tuple[numpy.ndarray],
        _3: Dict[
            Literal["keepdims", "axis", "dtype"], Union[bool, numpy.dtype, Tuple[int]]
        ],
        /,
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __array_function__(
        self,
        _0: Callable,
        _1: Tuple[None, ...],
        _2: Tuple[numpy.ndarray, numpy.int64],
        _3: Dict[Literal["dtype", "shape"], Union[numpy.dtype, Tuple[int, int]]],
        /,
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __array_function__(
        self,
        _0: Callable,
        _1: Tuple[None, ...],
        _2: Tuple[numpy.ndarray, numpy.ndarray],
        _3: dict,
        /,
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __array_function__(
        self, _0: Callable, _1: Tuple[None, ...], _2: Tuple[numpy.ndarray], _3: dict, /
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __array_function__(
        self,
        _0: Callable,
        _1: Tuple[None, ...],
        _2: Tuple[numpy.ndarray],
        _3: Dict[Literal["axis"], int],
        /,
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __array_function__(
        self, _0: Callable, _1: Tuple[None, ...], _2: Tuple[numpy.ndarray], _3: dict, /
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __array_function__(
        self,
        _0: Callable,
        _1: Tuple[None, ...],
        _2: Tuple[numpy.ndarray, numpy.ndarray],
        _3: Dict[Literal["equal_nan"], bool],
        /,
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __array_function__(
        self, _0: Callable, _1: Tuple[None, ...], _2: Tuple[numpy.ndarray], _3: dict, /
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __array_function__(
        self,
        _0: Callable,
        _1: Tuple[None, ...],
        _2: Tuple[numpy.ndarray],
        _3: Dict[
            Literal["keepdims", "dtype", "axis"],
            Union[bool, numpy.dtype, Tuple[int, int]],
        ],
        /,
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __array_function__(
        self,
        _0: Callable,
        _1: Tuple[None, ...],
        _2: Tuple[numpy.ndarray],
        _3: Dict[
            Literal["keepdims", "axis", "dtype"],
            Union[bool, numpy.dtype, Tuple[int, int]],
        ],
        /,
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __array_function__(
        self, _0: Callable, _1: Tuple[None, ...], _2: Tuple[list], _3: dict, /
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __array_function__(
        self,
        _0: Callable,
        _1: Tuple[None, ...],
        _2: Tuple[list],
        _3: Dict[Literal["axis"], int],
        /,
    ):
        """
        usage.dask: 2
        """
        ...

    @overload
    def __array_function__(
        self, _0: Callable, _1: Tuple[None, ...], _2: Tuple[numpy.ndarray], _3: dict, /
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __array_function__(
        self, _0: Callable, _1: Tuple[None, ...], _2: Tuple[numpy.ndarray], _3: dict, /
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __array_function__(
        self,
        _0: Callable,
        _1: Tuple[None, ...],
        _2: Tuple[numpy.ndarray, numpy.int64],
        _3: Dict[
            Literal["dtype", "shape"], Union[Type[numpy.float64], Tuple[int, int]]
        ],
        /,
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __array_function__(
        self,
        _0: Callable,
        _1: Tuple[None, ...],
        _2: Tuple[numpy.ndarray],
        _3: Dict[
            Literal["dtype", "keepdims", "axis"],
            Union[numpy.dtype, bool, Tuple[int, int]],
        ],
        /,
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __array_function__(
        self, _0: Callable, _1: Tuple[None, ...], _2: Tuple[numpy.ndarray], _3: dict, /
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __array_function__(
        self, _0: Callable, _1: Tuple[None, ...], _2: Tuple[numpy.ndarray], _3: dict, /
    ):
        """
        usage.dask: 1
        """
        ...

    def __array_function__(
        self,
        _0: Callable,
        _1: Tuple[Union[Type[numpy.ndarray], None], ...],
        _2: Tuple[Union[numpy.ndarray, numpy.int64, list], ...],
        _3: Dict[
            str,
            Union[
                Type[numpy.float64],
                int,
                bool,
                numpy.dtype,
                Tuple[Union[int, Tuple[int]], ...],
            ],
        ],
        /,
    ):
        """
        usage.dask: 30
        """
        ...

    def __array_wrap__(self, _0: numpy.ndarray, /):
        """
        usage.dask: 2
        usage.scipy: 2
        """
        ...

    def __bool__(self, /):
        """
        usage.pandas: 2
        usage.sample-usage: 1
        usage.scipy: 3
        """
        ...

    @overload
    def __contains__(self, _0: int, /):
        """
        usage.matplotlib: 1
        usage.sample-usage: 1
        usage.scipy: 8
        usage.skimage: 5
        usage.sklearn: 26
        usage.xarray: 3
        """
        ...

    @overload
    def __contains__(self, _0: Tuple[int, int], /):
        """
        usage.skimage: 6
        """
        ...

    @overload
    def __contains__(self, _0: numpy.int64, /):
        """
        usage.scipy: 2
        usage.skimage: 2
        usage.sklearn: 1
        """
        ...

    @overload
    def __contains__(
        self, _0: Union[numpy.uint64, numpy.int64, int, Literal["one", "bar"]], /
    ):
        """
        usage.pandas: 13
        """
        ...

    @overload
    def __contains__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __contains__(self, _0: float, /):
        """
        usage.matplotlib: 2
        usage.sklearn: 2
        """
        ...

    @overload
    def __contains__(self, _0: numpy.str_, /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def __contains__(self, _0: Literal["spam"], /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def __contains__(self, _0: numpy.ndarray, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __contains__(self, _0: Literal["c"], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __contains__(self, _0: Literal["b"], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __contains__(self, _0: Literal["def"], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __contains__(self, _0: Literal["ghi"], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __contains__(self, _0: Literal["a"], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __contains__(self, _0: numpy.float64, /):
        """
        usage.sklearn: 2
        """
        ...

    def __contains__(self, _0: object, /):
        """
        usage.matplotlib: 3
        usage.pandas: 13
        usage.sample-usage: 1
        usage.scipy: 11
        usage.skimage: 13
        usage.sklearn: 41
        usage.xarray: 3
        """
        ...

    @overload
    def __eq__(self, _0: numpy.ndarray, /):
        """
        usage.dask: 134
        usage.matplotlib: 46
        usage.sample-usage: 2
        usage.scipy: 178
        usage.skimage: 104
        usage.sklearn: 214
        usage.xarray: 256
        """
        ...

    @overload
    def __eq__(self, _0: float, /):
        """
        usage.matplotlib: 4
        usage.scipy: 43
        usage.skimage: 9
        usage.sklearn: 31
        usage.xarray: 3
        """
        ...

    @overload
    def __eq__(self, _0: numpy.int64, /):
        """
        usage.dask: 2
        usage.matplotlib: 4
        usage.scipy: 24
        usage.skimage: 7
        usage.sklearn: 38
        usage.xarray: 10
        """
        ...

    @overload
    def __eq__(self, _0: int, /):
        """
        usage.dask: 47
        usage.matplotlib: 28
        usage.scipy: 275
        usage.skimage: 111
        usage.sklearn: 269
        usage.xarray: 11
        """
        ...

    @overload
    def __eq__(self, _0: numpy.uint8, /):
        """
        usage.matplotlib: 1
        usage.scipy: 2
        usage.skimage: 3
        usage.xarray: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.float64, /):
        """
        usage.dask: 1
        usage.matplotlib: 3
        usage.scipy: 15
        usage.skimage: 9
        usage.sklearn: 42
        usage.xarray: 4
        """
        ...

    @overload
    def __eq__(self, _0: numpy.float32, /):
        """
        usage.scipy: 11
        usage.skimage: 1
        usage.sklearn: 5
        usage.xarray: 2
        """
        ...

    @overload
    def __eq__(self, _0: Literal["type-2-x"], /):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __eq__(self, _0: Literal["type-2-y"], /):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __eq__(self, _0: Literal["type-3-x"], /):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __eq__(self, _0: Literal["type-3-y"], /):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __eq__(self, _0: Literal["type-4"], /):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __eq__(self, _0: Tuple[int, int], /):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __eq__(self, _0: bool, /):
        """
        usage.scipy: 2
        usage.skimage: 5
        """
        ...

    @overload
    def __eq__(self, _0: List[int], /):
        """
        usage.dask: 2
        usage.matplotlib: 1
        usage.scipy: 3
        usage.skimage: 4
        usage.sklearn: 12
        usage.xarray: 2
        """
        ...

    @overload
    def __eq__(self, _0: Tuple[int, int, int], /):
        """
        usage.skimage: 1
        usage.sklearn: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 1
        usage.skimage: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 2
        usage.skimage: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.bytes_, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.int8, /):
        """
        usage.scipy: 2
        usage.xarray: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.int16, /):
        """
        usage.scipy: 2
        usage.xarray: 1
        """
        ...

    @overload
    def __eq__(self, _0: dask.array.core.Array, /):
        """
        usage.xarray: 35
        """
        ...

    @overload
    def __eq__(self, _0: numpy.int32, /):
        """
        usage.scipy: 3
        usage.sklearn: 3
        usage.xarray: 1
        """
        ...

    @overload
    def __eq__(self, _0: Literal["float32"], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __eq__(self, _0: cftime._cftime.DatetimeGregorian, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __eq__(self, _0: Literal["_not_supplied"], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __eq__(self, _0: Literal["dim2"], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __eq__(self, _0: Literal["dim1"], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __eq__(self, _0: Literal["foo"], /):
        """
        usage.dask: 1
        usage.sklearn: 1
        usage.xarray: 3
        """
        ...

    @overload
    def __eq__(self, _0: numpy.datetime64, /):
        """
        usage.xarray: 4
        """
        ...

    @overload
    def __eq__(self, _0: numpy.str_, /):
        """
        usage.sklearn: 23
        usage.xarray: 1
        """
        ...

    @overload
    def __eq__(self, _0: sparse._coo.core.COO, /):
        """
        usage.xarray: 3
        """
        ...

    @overload
    def __eq__(self, _0: List[Literal["d", "b", "a"]], /):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __eq__(self, _0: List[Literal["e", "d", "c", "b", "a"]], /):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __eq__(self, _0: object, /):
        """
        usage.pandas: 895
        usage.xarray: 5
        """
        ...

    @overload
    def __eq__(self, _0: xarray.core.variable.Variable, /):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __eq__(self, _0: pandas._libs.tslibs.period.Period, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __eq__(self, _0: Literal["a"], /):
        """
        usage.sklearn: 2
        usage.xarray: 4
        """
        ...

    @overload
    def __eq__(self, _0: Literal["z"], /):
        """
        usage.xarray: 5
        """
        ...

    @overload
    def __eq__(self, _0: bytes, /):
        """
        usage.scipy: 1
        usage.xarray: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __eq__(self, _0: Literal[""], /):
        """
        usage.scipy: 31
        usage.sklearn: 1
        """
        ...

    @overload
    def __eq__(self, _0: object, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __eq__(self, _0: List[float], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __eq__(self, _0: numpy.uint16, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __eq__(self, _0: numpy.uint32, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __eq__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 2
        usage.sklearn: 7
        """
        ...

    @overload
    def __eq__(self, _0: None, /):
        """
        usage.scipy: 1
        usage.sklearn: 1
        """
        ...

    @overload
    def __eq__(self, _0: scipy.sparse.dok.dok_matrix, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.matrix, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __eq__(self, _0: scipy.sparse.coo.coo_matrix, /):
        """
        usage.dask: 1
        usage.scipy: 1
        """
        ...

    @overload
    def __eq__(self, _0: Tuple[float, float, float, float], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __eq__(self, _0: Literal["hello"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __eq__(self, _0: Literal["Oxidation"], /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __eq__(self, _0: Literal["Polymerization"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __eq__(self, _0: Literal["Reduction"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __eq__(self, _0: Tuple[numpy.float64, numpy.float64, numpy.float64, int], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __eq__(self, _0: scipy.sparse.csr.csr_matrix, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.recarray, /):
        """
        usage.dask: 3
        """
        ...

    @overload
    def __eq__(
        self, _0: sklearn.ensemble._hist_gradient_boosting.splitting._memoryviewslice, /
    ):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __eq__(self, _0: Literal["NAN"], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __eq__(self, _0: List[numpy.int64], /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def __eq__(self, _0: Literal["bar"], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __eq__(self, _0: Literal["spam"], /):
        """
        usage.sklearn: 4
        """
        ...

    @overload
    def __eq__(self, _0: _pytest.python_api.ApproxNumpy, /):
        """
        usage.sklearn: 12
        """
        ...

    @overload
    def __eq__(self, _0: _pytest.python_api.ApproxSequencelike, /):
        """
        usage.sklearn: 4
        """
        ...

    @overload
    def __eq__(self, _0: Literal["c"], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __eq__(self, _0: Literal["b"], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __eq__(self, _0: Literal["def"], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __eq__(self, _0: _pytest.python_api.ApproxScalar, /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def __eq__(self, _0: Literal["one"], /):
        """
        usage.sklearn: 4
        """
        ...

    @overload
    def __eq__(self, _0: Literal["two"], /):
        """
        usage.sklearn: 4
        """
        ...

    @overload
    def __eq__(self, _0: Literal["three"], /):
        """
        usage.sklearn: 4
        """
        ...

    def __eq__(self, _0: object, /):
        """
        usage.dask: 192
        usage.matplotlib: 88
        usage.pandas: 895
        usage.sample-usage: 2
        usage.scipy: 616
        usage.skimage: 268
        usage.sklearn: 692
        usage.xarray: 366
        """
        ...

    @overload
    def __floordiv__(self, _0: int, /):
        """
        usage.dask: 1
        usage.sample-usage: 1
        usage.scipy: 14
        usage.skimage: 8
        usage.sklearn: 7
        usage.xarray: 1
        """
        ...

    @overload
    def __floordiv__(self, _0: numpy.ndarray, /):
        """
        usage.dask: 1
        usage.scipy: 4
        usage.skimage: 2
        usage.sklearn: 1
        """
        ...

    @overload
    def __floordiv__(self, _0: numpy.float64, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __floordiv__(self, _0: object, /):
        """
        usage.pandas: 58
        """
        ...

    @overload
    def __floordiv__(self, _0: float, /):
        """
        usage.dask: 3
        """
        ...

    @overload
    def __floordiv__(self, _0: List[int], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __floordiv__(self, _0: List[float], /):
        """
        usage.sklearn: 3
        """
        ...

    def __floordiv__(self, _0: object, /):
        """
        usage.dask: 5
        usage.pandas: 58
        usage.sample-usage: 1
        usage.scipy: 18
        usage.skimage: 11
        usage.sklearn: 12
        usage.xarray: 1
        """
        ...

    @overload
    def __ge__(self, _0: float, /):
        """
        usage.matplotlib: 9
        usage.scipy: 112
        usage.skimage: 1
        usage.sklearn: 17
        """
        ...

    @overload
    def __ge__(self, _0: int, /):
        """
        usage.dask: 12
        usage.matplotlib: 9
        usage.scipy: 162
        usage.skimage: 43
        usage.sklearn: 47
        usage.xarray: 3
        """
        ...

    @overload
    def __ge__(self, _0: numpy.int64, /):
        """
        usage.matplotlib: 2
        usage.scipy: 17
        usage.skimage: 1
        """
        ...

    @overload
    def __ge__(self, _0: numpy.ndarray, /):
        """
        usage.dask: 2
        usage.matplotlib: 2
        usage.scipy: 183
        usage.skimage: 5
        usage.sklearn: 7
        usage.xarray: 7
        """
        ...

    @overload
    def __ge__(self, _0: object, /):
        """
        usage.pandas: 90
        """
        ...

    @overload
    def __ge__(self, _0: numpy.float64, /):
        """
        usage.dask: 2
        usage.matplotlib: 16
        usage.scipy: 21
        usage.sklearn: 5
        """
        ...

    @overload
    def __ge__(self, _0: List[Union[int, float]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __ge__(self, _0: numpy.ma.core.MaskedArray, /):
        """
        usage.matplotlib: 1
        usage.scipy: 1
        usage.sklearn: 2
        """
        ...

    def __ge__(self, _0: object, /):
        """
        usage.dask: 16
        usage.matplotlib: 39
        usage.pandas: 90
        usage.scipy: 497
        usage.skimage: 50
        usage.sklearn: 78
        usage.xarray: 10
        """
        ...

    @overload
    def __getitem__(self, _0: slice[None, int, None], /):
        """
        usage.dask: 32
        usage.matplotlib: 53
        usage.scipy: 608
        usage.skimage: 64
        usage.sklearn: 412
        usage.xarray: 22
        """
        ...

    @overload
    def __getitem__(self, _0: slice[int, None, int], /):
        """
        usage.dask: 17
        usage.matplotlib: 45
        usage.scipy: 318
        usage.skimage: 25
        usage.sklearn: 184
        usage.xarray: 8
        """
        ...

    @overload
    def __getitem__(self, _0: int, /):
        """
        usage.dask: 46
        usage.matplotlib: 433
        usage.sample-usage: 2
        usage.scipy: 2186
        usage.skimage: 360
        usage.sklearn: 1005
        usage.xarray: 105
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, None, None], int], /):
        """
        usage.dask: 6
        usage.matplotlib: 130
        usage.scipy: 420
        usage.skimage: 109
        usage.sklearn: 483
        usage.xarray: 16
        """
        ...

    @overload
    def __getitem__(self, _0: numpy.ndarray, /):
        """
        usage.dask: 40
        usage.matplotlib: 182
        usage.sample-usage: 1
        usage.scipy: 1098
        usage.skimage: 244
        usage.sklearn: 927
        usage.xarray: 22
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, int, int], slice[int, int, int]], /):
        """
        usage.dask: 30
        usage.matplotlib: 4
        usage.scipy: 21
        usage.skimage: 92
        usage.sklearn: 3
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, None, None], slice[None, None, None], int], /
    ):
        """
        usage.matplotlib: 9
        usage.scipy: 32
        usage.skimage: 21
        usage.sklearn: 6
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None], slice[None, None, None], slice[None, int, None]
        ],
        /,
    ):
        """
        usage.dask: 5
        usage.matplotlib: 3
        usage.scipy: 17
        usage.skimage: 5
        usage.sklearn: 3
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, int], /):
        """
        usage.dask: 5
        usage.matplotlib: 16
        usage.scipy: 6
        usage.skimage: 100
        usage.xarray: 6
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[numpy.ndarray, int], /):
        """
        usage.matplotlib: 6
        usage.scipy: 7
        usage.skimage: 5
        usage.sklearn: 23
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, None], /):
        """
        usage.dask: 8
        usage.matplotlib: 8
        usage.scipy: 5
        usage.skimage: 37
        usage.sklearn: 4
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, int, slice[None, None, None]], /):
        """
        usage.dask: 1
        usage.scipy: 13
        usage.skimage: 6
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, slice[None, int, None]], /):
        """
        usage.matplotlib: 5
        usage.scipy: 9
        usage.skimage: 13
        usage.sklearn: 2
        usage.xarray: 4
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, int, None], /):
        """
        usage.matplotlib: 1
        usage.skimage: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, int, int], /):
        """
        usage.dask: 8
        usage.matplotlib: 1
        usage.scipy: 54
        usage.skimage: 24
        usage.xarray: 3
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[None, ellipsis], /):
        """
        usage.dask: 2
        usage.scipy: 1
        usage.skimage: 11
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 4
        usage.skimage: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[None, ellipsis, slice[None, int, None]], /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, int], /):
        """
        usage.dask: 12
        usage.matplotlib: 82
        usage.scipy: 426
        usage.skimage: 128
        usage.sklearn: 61
        usage.xarray: 15
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, slice[int, None, int]], /):
        """
        usage.matplotlib: 2
        usage.scipy: 29
        usage.skimage: 1
        usage.sklearn: 5
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[numpy.ndarray, numpy.ndarray], /):
        """
        usage.dask: 3
        usage.matplotlib: 10
        usage.scipy: 113
        usage.skimage: 27
        usage.sklearn: 51
        usage.xarray: 25
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["L1"], /):
        """
        usage.skimage: 4
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["a1"], /):
        """
        usage.skimage: 4
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["b1"], /):
        """
        usage.skimage: 4
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["L2"], /):
        """
        usage.skimage: 4
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["a2"], /):
        """
        usage.skimage: 4
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["b2"], /):
        """
        usage.skimage: 4
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["dE"], /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __getitem__(self, _0: slice[int, int, int], /):
        """
        usage.dask: 6
        usage.matplotlib: 44
        usage.sample-usage: 1
        usage.scipy: 283
        usage.skimage: 10
        usage.sklearn: 101
        usage.xarray: 10
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[None, slice[None, None, None]], /):
        """
        usage.dask: 15
        usage.matplotlib: 10
        usage.scipy: 93
        usage.skimage: 4
        usage.sklearn: 24
        usage.xarray: 9
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[numpy.int64, numpy.int64], /):
        """
        usage.scipy: 16
        usage.skimage: 10
        usage.sklearn: 4
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, int, int], slice[None, None, None]], /):
        """
        usage.dask: 1
        usage.matplotlib: 8
        usage.scipy: 27
        usage.skimage: 5
        usage.sklearn: 14
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, None, None], None], /):
        """
        usage.dask: 14
        usage.matplotlib: 42
        usage.scipy: 212
        usage.skimage: 12
        usage.sklearn: 266
        usage.xarray: 14
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[slice[int, int, int], slice[int, int, int], slice[int, int, int]],
        /,
    ):
        """
        usage.dask: 17
        usage.scipy: 46
        usage.skimage: 20
        usage.sklearn: 1
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[numpy.int64, numpy.int64, numpy.int64],
            slice[numpy.int64, numpy.int64, numpy.int64],
        ],
        /,
    ):
        """
        usage.scipy: 2
        usage.skimage: 9
        """
        ...

    @overload
    def __getitem__(self, _0: slice[int, None, int], /):
        """
        usage.dask: 1
        usage.matplotlib: 6
        usage.scipy: 38
        usage.skimage: 2
        usage.sklearn: 17
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(self, _0: slice[int, None, int], /):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, int, int], slice[int, int, int]], /):
        """
        usage.scipy: 1
        usage.skimage: 1
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, slice[None, None, None]], /):
        """
        usage.dask: 2
        usage.matplotlib: 11
        usage.scipy: 100
        usage.skimage: 25
        usage.sklearn: 70
        usage.xarray: 6
        """
        ...

    @overload
    def __getitem__(self, _0: numpy.int64, /):
        """
        usage.dask: 6
        usage.matplotlib: 13
        usage.scipy: 147
        usage.skimage: 25
        usage.sklearn: 155
        usage.xarray: 5
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray], /):
        """
        usage.dask: 2
        usage.matplotlib: 5
        usage.scipy: 11
        usage.skimage: 11
        usage.sklearn: 6
        usage.xarray: 9
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, None, None], slice[int, int, int]], /):
        """
        usage.matplotlib: 4
        usage.scipy: 43
        usage.skimage: 6
        usage.sklearn: 28
        usage.xarray: 4
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, None, None], slice[None, int, None]], /
    ):
        """
        usage.dask: 4
        usage.matplotlib: 3
        usage.scipy: 129
        usage.skimage: 23
        usage.sklearn: 106
        usage.xarray: 7
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, None, None], slice[int, None, int]], /):
        """
        usage.matplotlib: 4
        usage.scipy: 78
        usage.skimage: 25
        usage.sklearn: 43
        usage.xarray: 8
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray], /
    ):
        """
        usage.scipy: 6
        usage.skimage: 3
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(self, _0: slice[None, None, None], /):
        """
        usage.dask: 1
        usage.matplotlib: 1
        usage.scipy: 14
        usage.skimage: 1
        usage.sklearn: 17
        usage.xarray: 4
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[numpy.ndarray, slice[None, None, None]], /):
        """
        usage.dask: 7
        usage.matplotlib: 5
        usage.scipy: 33
        usage.skimage: 9
        usage.sklearn: 43
        usage.xarray: 6
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, slice[int, int, int]], /):
        """
        usage.scipy: 14
        usage.skimage: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, None, None], List[int]], /):
        """
        usage.dask: 1
        usage.matplotlib: 2
        usage.scipy: 15
        usage.skimage: 2
        usage.sklearn: 36
        usage.xarray: 3
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, slice[None, int, None]], /):
        """
        usage.matplotlib: 1
        usage.scipy: 34
        usage.skimage: 2
        usage.sklearn: 15
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, None, None], None, slice[None, None, None]], /
    ):
        """
        usage.dask: 3
        usage.scipy: 4
        usage.skimage: 2
        usage.sklearn: 7
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, None, None], int, slice[None, None, None]], /
    ):
        """
        usage.matplotlib: 20
        usage.scipy: 20
        usage.skimage: 8
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, slice[None, None, None]], /):
        """
        usage.scipy: 4
        usage.skimage: 1
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, int, None], slice[None, int, None]], /):
        """
        usage.dask: 1
        usage.matplotlib: 14
        usage.scipy: 76
        usage.skimage: 42
        usage.sklearn: 16
        usage.xarray: 3
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[int, slice[None, None, None], slice[None, None, None]], /
    ):
        """
        usage.scipy: 8
        usage.skimage: 3
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            int, slice[None, None, None], slice[int, int, int], slice[int, int, int]
        ],
        /,
    ):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None], slice[None, None, None], slice[None, None, None]
        ],
        /,
    ):
        """
        usage.skimage: 3
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, None, None], slice[None, None, None], None], /
    ):
        """
        usage.dask: 2
        usage.matplotlib: 1
        usage.scipy: 9
        usage.skimage: 5
        usage.sklearn: 17
        usage.xarray: 4
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None], slice[None, None, None], slice[int, int, int]
        ],
        /,
    ):
        """
        usage.matplotlib: 1
        usage.scipy: 13
        usage.skimage: 3
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, int, slice[int, int, int]], /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, int, None], slice[None, None, None]], /
    ):
        """
        usage.matplotlib: 11
        usage.scipy: 28
        usage.skimage: 33
        usage.sklearn: 30
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, None, int], slice[None, None, None]], /):
        """
        usage.matplotlib: 3
        usage.scipy: 32
        usage.skimage: 18
        usage.sklearn: 5
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[slice[int, int, int], slice[int, int, int], slice[None, None, None]],
        /,
    ):
        """
        usage.scipy: 12
        usage.skimage: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, int, numpy.int64], /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[List[int], slice[None, None, None]], /):
        """
        usage.dask: 2
        usage.scipy: 20
        usage.skimage: 1
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, slice[int, int, int]], /):
        """
        usage.matplotlib: 1
        usage.scipy: 5
        usage.skimage: 2
        usage.sklearn: 8
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: slice[None, None, None], /):
        """
        usage.dask: 13
        usage.matplotlib: 43
        usage.scipy: 333
        usage.skimage: 27
        usage.sklearn: 80
        usage.xarray: 8
        """
        ...

    @overload
    def __getitem__(self, _0: None, /):
        """
        usage.dask: 6
        usage.matplotlib: 13
        usage.scipy: 5
        usage.skimage: 5
        usage.sklearn: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, None, None], slice[None, None, None]], /
    ):
        """
        usage.dask: 4
        usage.matplotlib: 2
        usage.scipy: 50
        usage.skimage: 16
        usage.sklearn: 4
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, int, int], slice[None, int, None]], /):
        """
        usage.dask: 1
        usage.scipy: 3
        usage.skimage: 13
        usage.sklearn: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, int, int], slice[int, None, int]], /):
        """
        usage.dask: 2
        usage.matplotlib: 1
        usage.scipy: 2
        usage.skimage: 11
        usage.sklearn: 2
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None], slice[None, None, None], slice[None, None, None]
        ],
        /,
    ):
        """
        usage.scipy: 23
        usage.skimage: 5
        usage.sklearn: 3
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, None, None], slice[None, None, None], int, int], /
    ):
        """
        usage.skimage: 17
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[numpy.int64, int], /):
        """
        usage.scipy: 1
        usage.skimage: 2
        usage.sklearn: 2
        """
        ...

    @overload
    def __getitem__(self, _0: List[int], /):
        """
        usage.dask: 6
        usage.matplotlib: 11
        usage.scipy: 88
        usage.skimage: 1
        usage.sklearn: 9
        usage.xarray: 12
        """
        ...

    @overload
    def __getitem__(self, _0: slice[None, numpy.int64, None], /):
        """
        usage.matplotlib: 3
        usage.scipy: 54
        usage.skimage: 2
        usage.sklearn: 15
        """
        ...

    @overload
    def __getitem__(self, _0: slice[numpy.int64, None, numpy.int64], /):
        """
        usage.matplotlib: 3
        usage.scipy: 29
        usage.skimage: 4
        usage.sklearn: 3
        """
        ...

    @overload
    def __getitem__(self, _0: dask.array.core.Array, /):
        """
        usage.skimage: 4
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[numpy.int64, None, numpy.int64],
            slice[numpy.int64, None, numpy.int64],
            slice[numpy.int64, None, numpy.int64],
        ],
        /,
    ):
        """
        usage.skimage: 3
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["data"], /):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["row"], /):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["column"], /):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, None, None], numpy.ndarray], /):
        """
        usage.dask: 6
        usage.scipy: 142
        usage.skimage: 8
        usage.sklearn: 130
        usage.xarray: 5
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[numpy.ndarray, slice[None, None, None]], /):
        """
        usage.skimage: 1
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[numpy.int64, numpy.int64, numpy.int64], /):
        """
        usage.skimage: 5
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, None, None], numpy.int64], /):
        """
        usage.scipy: 26
        usage.skimage: 4
        usage.sklearn: 17
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[numpy.int64, slice[None, None, None]], /):
        """
        usage.scipy: 2
        usage.skimage: 2
        usage.sklearn: 2
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[int, numpy.int64, int], slice[None, None, None]], /
    ):
        """
        usage.matplotlib: 1
        usage.skimage: 1
        """
        ...

    @overload
    def __getitem__(self, _0: slice[int, numpy.int64, int], /):
        """
        usage.matplotlib: 1
        usage.scipy: 10
        usage.skimage: 1
        usage.sklearn: 7
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[numpy.int64, numpy.int64, numpy.int64], slice[None, None, None]
        ],
        /,
    ):
        """
        usage.matplotlib: 1
        usage.skimage: 1
        usage.sklearn: 4
        """
        ...

    @overload
    def __getitem__(self, _0: slice[numpy.int64, numpy.int64, numpy.int64], /):
        """
        usage.dask: 4
        usage.matplotlib: 5
        usage.scipy: 104
        usage.skimage: 1
        usage.sklearn: 13
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[slice[numpy.int64, int, numpy.int64], slice[None, None, None]],
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __getitem__(self, _0: slice[numpy.int64, int, numpy.int64], /):
        """
        usage.skimage: 1
        usage.sklearn: 2
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[Tuple[int, int, int, int, int], slice[None, None, None]], /
    ):
        """
        usage.matplotlib: 1
        usage.skimage: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[Tuple[int, int, int], slice[None, None, None]], /):
        """
        usage.matplotlib: 3
        usage.skimage: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            Tuple[int, int, int, int, int, int, int, int, int, int],
            slice[None, None, None],
        ],
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, None, None], slice[None, None, None]], /
    ):
        """
        usage.matplotlib: 1
        usage.scipy: 5
        usage.skimage: 2
        usage.sklearn: 1
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, None, None], slice[None, None, None]], /
    ):
        """
        usage.matplotlib: 1
        usage.scipy: 26
        usage.skimage: 3
        usage.sklearn: 14
        usage.xarray: 3
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, int, None], int], /):
        """
        usage.scipy: 19
        usage.skimage: 13
        usage.sklearn: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, int, int], int, None], /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, None, None], int, None], /):
        """
        usage.matplotlib: 6
        usage.scipy: 12
        usage.skimage: 3
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[numpy.int64, numpy.int64, numpy.int64],
            slice[numpy.int64, numpy.int64, numpy.int64],
            slice[numpy.int64, numpy.int64, numpy.int64],
            slice[numpy.int64, numpy.int64, numpy.int64],
            slice[numpy.int64, numpy.int64, numpy.int64],
        ],
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[numpy.ndarray], /):
        """
        usage.dask: 6
        usage.scipy: 16
        usage.skimage: 6
        usage.sklearn: 3
        usage.xarray: 14
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[None, ...], /):
        """
        usage.dask: 34
        usage.scipy: 34
        usage.skimage: 1
        usage.xarray: 5
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, int, int]], /):
        """
        usage.dask: 47
        usage.scipy: 31
        usage.skimage: 1
        usage.sklearn: 1
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int], /):
        """
        usage.dask: 6
        usage.matplotlib: 5
        usage.scipy: 63
        usage.skimage: 1
        usage.sklearn: 1
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, int, int, int], /):
        """
        usage.dask: 3
        usage.scipy: 1
        usage.skimage: 2
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
        ],
        /,
    ):
        """
        usage.dask: 8
        usage.scipy: 1
        usage.skimage: 1
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, int, int, int, int], /):
        """
        usage.scipy: 1
        usage.skimage: 1
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
        ],
        /,
    ):
        """
        usage.dask: 5
        usage.skimage: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[numpy.int64, numpy.int64, numpy.int64]], /):
        """
        usage.dask: 1
        usage.scipy: 5
        usage.skimage: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, None, int], slice[int, None, int]], /):
        """
        usage.dask: 2
        usage.matplotlib: 4
        usage.scipy: 49
        usage.skimage: 12
        usage.sklearn: 2
        usage.xarray: 3
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, None, int], slice[None, int, None]], /):
        """
        usage.matplotlib: 3
        usage.scipy: 26
        usage.skimage: 11
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, int, None], slice[int, None, int]], /):
        """
        usage.matplotlib: 3
        usage.scipy: 24
        usage.skimage: 11
        usage.sklearn: 2
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, None, None], slice[None, None, None]], /
    ):
        """
        usage.matplotlib: 1
        usage.scipy: 21
        usage.skimage: 4
        usage.sklearn: 5
        usage.xarray: 9
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[numpy.int64, numpy.int64, numpy.int64],
            slice[numpy.int64, numpy.int64, numpy.int64],
            slice[numpy.int64, numpy.int64, numpy.int64],
        ],
        /,
    ):
        """
        usage.scipy: 2
        usage.skimage: 3
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, int, None], ellipsis], /):
        """
        usage.scipy: 1
        usage.skimage: 1
        usage.xarray: 7
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None], slice[None, None, None], slice[None, None, None]
        ],
        /,
    ):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[numpy.int64, numpy.int64, numpy.int64],
            slice[numpy.int64, numpy.int64, numpy.int64],
            slice[None, None, None],
        ],
        /,
    ):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[numpy.int64, numpy.int64, numpy.int64, numpy.int64], /
    ):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[int, int, slice[int, int, int], slice[None, None, None]], /
    ):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[int, int, slice[None, None, None], slice[int, int, int]], /
    ):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[int, None, int], slice[None, None, None], slice[None, None, None]
        ],
        /,
    ):
        """
        usage.dask: 4
        usage.scipy: 9
        usage.skimage: 2
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            int,
            int,
            slice[int, int, int],
            slice[None, None, None],
            slice[None, None, None],
        ],
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None], slice[int, None, int], slice[None, None, None]
        ],
        /,
    ):
        """
        usage.dask: 4
        usage.scipy: 16
        usage.skimage: 2
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            int,
            int,
            slice[None, None, None],
            slice[int, int, int],
            slice[None, None, None],
        ],
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None], slice[None, None, None], slice[int, None, int]
        ],
        /,
    ):
        """
        usage.dask: 4
        usage.matplotlib: 1
        usage.scipy: 14
        usage.skimage: 2
        usage.sklearn: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            int,
            int,
            slice[None, None, None],
            slice[None, None, None],
            slice[int, int, int],
        ],
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[int, slice[int, int, int], slice[None, None, None]], /
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[int, slice[None, None, None], slice[int, int, int]], /
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, int, None],
            slice[None, int, None],
            None,
            slice[None, None, None],
        ],
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            int,
            slice[None, None, None],
        ],
        /,
    ):
        """
        usage.scipy: 2
        usage.skimage: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            int, slice[int, int, int], slice[None, None, None], slice[None, None, None]
        ],
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            int, slice[None, None, None], slice[int, int, int], slice[None, None, None]
        ],
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            int, slice[None, None, None], slice[None, None, None], slice[int, int, int]
        ],
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, None, int]], /):
        """
        usage.dask: 3
        usage.scipy: 44
        usage.skimage: 1
        usage.xarray: 9
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[int, None, int],
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
        ],
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            int,
            slice[int, int, int],
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
        ],
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[int, None, int],
            slice[None, None, None],
            slice[None, None, None],
        ],
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            int,
            slice[None, None, None],
            slice[int, int, int],
            slice[None, None, None],
            slice[None, None, None],
        ],
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            slice[int, None, int],
            slice[None, None, None],
        ],
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            int,
            slice[None, None, None],
            slice[None, None, None],
            slice[int, int, int],
            slice[None, None, None],
        ],
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            slice[int, None, int],
        ],
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            int,
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            slice[int, int, int],
        ],
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, None, None], /):
        """
        usage.dask: 2
        usage.scipy: 1
        usage.skimage: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, int, None]], /):
        """
        usage.dask: 4
        usage.scipy: 29
        usage.skimage: 2
        usage.xarray: 9
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, int, None], slice[None, int, None], slice[None, int, None]
        ],
        /,
    ):
        """
        usage.dask: 2
        usage.scipy: 6
        usage.skimage: 5
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, int, None],
            slice[None, int, None],
            slice[None, int, None],
            slice[None, int, None],
        ],
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[numpy.int64, None, numpy.int64], slice[numpy.int64, None, numpy.int64]
        ],
        /,
    ):
        """
        usage.skimage: 3
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[numpy.int64, None, numpy.int64],
            slice[numpy.int64, None, numpy.int64],
            slice[numpy.int64, None, numpy.int64],
        ],
        /,
    ):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, None, int], slice[int, int, int]], /):
        """
        usage.dask: 2
        usage.matplotlib: 1
        usage.scipy: 1
        usage.skimage: 10
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, int, None], slice[int, int, int]], /):
        """
        usage.scipy: 5
        usage.skimage: 12
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, slice[int, None, int]], /):
        """
        usage.scipy: 5
        usage.skimage: 2
        usage.sklearn: 2
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            None,
            slice[None, None, None],
        ],
        /,
    ):
        """
        usage.dask: 2
        usage.skimage: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[None, ellipsis, None], /):
        """
        usage.dask: 1
        usage.skimage: 2
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, int, None], slice[None, int, None], slice[int, None, int]
        ],
        /,
    ):
        """
        usage.skimage: 4
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, int, None], slice[int, None, int], slice[None, int, None]
        ],
        /,
    ):
        """
        usage.skimage: 4
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[slice[None, int, None], slice[int, None, int], slice[int, None, int]],
        /,
    ):
        """
        usage.skimage: 4
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[int, None, int], slice[None, int, None], slice[None, int, None]
        ],
        /,
    ):
        """
        usage.skimage: 4
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[slice[int, None, int], slice[None, int, None], slice[int, None, int]],
        /,
    ):
        """
        usage.skimage: 4
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[slice[int, None, int], slice[int, None, int], slice[None, int, None]],
        /,
    ):
        """
        usage.skimage: 4
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[slice[int, None, int], slice[int, None, int], slice[int, None, int]],
        /,
    ):
        """
        usage.dask: 1
        usage.skimage: 4
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None], slice[None, None, None], slice[None, None, None]
        ],
        /,
    ):
        """
        usage.scipy: 6
        usage.skimage: 3
        usage.xarray: 5
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[numpy.int64, None, numpy.int64], slice[numpy.int64, None, numpy.int64]
        ],
        /,
    ):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, int, int], int], /):
        """
        usage.dask: 1
        usage.matplotlib: 4
        usage.scipy: 5
        usage.skimage: 2
        usage.sklearn: 22
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, numpy.ndarray], /):
        """
        usage.scipy: 7
        usage.skimage: 1
        usage.sklearn: 16
        """
        ...

    @overload
    def __getitem__(self, _0: List[numpy.int64], /):
        """
        usage.scipy: 1
        usage.skimage: 10
        usage.sklearn: 28
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, ellipsis], /):
        """
        usage.scipy: 3
        usage.skimage: 2
        usage.xarray: 12
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, None, int], int, int], /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, None, None]], /):
        """
        usage.dask: 3
        usage.scipy: 20
        usage.skimage: 1
        usage.sklearn: 1
        usage.xarray: 4
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, None, None]], /):
        """
        usage.dask: 1
        usage.scipy: 8
        usage.xarray: 15
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, None, None], slice[None, None, None], ellipsis], /
    ):
        """
        usage.xarray: 9
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, None, None], ellipsis], /):
        """
        usage.xarray: 17
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis], /):
        """
        usage.dask: 1
        usage.xarray: 16
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, None, int], ellipsis], /):
        """
        usage.xarray: 7
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
        ],
        /,
    ):
        """
        usage.dask: 1
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            ellipsis,
        ],
        /,
    ):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            ellipsis,
        ],
        /,
    ):
        """
        usage.xarray: 4
        """
        ...

    @overload
    def __getitem__(self, _0: ellipsis, /):
        """
        usage.scipy: 13
        usage.xarray: 9
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, int, None], numpy.ndarray], /):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, slice[None, None, None], ellipsis], /):
        """
        usage.xarray: 4
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, None, None], slice[None, None, None], ellipsis], /
    ):
        """
        usage.xarray: 4
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, int, ellipsis], /):
        """
        usage.xarray: 7
        """
        ...

    @overload
    def __getitem__(self, _0: slice[int, int, int], /):
        """
        usage.matplotlib: 2
        usage.scipy: 24
        usage.sklearn: 3
        usage.xarray: 5
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, int, int], ellipsis], /):
        """
        usage.xarray: 3
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, int, int], numpy.ndarray], /):
        """
        usage.dask: 1
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, None, None], slice[None, None, None], ellipsis], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[None, None], /):
        """
        usage.dask: 1
        usage.scipy: 1
        usage.xarray: 4
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[int, int, int], slice[None, None, None], ellipsis], /
    ):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, None, None], slice[int, int, int], ellipsis], /
    ):
        """
        usage.xarray: 6
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, None, None], int, ellipsis], /):
        """
        usage.xarray: 5
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, int, int], ellipsis], /):
        """
        usage.xarray: 4
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, int, None], slice[None, int, None], ellipsis], /
    ):
        """
        usage.xarray: 3
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[int, int, int], slice[None, int, None], ellipsis], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, int, None], slice[int, int, int], ellipsis], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[int, int, int], slice[int, int, int], ellipsis], /
    ):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[int, int, int],
            slice[int, int, int],
            ellipsis,
        ],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[int, int, int], slice[int, int, int], slice[int, int, int], ellipsis
        ],
        /,
    ):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[int, int, int], int, slice[int, int, int], ellipsis], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, None, None], numpy.ndarray, numpy.ndarray], /
    ):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, int, int], int, int, ellipsis], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[None], /):
        """
        usage.dask: 1
        usage.xarray: 6
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[numpy.ndarray, slice[None, None, None], slice[None, None, None]],
        /,
    ):
        """
        usage.dask: 2
        usage.xarray: 6
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[int, slice[None, None, None], slice[None, None, None], ellipsis],
        /,
    ):
        """
        usage.xarray: 3
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, None, None], int, int, ellipsis], /):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, int, int, ellipsis], /):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, slice[int, int, int], int, ellipsis], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, int, slice[int, int, int], ellipsis], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[slice[None, None, None], numpy.ndarray, slice[None, None, None]],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[slice[None, None, None], slice[None, None, None], numpy.ndarray],
        /,
    ):
        """
        usage.dask: 1
        usage.xarray: 5
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, int, None], slice[None, None, None], ellipsis], /
    ):
        """
        usage.xarray: 3
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, slice[None, int, None], ellipsis], /):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[int, None, int], slice[int, None, int], ellipsis], /
    ):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, None, None], slice[None, int, None], ellipsis], /
    ):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[int, slice[None, int, None], slice[None, None, None], ellipsis],
        /,
    ):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[int, slice[int, None, int], slice[None, None, None], ellipsis],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, slice[int, None, int], ellipsis], /):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[None, slice[None, None, None], slice[None, None, None]], /
    ):
        """
        usage.dask: 1
        usage.scipy: 5
        usage.sklearn: 7
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[int, None, int], slice[None, None, None], ellipsis], /
    ):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, None, None], slice[int, None, int], ellipsis], /
    ):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, int, None], int, ellipsis], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[List[List[int]], slice[None, None, None]], /):
        """
        usage.xarray: 5
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[None, None, None], /):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, None, None], List[int], List[int]], /):
        """
        usage.xarray: 3
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, None, None], slice[None, None, None], ellipsis], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, int, int], numpy.ndarray], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[numpy.ndarray, numpy.ndarray, slice[None, None, None]], /
    ):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[int, int, slice[None, None, None], slice[None, None, None], ellipsis],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[slice[None, None, None], int, int, slice[None, None, None], ellipsis],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[slice[None, None, None], slice[None, None, None], int, int, ellipsis],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[int, slice[None, None, None], int, slice[None, None, None], ellipsis],
        /,
    ):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[int, None, int], slice[None, None, None], ellipsis], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[numpy.int64], /):
        """
        usage.scipy: 2
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            slice[int, int, int],
            ellipsis,
        ],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            slice[int, None, int],
            ellipsis,
        ],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[int, int, int],
            slice[None, None, None],
            slice[None, None, None],
            ellipsis,
        ],
        /,
    ):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[slice[None, None, None], slice[None, None, None], int, ellipsis],
        /,
    ):
        """
        usage.xarray: 4
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[int, int, int],
            slice[None, None, None],
            ellipsis,
        ],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[slice[None, None, None], int, slice[None, None, None], ellipsis],
        /,
    ):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            ellipsis,
        ],
        /,
    ):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, None, None], slice[int, int, int], ellipsis], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, None, None], slice[int, int, int]], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, None, None], slice[None, int, None], ellipsis], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, int, None], slice[None, None, None], ellipsis], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[int, int, int], slice[None, None, None], ellipsis], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, None, None], ellipsis], /):
        """
        usage.scipy: 2
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, int, None], slice[int, None, int], ellipsis], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, slice[None, None, None], int, ellipsis], /):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[int, None, int],
            slice[None, None, None],
            slice[None, None, None],
            ellipsis,
        ],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            ellipsis,
        ],
        /,
    ):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            ellipsis,
        ],
        /,
    ):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, None, int], None], /):
        """
        usage.scipy: 1
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, int, None], None], /):
        """
        usage.scipy: 3
        usage.sklearn: 4
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None], slice[None, None, None], slice[None, None, None]
        ],
        /,
    ):
        """
        usage.dask: 4
        usage.scipy: 1
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[int, slice[None, int, None], slice[None, None, None]], /
    ):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, int, None], slice[None, None, None], slice[None, None, None]
        ],
        /,
    ):
        """
        usage.dask: 5
        usage.scipy: 19
        usage.xarray: 3
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[int, slice[int, None, int], slice[None, None, None]], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[int, None, int],
            slice[int, None, int],
            slice[int, None, int],
            slice[int, None, int],
        ],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
        ],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, slice[None, None, None], int], /):
        """
        usage.dask: 1
        usage.scipy: 9
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            int,
            slice[None, None, None],
            int,
            slice[None, None, None],
            slice[None, None, None],
        ],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            int,
        ],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, int, None], ellipsis, int], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, int, None],
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            int,
        ],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, int, slice[None, None, None]], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            int,
            slice[None, None, None],
        ],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            numpy.ndarray,
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
        ],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            numpy.ndarray,
            numpy.ndarray,
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
        ],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, numpy.ndarray, numpy.ndarray], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            numpy.ndarray,
            numpy.ndarray,
        ],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, int, int, int, int, int], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: slice[numpy.int64, numpy.int64, numpy.int64], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: slice[numpy.int64, None, numpy.int64], /):
        """
        usage.sklearn: 2
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: slice[None, int, None], /):
        """
        usage.dask: 1
        usage.scipy: 12
        usage.xarray: 4
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            slice[None, int, None],
            ellipsis,
        ],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            slice[int, int, int],
            ellipsis,
        ],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[slice[None, None, None], int, slice[None, int, None], ellipsis],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, None, None], int, slice[int, int, int], ellipsis], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, int, None],
            slice[None, None, None],
            ellipsis,
        ],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[int, int, int],
            slice[None, None, None],
            ellipsis,
        ],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[slice[None, None, None], slice[None, int, None], int, ellipsis],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, None, None], slice[int, int, int], int, ellipsis], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, int, None],
            slice[None, int, None],
            ellipsis,
        ],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[int, int, int],
            slice[int, int, int],
            ellipsis,
        ],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[slice[None, None, None], slice[None, int, None], numpy.ndarray],
        /,
    ):
        """
        usage.xarray: 3
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, None, None], slice[int, int, int], numpy.ndarray], /
    ):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[slice[None, None, None], numpy.ndarray, slice[None, None, None]],
        /,
    ):
        """
        usage.dask: 2
        usage.xarray: 4
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[slice[None, None, None], numpy.ndarray, slice[None, int, None]],
        /,
    ):
        """
        usage.xarray: 3
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, None, None], numpy.ndarray, slice[int, int, int]], /
    ):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[int, slice[None, None, None], slice[None, int, None], ellipsis],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[int, slice[None, None, None], slice[int, int, int], ellipsis], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, int, slice[None, None, None], ellipsis], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, int, slice[None, int, None], ellipsis], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, int, slice[int, int, int], ellipsis], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[int, slice[int, int, int], slice[None, None, None], ellipsis], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, slice[None, int, None], int, ellipsis], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, slice[int, int, int], int, ellipsis], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[int, slice[None, int, None], slice[None, int, None], ellipsis],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[int, slice[int, int, int], slice[int, int, int], ellipsis], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, int, None],
            slice[None, None, None],
            slice[None, None, None],
            ellipsis,
        ],
        /,
    ):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[int, int, int],
            slice[None, None, None],
            slice[None, None, None],
            ellipsis,
        ],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[slice[None, int, None], slice[None, None, None], int, ellipsis],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[int, int, int], slice[None, None, None], int, ellipsis], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, int, None],
            slice[None, None, None],
            slice[None, int, None],
            ellipsis,
        ],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[int, int, int],
            slice[None, None, None],
            slice[int, int, int],
            ellipsis,
        ],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[slice[None, int, None], slice[None, None, None], numpy.ndarray],
        /,
    ):
        """
        usage.xarray: 3
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[int, int, int], slice[None, None, None], numpy.ndarray], /
    ):
        """
        usage.dask: 1
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[slice[None, int, None], int, slice[None, None, None], ellipsis],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[int, int, int], int, slice[None, None, None], ellipsis], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, int, None], int, int, ellipsis], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, int, int], int, int, ellipsis], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[slice[None, int, None], int, slice[None, int, None], ellipsis],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[int, int, int], int, slice[int, int, int], ellipsis], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, int, None],
            slice[None, int, None],
            slice[None, None, None],
            ellipsis,
        ],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[int, int, int],
            slice[int, int, int],
            slice[None, None, None],
            ellipsis,
        ],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[slice[None, int, None], slice[None, int, None], int, ellipsis],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[int, int, int], slice[int, int, int], int, ellipsis], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, int, None],
            slice[None, int, None],
            slice[None, int, None],
            ellipsis,
        ],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[int, int, int], slice[int, int, int], slice[int, int, int], ellipsis
        ],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[slice[None, int, None], slice[None, int, None], numpy.ndarray],
        /,
    ):
        """
        usage.xarray: 3
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[int, int, int], slice[int, int, int], numpy.ndarray], /
    ):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[slice[None, int, None], numpy.ndarray, slice[None, None, None]],
        /,
    ):
        """
        usage.xarray: 3
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[int, int, int], numpy.ndarray, slice[None, None, None]], /
    ):
        """
        usage.dask: 1
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[slice[None, int, None], numpy.ndarray, slice[None, int, None]],
        /,
    ):
        """
        usage.xarray: 3
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[int, int, int], numpy.ndarray, slice[int, int, int]], /
    ):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[numpy.ndarray, slice[None, None, None], slice[None, int, None]],
        /,
    ):
        """
        usage.xarray: 3
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[numpy.ndarray, slice[None, None, None], slice[int, int, int]], /
    ):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[numpy.ndarray, slice[None, int, None], slice[None, None, None]],
        /,
    ):
        """
        usage.xarray: 3
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[numpy.ndarray, slice[int, int, int], slice[None, None, None]], /
    ):
        """
        usage.dask: 1
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[numpy.ndarray, slice[None, int, None], slice[None, int, None]],
        /,
    ):
        """
        usage.xarray: 3
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[numpy.ndarray, slice[int, int, int], slice[int, int, int]], /
    ):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, int, int], int, ellipsis], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[slice[None, None, None], int, slice[None, int, None], ellipsis],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[numpy.ndarray, numpy.ndarray, slice[int, int, int]], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[numpy.ndarray, slice[int, int, int], numpy.ndarray], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[numpy.ndarray, slice[None, None, None], numpy.ndarray], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[int, int, int], numpy.ndarray, numpy.ndarray], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[slice[int, int, int], slice[int, int, int], slice[int, int, int]],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[slice[int, int, int], slice[int, int, int], slice[None, None, None]],
        /,
    ):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[slice[int, int, int], slice[None, None, None], slice[int, int, int]],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[int, int, int], slice[None, None, None], slice[None, None, None]
        ],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[slice[None, None, None], slice[int, int, int], slice[int, int, int]],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None], slice[int, int, int], slice[None, None, None]
        ],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None], slice[None, None, None], slice[int, int, int]
        ],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[int, int, int], int, slice[None, None, None], ellipsis], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, int, int], int, ellipsis], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[int, int, int], numpy.ndarray, slice[int, int, int]], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[int, slice[int, int, int], slice[int, int, int], ellipsis], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, slice[int, int, int], ellipsis], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None], slice[None, None, None], slice[None, None, None]
        ],
        /,
    ):
        """
        usage.dask: 4
        usage.scipy: 1
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[int, int, int], slice[int, int, int], ellipsis], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[int, slice[int, int, int], slice[int, int, int]], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[numpy.ndarray, slice[int, int, int], slice[int, int, int]], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[numpy.ndarray, slice[int, int, int]], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, None, None], int, slice[None, int, None]], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None], slice[None, int, None], slice[None, None, None]
        ],
        /,
    ):
        """
        usage.dask: 5
        usage.scipy: 25
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, None, None], slice[None, int, None], int], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None], slice[None, int, None], slice[None, int, None]
        ],
        /,
    ):
        """
        usage.dask: 1
        usage.scipy: 2
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[int, slice[None, None, None], slice[None, int, None]], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[numpy.ndarray, numpy.ndarray, slice[None, int, None]], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[numpy.ndarray, slice[None, int, None], numpy.ndarray], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[int, slice[None, int, None], slice[None, int, None]], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, int, None], slice[None, None, None], int], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, int, None], slice[None, None, None], slice[None, int, None]
        ],
        /,
    ):
        """
        usage.dask: 1
        usage.scipy: 2
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, int, None], int, slice[None, None, None]], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, int, None], numpy.ndarray, numpy.ndarray], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, int, None], int, slice[None, int, None]], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, int, None], slice[None, int, None], slice[None, None, None]
        ],
        /,
    ):
        """
        usage.dask: 1
        usage.scipy: 2
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, int, None], slice[None, int, None], int], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, None, None], None, None], /):
        """
        usage.dask: 5
        usage.matplotlib: 1
        usage.scipy: 19
        usage.sklearn: 3
        usage.xarray: 4
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[int, int, int],
            slice[int, int, int],
            slice[None, None, None],
            ellipsis,
        ],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[int, int, int],
            slice[None, None, None],
            slice[int, int, int],
            ellipsis,
        ],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[List[int], List[int]], /):
        """
        usage.dask: 9
        usage.xarray: 4
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[List[int], List[int], slice[None, None, None]], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[List[int], slice[None, None, None], List[int]], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            int,
            int,
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            ellipsis,
        ],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[int, slice[None, None, None], slice[None, None, None], int, ellipsis],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            int,
            ellipsis,
        ],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            int,
            slice[None, None, None],
            int,
            int,
            slice[None, None, None],
            ellipsis,
        ],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[Tuple[List[int], List[int]], ellipsis], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[numpy.ndarray, slice[None, None, None], numpy.ndarray, numpy.ndarray],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            int,
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            ellipsis,
        ],
        /,
    ):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            int,
            slice[None, None, None],
            ellipsis,
        ],
        /,
    ):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, None, None], Tuple[List[int], List[int]]], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, None, None], xarray.core.variable.Variable], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, None, None], List[List[int]]], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[numpy.ndarray, slice[None, int, None]], /):
        """
        usage.scipy: 1
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[List[List[int]], slice[None, int, None]], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: list, /):
        """
        usage.dask: 1
        usage.scipy: 3
        usage.sklearn: 4
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[xarray.core.variable.Variable, xarray.core.variable.Variable], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: object, /):
        """
        usage.pandas: 2206
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, None, int], int], /):
        """
        usage.matplotlib: 1
        usage.scipy: 14
        usage.sklearn: 2
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[slice[int, int, int], slice[None, None, None], slice[int, int, int]],
        /,
    ):
        """
        usage.dask: 1
        usage.scipy: 8
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[slice[None, None, None], slice[int, int, int], slice[int, int, int]],
        /,
    ):
        """
        usage.scipy: 13
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None], slice[int, int, int], slice[None, None, None]
        ],
        /,
    ):
        """
        usage.scipy: 28
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[int, int, int], slice[None, None, None], slice[None, None, None]
        ],
        /,
    ):
        """
        usage.scipy: 13
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, None, None], int, int], /):
        """
        usage.dask: 2
        usage.matplotlib: 46
        usage.scipy: 27
        usage.sklearn: 13
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            slice[int, int, int],
        ],
        /,
    ):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            slice[int, int, int],
            slice[None, None, None],
        ],
        /,
    ):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
            slice[None, None, None],
        ],
        /,
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, None, int], slice[None, None, None]], /):
        """
        usage.scipy: 10
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, None, None], slice[int, None, int]], /):
        """
        usage.matplotlib: 3
        usage.scipy: 6
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, int, int]], /):
        """
        usage.scipy: 13
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, None, None], None, None, None], /):
        """
        usage.scipy: 7
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, int, int, int], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, None, None], None, None, None, None, None], /
    ):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[None, slice[None, None, None], None, None, None, None], /
    ):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, None, None], None], /):
        """
        usage.scipy: 8
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, None, None], None, None, None, None], /
    ):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, numpy.int64], /):
        """
        usage.scipy: 2
        usage.sklearn: 4
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, None], /):
        """
        usage.scipy: 4
        usage.sklearn: 6
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[None, slice[None, None, None], None, None, None], /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[None, slice[None, None, None], None, None], /):
        """
        usage.dask: 1
        usage.scipy: 5
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, int, numpy.int64, numpy.int64], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[int, int, int, numpy.int64, numpy.int64, numpy.int64], /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            int, int, int, int, numpy.int64, numpy.int64, numpy.int64, numpy.int64
        ],
        /,
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[None, None, slice[None, None, None], None, None, None], /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[None, None, slice[None, None, None], None], /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[None, None, None, slice[None, None, None]], /):
        """
        usage.dask: 1
        usage.scipy: 3
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[None, slice[None, None, None], None], /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, None, slice[None, None, None]], /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            int,
        ],
        /,
    ):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, slice[None, None, None], None], /):
        """
        usage.scipy: 2
        usage.sklearn: 2
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, int, None], None, slice[None, None, None]], /
    ):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["yop"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["yap"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["attr_year"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["attr_month"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["attr_date"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["attr_datetime_local"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: str, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["attr_date_number"], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["attr_relational"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["age"], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["smoker"], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(self, _0: slice[None, numpy.int32, None], /):
        """
        usage.scipy: 26
        usage.sklearn: 7
        """
        ...

    @overload
    def __getitem__(self, _0: slice[numpy.int32, numpy.int32, numpy.int32], /):
        """
        usage.scipy: 59
        usage.sklearn: 42
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["description"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["version"], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["namlen"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["mopt"], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["mrows"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["ncols"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["imagf"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["a"], /):
        """
        usage.dask: 1
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["f0"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["f1"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["f2"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["f3"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, int, int, int, int, int], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, int, int, int, int, int, int], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, int, int, int, int, int, int, int], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["temp"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["rh"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["time"], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["testData"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, None, None], slice[None, numpy.int64, None]], /
    ):
        """
        usage.scipy: 9
        usage.sklearn: 4
        """
        ...

    @overload
    def __getitem__(self, _0: List[Union[numpy.int64, int]], /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __getitem__(self, _0: slice[int, numpy.longlong, int], /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __getitem__(self, _0: numpy.longlong, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[slice[numpy.int64, None, numpy.int64], slice[None, None, None]],
        /,
    ):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[List[Union[numpy.int64, int]], slice[int, int, int]], /
    ):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, None, int], slice[int, None, int]], /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, slice[None, numpy.int64, None]], /):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[numpy.int64, slice[int, int, int]], /):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, None, None], List[Union[int, numpy.int64]]], /
    ):
        """
        usage.scipy: 8
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[ellipsis, slice[None, None, None], None, slice[None, None, None]],
        /,
    ):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[ellipsis, None, slice[None, None, None], slice[None, None, None]],
        /,
    ):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(self, _0: List[Union[int, numpy.int64]], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[List[Union[int, numpy.int64]], slice[None, None, None]], /
    ):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, None, None], range, range], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(self, _0: numpy.int32, /):
        """
        usage.matplotlib: 2
        usage.scipy: 34
        usage.sklearn: 1
        """
        ...

    @overload
    def __getitem__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, int, None], numpy.int64], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[numpy.int64, numpy.ndarray], /):
        """
        usage.scipy: 1
        usage.sklearn: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, None, int], slice[None, None, None]], /):
        """
        usage.scipy: 1
        usage.sklearn: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, None, None], slice[int, int, int]], /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, int, int], slice[None, None, None]], /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, None, None], int, int, int], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[slice[None, None, None], slice[numpy.int64, None, numpy.int64]],
        /,
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, numpy.int64, None], slice[None, None, None]], /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, int, None], slice[None, None, None], None], /
    ):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, None, None], numpy.int64, None], /):
        """
        usage.scipy: 10
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[slice[None, None, None], slice[None, None, None], None, None, None],
        /,
    ):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[int, int, int],
            slice[None, None, None],
            slice[None, None, None],
            slice[int, int, int],
        ],
        /,
    ):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, int, None],
            slice[None, int, None],
            slice[None, int, None],
            slice[None, int, None],
            slice[None, int, None],
        ],
        /,
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[int, int, int],
            slice[None, None, None],
            slice[int, int, int],
        ],
        /,
    ):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[int, int, int],
            slice[None, None, None],
            slice[int, int, int],
            slice[None, None, None],
        ],
        /,
    ):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            slice[int, int, int],
            slice[None, None, None],
            slice[int, int, int],
        ],
        /,
    ):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None], slice[None, None, None], slice[None, None, None]
        ],
        /,
    ):
        """
        usage.dask: 4
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[numpy.int64, int, numpy.int64]], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, numpy.int64, int]], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            List[int],
        ],
        /,
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, None, None], int, int, slice[None, None, None]], /
    ):
        """
        usage.scipy: 6
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[ellipsis, slice[None, int, None], slice[None, None, None]], /
    ):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None], slice[None, None, None], slice[int, None, int]
        ],
        /,
    ):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def __getitem__(self, _0: slice[numpy.int32, numpy.int64, numpy.int32], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, None, None], slice[None, numpy.int32, None]], /
    ):
        """
        usage.scipy: 6
        """
        ...

    @overload
    def __getitem__(self, _0: slice[numpy.int32, None, numpy.int32], /):
        """
        usage.scipy: 16
        usage.sklearn: 4
        """
        ...

    @overload
    def __getitem__(self, _0: slice[int, numpy.int32, int], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[numpy.int32, slice[None, None, None]], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, slice[None, None, None]], /):
        """
        usage.scipy: 1
        usage.sklearn: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, slice[int, int, int]], /):
        """
        usage.matplotlib: 2
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[range, range], /):
        """
        usage.scipy: 6
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["i"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["j"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["v"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, numpy.ndarray], /):
        """
        usage.scipy: 2
        usage.sklearn: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["ii"], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["dd"], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, None, None], int, None, slice[None, None, None]], /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[numpy.ndarray, int, int], /):
        """
        usage.matplotlib: 9
        usage.scipy: 23
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, None, None], None, int], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, int, int], None, None], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[None, None, slice[None, None, None]], /):
        """
        usage.dask: 4
        usage.scipy: 3
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
        ],
        /,
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            None,
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
        ],
        /,
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, int, int], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            int,
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
        ],
        /,
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[int, int, slice[None, None, None], slice[None, None, None]], /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[int, slice[None, None, None], slice[None, None, None], int], /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[int, slice[None, None, None], int, slice[None, None, None]], /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[int, int, int],
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
        ],
        /,
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[int, int, int],
            slice[None, None, None],
            slice[None, None, None],
        ],
        /,
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["ones"], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["twos"], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["r"], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, None, int], slice[int, None, int]], /):
        """
        usage.matplotlib: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, slice[int, None, int]], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, None, int], slice[int, int, int]], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __getitem__(self, _0: slice[numpy.int8, numpy.int64, numpy.int8], /):
        """
        usage.matplotlib: 2
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None], slice[None, None, None], slice[None, int, None]
        ],
        /,
    ):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[Tuple[int, int, int, int], slice[None, None, None]], /
    ):
        """
        usage.matplotlib: 3
        usage.sklearn: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, None, slice[None, None, None]], /):
        """
        usage.matplotlib: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[numpy.ndarray, numpy.ndarray, int], /):
        """
        usage.matplotlib: 1
        usage.sklearn: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[numpy.int32, numpy.int32], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[int, int, int], int], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[Tuple[int, int, int], Tuple[int, int, int]], /):
        """
        usage.sample-usage: 1
        """
        ...

    @overload
    def __getitem__(self, _0: List[Literal["a", "b"]], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["col1"], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: List[Literal["col1"]], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["col2"], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: List[Literal["col2", "col1"]], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["chunk-location"], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["array-location"], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, ellipsis, int], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, None, None], slice[None, None, None], List[int]], /
    ):
        """
        usage.dask: 8
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["text"], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: List[Literal["text", "numbers"]], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[List[int], slice[None, None, None], List[int], List[int]], /
    ):
        """
        usage.dask: 3
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            List[int], slice[None, None, None], List[int], slice[None, None, None]
        ],
        /,
    ):
        """
        usage.dask: 3
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            List[int], List[int], slice[None, None, None], slice[None, None, None]
        ],
        /,
    ):
        """
        usage.dask: 3
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[List[int], List[int], List[int], List[int]], /):
        """
        usage.dask: 3
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[List[int], List[int], List[int], slice[None, None, None]], /
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[list, list, list, slice[None, None, None]], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            numpy.ndarray,
            slice[None, None, None],
            numpy.ndarray,
            slice[None, None, None],
        ],
        /,
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None], slice[None, None, None], List[int], List[int]
        ],
        /,
    ):
        """
        usage.dask: 3
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None], List[int], slice[None, None, None], List[int]
        ],
        /,
    ):
        """
        usage.dask: 4
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, int, None], slice[None, None, None]], /
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[List[List[int]], List[List[int]]], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[List[int]], /):
        """
        usage.dask: 4
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[None, slice[None, None, None], slice[None, None, None], None], /
    ):
        """
        usage.dask: 4
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, None, None], None, slice[None, None, None], None], /
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, None, None, None], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            None,
            slice[None, None, None],
            slice[None, None, None],
        ],
        /,
    ):
        """
        usage.dask: 2
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            None,
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
        ],
        /,
    ):
        """
        usage.dask: 2
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, None, None], None, None, slice[None, None, None]], /
    ):
        """
        usage.dask: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["vals"], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["arg"], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: List[Literal["b", "a"]], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: List[Literal["A"]], /):
        """
        usage.dask: 2
        """
        ...

    @overload
    def __getitem__(self, _0: List[Literal["B", "A"]], /):
        """
        usage.dask: 2
        """
        ...

    @overload
    def __getitem__(self, _0: List[Literal["C", "B", "A"]], /):
        """
        usage.dask: 2
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
        ],
        /,
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
        ],
        /,
    ):
        """
        usage.dask: 3
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            None,
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
        ],
        /,
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[None, None, slice[None, None, None], slice[None, None, None]], /
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[None, slice[None, None, None], None, slice[None, None, None]], /
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
        ],
        /,
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[None, None, None, None, None, None, None, None, None, None], /
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[slice[int, int, int], slice[int, None, int], slice[int, None, int]],
        /,
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[slice[int, None, int], slice[int, int, int], slice[int, None, int]],
        /,
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[slice[int, None, int], slice[int, None, int], slice[int, int, int]],
        /,
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["values"], /):
        """
        usage.dask: 3
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["indices"], /):
        """
        usage.dask: 3
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["counts"], /):
        """
        usage.dask: 3
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
        ],
        /,
    ):
        """
        usage.dask: 2
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
        ],
        /,
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: List[bool], /):
        """
        usage.dask: 2
        usage.sklearn: 3
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[list, slice[None, int, None], slice[None, int, None]], /
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, int, None], list, slice[None, int, None]], /
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, int, None], slice[None, int, None], list], /
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, None, None], dask.array.core.Array], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[dask.array.core.Array, slice[None, None, None]], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[numpy.ndarray, slice[int, int, int]], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, slice[None, int, None], None, ellipsis], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[numpy.ndarray, range], /):
        """
        usage.sklearn: 3
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[numpy.ndarray, None], /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[Tuple[numpy.int64, numpy.int64]], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[range, numpy.ndarray], /):
        """
        usage.sklearn: 6
        """
        ...

    @overload
    def __getitem__(self, _0: pandas.core.series.Series, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, None, None], List[bool]], /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, None, None], list], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[None, int], /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[numpy.int64, slice[None, int, None]], /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["depth"], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["is_leaf"], /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def __getitem__(
        self, _0: sklearn.ensemble._hist_gradient_boosting.splitting._memoryviewslice, /
    ):
        """
        usage.sklearn: 6
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, numpy.uint8], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __getitem__(self, _0: numpy.uint32, /):
        """
        usage.sklearn: 5
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["count"], /):
        """
        usage.sklearn: 7
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["sum_gradients"], /):
        """
        usage.sklearn: 8
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["sum_hessians"], /):
        """
        usage.sklearn: 8
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, None, None], range], /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, None, None], int, slice[None, numpy.int64, None]], /
    ):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, None, None], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, None, None, int, None, None], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[int, None, None, int, None, None, int, None, None], /
    ):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, None, None], Tuple[int, int, int]], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[int, slice[numpy.int64, numpy.int64, numpy.int64]], /
    ):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[List[int], slice[int, None, int]], /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[List[int], int], /):
        """
        usage.sklearn: 11
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, List[int]], /):
        """
        usage.sklearn: 3
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, Tuple[int, int, int, int, int]], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[Tuple[int, int, int, int, int], int], /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[slice[None, None, None], numpy.int64, slice[None, None, None]],
        /,
    ):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            numpy.int64,
            slice[None, None, None],
        ],
        /,
    ):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[int, numpy.int64, slice[None, None, None]], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[slice[None, None, None], int, numpy.int64, slice[None, None, None]],
        /,
    ):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __getitem__(
        self,
        _0: Tuple[int, slice[None, None, None], slice[numpy.int64, None, numpy.int64]],
        /,
    ):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, None, None], Tuple[int, int, int, int]], /
    ):
        """
        usage.sklearn: 4
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[numpy.ndarray, numpy.int64], /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, None, None], Tuple[int]], /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[slice[None, None, None], int], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[range, int], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __getitem__(
        self, _0: Tuple[slice[None, None, None], pandas.core.series.Series], /
    ):
        """
        usage.sklearn: 1
        """
        ...

    def __getitem__(self, _0: object, /):
        """
        usage.dask: 654
        usage.matplotlib: 1402
        usage.pandas: 2206
        usage.sample-usage: 5
        usage.scipy: 9038
        usage.skimage: 1989
        usage.sklearn: 4815
        usage.xarray: 888
        """
        ...

    @overload
    def __gt__(self, _0: float, /):
        """
        usage.dask: 9
        usage.matplotlib: 10
        usage.scipy: 118
        usage.skimage: 13
        usage.sklearn: 58
        usage.xarray: 1
        """
        ...

    @overload
    def __gt__(self, _0: int, /):
        """
        usage.dask: 18
        usage.matplotlib: 26
        usage.sample-usage: 1
        usage.scipy: 273
        usage.skimage: 90
        usage.sklearn: 77
        usage.xarray: 9
        """
        ...

    @overload
    def __gt__(self, _0: numpy.float64, /):
        """
        usage.matplotlib: 4
        usage.scipy: 50
        usage.skimage: 14
        usage.sklearn: 20
        """
        ...

    @overload
    def __gt__(self, _0: numpy.ndarray, /):
        """
        usage.dask: 3
        usage.matplotlib: 9
        usage.scipy: 159
        usage.skimage: 18
        usage.sklearn: 18
        usage.xarray: 1
        """
        ...

    @overload
    def __gt__(self, _0: numpy.float32, /):
        """
        usage.scipy: 3
        usage.skimage: 1
        usage.sklearn: 1
        """
        ...

    @overload
    def __gt__(self, _0: numpy.uint8, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __gt__(self, _0: numpy.int64, /):
        """
        usage.matplotlib: 1
        usage.scipy: 2
        usage.skimage: 9
        """
        ...

    @overload
    def __gt__(self, _0: object, /):
        """
        usage.pandas: 82
        """
        ...

    @overload
    def __gt__(self, _0: numpy.float16, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __gt__(self, _0: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __gt__(self, _0: numpy.int8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __gt__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __gt__(self, _0: numpy.ma.core.MaskedArray, /):
        """
        usage.scipy: 1
        """
        ...

    def __gt__(self, _0: object, /):
        """
        usage.dask: 30
        usage.matplotlib: 50
        usage.pandas: 82
        usage.sample-usage: 1
        usage.scipy: 612
        usage.skimage: 146
        usage.sklearn: 174
        usage.xarray: 11
        """
        ...

    @overload
    def __iadd__(self, _0: numpy.ndarray, /):
        """
        usage.dask: 8
        usage.matplotlib: 38
        usage.scipy: 306
        usage.skimage: 78
        usage.sklearn: 161
        usage.xarray: 3
        """
        ...

    @overload
    def __iadd__(self, _0: int, /):
        """
        usage.dask: 2
        usage.matplotlib: 8
        usage.sample-usage: 1
        usage.scipy: 23
        usage.skimage: 27
        usage.sklearn: 33
        usage.xarray: 2
        """
        ...

    @overload
    def __iadd__(self, _0: float, /):
        """
        usage.matplotlib: 14
        usage.scipy: 11
        usage.skimage: 9
        usage.sklearn: 28
        """
        ...

    @overload
    def __iadd__(self, _0: numpy.int64, /):
        """
        usage.matplotlib: 2
        usage.scipy: 2
        usage.skimage: 3
        usage.sklearn: 6
        usage.xarray: 1
        """
        ...

    @overload
    def __iadd__(self, _0: numpy.float64, /):
        """
        usage.dask: 2
        usage.matplotlib: 4
        usage.scipy: 6
        usage.skimage: 3
        usage.sklearn: 29
        """
        ...

    @overload
    def __iadd__(self, _0: numpy.float16, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __iadd__(self, _0: numpy.float32, /):
        """
        usage.skimage: 1
        usage.sklearn: 3
        """
        ...

    @overload
    def __iadd__(self, _0: List[numpy.float64], /):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __iadd__(self, _0: List[int], /):
        """
        usage.matplotlib: 2
        usage.skimage: 1
        usage.sklearn: 5
        """
        ...

    @overload
    def __iadd__(self, _0: List[Union[numpy.float64, int]], /):
        """
        usage.skimage: 3
        """
        ...

    @overload
    def __iadd__(self, _0: numpy.int32, /):
        """
        usage.scipy: 1
        usage.sklearn: 1
        usage.xarray: 1
        """
        ...

    @overload
    def __iadd__(
        self,
        _0: Union[
            numpy.int64,
            pandas.core.arrays.sparse.array.SparseArray,
            numpy.ndarray,
            numpy.uint64,
            int,
        ],
        /,
    ):
        """
        usage.pandas: 13
        """
        ...

    @overload
    def __iadd__(self, _0: complex, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __iadd__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __iadd__(self, _0: numpy.complex256, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __iadd__(self, _0: scipy.sparse.csr.csr_matrix, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __iadd__(self, _0: scipy.sparse.csc.csc_matrix, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __iadd__(self, _0: scipy.sparse.dok.dok_matrix, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __iadd__(self, _0: scipy.sparse.lil.lil_matrix, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __iadd__(self, _0: scipy.sparse.coo.coo_matrix, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __iadd__(self, _0: scipy.sparse.dia.dia_matrix, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __iadd__(self, _0: scipy.sparse.bsr.bsr_matrix, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __iadd__(self, _0: Tuple[int, int, int], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __iadd__(self, _0: Tuple[float, float, float], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __iadd__(self, _0: List[Union[int, float]], /):
        """
        usage.matplotlib: 2
        """
        ...

    def __iadd__(self, _0: object, /):
        """
        usage.dask: 12
        usage.matplotlib: 70
        usage.pandas: 13
        usage.sample-usage: 1
        usage.scipy: 368
        usage.skimage: 128
        usage.sklearn: 266
        usage.xarray: 7
        """
        ...

    @overload
    def __iand__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 19
        usage.skimage: 2
        usage.sklearn: 4
        """
        ...

    @overload
    def __iand__(self, _0: Union[int, pandas.core.series.Series, numpy.ndarray], /):
        """
        usage.pandas: 4
        """
        ...

    @overload
    def __iand__(self, _0: List[numpy.bool_], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __iand__(self, _0: int, /):
        """
        usage.sample-usage: 1
        """
        ...

    def __iand__(
        self,
        _0: Union[numpy.ndarray, pandas.core.series.Series, int, List[numpy.bool_]],
        /,
    ):
        """
        usage.pandas: 4
        usage.sample-usage: 1
        usage.scipy: 20
        usage.skimage: 2
        usage.sklearn: 4
        """
        ...

    def __ifloordiv__(self, _0: int, /):
        """
        usage.sample-usage: 1
        usage.scipy: 8
        usage.skimage: 6
        """
        ...

    @overload
    def __ilshift__(self, _0: numpy.ndarray, /):
        """
        usage.pandas: 1
        """
        ...

    @overload
    def __ilshift__(self, _0: int, /):
        """
        usage.sample-usage: 1
        """
        ...

    def __ilshift__(self, _0: Union[int, numpy.ndarray], /):
        """
        usage.pandas: 1
        usage.sample-usage: 1
        """
        ...

    def __imod__(self, _0: int, /):
        """
        usage.dask: 2
        usage.sample-usage: 1
        usage.scipy: 1
        """
        ...

    @overload
    def __imul__(self, _0: numpy.ndarray, /):
        """
        usage.matplotlib: 2
        usage.scipy: 45
        usage.skimage: 16
        usage.sklearn: 77
        """
        ...

    @overload
    def __imul__(self, _0: float, /):
        """
        usage.matplotlib: 12
        usage.scipy: 50
        usage.skimage: 10
        usage.sklearn: 46
        usage.xarray: 1
        """
        ...

    @overload
    def __imul__(self, _0: numpy.float64, /):
        """
        usage.matplotlib: 4
        usage.scipy: 62
        usage.skimage: 4
        usage.sklearn: 19
        usage.xarray: 1
        """
        ...

    @overload
    def __imul__(self, _0: int, /):
        """
        usage.dask: 1
        usage.matplotlib: 9
        usage.sample-usage: 1
        usage.scipy: 60
        usage.skimage: 4
        usage.sklearn: 35
        usage.xarray: 1
        """
        ...

    @overload
    def __imul__(self, _0: numpy.uint8, /):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __imul__(self, _0: numpy.float32, /):
        """
        usage.scipy: 1
        usage.skimage: 1
        usage.sklearn: 1
        usage.xarray: 1
        """
        ...

    @overload
    def __imul__(self, _0: numpy.int16, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __imul__(self, _0: numpy.uint16, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __imul__(self, _0: Union[int, numpy.uint64], /):
        """
        usage.pandas: 4
        """
        ...

    @overload
    def __imul__(self, _0: complex, /):
        """
        usage.scipy: 16
        """
        ...

    @overload
    def __imul__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __imul__(self, _0: scipy.sparse.csc.csc_matrix, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __imul__(self, _0: scipy.sparse.csr.csr_matrix, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __imul__(self, _0: scipy.sparse.dok.dok_matrix, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __imul__(self, _0: scipy.sparse.lil.lil_matrix, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __imul__(self, _0: scipy.sparse.coo.coo_matrix, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __imul__(self, _0: scipy.sparse.dia.dia_matrix, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __imul__(self, _0: scipy.sparse.bsr.bsr_matrix, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __imul__(self, _0: numpy.int64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __imul__(self, _0: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __imul__(self, _0: List[int], /):
        """
        usage.matplotlib: 2
        """
        ...

    def __imul__(self, _0: object, /):
        """
        usage.dask: 1
        usage.matplotlib: 29
        usage.pandas: 4
        usage.sample-usage: 1
        usage.scipy: 244
        usage.skimage: 39
        usage.sklearn: 178
        usage.xarray: 4
        """
        ...

    def __invert__(self, /):
        """
        usage.dask: 9
        usage.matplotlib: 25
        usage.pandas: 122
        usage.sample-usage: 1
        usage.scipy: 158
        usage.skimage: 26
        usage.sklearn: 84
        usage.xarray: 9
        """
        ...

    @overload
    def __ior__(self, _0: numpy.ndarray, /):
        """
        usage.matplotlib: 1
        usage.scipy: 4
        usage.skimage: 3
        usage.xarray: 1
        """
        ...

    @overload
    def __ior__(self, _0: Union[numpy.ndarray, bool], /):
        """
        usage.pandas: 9
        """
        ...

    @overload
    def __ior__(self, _0: int, /):
        """
        usage.sample-usage: 1
        """
        ...

    def __ior__(self, _0: Union[int, bool, numpy.ndarray], /):
        """
        usage.matplotlib: 1
        usage.pandas: 9
        usage.sample-usage: 1
        usage.scipy: 4
        usage.skimage: 3
        usage.xarray: 1
        """
        ...

    @overload
    def __ipow__(self, _0: int, /):
        """
        usage.sample-usage: 1
        usage.scipy: 5
        usage.sklearn: 20
        """
        ...

    @overload
    def __ipow__(self, _0: float, /):
        """
        usage.scipy: 1
        usage.sklearn: 10
        """
        ...

    def __ipow__(self, _0: Union[float, int], /):
        """
        usage.sample-usage: 1
        usage.scipy: 6
        usage.sklearn: 30
        """
        ...

    @overload
    def __irshift__(self, _0: numpy.ndarray, /):
        """
        usage.pandas: 1
        """
        ...

    @overload
    def __irshift__(self, _0: int, /):
        """
        usage.sample-usage: 1
        """
        ...

    def __irshift__(self, _0: Union[int, numpy.ndarray], /):
        """
        usage.pandas: 1
        usage.sample-usage: 1
        """
        ...

    @overload
    def __isub__(self, _0: int, /):
        """
        usage.dask: 2
        usage.matplotlib: 10
        usage.sample-usage: 1
        usage.scipy: 28
        usage.skimage: 16
        usage.sklearn: 3
        usage.xarray: 1
        """
        ...

    @overload
    def __isub__(self, _0: float, /):
        """
        usage.matplotlib: 3
        usage.scipy: 10
        usage.skimage: 4
        usage.sklearn: 2
        """
        ...

    @overload
    def __isub__(self, _0: numpy.ndarray, /):
        """
        usage.matplotlib: 1
        usage.scipy: 56
        usage.skimage: 17
        usage.sklearn: 94
        """
        ...

    @overload
    def __isub__(self, _0: numpy.int64, /):
        """
        usage.matplotlib: 1
        usage.scipy: 2
        usage.skimage: 1
        usage.sklearn: 2
        """
        ...

    @overload
    def __isub__(self, _0: numpy.float64, /):
        """
        usage.matplotlib: 14
        usage.scipy: 2
        usage.skimage: 3
        usage.sklearn: 36
        """
        ...

    @overload
    def __isub__(self, _0: numpy.uint8, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __isub__(
        self,
        _0: Union[int, pandas.core.indexes.datetimes.DatetimeIndex, numpy.ndarray],
        /,
    ):
        """
        usage.pandas: 8
        """
        ...

    @overload
    def __isub__(self, _0: numpy.matrix, /):
        """
        usage.scipy: 1
        usage.sklearn: 1
        """
        ...

    @overload
    def __isub__(self, _0: complex, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __isub__(self, _0: scipy.sparse.csr.csr_matrix, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __isub__(self, _0: scipy.sparse.csc.csc_matrix, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __isub__(self, _0: scipy.sparse.dok.dok_matrix, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __isub__(self, _0: scipy.sparse.lil.lil_matrix, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __isub__(self, _0: scipy.sparse.coo.coo_matrix, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __isub__(self, _0: scipy.sparse.dia.dia_matrix, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __isub__(self, _0: scipy.sparse.bsr.bsr_matrix, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __isub__(self, _0: numpy.bool_, /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __isub__(self, _0: numpy.float32, /):
        """
        usage.matplotlib: 2
        usage.sklearn: 4
        """
        ...

    @overload
    def __isub__(self, _0: numpy.float128, /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __isub__(self, _0: numpy.ma.core.MaskedArray, /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __isub__(self, _0: numpy.uint64, /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __isub__(self, _0: List[int], /):
        """
        usage.matplotlib: 1
        """
        ...

    def __isub__(self, _0: object, /):
        """
        usage.dask: 2
        usage.matplotlib: 36
        usage.pandas: 8
        usage.sample-usage: 1
        usage.scipy: 109
        usage.skimage: 42
        usage.sklearn: 142
        usage.xarray: 1
        """
        ...

    def __iter__(self, /):
        """
        usage.dask: 6
        usage.matplotlib: 363
        usage.pandas: 181
        usage.sample-usage: 2
        usage.scipy: 302
        usage.skimage: 134
        usage.sklearn: 254
        usage.xarray: 92
        """
        ...

    @overload
    def __itruediv__(self, _0: float, /):
        """
        usage.dask: 1
        usage.matplotlib: 6
        usage.scipy: 41
        usage.skimage: 5
        usage.sklearn: 10
        """
        ...

    @overload
    def __itruediv__(self, _0: numpy.float64, /):
        """
        usage.matplotlib: 15
        usage.scipy: 29
        usage.skimage: 15
        usage.sklearn: 29
        """
        ...

    @overload
    def __itruediv__(self, _0: numpy.ndarray, /):
        """
        usage.matplotlib: 2
        usage.scipy: 54
        usage.skimage: 14
        usage.sklearn: 102
        usage.xarray: 1
        """
        ...

    @overload
    def __itruediv__(self, _0: numpy.float32, /):
        """
        usage.matplotlib: 1
        usage.scipy: 1
        usage.skimage: 2
        usage.xarray: 1
        """
        ...

    @overload
    def __itruediv__(self, _0: numpy.float16, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __itruediv__(self, _0: int, /):
        """
        usage.matplotlib: 2
        usage.scipy: 13
        usage.skimage: 1
        usage.sklearn: 11
        usage.xarray: 1
        """
        ...

    @overload
    def __itruediv__(self, _0: numpy.int64, /):
        """
        usage.matplotlib: 1
        usage.scipy: 8
        """
        ...

    @overload
    def __itruediv__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __itruediv__(self, _0: numpy.float128, /):
        """
        usage.matplotlib: 1
        usage.scipy: 2
        """
        ...

    @overload
    def __itruediv__(self, _0: numpy.complex64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __itruediv__(self, _0: numpy.complex256, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __itruediv__(self, _0: decimal.Decimal, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __itruediv__(self, _0: None, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __itruediv__(self, _0: List[numpy.float64], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __itruediv__(self, _0: numpy.matrix, /):
        """
        usage.sklearn: 1
        """
        ...

    def __itruediv__(self, _0: object, /):
        """
        usage.dask: 1
        usage.matplotlib: 29
        usage.scipy: 155
        usage.skimage: 38
        usage.sklearn: 153
        usage.xarray: 3
        """
        ...

    def __ixor__(self, _0: numpy.ndarray, /):
        """
        usage.pandas: 4
        """
        ...

    @overload
    def __le__(self, _0: int, /):
        """
        usage.dask: 3
        usage.matplotlib: 14
        usage.scipy: 120
        usage.skimage: 16
        usage.sklearn: 22
        """
        ...

    @overload
    def __le__(self, _0: numpy.ndarray, /):
        """
        usage.dask: 2
        usage.matplotlib: 2
        usage.scipy: 183
        usage.skimage: 5
        usage.sklearn: 7
        usage.xarray: 7
        """
        ...

    @overload
    def __le__(self, _0: numpy.int64, /):
        """
        usage.matplotlib: 1
        usage.scipy: 5
        usage.skimage: 6
        """
        ...

    @overload
    def __le__(self, _0: float, /):
        """
        usage.matplotlib: 7
        usage.scipy: 106
        usage.skimage: 1
        usage.sklearn: 24
        """
        ...

    @overload
    def __le__(self, _0: numpy.timedelta64, /):
        """
        usage.xarray: 15
        """
        ...

    @overload
    def __le__(self, _0: object, /):
        """
        usage.pandas: 134
        """
        ...

    @overload
    def __le__(self, _0: numpy.float64, /):
        """
        usage.matplotlib: 15
        usage.scipy: 21
        usage.sklearn: 11
        """
        ...

    @overload
    def __le__(self, _0: List[Union[float, int]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __le__(self, _0: numpy.uint8, /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __le__(self, _0: numpy.ma.core.MaskedArray, /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __le__(self, _0: numpy.float32, /):
        """
        usage.sklearn: 1
        """
        ...

    def __le__(self, _0: object, /):
        """
        usage.dask: 5
        usage.matplotlib: 41
        usage.pandas: 134
        usage.scipy: 436
        usage.skimage: 28
        usage.sklearn: 65
        usage.xarray: 22
        """
        ...

    @overload
    def __lshift__(self, _0: Union[int, numpy.ndarray], /):
        """
        usage.pandas: 4
        """
        ...

    @overload
    def __lshift__(self, _0: int, /):
        """
        usage.sample-usage: 1
        """
        ...

    def __lshift__(self, _0: Union[int, numpy.ndarray], /):
        """
        usage.pandas: 4
        usage.sample-usage: 1
        """
        ...

    @overload
    def __lt__(self, _0: float, /):
        """
        usage.dask: 4
        usage.matplotlib: 17
        usage.scipy: 133
        usage.skimage: 17
        usage.sklearn: 74
        usage.xarray: 1
        """
        ...

    @overload
    def __lt__(self, _0: int, /):
        """
        usage.dask: 28
        usage.matplotlib: 29
        usage.sample-usage: 1
        usage.scipy: 200
        usage.skimage: 62
        usage.sklearn: 92
        usage.xarray: 12
        """
        ...

    @overload
    def __lt__(self, _0: numpy.int64, /):
        """
        usage.matplotlib: 1
        usage.scipy: 10
        usage.skimage: 3
        usage.sklearn: 1
        """
        ...

    @overload
    def __lt__(self, _0: numpy.float64, /):
        """
        usage.dask: 1
        usage.matplotlib: 5
        usage.scipy: 44
        usage.skimage: 3
        usage.sklearn: 22
        """
        ...

    @overload
    def __lt__(self, _0: numpy.ndarray, /):
        """
        usage.dask: 3
        usage.matplotlib: 9
        usage.scipy: 159
        usage.skimage: 18
        usage.sklearn: 18
        usage.xarray: 1
        """
        ...

    @overload
    def __lt__(self, _0: object, /):
        """
        usage.pandas: 48
        """
        ...

    @overload
    def __lt__(self, _0: numpy.float16, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __lt__(self, _0: numpy.float32, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __lt__(self, _0: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __lt__(self, _0: numpy.int8, /):
        """
        usage.scipy: 1
        """
        ...

    def __lt__(self, _0: object, /):
        """
        usage.dask: 36
        usage.matplotlib: 61
        usage.pandas: 48
        usage.sample-usage: 1
        usage.scipy: 554
        usage.skimage: 103
        usage.sklearn: 207
        usage.xarray: 14
        """
        ...

    @overload
    def __matmul__(self, _0: numpy.ndarray, /):
        """
        usage.sample-usage: 1
        usage.scipy: 403
        usage.skimage: 47
        usage.sklearn: 23
        """
        ...

    @overload
    def __matmul__(self, _0: numpy.matrix, /):
        """
        usage.scipy: 4
        usage.skimage: 1
        """
        ...

    @overload
    def __matmul__(self, _0: List[int], /):
        """
        usage.scipy: 6
        """
        ...

    @overload
    def __matmul__(self, _0: List[Union[complex, int]], /):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def __matmul__(self, _0: List[List[int]], /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __matmul__(self, _0: List[List[Union[int, complex]]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __matmul__(self, _0: List[List[Union[int, numpy.int64]]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __matmul__(self, _0: scipy.sparse.csc.csc_matrix, /):
        """
        usage.sklearn: 5
        """
        ...

    @overload
    def __matmul__(self, _0: scipy.sparse.csr.csr_matrix, /):
        """
        usage.sklearn: 5
        """
        ...

    @overload
    def __matmul__(self, _0: scipy.sparse.lil.lil_matrix, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __matmul__(self, _0: scipy.sparse.dok.dok_matrix, /):
        """
        usage.sklearn: 1
        """
        ...

    def __matmul__(self, _0: object, /):
        """
        usage.sample-usage: 1
        usage.scipy: 423
        usage.skimage: 48
        usage.sklearn: 35
        """
        ...

    @overload
    def __mod__(self, _0: int, /):
        """
        usage.dask: 11
        usage.matplotlib: 10
        usage.sample-usage: 1
        usage.scipy: 11
        usage.skimage: 3
        usage.sklearn: 16
        usage.xarray: 3
        """
        ...

    @overload
    def __mod__(self, _0: float, /):
        """
        usage.matplotlib: 2
        usage.skimage: 1
        """
        ...

    @overload
    def __mod__(self, _0: numpy.ndarray, /):
        """
        usage.dask: 1
        usage.scipy: 8
        usage.skimage: 1
        """
        ...

    @overload
    def __mod__(self, _0: object, /):
        """
        usage.pandas: 52
        """
        ...

    @overload
    def __mod__(self, _0: numpy.float64, /):
        """
        usage.scipy: 4
        """
        ...

    def __mod__(self, _0: object, /):
        """
        usage.dask: 12
        usage.matplotlib: 12
        usage.pandas: 52
        usage.sample-usage: 1
        usage.scipy: 23
        usage.skimage: 5
        usage.sklearn: 16
        usage.xarray: 3
        """
        ...

    @overload
    def __mul__(self, _0: numpy.ndarray, /):
        """
        usage.dask: 27
        usage.matplotlib: 154
        usage.scipy: 1533
        usage.skimage: 215
        usage.sklearn: 355
        usage.xarray: 17
        """
        ...

    @overload
    def __mul__(self, _0: int, /):
        """
        usage.dask: 35
        usage.matplotlib: 58
        usage.sample-usage: 1
        usage.scipy: 177
        usage.skimage: 83
        usage.sklearn: 59
        usage.xarray: 148
        """
        ...

    @overload
    def __mul__(self, _0: numpy.float64, /):
        """
        usage.matplotlib: 26
        usage.scipy: 166
        usage.skimage: 29
        usage.sklearn: 38
        """
        ...

    @overload
    def __mul__(self, _0: float, /):
        """
        usage.dask: 3
        usage.matplotlib: 83
        usage.scipy: 314
        usage.skimage: 36
        usage.sklearn: 60
        usage.xarray: 16
        """
        ...

    @overload
    def __mul__(self, _0: Tuple[int, int], /):
        """
        usage.skimage: 4
        """
        ...

    @overload
    def __mul__(self, _0: Tuple[int, int, int, int], /):
        """
        usage.skimage: 3
        """
        ...

    @overload
    def __mul__(self, _0: numpy.int64, /):
        """
        usage.matplotlib: 3
        usage.scipy: 14
        usage.skimage: 2
        usage.sklearn: 1
        """
        ...

    @overload
    def __mul__(self, _0: numpy.float16, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __mul__(self, _0: numpy.float32, /):
        """
        usage.scipy: 3
        usage.skimage: 1
        usage.sklearn: 2
        """
        ...

    @overload
    def __mul__(self, _0: List[bool], /):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __mul__(self, _0: dask.array.core.Array, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __mul__(self, _0: numpy.timedelta64, /):
        """
        usage.xarray: 4
        """
        ...

    @overload
    def __mul__(self, _0: sparse._coo.core.COO, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __mul__(self, _0: object, /):
        """
        usage.pandas: 256
        usage.xarray: 561
        """
        ...

    @overload
    def __mul__(self, _0: xarray.core.variable.Variable, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __mul__(self, _0: xarray.core.variable.IndexVariable, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __mul__(self, _0: complex, /):
        """
        usage.dask: 2
        usage.matplotlib: 3
        usage.scipy: 85
        """
        ...

    @overload
    def __mul__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 14
        """
        ...

    @overload
    def __mul__(self, _0: numpy.complex64, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __mul__(self, _0: scipy.sparse.csr.csr_matrix, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __mul__(self, _0: scipy.signal.ltisys.StateSpaceContinuous, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __mul__(self, _0: numpy.complex256, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __mul__(self, _0: numpy.matrix, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __mul__(self, _0: scipy.sparse.csc.csc_matrix, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __mul__(self, _0: scipy.sparse.coo.coo_matrix, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __mul__(self, _0: scipy.sparse.dok.dok_matrix, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __mul__(self, _0: scipy.sparse.lil.lil_matrix, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __mul__(self, _0: scipy.sparse.dia.dia_matrix, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __mul__(self, _0: scipy.sparse.bsr.bsr_matrix, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __mul__(self, _0: bool, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __mul__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __mul__(self, _0: numpy.float128, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __mul__(self, _0: numpy.ma.core.MaskedArray, /):
        """
        usage.matplotlib: 1
        usage.scipy: 4
        """
        ...

    @overload
    def __mul__(self, _0: List[int], /):
        """
        usage.dask: 1
        usage.matplotlib: 1
        usage.sklearn: 5
        """
        ...

    @overload
    def __mul__(self, _0: Tuple[int, int, int], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __mul__(self, _0: numpy.int32, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __mul__(self, _0: List[float], /):
        """
        usage.sklearn: 2
        """
        ...

    def __mul__(self, _0: object, /):
        """
        usage.dask: 69
        usage.matplotlib: 329
        usage.pandas: 256
        usage.sample-usage: 1
        usage.scipy: 2345
        usage.skimage: 376
        usage.sklearn: 523
        usage.xarray: 750
        """
        ...

    def __neg__(self, /):
        """
        usage.dask: 7
        usage.matplotlib: 68
        usage.pandas: 25
        usage.sample-usage: 1
        usage.scipy: 785
        usage.skimage: 41
        usage.sklearn: 141
        usage.xarray: 24
        """
        ...

    @overload
    def __or__(self, _0: numpy.ndarray, /):
        """
        usage.dask: 2
        usage.matplotlib: 6
        usage.scipy: 34
        usage.skimage: 4
        usage.sklearn: 7
        usage.xarray: 3
        """
        ...

    @overload
    def __or__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 1
        usage.xarray: 1
        """
        ...

    @overload
    def __or__(self, _0: dask.array.core.Array, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __or__(self, _0: sparse._coo.core.COO, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __or__(self, _0: Union[numpy.ndarray, bool, pandas.core.series.Series], /):
        """
        usage.pandas: 61
        """
        ...

    @overload
    def __or__(self, _0: int, /):
        """
        usage.sample-usage: 1
        """
        ...

    @overload
    def __or__(self, _0: bool, /):
        """
        usage.dask: 1
        """
        ...

    def __or__(self, _0: object, /):
        """
        usage.dask: 3
        usage.matplotlib: 6
        usage.pandas: 61
        usage.sample-usage: 1
        usage.scipy: 35
        usage.skimage: 4
        usage.sklearn: 7
        usage.xarray: 6
        """
        ...

    def __pos__(self, /):
        """
        usage.dask: 1
        usage.sample-usage: 1
        usage.scipy: 2
        """
        ...

    @overload
    def __pow__(self, _0: int, /):
        """
        usage.dask: 11
        usage.matplotlib: 69
        usage.sample-usage: 1
        usage.scipy: 570
        usage.skimage: 154
        usage.sklearn: 274
        usage.xarray: 11
        """
        ...

    @overload
    def __pow__(self, _0: numpy.ndarray, /):
        """
        usage.dask: 1
        usage.scipy: 153
        usage.skimage: 2
        """
        ...

    @overload
    def __pow__(self, _0: float, /):
        """
        usage.matplotlib: 16
        usage.scipy: 121
        usage.skimage: 11
        usage.sklearn: 25
        """
        ...

    @overload
    def __pow__(self, _0: object, /):
        """
        usage.pandas: 63
        """
        ...

    @overload
    def __pow__(self, _0: complex, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __pow__(self, _0: numpy.float64, /):
        """
        usage.scipy: 27
        usage.sklearn: 3
        """
        ...

    def __pow__(self, _0: object, /):
        """
        usage.dask: 12
        usage.matplotlib: 85
        usage.pandas: 63
        usage.sample-usage: 1
        usage.scipy: 872
        usage.skimage: 167
        usage.sklearn: 302
        usage.xarray: 11
        """
        ...

    @overload
    def __radd__(self, _0: float, /):
        """
        usage.matplotlib: 26
        usage.scipy: 119
        usage.skimage: 18
        usage.sklearn: 33
        usage.xarray: 2
        """
        ...

    @overload
    def __radd__(self, _0: numpy.ndarray, /):
        """
        usage.dask: 65
        usage.matplotlib: 213
        usage.sample-usage: 1
        usage.scipy: 1617
        usage.skimage: 177
        usage.sklearn: 274
        usage.xarray: 26
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float64, /):
        """
        usage.matplotlib: 3
        usage.scipy: 83
        usage.skimage: 4
        usage.sklearn: 10
        """
        ...

    @overload
    def __radd__(self, _0: int, /):
        """
        usage.dask: 1
        usage.matplotlib: 13
        usage.sample-usage: 1
        usage.scipy: 156
        usage.skimage: 34
        usage.sklearn: 22
        usage.xarray: 13
        """
        ...

    @overload
    def __radd__(self, _0: Tuple[int, int], /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __radd__(self, _0: List[numpy.ndarray], /):
        """
        usage.skimage: 3
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int64, /):
        """
        usage.dask: 1
        usage.matplotlib: 1
        usage.scipy: 20
        usage.skimage: 2
        """
        ...

    @overload
    def __radd__(self, _0: numpy.datetime64, /):
        """
        usage.xarray: 4
        """
        ...

    @overload
    def __radd__(self, _0: datetime.timedelta, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __radd__(self, _0: xarray.core.dataarray.DataArray, /):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __radd__(self, _0: xarray.core.dataset.Dataset, /):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __radd__(self, _0: numpy.timedelta64, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __radd__(self, _0: xarray.core.variable.Variable, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __radd__(self, _0: object, /):
        """
        usage.pandas: 289
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: scipy.signal.ltisys.StateSpaceContinuous, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: scipy.sparse.csr.csr_matrix, /):
        """
        usage.scipy: 1
        usage.sklearn: 1
        """
        ...

    @overload
    def __radd__(self, _0: scipy.sparse.lil.lil_matrix, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __radd__(self, _0: numpy.ma.core.MaskedArray, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: dask.array.core.Array, /):
        """
        usage.dask: 6
        """
        ...

    @overload
    def __radd__(self, _0: pandas.core.series.Series, /):
        """
        usage.dask: 2
        """
        ...

    @overload
    def __radd__(self, _0: pandas.core.frame.DataFrame, /):
        """
        usage.dask: 3
        """
        ...

    @overload
    def __radd__(self, _0: List[int], /):
        """
        usage.sklearn: 12
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float32, /):
        """
        usage.sklearn: 1
        """
        ...

    def __radd__(self, _0: object, /):
        """
        usage.dask: 78
        usage.matplotlib: 256
        usage.pandas: 289
        usage.sample-usage: 2
        usage.scipy: 2001
        usage.skimage: 239
        usage.sklearn: 353
        usage.xarray: 52
        """
        ...

    @overload
    def __rand__(self, _0: numpy.ndarray, /):
        """
        usage.dask: 4
        usage.matplotlib: 46
        usage.scipy: 230
        usage.skimage: 12
        usage.sklearn: 11
        usage.xarray: 1
        """
        ...

    @overload
    def __rand__(self, _0: dask.array.core.Array, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __rand__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 31
        usage.xarray: 1
        """
        ...

    @overload
    def __rand__(self, _0: sparse._coo.core.COO, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __rand__(
        self,
        _0: Union[
            pandas.core.series.Series,
            numpy.ndarray,
            numpy.bool_,
            pandas.core.arrays.sparse.array.SparseArray,
        ],
        /,
    ):
        """
        usage.pandas: 88
        """
        ...

    @overload
    def __rand__(self, _0: numpy.int64, /):
        """
        usage.scipy: 16
        """
        ...

    @overload
    def __rand__(self, _0: int, /):
        """
        usage.sample-usage: 1
        usage.scipy: 14
        """
        ...

    @overload
    def __rand__(self, _0: bool, /):
        """
        usage.dask: 1
        usage.matplotlib: 2
        usage.scipy: 2
        """
        ...

    def __rand__(self, _0: object, /):
        """
        usage.dask: 5
        usage.matplotlib: 48
        usage.pandas: 88
        usage.sample-usage: 1
        usage.scipy: 293
        usage.skimage: 12
        usage.sklearn: 11
        usage.xarray: 4
        """
        ...

    @overload
    def __rfloordiv__(self, _0: numpy.ndarray, /):
        """
        usage.dask: 1
        usage.scipy: 4
        usage.skimage: 2
        usage.sklearn: 1
        """
        ...

    @overload
    def __rfloordiv__(self, _0: object, /):
        """
        usage.pandas: 107
        """
        ...

    @overload
    def __rfloordiv__(self, _0: numpy.int64, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __rfloordiv__(self, _0: int, /):
        """
        usage.dask: 1
        usage.sample-usage: 1
        """
        ...

    def __rfloordiv__(self, _0: object, /):
        """
        usage.dask: 2
        usage.pandas: 107
        usage.sample-usage: 1
        usage.scipy: 8
        usage.skimage: 2
        usage.sklearn: 1
        """
        ...

    @overload
    def __rlshift__(self, _0: numpy.ndarray, /):
        """
        usage.pandas: 4
        """
        ...

    @overload
    def __rlshift__(self, _0: int, /):
        """
        usage.dask: 1
        usage.sample-usage: 1
        """
        ...

    def __rlshift__(self, _0: Union[int, numpy.ndarray], /):
        """
        usage.dask: 1
        usage.pandas: 4
        usage.sample-usage: 1
        """
        ...

    @overload
    def __rmatmul__(self, _0: numpy.ndarray, /):
        """
        usage.sample-usage: 1
        usage.scipy: 403
        usage.skimage: 47
        usage.sklearn: 23
        """
        ...

    @overload
    def __rmatmul__(self, _0: List[int], /):
        """
        usage.scipy: 6
        usage.skimage: 2
        """
        ...

    @overload
    def __rmatmul__(self, _0: numpy.matrix, /):
        """
        usage.scipy: 9
        usage.skimage: 1
        """
        ...

    @overload
    def __rmatmul__(self, _0: List[List[int]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rmatmul__(self, _0: List[Union[complex, int]], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __rmatmul__(self, _0: scipy.sparse.dia.dia_matrix, /):
        """
        usage.scipy: 10
        usage.sklearn: 2
        """
        ...

    @overload
    def __rmatmul__(self, _0: scipy.sparse.csc.csc_matrix, /):
        """
        usage.scipy: 1
        usage.sklearn: 6
        """
        ...

    @overload
    def __rmatmul__(self, _0: scipy.sparse.csr.csr_matrix, /):
        """
        usage.sklearn: 6
        """
        ...

    @overload
    def __rmatmul__(self, _0: scipy.sparse.coo.coo_matrix, /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def __rmatmul__(self, _0: scipy.sparse.lil.lil_matrix, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __rmatmul__(self, _0: scipy.sparse.dok.dok_matrix, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __rmatmul__(self, _0: scipy.sparse.bsr.bsr_matrix, /):
        """
        usage.sklearn: 1
        """
        ...

    def __rmatmul__(self, _0: object, /):
        """
        usage.sample-usage: 1
        usage.scipy: 432
        usage.skimage: 50
        usage.sklearn: 42
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.ndarray, /):
        """
        usage.dask: 27
        usage.matplotlib: 154
        usage.scipy: 1533
        usage.skimage: 215
        usage.sklearn: 355
        usage.xarray: 17
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.float64, /):
        """
        usage.matplotlib: 30
        usage.scipy: 444
        usage.skimage: 28
        usage.sklearn: 115
        usage.xarray: 2
        """
        ...

    @overload
    def __rmul__(self, _0: float, /):
        """
        usage.dask: 3
        usage.matplotlib: 177
        usage.scipy: 980
        usage.skimage: 152
        usage.sklearn: 270
        usage.xarray: 22
        """
        ...

    @overload
    def __rmul__(self, _0: int, /):
        """
        usage.dask: 36
        usage.matplotlib: 82
        usage.sample-usage: 2
        usage.scipy: 686
        usage.skimage: 120
        usage.sklearn: 178
        usage.xarray: 27
        """
        ...

    @overload
    def __rmul__(self, _0: complex, /):
        """
        usage.dask: 6
        usage.matplotlib: 2
        usage.scipy: 288
        usage.skimage: 6
        usage.sklearn: 2
        usage.xarray: 4
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.int64, /):
        """
        usage.dask: 2
        usage.scipy: 19
        usage.skimage: 2
        usage.sklearn: 2
        """
        ...

    @overload
    def __rmul__(self, _0: dask.array.core.Array, /):
        """
        usage.dask: 2
        usage.skimage: 4
        """
        ...

    @overload
    def __rmul__(self, _0: Tuple[int, int], /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __rmul__(self, _0: Tuple[int], /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __rmul__(self, _0: Tuple[int, int, int], /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __rmul__(self, _0: xarray.core.variable.Variable, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __rmul__(self, _0: xarray.core.variable.IndexVariable, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __rmul__(self, _0: object, /):
        """
        usage.pandas: 243
        usage.scipy: 9
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.float32, /):
        """
        usage.scipy: 25
        usage.sklearn: 10
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.complex64, /):
        """
        usage.scipy: 22
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 52
        """
        ...

    @overload
    def __rmul__(self, _0: scipy.sparse.csc.csc_matrix, /):
        """
        usage.scipy: 26
        usage.sklearn: 1
        """
        ...

    @overload
    def __rmul__(self, _0: scipy.sparse.csr.csr_matrix, /):
        """
        usage.scipy: 30
        usage.sklearn: 2
        """
        ...

    @overload
    def __rmul__(self, _0: scipy.sparse.dia.dia_matrix, /):
        """
        usage.scipy: 23
        usage.sklearn: 1
        """
        ...

    @overload
    def __rmul__(self, _0: scipy.optimize.lbfgsb.LbfgsInvHessProduct, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rmul__(self, _0: scipy.sparse.lil.lil_matrix, /):
        """
        usage.scipy: 15
        """
        ...

    @overload
    def __rmul__(self, _0: scipy.sparse.coo.coo_matrix, /):
        """
        usage.scipy: 19
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.float128, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __rmul__(self, _0: scipy.signal.ltisys.StateSpaceContinuous, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rmul__(self, _0: List[int], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.poly1d, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rmul__(self, _0: scipy.sparse.linalg.interface._CustomLinearOperator, /):
        """
        usage.scipy: 15
        """
        ...

    @overload
    def __rmul__(self, _0: scipy.sparse.linalg.interface.MatrixLinearOperator, /):
        """
        usage.dask: 1
        usage.scipy: 9
        """
        ...

    @overload
    def __rmul__(self, _0: scipy.sparse.linalg.interface._TransposedLinearOperator, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __rmul__(self, _0: scipy.sparse.linalg.interface._AdjointMatrixOperator, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __rmul__(self, _0: scipy.sparse.linalg.interface._AdjointLinearOperator, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __rmul__(self, _0: scipy.sparse.dok.dok_matrix, /):
        """
        usage.scipy: 14
        """
        ...

    @overload
    def __rmul__(self, _0: scipy.sparse.bsr.bsr_matrix, /):
        """
        usage.scipy: 17
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.ma.core.MaskedArray, /):
        """
        usage.matplotlib: 5
        usage.scipy: 2
        """
        ...

    @overload
    def __rmul__(self, _0: List[float], /):
        """
        usage.matplotlib: 1
        """
        ...

    def __rmul__(self, _0: object, /):
        """
        usage.dask: 77
        usage.matplotlib: 451
        usage.pandas: 243
        usage.sample-usage: 2
        usage.scipy: 4244
        usage.skimage: 530
        usage.sklearn: 936
        usage.xarray: 74
        """
        ...

    @overload
    def __ror__(self, _0: numpy.ndarray, /):
        """
        usage.dask: 2
        usage.matplotlib: 6
        usage.scipy: 34
        usage.skimage: 4
        usage.sklearn: 7
        usage.xarray: 3
        """
        ...

    @overload
    def __ror__(self, _0: bool, /):
        """
        usage.dask: 1
        usage.scipy: 1
        usage.xarray: 3
        """
        ...

    @overload
    def __ror__(self, _0: dask.array.core.Array, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __ror__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 5
        usage.xarray: 1
        """
        ...

    @overload
    def __ror__(
        self,
        _0: Union[
            pandas.core.series.Series,
            pandas.core.arrays.sparse.array.SparseArray,
            numpy.ndarray,
        ],
        /,
    ):
        """
        usage.pandas: 61
        """
        ...

    @overload
    def __ror__(self, _0: numpy.ma.core.MaskedArray, /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __ror__(self, _0: int, /):
        """
        usage.sample-usage: 1
        """
        ...

    def __ror__(self, _0: object, /):
        """
        usage.dask: 3
        usage.matplotlib: 7
        usage.pandas: 61
        usage.sample-usage: 1
        usage.scipy: 40
        usage.skimage: 4
        usage.sklearn: 7
        usage.xarray: 8
        """
        ...

    @overload
    def __rpow__(self, _0: numpy.ndarray, /):
        """
        usage.dask: 1
        usage.scipy: 153
        usage.skimage: 2
        """
        ...

    @overload
    def __rpow__(self, _0: int, /):
        """
        usage.dask: 1
        usage.matplotlib: 9
        usage.sample-usage: 2
        usage.scipy: 14
        usage.skimage: 1
        usage.sklearn: 1
        """
        ...

    @overload
    def __rpow__(self, _0: object, /):
        """
        usage.pandas: 50
        """
        ...

    @overload
    def __rpow__(self, _0: float, /):
        """
        usage.dask: 1
        usage.matplotlib: 7
        usage.scipy: 17
        usage.sklearn: 1
        """
        ...

    @overload
    def __rpow__(self, _0: numpy.float64, /):
        """
        usage.scipy: 8
        """
        ...

    def __rpow__(self, _0: object, /):
        """
        usage.dask: 3
        usage.matplotlib: 16
        usage.pandas: 50
        usage.sample-usage: 2
        usage.scipy: 192
        usage.skimage: 3
        usage.sklearn: 2
        """
        ...

    @overload
    def __rrshift__(self, _0: numpy.ndarray, /):
        """
        usage.pandas: 1
        """
        ...

    @overload
    def __rrshift__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rrshift__(self, _0: int, /):
        """
        usage.sample-usage: 1
        """
        ...

    def __rrshift__(self, _0: Union[int, numpy.ndarray, numpy.uint64], /):
        """
        usage.pandas: 1
        usage.sample-usage: 1
        usage.scipy: 1
        """
        ...

    @overload
    def __rshift__(self, _0: Union[int, numpy.ndarray], /):
        """
        usage.pandas: 5
        """
        ...

    @overload
    def __rshift__(self, _0: int, /):
        """
        usage.dask: 1
        usage.sample-usage: 1
        usage.scipy: 1
        """
        ...

    def __rshift__(self, _0: Union[int, numpy.ndarray], /):
        """
        usage.dask: 1
        usage.pandas: 5
        usage.sample-usage: 1
        usage.scipy: 1
        """
        ...

    @overload
    def __rsub__(self, _0: numpy.ndarray, /):
        """
        usage.dask: 17
        usage.matplotlib: 133
        usage.scipy: 1424
        usage.skimage: 183
        usage.sklearn: 526
        usage.xarray: 35
        """
        ...

    @overload
    def __rsub__(self, _0: int, /):
        """
        usage.dask: 3
        usage.matplotlib: 25
        usage.sample-usage: 1
        usage.scipy: 244
        usage.skimage: 20
        usage.sklearn: 79
        usage.xarray: 2
        """
        ...

    @overload
    def __rsub__(self, _0: numpy.float64, /):
        """
        usage.matplotlib: 11
        usage.scipy: 68
        usage.skimage: 4
        usage.sklearn: 12
        """
        ...

    @overload
    def __rsub__(self, _0: float, /):
        """
        usage.matplotlib: 19
        usage.scipy: 165
        usage.skimage: 13
        usage.sklearn: 13
        """
        ...

    @overload
    def __rsub__(self, _0: numpy.float32, /):
        """
        usage.skimage: 1
        usage.sklearn: 1
        """
        ...

    @overload
    def __rsub__(self, _0: dask.array.core.Array, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __rsub__(self, _0: xarray.coding.cftimeindex.CFTimeIndex, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __rsub__(self, _0: cftime._cftime.DatetimeNoLeap, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __rsub__(self, _0: cftime._cftime.Datetime360Day, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __rsub__(self, _0: cftime._cftime.DatetimeJulian, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __rsub__(self, _0: cftime._cftime.DatetimeAllLeap, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __rsub__(self, _0: cftime._cftime.DatetimeGregorian, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __rsub__(self, _0: cftime._cftime.DatetimeProlepticGregorian, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __rsub__(self, _0: datetime.timedelta, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __rsub__(self, _0: xarray.core.dataarray.DataArray, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __rsub__(self, _0: xarray.core.variable.Variable, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __rsub__(self, _0: xarray.core.variable.IndexVariable, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __rsub__(self, _0: object, /):
        """
        usage.pandas: 273
        """
        ...

    @overload
    def __rsub__(self, _0: numpy.matrix, /):
        """
        usage.scipy: 199
        usage.sklearn: 2
        """
        ...

    @overload
    def __rsub__(self, _0: List[float], /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __rsub__(self, _0: List[int], /):
        """
        usage.scipy: 6
        usage.sklearn: 3
        """
        ...

    @overload
    def __rsub__(self, _0: complex, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __rsub__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __rsub__(self, _0: numpy.complex256, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rsub__(self, _0: numpy.int64, /):
        """
        usage.matplotlib: 2
        usage.scipy: 5
        usage.sklearn: 2
        """
        ...

    @overload
    def __rsub__(self, _0: List[List[int]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rsub__(self, _0: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rsub__(self, _0: numpy.ma.core.MaskedArray, /):
        """
        usage.matplotlib: 2
        usage.scipy: 5
        """
        ...

    @overload
    def __rsub__(self, _0: numpy.memmap, /):
        """
        usage.sklearn: 1
        """
        ...

    def __rsub__(self, _0: object, /):
        """
        usage.dask: 20
        usage.matplotlib: 192
        usage.pandas: 273
        usage.sample-usage: 1
        usage.scipy: 2130
        usage.skimage: 222
        usage.sklearn: 639
        usage.xarray: 48
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.ndarray, /):
        """
        usage.dask: 11
        usage.matplotlib: 37
        usage.scipy: 741
        usage.skimage: 68
        usage.sklearn: 204
        usage.xarray: 1
        """
        ...

    @overload
    def __rtruediv__(self, _0: int, /):
        """
        usage.dask: 2
        usage.matplotlib: 7
        usage.scipy: 93
        usage.skimage: 5
        usage.sklearn: 40
        """
        ...

    @overload
    def __rtruediv__(self, _0: float, /):
        """
        usage.matplotlib: 6
        usage.scipy: 241
        usage.skimage: 8
        usage.sklearn: 41
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 1
        usage.skimage: 1
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.float64, /):
        """
        usage.scipy: 45
        usage.skimage: 1
        usage.sklearn: 4
        """
        ...

    @overload
    def __rtruediv__(self, _0: object, /):
        """
        usage.pandas: 420
        """
        ...

    @overload
    def __rtruediv__(self, _0: complex, /):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.int64, /):
        """
        usage.scipy: 9
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.float32, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __rtruediv__(self, _0: scipy.signal.ltisys.StateSpaceContinuous, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __rtruediv__(self, _0: scipy.sparse.csr.csr_matrix, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rtruediv__(self, _0: scipy.sparse.csc.csc_matrix, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rtruediv__(self, _0: scipy.sparse.dok.dok_matrix, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.complex64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.complex256, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.float128, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __rtruediv__(self, _0: scipy.sparse.lil.lil_matrix, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rtruediv__(self, _0: scipy.sparse.coo.coo_matrix, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rtruediv__(self, _0: scipy.sparse.dia.dia_matrix, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rtruediv__(self, _0: scipy.sparse.bsr.bsr_matrix, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.ma.core.MaskedArray, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __rtruediv__(self, _0: List[numpy.float64], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.memmap, /):
        """
        usage.sklearn: 2
        """
        ...

    def __rtruediv__(self, _0: object, /):
        """
        usage.dask: 13
        usage.matplotlib: 51
        usage.pandas: 420
        usage.scipy: 1157
        usage.skimage: 83
        usage.sklearn: 291
        usage.xarray: 1
        """
        ...

    @overload
    def __rxor__(self, _0: Union[pandas.core.series.Series, numpy.ndarray], /):
        """
        usage.pandas: 8
        """
        ...

    @overload
    def __rxor__(self, _0: numpy.ndarray, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __rxor__(self, _0: bool, /):
        """
        usage.dask: 1
        """
        ...

    def __rxor__(self, _0: Union[numpy.ndarray, bool, pandas.core.series.Series], /):
        """
        usage.dask: 2
        usage.pandas: 8
        """
        ...

    @overload
    def __setitem__(self, _0: numpy.ndarray, _1: numpy.ndarray, /):
        """
        usage.dask: 2
        usage.matplotlib: 45
        usage.scipy: 331
        usage.skimage: 52
        usage.sklearn: 114
        usage.xarray: 4
        """
        ...

    @overload
    def __setitem__(self, _0: numpy.ndarray, _1: int, /):
        """
        usage.dask: 7
        usage.matplotlib: 20
        usage.scipy: 91
        usage.skimage: 68
        usage.sklearn: 130
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(self, _0: numpy.ndarray, _1: float, /):
        """
        usage.dask: 7
        usage.matplotlib: 9
        usage.scipy: 51
        usage.skimage: 14
        usage.sklearn: 65
        usage.xarray: 6
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.ndarray, int], _1: numpy.ndarray, /):
        """
        usage.matplotlib: 3
        usage.scipy: 14
        usage.skimage: 3
        usage.sklearn: 12
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[ellipsis, int], _1: numpy.ndarray, /):
        """
        usage.matplotlib: 11
        usage.scipy: 1
        usage.skimage: 49
        usage.sklearn: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, None, None], slice[None, None, None], int],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.matplotlib: 8
        usage.scipy: 7
        usage.skimage: 7
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[ellipsis, slice[None, int, None]], _1: numpy.ndarray, /
    ):
        """
        usage.matplotlib: 1
        usage.scipy: 1
        usage.skimage: 4
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[ellipsis, int], _1: int, /):
        """
        usage.matplotlib: 1
        usage.skimage: 4
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[ellipsis, int], _1: float, /):
        """
        usage.skimage: 2
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: numpy.bool_, _1: numpy.ndarray, /):
        """
        usage.scipy: 2
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[ellipsis, int], _1: numpy.float64, /):
        """
        usage.scipy: 1
        usage.skimage: 7
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, int, int], slice[int, int, int]], _1: int, /
    ):
        """
        usage.matplotlib: 1
        usage.skimage: 69
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[numpy.ndarray, numpy.ndarray], _1: numpy.ndarray, /
    ):
        """
        usage.matplotlib: 1
        usage.scipy: 108
        usage.skimage: 14
        usage.sklearn: 20
        usage.xarray: 3
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[numpy.ndarray, numpy.ndarray], _1: Tuple[int, int, int], /
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, None, None], int], _1: numpy.ndarray, /
    ):
        """
        usage.dask: 3
        usage.matplotlib: 31
        usage.scipy: 83
        usage.skimage: 34
        usage.sklearn: 146
        usage.xarray: 6
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int], _1: numpy.float64, /):
        """
        usage.matplotlib: 9
        usage.scipy: 106
        usage.skimage: 10
        usage.sklearn: 13
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: numpy.float64, /):
        """
        usage.dask: 1
        usage.matplotlib: 26
        usage.scipy: 238
        usage.skimage: 14
        usage.sklearn: 73
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.ndarray, numpy.ndarray], _1: int, /):
        """
        usage.scipy: 35
        usage.skimage: 125
        usage.sklearn: 7
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray], _1: int, /
    ):
        """
        usage.skimage: 5
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, slice[None, None, None]], _1: int, /):
        """
        usage.matplotlib: 2
        usage.scipy: 6
        usage.skimage: 32
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[None, None, None], int], _1: int, /):
        """
        usage.scipy: 7
        usage.skimage: 12
        usage.sklearn: 17
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, None, int], slice[None, None, None]], _1: int, /
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.ndarray, numpy.ndarray, int], _1: int, /):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(self, _0: slice[None, None, None], _1: numpy.ndarray, /):
        """
        usage.matplotlib: 2
        usage.scipy: 36
        usage.skimage: 8
        usage.sklearn: 9
        usage.xarray: 2
        """
        ...

    @overload
    def __setitem__(self, _0: List[int], _1: int, /):
        """
        usage.skimage: 2
        usage.sklearn: 10
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.ndarray, numpy.ndarray], _1: bool, /):
        """
        usage.skimage: 5
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[numpy.int64, numpy.int64, numpy.int64],
            slice[numpy.int64, numpy.int64, numpy.int64],
        ],
        _1: int,
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: int, /):
        """
        usage.dask: 4
        usage.matplotlib: 8
        usage.sample-usage: 1
        usage.scipy: 416
        usage.skimage: 50
        usage.sklearn: 59
        usage.xarray: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int], _1: float, /):
        """
        usage.dask: 1
        usage.matplotlib: 15
        usage.scipy: 111
        usage.skimage: 30
        usage.sklearn: 34
        usage.xarray: 7
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[None, int, None]], _1: bool, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[int, None, int]], _1: bool, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, None, None], slice[None, int, None]], _1: bool, /
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, None, None], slice[int, None, int]], _1: bool, /
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, slice[int, int, int]], _1: int, /):
        """
        usage.scipy: 4
        usage.skimage: 9
        usage.sklearn: 2
        """
        ...

    @overload
    def __setitem__(self, _0: numpy.ndarray, _1: bool, /):
        """
        usage.scipy: 11
        usage.skimage: 7
        usage.sklearn: 28
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[None, int, None], int], _1: numpy.ndarray, /):
        """
        usage.matplotlib: 7
        usage.scipy: 6
        usage.skimage: 8
        usage.sklearn: 3
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[None, int, None], int], _1: int, /):
        """
        usage.scipy: 1
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[int, None, int], int], _1: numpy.ndarray, /):
        """
        usage.matplotlib: 10
        usage.scipy: 5
        usage.skimage: 6
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[int, None, int], int], _1: int, /):
        """
        usage.skimage: 1
        usage.sklearn: 3
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int], _1: int, /):
        """
        usage.dask: 3
        usage.matplotlib: 9
        usage.scipy: 114
        usage.skimage: 151
        usage.sklearn: 34
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: Tuple[int, int, int], /):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[int, int, int], slice[int, int, int]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.dask: 14
        usage.scipy: 36
        usage.skimage: 22
        usage.sklearn: 3
        """
        ...

    @overload
    def __setitem__(self, _0: slice[None, None, None], _1: int, /):
        """
        usage.scipy: 3
        usage.skimage: 1
        usage.sklearn: 9
        usage.xarray: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int, int], _1: int, /):
        """
        usage.scipy: 2
        usage.skimage: 30
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[ellipsis, int, int], _1: numpy.ndarray, /):
        """
        usage.scipy: 1
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, int, None], slice[None, int, None]], _1: float, /
    ):
        """
        usage.matplotlib: 1
        usage.skimage: 6
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, int, None], slice[None, int, None]], _1: int, /
    ):
        """
        usage.scipy: 1
        usage.skimage: 2
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, None, int], slice[int, None, int]], _1: int, /
    ):
        """
        usage.scipy: 2
        usage.skimage: 3
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: slice[None, None, None], _1: Tuple[numpy.float64, numpy.float64], /
    ):
        """
        usage.matplotlib: 1
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[int, slice[None, None, None]],
        _1: Tuple[numpy.float64, numpy.float64],
        /,
    ):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[int, slice[None, None, None]], _1: Tuple[float, float], /
    ):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, None, None], slice[None, int, None]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 16
        usage.skimage: 5
        usage.sklearn: 15
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, int, None], slice[None, None, None]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 15
        usage.skimage: 2
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[int, slice[None, None, None], slice[None, None, None]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 3
        usage.skimage: 4
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[int, int, slice[None, None, None], slice[None, None, None]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, int, None], slice[None, None, None], slice[None, None, None]
        ],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 9
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[int, int, int], slice[None, None, None], slice[None, None, None]
        ],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 6
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, None, None], slice[None, None, None], slice[int, int, int]
        ],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.matplotlib: 1
        usage.scipy: 6
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[int, int, int], slice[None, None, None]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 8
        usage.skimage: 4
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, None, None], slice[int, int, int]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.matplotlib: 1
        usage.scipy: 15
        usage.skimage: 6
        usage.sklearn: 7
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[int, int, slice[None, None, None]], _1: numpy.ndarray, /
    ):
        """
        usage.dask: 4
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(self, _0: slice[int, None, int], _1: int, /):
        """
        usage.dask: 1
        usage.matplotlib: 5
        usage.scipy: 3
        usage.skimage: 2
        usage.sklearn: 6
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, None, None], slice[None, None, None], Tuple[int, int]],
        _1: int,
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[int, int, int], int], _1: Tuple[int, int], /):
        """
        usage.skimage: 3
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: float, /):
        """
        usage.dask: 2
        usage.matplotlib: 13
        usage.scipy: 122
        usage.skimage: 3
        usage.sklearn: 40
        usage.xarray: 5
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.ndarray, numpy.ndarray], _1: float, /):
        """
        usage.scipy: 4
        usage.skimage: 1
        usage.sklearn: 8
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(self, _0: numpy.ndarray, _1: numpy.float64, /):
        """
        usage.scipy: 7
        usage.skimage: 1
        usage.sklearn: 11
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[int, Tuple[int, int, int, int]],
        _1: Tuple[int, int, int, int],
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray], _1: bool, /
    ):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(self, _0: None, _1: numpy.ndarray, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[int, int, slice[None, None, None]], _1: numpy.ndarray, /
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, None, None], slice[None, None, None], slice[None, int, None]
        ],
        _1: bool,
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, None, None], slice[None, None, None], slice[int, None, int]
        ],
        _1: bool,
        /,
    ):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: numpy.int64, /):
        """
        usage.dask: 2
        usage.matplotlib: 2
        usage.scipy: 25
        usage.skimage: 4
        usage.sklearn: 17
        """
        ...

    @overload
    def __setitem__(self, _0: slice[int, None, int], _1: numpy.ndarray, /):
        """
        usage.dask: 2
        usage.matplotlib: 9
        usage.scipy: 28
        usage.skimage: 5
        usage.sklearn: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[List[int], List[int], List[int]], _1: int, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int, int], _1: bool, /):
        """
        usage.scipy: 15
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int, int, int], _1: int, /):
        """
        usage.skimage: 5
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            slice[None, int, None],
        ],
        _1: bool,
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            slice[int, None, int],
        ],
        _1: bool,
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, int, None], slice[None, None, None]], _1: int, /
    ):
        """
        usage.skimage: 1
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[int, int, int], slice[None, int, None]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 5
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[int, int, int], slice[int, None, int]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 3
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[int, int, int], slice[int, int, int], slice[int, int, int]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.dask: 9
        usage.scipy: 17
        usage.skimage: 6
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, int, None], slice[None, int, None]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.dask: 1
        usage.scipy: 19
        usage.skimage: 8
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, int, int], slice[int, int, int]], _1: float, /
    ):
        """
        usage.matplotlib: 1
        usage.skimage: 9
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int], _1: numpy.ndarray, /):
        """
        usage.scipy: 13
        usage.skimage: 1
        usage.sklearn: 4
        """
        ...

    @overload
    def __setitem__(self, _0: numpy.bool_, _1: float, /):
        """
        usage.matplotlib: 1
        usage.scipy: 2
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: numpy.ndarray, /):
        """
        usage.dask: 3
        usage.matplotlib: 4
        usage.scipy: 199
        usage.skimage: 31
        usage.sklearn: 101
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int], _1: numpy.int64, /):
        """
        usage.scipy: 11
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, int, int], slice[None, None, None]], _1: int, /
    ):
        """
        usage.scipy: 1
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, None, None], slice[int, int, int]], _1: int, /
    ):
        """
        usage.skimage: 4
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, None, None], slice[int, None, int]], _1: int, /
    ):
        """
        usage.scipy: 1
        usage.skimage: 5
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int, int], _1: numpy.int64, /):
        """
        usage.scipy: 2
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(self, _0: numpy.int64, _1: int, /):
        """
        usage.scipy: 3
        usage.skimage: 2
        usage.sklearn: 9
        """
        ...

    @overload
    def __setitem__(self, _0: List[numpy.int64], _1: numpy.int64, /):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(self, _0: slice[int, None, int], _1: float, /):
        """
        usage.scipy: 1
        usage.skimage: 1
        usage.sklearn: 2
        """
        ...

    @overload
    def __setitem__(self, _0: slice[None, None, None], _1: int, /):
        """
        usage.matplotlib: 1
        usage.scipy: 4
        usage.skimage: 3
        usage.sklearn: 4
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[int, slice[None, None, None]], _1: Tuple[int, int], /
    ):
        """
        usage.skimage: 3
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.ndarray, int], _1: numpy.float64, /):
        """
        usage.skimage: 1
        usage.sklearn: 4
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: Tuple[int, int], /):
        """
        usage.matplotlib: 4
        usage.skimage: 3
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int, int], _1: float, /):
        """
        usage.skimage: 2
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, int, None], slice[None, None, None], slice[None, None, None]
        ],
        _1: bool,
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int, int], _1: numpy.float64, /):
        """
        usage.scipy: 3
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, slice[int, int, int]], _1: float, /):
        """
        usage.scipy: 1
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: bool, /):
        """
        usage.matplotlib: 1
        usage.scipy: 4
        usage.skimage: 6
        usage.sklearn: 4
        """
        ...

    @overload
    def __setitem__(self, _0: numpy.int64, _1: bool, /):
        """
        usage.scipy: 3
        usage.skimage: 1
        usage.sklearn: 3
        """
        ...

    @overload
    def __setitem__(self, _0: slice[int, None, int], _1: numpy.ndarray, /):
        """
        usage.scipy: 12
        usage.skimage: 2
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: slice[None, None, None], _1: numpy.ndarray, /):
        """
        usage.scipy: 38
        usage.skimage: 5
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: List[int], _1: float, /):
        """
        usage.matplotlib: 1
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, None, None], slice[None, None, None]], _1: int, /
    ):
        """
        usage.skimage: 2
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(self, _0: slice[None, int, None], _1: int, /):
        """
        usage.dask: 3
        usage.matplotlib: 1
        usage.scipy: 1
        usage.skimage: 1
        usage.sklearn: 20
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.ndarray], _1: numpy.ndarray, /):
        """
        usage.scipy: 7
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, int, int], slice[int, int, int]], _1: bool, /
    ):
        """
        usage.matplotlib: 1
        usage.skimage: 10
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[int, int, int], slice[int, int, int], slice[int, int, int]],
        _1: int,
        /,
    ):
        """
        usage.skimage: 12
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[List[int], List[int]], _1: bool, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int], _1: bool, /):
        """
        usage.matplotlib: 5
        usage.scipy: 19
        usage.skimage: 4
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[int, int, int]], _1: numpy.ndarray, /):
        """
        usage.dask: 2
        usage.scipy: 13
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[Tuple[int, int], ellipsis], _1: numpy.float16, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[Tuple[int, int], ellipsis], _1: int, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[Tuple[int, int], ellipsis], _1: numpy.uint8, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, None, None], Tuple[int, int], ellipsis],
        _1: numpy.uint8,
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, None, None], slice[None, None, None], Tuple[int, int], ellipsis
        ],
        _1: numpy.uint8,
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, None, None], Tuple[int, int], ellipsis], _1: int, /
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, None, None], slice[None, None, None], Tuple[int, int], ellipsis
        ],
        _1: int,
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[Tuple[int, int], ellipsis], _1: numpy.float32, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, None, None], Tuple[int, int], ellipsis],
        _1: numpy.float32,
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[Tuple[int, int], ellipsis], _1: numpy.int64, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, None, None], Tuple[int, int], ellipsis],
        _1: numpy.int64,
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[Tuple[int, int], ellipsis], _1: numpy.float64, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, None, None], Tuple[int, int], ellipsis],
        _1: numpy.float64,
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, None, None], slice[None, None, None], Tuple[int, int], ellipsis
        ],
        _1: numpy.float64,
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
        ],
        _1: int,
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
        ],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.dask: 3
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            Tuple[int, int],
            ellipsis,
        ],
        _1: numpy.float64,
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            Tuple[int, int],
            ellipsis,
        ],
        _1: int,
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
        ],
        _1: int,
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
        ],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.dask: 3
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            Tuple[int, int],
            ellipsis,
        ],
        _1: numpy.float64,
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            Tuple[int, int],
            ellipsis,
        ],
        _1: int,
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[int, slice[int, int, int], slice[int, int, int]], _1: int, /
    ):
        """
        usage.skimage: 6
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[numpy.int64, numpy.int64, numpy.int64],
            slice[numpy.int64, numpy.int64, numpy.int64],
        ],
        _1: bool,
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            int,
            slice[numpy.int64, numpy.int64, numpy.int64],
            slice[numpy.int64, numpy.int64, numpy.int64],
        ],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.skimage: 4
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[numpy.int64, numpy.int64, numpy.int64]], _1: bool, /
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[int, slice[numpy.int64, numpy.int64, numpy.int64]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 9
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[None, None, None], int], _1: bool, /):
        """
        usage.skimage: 6
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, slice[int, int, int]], _1: bool, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, None, None], slice[int, int, int]], _1: bool, /
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[int, None, int], slice[int, None, int]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 10
        usage.skimage: 1
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[int, None, int], slice[None, None, None]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.matplotlib: 1
        usage.scipy: 16
        usage.skimage: 4
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[int, None, int], slice[None, int, None]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 4
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, None, None], slice[int, None, int]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 18
        usage.skimage: 4
        usage.sklearn: 8
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, None, None], slice[None, None, None]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.skimage: 1
        usage.sklearn: 4
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, int, None], slice[int, None, int]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 6
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray],
        _1: int,
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, None, None], numpy.ndarray], _1: numpy.ndarray, /
    ):
        """
        usage.scipy: 3
        usage.skimage: 4
        usage.sklearn: 22
        usage.xarray: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[int, slice[int, int, int], slice[None, None, None]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.skimage: 3
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[int, slice[None, None, None], slice[int, int, int]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.skimage: 3
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            int, slice[int, int, int], slice[None, None, None], slice[None, None, None]
        ],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            int, slice[None, None, None], slice[int, int, int], slice[None, None, None]
        ],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            int, slice[None, None, None], slice[None, None, None], slice[int, int, int]
        ],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[int, None, int], slice[None, None, None], slice[None, None, None]
        ],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, None, None], slice[int, None, int], slice[None, None, None]
        ],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, None, None], slice[None, None, None], slice[int, None, int]
        ],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 1
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            int,
            slice[None, None, None],
        ],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, slice[int, int, int]], _1: numpy.ndarray, /):
        """
        usage.scipy: 12
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[int, None, int]], _1: numpy.ndarray, /):
        """
        usage.scipy: 31
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            int,
            slice[int, int, int],
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
        ],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            int,
            slice[None, None, None],
            slice[int, int, int],
            slice[None, None, None],
            slice[None, None, None],
        ],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            int,
            slice[None, None, None],
            slice[None, None, None],
            slice[int, int, int],
            slice[None, None, None],
        ],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            int,
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            slice[int, int, int],
        ],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[int, None, int],
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
        ],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[int, None, int],
            slice[None, None, None],
            slice[None, None, None],
        ],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            slice[int, None, int],
            slice[None, None, None],
        ],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            slice[int, None, int],
        ],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[int, int, int], slice[int, int, int], slice[int, int, int]],
        _1: float,
        /,
    ):
        """
        usage.skimage: 3
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[int, slice[int, int, int], slice[int, int, int]], _1: float, /
    ):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[int, int, int]], _1: float, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
        ],
        _1: float,
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, slice[int, None, int]], _1: int, /):
        """
        usage.scipy: 7
        usage.skimage: 4
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.int64, numpy.int64], _1: int, /):
        """
        usage.scipy: 1
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.int64, numpy.int64], _1: numpy.float64, /):
        """
        usage.scipy: 3
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[int, slice[int, None, int], slice[None, None, None]], _1: int, /
    ):
        """
        usage.skimage: 3
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.int64, numpy.int64, numpy.int64], _1: int, /):
        """
        usage.scipy: 20
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[numpy.int64, numpy.int64, numpy.int64], _1: numpy.float64, /
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[numpy.int64, None, numpy.int64], slice[numpy.int64, None, numpy.int64]
        ],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[numpy.int64, None, numpy.int64],
            slice[numpy.int64, None, numpy.int64],
            slice[numpy.int64, None, numpy.int64],
        ],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[int, int, int], slice[int, int, int], slice[int, int, int]],
        _1: bool,
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, slice[None, None, None]], _1: bool, /):
        """
        usage.skimage: 3
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[int, slice[None, None, None]], _1: numpy.ndarray, /
    ):
        """
        usage.dask: 2
        usage.matplotlib: 7
        usage.scipy: 36
        usage.skimage: 2
        usage.sklearn: 18
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, slice[None, int, None]], _1: List[int], /):
        """
        usage.skimage: 3
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, slice[int, None, int]], _1: List[int], /):
        """
        usage.skimage: 3
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, None, None], slice[None, None, None], slice[None, None, None]
        ],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(self, _0: numpy.ndarray, _1: Tuple[int, int, int], /):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, None, None], slice[None, None, None]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 1
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, None, None], slice[None, None, None]], _1: bool, /
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, int, None], slice[None, int, None]], _1: bool, /
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, None, int], slice[None, int, None]], _1: bool, /
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, int, None], slice[int, None, int]], _1: bool, /
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[int, int, int], int], _1: int, /):
        """
        usage.scipy: 4
        usage.skimage: 2
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, int, None], slice[None, int, None], slice[None, int, None]
        ],
        _1: bool,
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[int, None, int], slice[None, int, None], slice[None, int, None]
        ],
        _1: bool,
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, int, None], slice[int, None, int], slice[None, int, None]
        ],
        _1: bool,
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, int, None], slice[None, int, None], slice[int, None, int]
        ],
        _1: bool,
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, int, None], slice[int, None, int]], _1: float, /
    ):
        """
        usage.skimage: 3
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, None, int], slice[None, int, None]], _1: float, /
    ):
        """
        usage.scipy: 3
        usage.skimage: 7
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, None, int], slice[int, None, int]], _1: float, /
    ):
        """
        usage.scipy: 16
        usage.skimage: 7
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, int, None], slice[None, int, None], int], _1: int, /
    ):
        """
        usage.skimage: 6
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, None, int], slice[None, int, None], int], _1: int, /
    ):
        """
        usage.skimage: 6
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, None, int], slice[int, None, int], int], _1: int, /
    ):
        """
        usage.skimage: 6
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            int,
            slice[numpy.int64, numpy.int64, numpy.int64],
            slice[numpy.int64, numpy.int64, numpy.int64],
        ],
        _1: int,
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 3
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, int, None], slice[None, int, None], slice[int, int, int]],
        _1: int,
        /,
    ):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, int, None], slice[int, None, int], slice[int, int, int]],
        _1: int,
        /,
    ):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[int, None, int], slice[None, int, None], slice[int, int, int]],
        _1: int,
        /,
    ):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[int, None, int], slice[int, None, int], slice[int, int, int]],
        _1: int,
        /,
    ):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, int, None], slice[None, int, None], slice[None, int, None]
        ],
        _1: Tuple[int, int, int],
        /,
    ):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, int, None], slice[None, int, None], slice[int, None, int]
        ],
        _1: Tuple[int, int, int],
        /,
    ):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, int, None], slice[int, None, int], slice[None, int, None]
        ],
        _1: Tuple[int, int, int],
        /,
    ):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, int, None], slice[int, None, int], slice[int, None, int]],
        _1: Tuple[int, int, int],
        /,
    ):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[int, None, int], slice[None, int, None], slice[None, int, None]
        ],
        _1: Tuple[int, int, int],
        /,
    ):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[int, None, int], slice[None, int, None], slice[int, None, int]],
        _1: Tuple[int, int, int],
        /,
    ):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[int, None, int], slice[int, None, int], slice[None, int, None]],
        _1: Tuple[int, int, int],
        /,
    ):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[int, None, int], slice[int, None, int], slice[int, None, int]],
        _1: Tuple[int, int, int],
        /,
    ):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, int, None], slice[None, int, None], slice[None, int, None]
        ],
        _1: numpy.float64,
        /,
    ):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, int, None], slice[None, int, None], slice[int, None, int]
        ],
        _1: numpy.float64,
        /,
    ):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, int, None], slice[int, None, int], slice[None, int, None]
        ],
        _1: numpy.float64,
        /,
    ):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, int, None], slice[int, None, int], slice[int, None, int]],
        _1: numpy.float64,
        /,
    ):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[int, None, int], slice[None, int, None], slice[None, int, None]
        ],
        _1: numpy.float64,
        /,
    ):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[int, None, int], slice[None, int, None], slice[int, None, int]],
        _1: numpy.float64,
        /,
    ):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[int, None, int], slice[int, None, int], slice[None, int, None]],
        _1: numpy.float64,
        /,
    ):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[int, None, int], slice[int, None, int], slice[int, None, int]],
        _1: numpy.float64,
        /,
    ):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[numpy.int64, None, numpy.int64], slice[numpy.int64, None, numpy.int64]
        ],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, None, int], numpy.int64], _1: numpy.ndarray, /
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[numpy.ndarray, slice[None, None, None]], _1: int, /
    ):
        """
        usage.matplotlib: 1
        usage.skimage: 2
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[numpy.ndarray, slice[None, None, None]], _1: numpy.ndarray, /
    ):
        """
        usage.skimage: 2
        usage.sklearn: 7
        usage.xarray: 3
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, numpy.ndarray], _1: numpy.ndarray, /):
        """
        usage.scipy: 5
        usage.skimage: 1
        usage.sklearn: 4
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[None, None, None], int], _1: float, /):
        """
        usage.matplotlib: 5
        usage.scipy: 2
        usage.skimage: 1
        usage.sklearn: 13
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[int, int, int], int], _1: bool, /):
        """
        usage.skimage: 4
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, int, int], int], _1: Tuple[float, float], /
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int, int, int, int], _1: int, /):
        """
        usage.skimage: 2
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int, int, int, int, int], _1: int, /):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int, int, int, int, int, int], _1: int, /):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[int, int, int], int], _1: numpy.ndarray, /):
        """
        usage.dask: 1
        usage.matplotlib: 8
        usage.scipy: 9
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[int, int, int], int],
        _1: Tuple[numpy.float64, numpy.float64],
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int, slice[None, None, None]], _1: int, /):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[int, int, int], slice[int, int, int], slice[None, None, None]],
        _1: int,
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[int, int, int], slice[int, int, int], ellipsis],
        _1: int,
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[int, int, int], slice[int, int, int], slice[None, None, None]],
        _1: float,
        /,
    ):
        """
        usage.skimage: 4
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, ellipsis], _1: range, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[int, int, int], slice[int, int, int], slice[None, None, None]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 6
        usage.skimage: 3
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[ellipsis, int], _1: numpy.float32, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[ellipsis, int], _1: numpy.int64, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[numpy.int64, None, numpy.int64], slice[numpy.int64, None, numpy.int64]
        ],
        _1: int,
        /,
    ):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[numpy.int64, None, numpy.int64],
            slice[numpy.int64, None, numpy.int64],
            slice[numpy.int64, None, numpy.int64],
        ],
        _1: int,
        /,
    ):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __setitem__(self, _0: ellipsis, _1: numpy.ndarray, /):
        """
        usage.scipy: 50
        usage.sklearn: 1
        usage.xarray: 2
        """
        ...

    @overload
    def __setitem__(self, _0: numpy.ndarray, _1: bytes, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(self, _0: numpy.ndarray, _1: Literal[""], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, ellipsis], _1: numpy.ndarray, /):
        """
        usage.scipy: 3
        usage.xarray: 4
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, None, None], slice[None, None, None], ellipsis],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.xarray: 3
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[None, ...], _1: cftime._cftime.DatetimeNoLeap, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[None, ...], _1: cftime._cftime.Datetime360Day, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[None, ...], _1: cftime._cftime.DatetimeJulian, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[None, ...], _1: cftime._cftime.DatetimeAllLeap, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[None, ...], _1: cftime._cftime.DatetimeGregorian, /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[None, ...], _1: cftime._cftime.DatetimeProlepticGregorian, /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int], _1: numpy.datetime64, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int], _1: numpy.datetime64, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[None, ...], _1: numpy.datetime64, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, None, None], ellipsis], _1: numpy.ndarray, /
    ):
        """
        usage.xarray: 12
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[ellipsis], _1: numpy.ndarray, /):
        """
        usage.xarray: 4
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            ellipsis,
        ],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            ellipsis,
        ],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int, ellipsis], _1: numpy.ndarray, /):
        """
        usage.xarray: 4
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[int, slice[None, None, None], ellipsis], _1: numpy.ndarray, /
    ):
        """
        usage.xarray: 4
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, None, None], int, ellipsis], _1: numpy.ndarray, /
    ):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[List[int], slice[None, None, None]], _1: int, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[None, None, None], List[int]], _1: int, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[numpy.ndarray, slice[None, None, None], slice[None, None, None]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[int, int, int], slice[None, None, None], ellipsis],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[None, ...], _1: Tuple[Literal["a"], numpy.int64, numpy.int64], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[None, ...], _1: Tuple[Literal["b"], numpy.int64, numpy.int64], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: slice[None, None, None],
        _1: List[Tuple[Literal["a", "b"], int, int]],
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, int, None], slice[None, int, None], ellipsis],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[None, None, None], int], _1: float, /):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, int, None], ellipsis], _1: numpy.ndarray, /
    ):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[ellipsis, slice[int, None, int]], _1: float, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[ellipsis, slice[int, None, int]], _1: numpy.ndarray, /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[None, ...], _1: Literal["2000-01-01"], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[None, ...], _1: Literal["2000-01-02"], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[None, ...], _1: Literal["2000-01-03"], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, int, None], slice[None, None, None], ellipsis],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[int, None, int], slice[None, None, None], ellipsis],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, None, int], ellipsis], _1: numpy.ndarray, /
    ):
        """
        usage.scipy: 1
        usage.xarray: 3
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[None, ...], _1: Literal["a"], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[None, ...], _1: Literal["b"], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[None, ...], _1: bytes, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[None, ...], _1: bool, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[None, ...], _1: Literal["d"], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[None, ...], _1: Tuple[Literal["a"], numpy.int64], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[None, ...], _1: Tuple[Literal["b"], numpy.int64], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[None, ...], _1: Tuple[Literal["c"], numpy.int64], /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int, slice[None, None, None]], _1: float, /):
        """
        usage.scipy: 3
        usage.xarray: 3
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
        ],
        _1: int,
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(self, _0: ellipsis, _1: int, /):
        """
        usage.scipy: 4
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, slice[None, None, None], int], _1: int, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            int,
            slice[None, None, None],
            int,
            slice[None, None, None],
            slice[None, None, None],
        ],
        _1: int,
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            int,
        ],
        _1: int,
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[None, int, None], ellipsis, int], _1: int, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, int, None],
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            int,
        ],
        _1: int,
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[ellipsis, int, slice[None, None, None]], _1: int, /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            int,
            slice[None, None, None],
        ],
        _1: int,
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            numpy.ndarray,
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
        ],
        _1: int,
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            numpy.ndarray,
            numpy.ndarray,
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
        ],
        _1: int,
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[ellipsis, numpy.ndarray, numpy.ndarray], _1: int, /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            numpy.ndarray,
            numpy.ndarray,
        ],
        _1: int,
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[ellipsis, int, int, int, int, int], _1: int, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[None, ...], _1: Tuple[Literal["a"], int], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(self, _0: slice[None, None, None], _1: List[Tuple[int]], /):
        """
        usage.sklearn: 3
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[None, ...], _1: Tuple[int, int], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[None, ...], _1: Tuple[numpy.int64, numpy.int64], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int, int, ellipsis], _1: numpy.ndarray, /):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[None, None, None], ellipsis], _1: int, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, None, None], slice[None, int, None], ellipsis],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, None, None], slice[int, None, int], ellipsis],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(self, _0: slice[None, None, None], _1: float, /):
        """
        usage.dask: 1
        usage.matplotlib: 2
        usage.scipy: 4
        usage.sklearn: 1
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[List[int], List[int], slice[None, None, None]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[List[int], slice[None, None, None], List[int]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, None, None], List[int], List[int]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(self, _0: slice[int, int, int], _1: float, /):
        """
        usage.scipy: 1
        usage.sklearn: 1
        usage.xarray: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, None, None], slice[None, None, None], int, ellipsis],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: List[int], /):
        """
        usage.scipy: 22
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            int,
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            ellipsis,
        ],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: Tuple[Literal["a"], int], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[xarray.core.variable.Variable, xarray.core.variable.Variable],
        _1: int,
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[xarray.core.variable.Variable, xarray.core.variable.Variable],
        _1: xarray.core.variable.Variable,
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, None, None], xarray.core.variable.Variable],
        _1: xarray.core.variable.Variable,
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[xarray.core.variable.Variable, xarray.core.variable.Variable],
        _1: List[int],
        /,
    ):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[numpy.ndarray, slice[None, None, None], numpy.ndarray],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[int, slice[None, None, None], int, ellipsis],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[None, ...], _1: object, /):
        """
        usage.scipy: 1
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[None, ...], _1: List[int], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[None, ...], _1: pandas._libs.tslibs.period.Period, /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __setitem__(self, _0: object, _1: object, /):
        """
        usage.pandas: 5607
        """
        ...

    @overload
    def __setitem__(self, _0: List[int], _1: numpy.int64, /):
        """
        usage.scipy: 8
        """
        ...

    @overload
    def __setitem__(self, _0: slice[None, int, None], _1: numpy.ndarray, /):
        """
        usage.dask: 3
        usage.matplotlib: 4
        usage.scipy: 56
        usage.sklearn: 30
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: numpy.complex256, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: numpy.complex128, /):
        """
        usage.scipy: 30
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            slice[None, None, None],
            slice[int, int, int],
        ],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            slice[int, int, int],
            slice[None, None, None],
        ],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, None, None], slice[int, int, int], slice[int, int, int]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.matplotlib: 3
        usage.scipy: 6
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, None, None], slice[int, int, int], slice[None, None, None]
        ],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 6
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: numpy.float128, /):
        """
        usage.scipy: 7
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[int, int, int], slice[None, None, None], slice[int, int, int]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: complex, /):
        """
        usage.scipy: 15
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, None, None], int, slice[None, None, None]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.matplotlib: 1
        usage.scipy: 6
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[None, int, None], int], _1: numpy.ndarray, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[int, int, int], int], _1: numpy.ndarray, /):
        """
        usage.matplotlib: 6
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[int, None, int], slice[int, None, int]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[int, None, int], slice[None, None, None]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, None, None], slice[int, None, int]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[int, None, int], slice[None, None, None]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, int, None], slice[int, None, int]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, slice[int, None, int]], _1: numpy.ndarray, /):
        """
        usage.matplotlib: 2
        usage.scipy: 16
        """
        ...

    @overload
    def __setitem__(self, _0: slice[int, int, int], _1: numpy.ndarray, /):
        """
        usage.matplotlib: 11
        usage.scipy: 117
        usage.sklearn: 10
        """
        ...

    @overload
    def __setitem__(self, _0: slice[int, int, int], _1: numpy.float64, /):
        """
        usage.scipy: 2
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: slice[None, int, None], _1: numpy.float64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: slice[int, None, int], _1: numpy.float64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: slice[int, int, int], _1: List[float], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(self, _0: slice[int, None, int], _1: Tuple[bool, bool], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, None, None], numpy.ndarray], _1: float, /
    ):
        """
        usage.scipy: 3
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[numpy.ndarray, slice[None, None, None]], _1: float, /
    ):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __setitem__(self, _0: ellipsis, _1: float, /):
        """
        usage.scipy: 6
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, None, None], int, int], _1: numpy.ndarray, /
    ):
        """
        usage.dask: 4
        usage.matplotlib: 17
        usage.scipy: 23
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, None, None], int, int], _1: Tuple[int, int, int], /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, slice[None, int, None]], _1: numpy.ndarray, /):
        """
        usage.matplotlib: 2
        usage.scipy: 4
        usage.sklearn: 9
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[int, slice[None, None, None], slice[None, None, None]],
        _1: int,
        /,
    ):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[int, slice[None, None, None], int], _1: numpy.ndarray, /
    ):
        """
        usage.dask: 4
        usage.scipy: 8
        """
        ...

    @overload
    def __setitem__(self, _0: slice[int, int, int], _1: List[int], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: slice[int, None, int], _1: numpy.int32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: list, /):
        """
        usage.scipy: 7
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: List[float], /):
        """
        usage.scipy: 19
        """
        ...

    @overload
    def __setitem__(self, _0: Literal["mopt"], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Literal["mrows"], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Literal["ncols"], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Literal["imagf"], _1: bool, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Literal["namlen"], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Literal["description"], _1: str, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Literal["version"], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Literal["endian_test"], _1: numpy.ndarray, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Literal["data_type"], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Literal["byte_count"], _1: int, /):
        """
        usage.scipy: 9
        """
        ...

    @overload
    def __setitem__(self, _0: Literal["flags_class"], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Literal["nzmax"], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Literal["mdtype"], _1: int, /):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def __setitem__(self, _0: Literal["imagf"], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, int, None], slice[int, int, int]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, slice[int, int, int]], _1: Tuple[int, int], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Literal["byte_count_mdtype"], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Literal["data"], _1: bytes, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int], _1: Literal["Hello"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int], _1: Literal["World"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int], _1: Literal["Hello, world"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.ndarray], _1: Literal[" "], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Literal["val"], _1: int, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: numpy.int16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: numpy.int32, /):
        """
        usage.scipy: 5
        usage.sklearn: 4
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: numpy.float32, /):
        """
        usage.scipy: 3
        usage.sklearn: 9
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: bytes, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: numpy.complex64, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: scipy.io.idl.Pointer, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int], _1: complex, /):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int], _1: numpy.complex128, /):
        """
        usage.scipy: 33
        """
        ...

    @overload
    def __setitem__(self, _0: slice[None, None, None], _1: List[Union[float, int]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, None, None], numpy.int64], _1: numpy.ndarray, /
    ):
        """
        usage.scipy: 18
        usage.sklearn: 4
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int], _1: numpy.float128, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int], _1: numpy.complex256, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[int, numpy.int64, int], slice[int, numpy.int64, int]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 8
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[numpy.int64, numpy.int64, numpy.int64],
            slice[numpy.int64, numpy.int64, numpy.int64],
        ],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 7
        """
        ...

    @overload
    def __setitem__(self, _0: List[Union[int, numpy.int64]], _1: numpy.ndarray, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, slice[None, int, None]], _1: numpy.float32, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, slice[int, int, int]], _1: numpy.float32, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, slice[None, int, None]], _1: numpy.float64, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, slice[int, int, int]], _1: numpy.float64, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[int, slice[None, int, None]], _1: numpy.complex64, /
    ):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, slice[int, int, int]], _1: numpy.complex64, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[int, slice[None, int, None]], _1: numpy.complex128, /
    ):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[int, slice[int, int, int]], _1: numpy.complex128, /
    ):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[List[int], List[int]], _1: numpy.ndarray, /):
        """
        usage.scipy: 10
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[numpy.ndarray, numpy.ndarray], _1: numpy.float32, /
    ):
        """
        usage.scipy: 9
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[numpy.ndarray, numpy.ndarray], _1: numpy.float64, /
    ):
        """
        usage.scipy: 9
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[numpy.ndarray, numpy.ndarray], _1: numpy.complex64, /
    ):
        """
        usage.scipy: 9
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[numpy.ndarray, numpy.ndarray], _1: numpy.complex128, /
    ):
        """
        usage.scipy: 9
        """
        ...

    @overload
    def __setitem__(self, _0: numpy.ndarray, _1: complex, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[ellipsis, range, range], _1: numpy.ndarray, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[ellipsis, range, range], _1: float, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.ndarray, numpy.ndarray], _1: complex, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray], _1: complex, /
    ):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray], _1: float, /
    ):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray],
        _1: complex,
        /,
    ):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray],
        _1: float,
        /,
    ):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[Tuple[int, int, int], Tuple[int, int, int]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[List[Union[int, numpy.int64]], slice[int, int, int]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.int64, numpy.int64], _1: float, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.int64, numpy.int64], _1: numpy.complex128, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[int, slice[int, numpy.int64, int]], _1: numpy.ndarray, /
    ):
        """
        usage.scipy: 9
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int], _1: numpy.complex64, /):
        """
        usage.scipy: 7
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.int64, numpy.int64], _1: numpy.complex64, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, None, None], List[Union[numpy.int64, int]]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 8
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int], _1: numpy.float32, /):
        """
        usage.scipy: 13
        usage.sklearn: 2
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, int, None], slice[int, int, int]], _1: float, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, int, int], slice[int, None, int]], _1: float, /
    ):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[int, None, int], slice[int, int, int]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 6
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[List[int], List[int]], _1: int, /):
        """
        usage.scipy: 7
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[range, range], _1: float, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[range, range], _1: numpy.ndarray, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[List[int], int], _1: List[Union[int, numpy.float64]], /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: numpy.ndarray, _1: numpy.int64, /):
        """
        usage.scipy: 2
        usage.sklearn: 5
        """
        ...

    @overload
    def __setitem__(self, _0: slice[None, None, None], _1: None, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: List[int], _1: numpy.ndarray, /):
        """
        usage.dask: 1
        usage.scipy: 6
        usage.sklearn: 2
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, None, None], slice[None, int, None]], _1: int, /
    ):
        """
        usage.scipy: 1
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, None, None], slice[None, None, None], int],
        _1: float,
        /,
    ):
        """
        usage.matplotlib: 5
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int], _1: scipy.sparse.coo.coo_matrix, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: slice[None, None, None], _1: Literal["START"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: slice[None, None, None], _1: str, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(self, _0: slice[int, int, int], _1: List[numpy.float64], /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __setitem__(self, _0: List[Union[numpy.int64, int]], _1: numpy.ndarray, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[List[Union[numpy.int64, int]], slice[None, None, None]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(self, _0: slice[int, int, int], _1: List[numpy.ndarray], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: slice[int, int, int], _1: List[Union[numpy.float64, float]], /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: slice[int, int, int], _1: list, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[List[int], slice[None, None, None]], _1: numpy.ndarray, /
    ):
        """
        usage.dask: 2
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, List[int]], _1: Tuple[int, int, int, int], /):
        """
        usage.scipy: 6
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, List[int]], _1: Tuple[int, int], /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, List[int]], _1: Tuple[int, int, int], /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, List[int]], _1: Tuple[float, float], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, List[int]], _1: Tuple[float, float, float], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.ndarray, int], _1: float, /):
        """
        usage.scipy: 4
        usage.sklearn: 5
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, None, None], int], _1: numpy.float64, /
    ):
        """
        usage.scipy: 2
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, slice[None, int, None]], _1: int, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, None, int], slice[None, None, None]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[None, None, None], int, int], _1: int, /):
        """
        usage.matplotlib: 3
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, None, None], range, range], _1: numpy.ndarray, /
    ):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: numpy.uint64, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __setitem__(self, _0: slice[None, numpy.int64, None], _1: numpy.ndarray, /):
        """
        usage.scipy: 3
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: slice[numpy.int64, None, numpy.int64], _1: numpy.ndarray, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, numpy.int64, None], slice[None, None, None]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[numpy.int64, None, numpy.int64], slice[None, None, None]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, numpy.int64, None], slice[None, None, None]],
        _1: numpy.matrix,
        /,
    ):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[numpy.int64, None, numpy.int64], slice[None, None, None]],
        _1: numpy.matrix,
        /,
    ):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(self, _0: slice[None, None, None], _1: bytes, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, numpy.ndarray], _1: int, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(self, _0: numpy.int64, _1: numpy.float64, /):
        """
        usage.scipy: 17
        usage.sklearn: 8
        """
        ...

    @overload
    def __setitem__(self, _0: numpy.int64, _1: numpy.int64, /):
        """
        usage.scipy: 3
        usage.sklearn: 5
        """
        ...

    @overload
    def __setitem__(self, _0: numpy.int64, _1: numpy.ndarray, /):
        """
        usage.scipy: 1
        usage.sklearn: 16
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, slice[int, None, int]], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: numpy.int32, _1: numpy.float64, /):
        """
        usage.scipy: 6
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, None, None], int],
        _1: List[Union[float, numpy.float64]],
        /,
    ):
        """
        usage.scipy: 8
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, None, None], int], _1: List[numpy.float64], /
    ):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, None, None], int],
        _1: List[Union[numpy.float64, float]],
        /,
    ):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, None, None], int],
        _1: List[Union[numpy.float64, int]],
        /,
    ):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, None, None], int],
        _1: List[Union[int, numpy.float64]],
        /,
    ):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, None, None], int],
        _1: List[Union[int, float, numpy.float64]],
        /,
    ):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, None, None], int],
        _1: List[Union[float, int, numpy.float64]],
        /,
    ):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, slice[None, None, None]], _1: float, /):
        """
        usage.scipy: 2
        usage.sklearn: 11
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: List[numpy.complex128], /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: List[numpy.float64], /):
        """
        usage.matplotlib: 1
        usage.scipy: 8
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: List[numpy.complex256], /):
        """
        usage.scipy: 10
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: List[numpy.float128], /):
        """
        usage.scipy: 9
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: List[Union[int, numpy.complex128]], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: List[Union[int, numpy.float64]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: slice[int, int, int], _1: int, /):
        """
        usage.dask: 1
        usage.matplotlib: 2
        usage.scipy: 5
        usage.sklearn: 6
        """
        ...

    @overload
    def __setitem__(self, _0: numpy.ndarray, _1: List[numpy.int64], /):
        """
        usage.scipy: 20
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, slice[None, None, None]], _1: List[int], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[int, slice[None, None, None]], _1: List[numpy.int64], /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[int, int, int],
            slice[None, None, None],
            slice[None, None, None],
            slice[int, int, int],
        ],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[int, int, int],
            slice[None, None, None],
            slice[int, int, int],
        ],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[int, int, int],
            slice[None, None, None],
            slice[int, int, int],
            slice[None, None, None],
        ],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, None, None],
            slice[None, None, None],
            slice[int, int, int],
            slice[None, None, None],
            slice[int, int, int],
        ],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[None, int, None]], _1: numpy.ndarray, /):
        """
        usage.scipy: 7
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, None, None], slice[None, int, None], slice[None, None, None]
        ],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 7
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, None, None], slice[None, None, None], slice[None, int, None]
        ],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.matplotlib: 2
        usage.scipy: 7
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, None, None], slice[None, None, None], slice[None, int, None]
        ],
        _1: List[List[List[int]]],
        /,
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: ellipsis, _1: decimal.Decimal, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[list, list], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[None, ...], _1: numpy.ndarray, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[ellipsis, slice[int, None, int]], _1: numpy.ndarray, /
    ):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __setitem__(self, _0: List[int], _1: bool, /):
        """
        usage.matplotlib: 6
        usage.scipy: 20
        """
        ...

    @overload
    def __setitem__(self, _0: slice[int, numpy.int64, int], _1: numpy.float64, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(
        self, _0: slice[numpy.int64, numpy.int64, numpy.int64], _1: numpy.float64, /
    ):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(self, _0: slice[int, numpy.int64, int], _1: numpy.complex128, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(
        self, _0: slice[numpy.int64, numpy.int64, numpy.int64], _1: numpy.complex128, /
    ):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(self, _0: slice[int, numpy.int64, int], _1: numpy.ndarray, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __setitem__(
        self, _0: slice[numpy.int64, numpy.int64, numpy.int64], _1: numpy.ndarray, /
    ):
        """
        usage.scipy: 42
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[ellipsis, slice[int, int, int]], _1: numpy.ndarray, /
    ):
        """
        usage.scipy: 8
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[int, slice[None, None, None], slice[None, None, None]],
        _1: float,
        /,
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int], _1: int, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.int64], _1: int, /):
        """
        usage.scipy: 21
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: List[complex], /):
        """
        usage.scipy: 11
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: List[bool], /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int], _1: bool, /):
        """
        usage.scipy: 15
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int], _1: numpy.int32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int], _1: numpy.bool_, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int], _1: numpy.int8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int], _1: numpy.uint8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int], _1: numpy.int16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int], _1: numpy.uint16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int], _1: numpy.uint32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int], _1: numpy.int64, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int], _1: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int], _1: numpy.longlong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int], _1: numpy.ulonglong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int], _1: numpy.float32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int], _1: numpy.float64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int], _1: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int], _1: numpy.complex64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int], _1: numpy.complex128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int], _1: numpy.complex256, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, None, int], slice[int, None, int]], _1: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, slice[None, int, None]], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.ndarray, slice[int, int, int]], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: numpy.int64, _1: numpy.int32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: numpy.int32, _1: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: numpy.int32, _1: numpy.int64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: numpy.int32, _1: numpy.complex128, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(self, _0: numpy.int32, _1: numpy.complex64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: numpy.int32, _1: numpy.float32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: numpy.int32, _1: numpy.complex256, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: numpy.int32, _1: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[numpy.int32, slice[None, None, None]], _1: numpy.ndarray, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: List[numpy.int64], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int], _1: numpy.int8, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int], _1: numpy.uint8, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int], _1: numpy.int16, /):
        """
        usage.scipy: 2
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int], _1: numpy.uint16, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int], _1: numpy.int32, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int], _1: numpy.uint32, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int], _1: numpy.uint64, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int], _1: numpy.longlong, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int], _1: numpy.ulonglong, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[numpy.ndarray, slice[int, int, int]], _1: numpy.ndarray, /
    ):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int], _1: numpy.bool_, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int, int], _1: numpy.bool_, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int, int], _1: numpy.int8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int, int], _1: numpy.uint8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int, int], _1: numpy.int16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int, int], _1: numpy.uint16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int, int], _1: numpy.int32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int, int], _1: numpy.uint32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int, int], _1: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int, int], _1: numpy.longlong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int, int], _1: numpy.ulonglong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int, int], _1: numpy.float32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int, int], _1: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int, int], _1: numpy.complex64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int, int], _1: numpy.complex128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int, int], _1: numpy.complex256, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: slice[numpy.int32, numpy.int32, numpy.int32], _1: numpy.ndarray, /
    ):
        """
        usage.scipy: 16
        usage.sklearn: 3
        """
        ...

    @overload
    def __setitem__(self, _0: slice[int, None, int], _1: int, /):
        """
        usage.scipy: 10
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[numpy.ndarray, slice[numpy.int64, numpy.int64, numpy.int64]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[numpy.ndarray, slice[int, numpy.int64, int]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(self, _0: slice[int, None, int], _1: numpy.int64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[numpy.int64, slice[None, None, None]], _1: numpy.ndarray, /
    ):
        """
        usage.scipy: 1
        usage.sklearn: 4
        """
        ...

    @overload
    def __setitem__(self, _0: numpy.int64, _1: numpy.complex128, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(self, _0: numpy.int64, _1: numpy.complex256, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: numpy.int64, _1: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: numpy.int64, _1: numpy.complex64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: numpy.int64, _1: numpy.float32, /):
        """
        usage.scipy: 1
        usage.sklearn: 2
        """
        ...

    @overload
    def __setitem__(self, _0: numpy.int64, _1: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int], _1: List[numpy.float64], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int], _1: List[numpy.int64], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int], _1: list, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: list, _1: bool, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int], _1: List[int], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int], _1: list, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int], _1: List[int], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[None, None, None], int, int], _1: float, /):
        """
        usage.matplotlib: 2
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.ndarray, int, int], _1: int, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.ndarray, int], _1: int, /):
        """
        usage.scipy: 2
        usage.sklearn: 4
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, Tuple[numpy.ndarray]], _1: numpy.ndarray, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, numpy.int64], _1: numpy.float64, /):
        """
        usage.scipy: 5
        usage.sklearn: 3
        """
        ...

    @overload
    def __setitem__(self, _0: ellipsis, _1: numpy.float64, /):
        """
        usage.scipy: 10
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int, int], _1: numpy.ndarray, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int, int, int], _1: numpy.ndarray, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(self, _0: numpy.int64, _1: float, /):
        """
        usage.scipy: 1
        usage.sklearn: 2
        """
        ...

    @overload
    def __setitem__(self, _0: ellipsis, _1: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: slice[None, int, None], _1: float, /):
        """
        usage.scipy: 1
        usage.sklearn: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: numpy.int64,
        _1: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray],
        /,
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, numpy.ndarray], _1: numpy.float64, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(self, _0: slice[None, int, None], _1: bool, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, numpy.ndarray], _1: float, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, int, None], slice[None, None, None]], _1: bool, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, None, None], numpy.ndarray, numpy.ndarray],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int], _1: numpy.ndarray, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[int, int, int], int], _1: float, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: slice[None, None, None], _1: List[int], /):
        """
        usage.scipy: 2
        usage.sklearn: 8
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[None, ...], _1: numpy.float64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[None, ...], _1: numpy.int64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[None, ...], _1: numpy.str_, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: slice[None, None, None],
        _1: List[Union[int, float, bool, Literal["hello"]]],
        /,
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: slice[None, None, None], _1: list, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int], _1: Literal["Oxidation"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, None, None], int], _1: Tuple[float, float], /
    ):
        """
        usage.matplotlib: 2
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[int, int], _1: matplotlib.axes._subplots.AxesSubplot, /
    ):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, None, None], int],
        _1: Tuple[numpy.float64, numpy.float64],
        /,
    ):
        """
        usage.matplotlib: 2
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: Tuple[numpy.int64, numpy.float64], /):
        """
        usage.matplotlib: 2
        """
        ...

    @overload
    def __setitem__(self, _0: slice[None, None, None], _1: numpy.uint8, /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: numpy.uint8, /):
        """
        usage.matplotlib: 14
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, None, None], slice[None, None, None], slice[None, int, None]
        ],
        _1: Tuple[int, int, int],
        /,
    ):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: Tuple[float, float, float, float], /):
        """
        usage.matplotlib: 3
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, None, None], slice[None, None, None], int],
        _1: int,
        /,
    ):
        """
        usage.matplotlib: 5
        """
        ...

    @overload
    def __setitem__(self, _0: slice[int, int, int], _1: numpy.uint8, /):
        """
        usage.matplotlib: 4
        """
        ...

    @overload
    def __setitem__(self, _0: slice[int, None, int], _1: float, /):
        """
        usage.matplotlib: 3
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[int, None, int], int], _1: numpy.ndarray, /):
        """
        usage.matplotlib: 12
        """
        ...

    @overload
    def __setitem__(self, _0: slice[int, None, int], _1: numpy.uint8, /):
        """
        usage.matplotlib: 8
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int], _1: None, /):
        """
        usage.matplotlib: 4
        usage.sklearn: 2
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[int, int], _1: matplotlib.axes._subplots.PolarAxesSubplot, /
    ):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __setitem__(self, _0: slice[int, int, int], _1: numpy.ndarray, /):
        """
        usage.matplotlib: 4
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: Tuple[numpy.float64, numpy.float64], /):
        """
        usage.matplotlib: 4
        """
        ...

    @overload
    def __setitem__(self, _0: slice[int, None, int], _1: bool, /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[int, int], _1: matplotlib.axes._subplots.AitoffAxesSubplot, /
    ):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, None, None], int], _1: Tuple[int, int], /
    ):
        """
        usage.matplotlib: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Literal["flags"], _1: int, /):
        """
        usage.matplotlib: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Literal["points"], _1: numpy.ndarray, /):
        """
        usage.matplotlib: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Literal["colors"], _1: numpy.ndarray, /):
        """
        usage.matplotlib: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[None, int, None], int], _1: numpy.float64, /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[int, None, int], int], _1: float, /):
        """
        usage.matplotlib: 4
        """
        ...

    @overload
    def __setitem__(
        self, _0: int, _1: Tuple[numpy.float64, numpy.float64, numpy.float64, float], /
    ):
        """
        usage.matplotlib: 3
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, None, None], int], _1: Tuple[numpy.float64, int], /
    ):
        """
        usage.matplotlib: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, slice[int, None, int]], _1: numpy.ndarray, /):
        """
        usage.matplotlib: 7
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[int, None, int], slice[int, None, int]],
        _1: Tuple[numpy.ndarray],
        /,
    ):
        """
        usage.matplotlib: 6
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[int, None, int], slice[int, None, int]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.matplotlib: 3
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, slice[int, int, int]], _1: numpy.ndarray, /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, None, None], int],
        _1: Tuple[numpy.int64, numpy.int64],
        /,
    ):
        """
        usage.matplotlib: 2
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: Tuple[numpy.int64, numpy.int64], /):
        """
        usage.matplotlib: 4
        """
        ...

    @overload
    def __setitem__(
        self, _0: slice[numpy.int64, numpy.int64, numpy.int64], _1: bool, /
    ):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[int, None, int], slice[int, None, int]],
        _1: Tuple[numpy.ndarray, numpy.ndarray],
        /,
    ):
        """
        usage.matplotlib: 3
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, slice[int, None, int]], _1: list, /):
        """
        usage.matplotlib: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[int, None, int], slice[int, None, int]],
        _1: Tuple[list],
        /,
    ):
        """
        usage.matplotlib: 3
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[int, None, int], slice[int, None, int]],
        _1: Tuple[Literal["a"]],
        /,
    ):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, int, None], slice[int, None, int]], _1: int, /
    ):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __setitem__(self, _0: numpy.bool_, _1: int, /):
        """
        usage.matplotlib: 5
        """
        ...

    @overload
    def __setitem__(self, _0: slice[None, None, None], _1: List[float], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __setitem__(self, _0: slice[None, None, None], _1: List[numpy.float64], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: int, _1: Tuple[numpy.float64, numpy.float64, numpy.float64, int], /
    ):
        """
        usage.matplotlib: 3
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[None, None, None], slice[None, None, None], slice[None, int, None]
        ],
        _1: numpy.ma.core.MaskedArray,
        /,
    ):
        """
        usage.matplotlib: 4
        """
        ...

    @overload
    def __setitem__(self, _0: slice[int, int, int], _1: bool, /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, None, None], slice[None, None, None], int],
        _1: numpy.uint8,
        /,
    ):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __setitem__(self, _0: slice[numpy.int64, numpy.int64, numpy.int64], _1: int, /):
        """
        usage.matplotlib: 1
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, None, None], int], _1: Tuple[float, int], /
    ):
        """
        usage.matplotlib: 2
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[int, slice[None, None, None]], _1: List[numpy.float64], /
    ):
        """
        usage.matplotlib: 5
        """
        ...

    @overload
    def __setitem__(self, _0: slice[None, None, None], _1: float, /):
        """
        usage.matplotlib: 1
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, None, None], int], _1: Tuple[int, float], /
    ):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, None, None], slice[int, int, int]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.matplotlib: 3
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.int32, numpy.int32], _1: numpy.float64, /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.ndarray, int, int], _1: numpy.ndarray, /):
        """
        usage.matplotlib: 8
        usage.sklearn: 3
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[None, None, None], slice[int, None, int]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.matplotlib: 3
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[int, None, int], slice[None, None, None]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.matplotlib: 4
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[numpy.ma.core.MaskedArray, slice[None, None, None]], _1: int, /
    ):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __setitem__(self, _0: numpy.ma.core.MaskedArray, _1: int, /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __setitem__(self, _0: slice[int, None, int], _1: bool, /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[int, int, int], int], _1: List[float], /):
        """
        usage.matplotlib: 2
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: Tuple[float, int], /):
        """
        usage.matplotlib: 2
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, None, None], int], _1: Tuple[int, numpy.float64], /
    ):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[int, int], _1: matplotlib.axes._subplots.Axes3DSubplot, /
    ):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[int, int, int]], _1: int, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int], _1: Tuple[str, int], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int], _1: Tuple[str, int, int], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int, int], _1: Tuple[str, int, int, int], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[int, int, int, int], _1: Tuple[str, int, int, int, int], /
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[List[int]], _1: numpy.ndarray, /):
        """
        usage.dask: 6
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[List[int], slice[None, None, None], slice[None, None, None]],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.dask: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[int, int, int], slice[int, int, int], slice[int, int, int]],
        _1: numpy.memmap,
        /,
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, int, int], slice[int, int, int]], _1: object, /
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[slice[int, int, int], slice[int, int, int], slice[int, int, int]],
        _1: object,
        /,
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int], _1: dask.array.core.Array, /):
        """
        usage.dask: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[None, None, None]], _1: numpy.ndarray, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int], _1: dask.array.core.Array, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int, int], _1: dask.array.core.Array, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int], _1: Tuple[Literal["A"], int, int], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __setitem__(self, _0: slice[None, None, None], _1: numpy.int64, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Literal["vals"], _1: numpy.ndarray, /):
        """
        usage.dask: 4
        """
        ...

    @overload
    def __setitem__(self, _0: Literal["arg"], _1: numpy.ndarray, /):
        """
        usage.dask: 2
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
            slice[int, int, int],
        ],
        _1: numpy.ndarray,
        /,
    ):
        """
        usage.dask: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Literal["values"], _1: numpy.ndarray, /):
        """
        usage.dask: 4
        """
        ...

    @overload
    def __setitem__(self, _0: Literal["inverse"], _1: numpy.ndarray, /):
        """
        usage.dask: 3
        """
        ...

    @overload
    def __setitem__(self, _0: slice[None, None, None], _1: List[numpy.ndarray], /):
        """
        usage.sklearn: 21
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: sklearn.utils._fast_dict.IntFloatDict, /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, None, None], slice[None, None, None]], _1: int, /
    ):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: numpy.matrix, /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def __setitem__(self, _0: List[numpy.int64], _1: numpy.ndarray, /):
        """
        usage.sklearn: 10
        """
        ...

    @overload
    def __setitem__(self, _0: numpy.ndarray, _1: numpy.float32, /):
        """
        usage.sklearn: 12
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, None, None], numpy.ndarray], _1: int, /
    ):
        """
        usage.sklearn: 3
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, None, None], slice[int, int, int]], _1: float, /
    ):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, numpy.uint8], _1: numpy.float64, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.int64, int, int], _1: numpy.float64, /):
        """
        usage.sklearn: 4
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[int, int], _1: sklearn.tree._classes.DecisionTreeRegressor, /
    ):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.int64, int], _1: numpy.float64, /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.int64, int, int], _1: float, /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[int, int], _1: Dict[Literal["foo"], Literal["bar"]], /
    ):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, None, None], numpy.int64], _1: float, /
    ):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[int, None, int], slice[int, None, int]], _1: bool, /
    ):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: slice[None, None, None], _1: bool, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(
        self,
        _0: Tuple[ellipsis, int],
        _1: sklearn.linear_model._cd_fast._memoryviewslice,
        /,
    ):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.ndarray, numpy.int64], _1: numpy.ndarray, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: Literal["c"], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: Literal["d"], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: Literal["a"], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: Literal["j"], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: Literal["x"], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: int, _1: Literal["b"], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[None, int, None], int], _1: float, /):
        """
        usage.sklearn: 4
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, None, None], numpy.int32], _1: numpy.float64, /
    ):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def __setitem__(self, _0: slice[None, None, None], _1: numpy.float64, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[range, numpy.ndarray], _1: int, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.ndarray], _1: int, /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.ndarray, numpy.ndarray], _1: List[float], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, int], _1: scipy.sparse.csr.csr_matrix, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: slice[None, None, None], _1: List[bool], /):
        """
        usage.sklearn: 6
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.ndarray, numpy.int64], _1: float, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: slice[numpy.int32, numpy.int32, numpy.int32], _1: float, /
    ):
        """
        usage.sklearn: 3
        """
        ...

    @overload
    def __setitem__(self, _0: numpy.ndarray, _1: numpy.str_, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.ndarray, int], _1: None, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[None, None, None], int], _1: None, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.ndarray, int], _1: Literal["abc"], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.ndarray, int], _1: numpy.int64, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[slice[None, None, None], int], _1: numpy.int64, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.ndarray, int], _1: Literal["Female"], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: numpy.ndarray, _1: Literal["a"], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[numpy.ndarray, int], _1: Literal["def"], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: slice[None, None, None], _1: List[Literal["1", "3", "2"]], /
    ):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: slice[None, None, None], _1: List[Literal["3", "2", "1"]], /
    ):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: slice[None, None, None], _1: List[Literal["a", "c", "b"]], /
    ):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: slice[None, None, None], _1: List[Literal["c", "b", "a"]], /
    ):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, numpy.int32], _1: numpy.int64, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Tuple[int, numpy.int32], _1: numpy.float64, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, None, None], int], _1: numpy.ndarray, /
    ):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(
        self, _0: Tuple[slice[None, None, None], Tuple[numpy.ndarray]], _1: float, /
    ):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: slice[None, None, None], _1: List[List[int]], /):
        """
        usage.sklearn: 1
        """
        ...

    def __setitem__(self, _0: object, _1: object, /):
        """
        usage.dask: 134
        usage.matplotlib: 542
        usage.pandas: 5607
        usage.sample-usage: 1
        usage.scipy: 3992
        usage.skimage: 1348
        usage.sklearn: 1435
        usage.xarray: 178
        """
        ...

    def __setstate__(self, _0: Tuple[int, Tuple[int], numpy.dtype, bool, bytes], /):
        """
        usage.pandas: 2
        """
        ...

    @overload
    def __sub__(self, _0: numpy.ndarray, /):
        """
        usage.dask: 17
        usage.matplotlib: 133
        usage.scipy: 1424
        usage.skimage: 183
        usage.sklearn: 526
        usage.xarray: 35
        """
        ...

    @overload
    def __sub__(self, _0: float, /):
        """
        usage.dask: 1
        usage.matplotlib: 34
        usage.scipy: 270
        usage.skimage: 20
        usage.sklearn: 36
        usage.xarray: 3
        """
        ...

    @overload
    def __sub__(self, _0: int, /):
        """
        usage.dask: 27
        usage.matplotlib: 34
        usage.sample-usage: 1
        usage.scipy: 360
        usage.skimage: 54
        usage.sklearn: 85
        usage.xarray: 9
        """
        ...

    @overload
    def __sub__(self, _0: numpy.float64, /):
        """
        usage.matplotlib: 11
        usage.scipy: 157
        usage.skimage: 31
        usage.sklearn: 51
        usage.xarray: 1
        """
        ...

    @overload
    def __sub__(self, _0: numpy.int64, /):
        """
        usage.matplotlib: 1
        usage.scipy: 6
        usage.skimage: 9
        usage.sklearn: 1
        usage.xarray: 3
        """
        ...

    @overload
    def __sub__(self, _0: numpy.uint8, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __sub__(self, _0: Tuple[float, float], /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __sub__(self, _0: Tuple[int], /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __sub__(self, _0: Tuple[int, int, int], /):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __sub__(self, _0: Tuple[int, int], /):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __sub__(self, _0: Tuple[int, int, int, int], /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __sub__(self, _0: Tuple[int, int, int, int, int], /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __sub__(self, _0: numpy.float16, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __sub__(self, _0: numpy.float32, /):
        """
        usage.scipy: 1
        usage.skimage: 1
        usage.sklearn: 3
        """
        ...

    @overload
    def __sub__(self, _0: numpy.uint64, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __sub__(self, _0: List[cftime._cftime.DatetimeNoLeap], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __sub__(self, _0: List[cftime._cftime.Datetime360Day], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __sub__(self, _0: List[cftime._cftime.DatetimeJulian], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __sub__(self, _0: List[cftime._cftime.DatetimeAllLeap], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __sub__(self, _0: List[cftime._cftime.DatetimeGregorian], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __sub__(self, _0: List[cftime._cftime.DatetimeProlepticGregorian], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __sub__(self, _0: datetime.timedelta, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __sub__(self, _0: cftime._cftime.DatetimeGregorian, /):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __sub__(self, _0: cftime._cftime.DatetimeProlepticGregorian, /):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __sub__(self, _0: numpy.datetime64, /):
        """
        usage.matplotlib: 1
        usage.xarray: 2
        """
        ...

    @overload
    def __sub__(self, _0: cftime._cftime.DatetimeNoLeap, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __sub__(self, _0: cftime._cftime.Datetime360Day, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __sub__(self, _0: cftime._cftime.DatetimeJulian, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __sub__(self, _0: cftime._cftime.DatetimeAllLeap, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __sub__(self, _0: xarray.core.variable.Variable, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __sub__(self, _0: xarray.core.variable.IndexVariable, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __sub__(self, _0: object, /):
        """
        usage.pandas: 228
        """
        ...

    @overload
    def __sub__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 7
        """
        ...

    @overload
    def __sub__(self, _0: numpy.complex256, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __sub__(self, _0: complex, /):
        """
        usage.scipy: 6
        """
        ...

    @overload
    def __sub__(self, _0: scipy.sparse.csr.csr_matrix, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __sub__(self, _0: numpy.matrix, /):
        """
        usage.scipy: 196
        """
        ...

    @overload
    def __sub__(self, _0: List[float], /):
        """
        usage.scipy: 2
        usage.sklearn: 2
        """
        ...

    @overload
    def __sub__(self, _0: List[int], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __sub__(self, _0: List[Union[numpy.float64, int]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __sub__(self, _0: numpy.ma.core.MaskedArray, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __sub__(self, _0: Tuple[numpy.float64, numpy.float64], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __sub__(self, _0: List[numpy.float64], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __sub__(self, _0: numpy.memmap, /):
        """
        usage.sklearn: 1
        """
        ...

    def __sub__(self, _0: object, /):
        """
        usage.dask: 45
        usage.matplotlib: 216
        usage.pandas: 228
        usage.sample-usage: 1
        usage.scipy: 2435
        usage.skimage: 309
        usage.sklearn: 705
        usage.xarray: 70
        """
        ...

    @overload
    def __truediv__(self, _0: numpy.float64, /):
        """
        usage.matplotlib: 24
        usage.scipy: 190
        usage.skimage: 35
        usage.sklearn: 86
        """
        ...

    @overload
    def __truediv__(self, _0: numpy.ndarray, /):
        """
        usage.dask: 11
        usage.matplotlib: 37
        usage.scipy: 741
        usage.skimage: 68
        usage.sklearn: 204
        usage.xarray: 1
        """
        ...

    @overload
    def __truediv__(self, _0: float, /):
        """
        usage.dask: 3
        usage.matplotlib: 48
        usage.scipy: 392
        usage.skimage: 62
        usage.sklearn: 72
        """
        ...

    @overload
    def __truediv__(self, _0: int, /):
        """
        usage.dask: 7
        usage.matplotlib: 53
        usage.scipy: 273
        usage.skimage: 44
        usage.sklearn: 88
        usage.xarray: 4
        """
        ...

    @overload
    def __truediv__(self, _0: numpy.int64, /):
        """
        usage.dask: 1
        usage.matplotlib: 2
        usage.scipy: 23
        usage.skimage: 6
        usage.sklearn: 15
        usage.xarray: 1
        """
        ...

    @overload
    def __truediv__(self, _0: numpy.timedelta64, /):
        """
        usage.dask: 1
        usage.xarray: 4
        """
        ...

    @overload
    def __truediv__(self, _0: object, /):
        """
        usage.pandas: 420
        """
        ...

    @overload
    def __truediv__(self, _0: numpy.float32, /):
        """
        usage.matplotlib: 1
        usage.scipy: 11
        usage.sklearn: 4
        """
        ...

    @overload
    def __truediv__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 8
        """
        ...

    @overload
    def __truediv__(self, _0: numpy.int8, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __truediv__(self, _0: numpy.int16, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __truediv__(self, _0: numpy.int32, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __truediv__(self, _0: complex, /):
        """
        usage.scipy: 6
        """
        ...

    @overload
    def __truediv__(self, _0: scipy.signal.ltisys.StateSpaceContinuous, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __truediv__(self, _0: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __truediv__(self, _0: numpy.ma.core.MaskedArray, /):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def __truediv__(self, _0: numpy.matrix, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __truediv__(self, _0: numpy.memmap, /):
        """
        usage.sklearn: 1
        """
        ...

    def __truediv__(self, _0: object, /):
        """
        usage.dask: 23
        usage.matplotlib: 165
        usage.pandas: 420
        usage.scipy: 1657
        usage.skimage: 215
        usage.sklearn: 471
        usage.xarray: 10
        """
        ...

    @overload
    def __xor__(self, _0: Union[numpy.ndarray, bool], /):
        """
        usage.pandas: 8
        """
        ...

    @overload
    def __xor__(self, _0: numpy.ndarray, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __xor__(self, _0: bool, /):
        """
        usage.dask: 1
        """
        ...

    def __xor__(self, _0: Union[numpy.ndarray, bool], /):
        """
        usage.dask: 2
        usage.pandas: 8
        """
        ...

    @overload
    def all(self, /):
        """
        usage.dask: 89
        usage.matplotlib: 16
        usage.scipy: 140
        usage.skimage: 28
        usage.sklearn: 68
        usage.xarray: 45
        """
        ...

    @overload
    def all(self, _0: Union[None, int] = ..., /, *, axis: int = ...):
        """
        usage.pandas: 248
        """
        ...

    @overload
    def all(self, /, *, axis: int):
        """
        usage.dask: 1
        usage.matplotlib: 1
        usage.scipy: 6
        usage.sklearn: 4
        """
        ...

    @overload
    def all(self, /, *, axis: int, keepdims: bool):
        """
        usage.scipy: 1
        """
        ...

    def all(
        self, _0: Union[None, int] = ..., /, *, axis: int = ..., keepdims: bool = ...
    ):
        """
        usage.dask: 90
        usage.matplotlib: 17
        usage.pandas: 248
        usage.scipy: 147
        usage.skimage: 28
        usage.sklearn: 72
        usage.xarray: 45
        """
        ...

    @overload
    def any(self, /):
        """
        usage.dask: 14
        usage.matplotlib: 21
        usage.scipy: 101
        usage.skimage: 15
        usage.sklearn: 49
        usage.xarray: 10
        """
        ...

    @overload
    def any(self, _0: Union[None, int] = ..., /, *, axis: int = ...):
        """
        usage.pandas: 175
        """
        ...

    @overload
    def any(self, /, *, axis: int):
        """
        usage.matplotlib: 1
        usage.scipy: 4
        usage.sklearn: 6
        """
        ...

    def any(self, _0: Union[None, int] = ..., /, *, axis: int = ...):
        """
        usage.dask: 14
        usage.matplotlib: 22
        usage.pandas: 175
        usage.scipy: 105
        usage.skimage: 15
        usage.sklearn: 55
        usage.xarray: 10
        """
        ...

    @overload
    def argmax(self, /, *, axis: int):
        """
        usage.scipy: 1
        usage.skimage: 1
        usage.sklearn: 28
        """
        ...

    @overload
    def argmax(self, /):
        """
        usage.matplotlib: 2
        usage.scipy: 2
        usage.skimage: 5
        usage.sklearn: 11
        usage.xarray: 2
        """
        ...

    @overload
    def argmax(self, _0: int, /):
        """
        usage.skimage: 1
        usage.sklearn: 1
        """
        ...

    @overload
    def argmax(self, _0: Union[None, int] = ..., /):
        """
        usage.pandas: 16
        """
        ...

    def argmax(self, _0: Union[int, None] = ..., /, *, axis: int = ...):
        """
        usage.matplotlib: 2
        usage.pandas: 16
        usage.scipy: 3
        usage.skimage: 7
        usage.sklearn: 40
        usage.xarray: 2
        """
        ...

    @overload
    def argmin(self, /):
        """
        usage.matplotlib: 3
        usage.skimage: 1
        usage.sklearn: 4
        usage.xarray: 2
        """
        ...

    @overload
    def argmin(self, _0: int, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def argmin(self, _0: Union[None, int] = ..., /):
        """
        usage.pandas: 13
        """
        ...

    @overload
    def argmin(self, /, *, axis: int):
        """
        usage.dask: 2
        usage.matplotlib: 1
        usage.scipy: 1
        usage.sklearn: 6
        """
        ...

    def argmin(self, _0: Union[int, None] = ..., /, *, axis: int = ...):
        """
        usage.dask: 2
        usage.matplotlib: 4
        usage.pandas: 13
        usage.scipy: 1
        usage.skimage: 2
        usage.sklearn: 10
        usage.xarray: 2
        """
        ...

    @overload
    def argsort(self, /):
        """
        usage.matplotlib: 4
        usage.scipy: 12
        usage.skimage: 5
        usage.sklearn: 16
        usage.xarray: 4
        """
        ...

    @overload
    def argsort(self, _0: int, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def argsort(
        self,
        /,
        *,
        kind: Union[Literal["heapsort", "mergesort", "quicksort"], None] = ...,
        axis: int = ...,
        order: None = ...,
    ):
        """
        usage.pandas: 79
        """
        ...

    def argsort(
        self,
        _0: int = ...,
        /,
        *,
        kind: Union[Literal["heapsort", "mergesort", "quicksort"], None] = ...,
        axis: int = ...,
        order: None = ...,
    ):
        """
        usage.matplotlib: 4
        usage.pandas: 79
        usage.scipy: 12
        usage.skimage: 6
        usage.sklearn: 16
        usage.xarray: 4
        """
        ...

    @overload
    def astype(self, _0: Literal["float32"], /):
        """
        usage.dask: 2
        usage.scipy: 2
        usage.skimage: 22
        usage.sklearn: 3
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.int64], /):
        """
        usage.dask: 24
        usage.matplotlib: 5
        usage.scipy: 60
        usage.skimage: 7
        usage.sklearn: 21
        usage.xarray: 3
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.uint8], /):
        """
        usage.dask: 3
        usage.matplotlib: 4
        usage.scipy: 19
        usage.skimage: 70
        usage.sklearn: 3
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.uint16], /):
        """
        usage.scipy: 11
        usage.skimage: 17
        usage.sklearn: 1
        """
        ...

    @overload
    def astype(self, _0: Type[int], /):
        """
        usage.dask: 4
        usage.matplotlib: 17
        usage.sample-usage: 1
        usage.scipy: 35
        usage.skimage: 20
        usage.sklearn: 54
        usage.xarray: 154
        """
        ...

    @overload
    def astype(self, _0: numpy.dtype, /):
        """
        usage.dask: 60
        usage.scipy: 134
        usage.skimage: 46
        usage.sklearn: 8
        usage.xarray: 14
        """
        ...

    @overload
    def astype(self, _0: Type[float], /):
        """
        usage.dask: 18
        usage.matplotlib: 13
        usage.scipy: 82
        usage.skimage: 75
        usage.sklearn: 14
        usage.xarray: 160
        """
        ...

    @overload
    def astype(self, _0: Type[bool], /):
        """
        usage.dask: 6
        usage.matplotlib: 8
        usage.scipy: 10
        usage.skimage: 29
        usage.sklearn: 12
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.float64], /):
        """
        usage.matplotlib: 4
        usage.scipy: 204
        usage.skimage: 47
        usage.sklearn: 79
        usage.xarray: 12
        """
        ...

    @overload
    def astype(self, _0: Literal["float64"], /):
        """
        usage.dask: 5
        usage.scipy: 2
        usage.skimage: 17
        usage.sklearn: 3
        """
        ...

    @overload
    def astype(self, _0: Literal["uint8"], /):
        """
        usage.dask: 1
        usage.matplotlib: 2
        usage.scipy: 20
        usage.skimage: 6
        usage.sklearn: 1
        """
        ...

    @overload
    def astype(self, _0: Literal["int"], /):
        """
        usage.skimage: 3
        """
        ...

    @overload
    def astype(self, _0: Literal["float"], /):
        """
        usage.scipy: 2
        usage.skimage: 3
        usage.sklearn: 3
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.float32], /):
        """
        usage.dask: 1
        usage.scipy: 165
        usage.skimage: 33
        usage.sklearn: 89
        usage.xarray: 11
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.int32], /):
        """
        usage.dask: 2
        usage.scipy: 52
        usage.skimage: 12
        usage.sklearn: 17
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.uint32], /):
        """
        usage.dask: 1
        usage.scipy: 6
        usage.skimage: 4
        usage.sklearn: 3
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.float16], /):
        """
        usage.scipy: 13
        usage.skimage: 3
        usage.sklearn: 2
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.int16], /):
        """
        usage.dask: 2
        usage.matplotlib: 3
        usage.scipy: 11
        usage.skimage: 14
        usage.sklearn: 1
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.uint64], /):
        """
        usage.scipy: 11
        usage.skimage: 4
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.int8], /):
        """
        usage.dask: 1
        usage.scipy: 14
        usage.skimage: 5
        usage.sklearn: 2
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.bool_], /):
        """
        usage.scipy: 4
        usage.skimage: 1
        usage.sklearn: 7
        usage.xarray: 1
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.float64], /, *, copy: bool):
        """
        usage.scipy: 14
        usage.skimage: 1
        usage.sklearn: 55
        """
        ...

    @overload
    def astype(self, _0: numpy.dtype, /, *, copy: bool):
        """
        usage.dask: 5
        usage.scipy: 75
        usage.skimage: 27
        usage.sklearn: 29
        usage.xarray: 35
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.uint8], /, *, copy: bool):
        """
        usage.scipy: 3
        usage.skimage: 1
        """
        ...

    @overload
    def astype(self, _0: Literal["double"], /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def astype(self, _0: Literal["int64"], /):
        """
        usage.dask: 1
        usage.scipy: 22
        usage.skimage: 1
        usage.sklearn: 7
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.str_], /):
        """
        usage.xarray: 16
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.bytes_], /):
        """
        usage.xarray: 18
        """
        ...

    @overload
    def astype(self, /, *, dtype: numpy.dtype):
        """
        usage.xarray: 11
        """
        ...

    @overload
    def astype(self, /, *, copy: bool, dtype: Literal["i1"]):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def astype(self, /, *, copy: bool, dtype: Type[numpy.float32]):
        """
        usage.xarray: 6
        """
        ...

    @overload
    def astype(self, _0: Literal["int32"], /):
        """
        usage.dask: 1
        usage.scipy: 20
        usage.xarray: 1
        """
        ...

    @overload
    def astype(self, _0: Type[str], /):
        """
        usage.scipy: 1
        usage.sklearn: 4
        usage.xarray: 4
        """
        ...

    @overload
    def astype(self, _0: Literal["timedelta64[D]"], /):
        """
        usage.xarray: 5
        """
        ...

    @overload
    def astype(self, _0: Literal["M8[us]"], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def astype(self, _0: Type[datetime.datetime], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def astype(self, /, *, copy: bool, dtype: Type[numpy.float64]):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def astype(self, _0: Literal["uint"], /):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def astype(self, _0: Literal["datetime64[us]"], /):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def astype(self, _0: Literal["bool"], /):
        """
        usage.dask: 1
        usage.matplotlib: 2
        usage.scipy: 20
        usage.xarray: 1
        """
        ...

    @overload
    def astype(self, _0: Type[object], /):
        """
        usage.dask: 5
        usage.scipy: 8
        usage.sklearn: 4
        usage.xarray: 6
        """
        ...

    @overload
    def astype(self, _0: Literal["u1"], /):
        """
        usage.scipy: 1
        usage.xarray: 1
        """
        ...

    @overload
    def astype(self, _0: Literal["timedelta64[ns]"], /):
        """
        usage.matplotlib: 4
        usage.xarray: 4
        """
        ...

    @overload
    def astype(self, _0: Literal["datetime64[ms]"], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def astype(self, _0: Literal["datetime64[ns]"], /):
        """
        usage.xarray: 4
        """
        ...

    @overload
    def astype(self, _0: Literal["f8"], /):
        """
        usage.dask: 11
        usage.scipy: 2
        usage.xarray: 1
        """
        ...

    @overload
    def astype(self, _0: Literal["f4"], /):
        """
        usage.dask: 5
        usage.scipy: 1
        usage.xarray: 1
        """
        ...

    @overload
    def astype(self, /, *, dtype: Type[int]):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def astype(self, _0: Literal["datetime64[s]"], /):
        """
        usage.matplotlib: 10
        usage.xarray: 1
        """
        ...

    @overload
    def astype(self, _0: Literal["timedelta64[s]"], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def astype(
        self,
        _0: object,
        /,
        *,
        copy: bool = ...,
        casting: Literal["safe"] = ...,
        subok: bool = ...,
    ):
        """
        usage.pandas: 1453
        """
        ...

    @overload
    def astype(self, _0: Type[complex], /):
        """
        usage.scipy: 33
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.complex256], /):
        """
        usage.scipy: 25
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.float128], /):
        """
        usage.scipy: 19
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.complex128], /):
        """
        usage.scipy: 123
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.complex64], /):
        """
        usage.scipy: 136
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.int32], /, *, copy: bool):
        """
        usage.scipy: 18
        usage.sklearn: 4
        """
        ...

    @overload
    def astype(self, _0: Type[float], /, *, copy: bool):
        """
        usage.matplotlib: 2
        usage.scipy: 10
        usage.sklearn: 5
        """
        ...

    @overload
    def astype(self, _0: Type[complex], /, *, copy: bool):
        """
        usage.scipy: 8
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.complex128], /, *, copy: bool):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def astype(self, _0: Literal["i4"], /):
        """
        usage.dask: 3
        usage.scipy: 3
        """
        ...

    @overload
    def astype(self, _0: Literal["U"], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def astype(self, _0: Literal["i8"], /):
        """
        usage.dask: 9
        usage.scipy: 1
        """
        ...

    @overload
    def astype(self, _0: Literal["i2"], /):
        """
        usage.dask: 1
        usage.scipy: 1
        """
        ...

    @overload
    def astype(self, _0: Literal["i1"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def astype(self, _0: Literal["u8"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def astype(self, _0: Literal["u4"], /):
        """
        usage.dask: 2
        usage.scipy: 1
        """
        ...

    @overload
    def astype(self, _0: Literal["u2"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def astype(self, _0: Literal["c16"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def astype(self, _0: Literal["c8"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def astype(self, _0: Literal["<i4"], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def astype(self, _0: Literal["<f8"], /):
        """
        usage.matplotlib: 1
        usage.scipy: 3
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.object_], /):
        """
        usage.scipy: 9
        """
        ...

    @overload
    def astype(self, _0: Literal["int"], /, *, copy: bool):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def astype(self, _0: Literal["intp"], /, *, copy: bool):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def astype(self, _0: Literal["uint"], /, *, copy: bool):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def astype(self, _0: Literal["uint64"], /, *, copy: bool):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def astype(self, _0: Literal["d"], /, *, copy: bool):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def astype(self, _0: Literal["D"], /, *, copy: bool):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def astype(self, _0: Type[int], /, *, copy: bool):
        """
        usage.scipy: 3
        usage.sklearn: 8
        """
        ...

    @overload
    def astype(self, _0: Literal["f"], /):
        """
        usage.scipy: 32
        """
        ...

    @overload
    def astype(self, _0: Literal["d"], /):
        """
        usage.scipy: 37
        """
        ...

    @overload
    def astype(self, _0: Literal["F"], /):
        """
        usage.scipy: 36
        """
        ...

    @overload
    def astype(self, _0: Literal["D"], /):
        """
        usage.scipy: 46
        """
        ...

    @overload
    def astype(self, _0: Literal["int8"], /):
        """
        usage.dask: 1
        usage.scipy: 20
        """
        ...

    @overload
    def astype(self, _0: Literal["int16"], /):
        """
        usage.dask: 1
        usage.scipy: 26
        """
        ...

    @overload
    def astype(self, _0: Literal["uint16"], /):
        """
        usage.dask: 1
        usage.scipy: 21
        """
        ...

    @overload
    def astype(self, _0: Literal["uint32"], /):
        """
        usage.dask: 1
        usage.scipy: 20
        """
        ...

    @overload
    def astype(self, _0: Literal["uint64"], /):
        """
        usage.dask: 1
        usage.scipy: 20
        """
        ...

    @overload
    def astype(self, _0: Literal["float16"], /):
        """
        usage.scipy: 20
        """
        ...

    @overload
    def astype(self, _0: Literal["longdouble"], /):
        """
        usage.scipy: 18
        """
        ...

    @overload
    def astype(self, _0: Literal["longcomplex"], /):
        """
        usage.scipy: 18
        """
        ...

    @overload
    def astype(self, _0: Literal["complex"], /, *, copy: bool):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def astype(self, _0: Literal["l"], /):
        """
        usage.scipy: 9
        """
        ...

    @overload
    def astype(self, _0: Literal["g"], /):
        """
        usage.scipy: 16
        """
        ...

    @overload
    def astype(self, _0: Literal["G"], /):
        """
        usage.scipy: 17
        """
        ...

    @overload
    def astype(
        self,
        _0: Type[numpy.int64],
        /,
        *,
        casting: Literal["safe"],
        copy: bool,
        order: Literal["C"],
        subok: bool,
    ):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def astype(self, _0: Literal["complex64"], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def astype(self, _0: Literal["complex128"], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.ulonglong], /):
        """
        usage.scipy: 8
        """
        ...

    @overload
    def astype(self, _0: Type[decimal.Decimal], /):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def astype(self, _0: Literal["O"], /):
        """
        usage.scipy: 14
        usage.sklearn: 8
        """
        ...

    @overload
    def astype(self, _0: numpy.dtype, /, *, casting: Literal["unsafe"], copy: bool):
        """
        usage.scipy: 43
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.bool_], /, *, copy: bool):
        """
        usage.scipy: 4
        usage.sklearn: 1
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.int8], /, *, copy: bool):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.uint32], /, *, copy: bool):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.ulonglong], /, *, copy: bool):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.longlong], /, *, copy: bool):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.complex64], /, *, copy: bool):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.float32], /, *, copy: bool):
        """
        usage.scipy: 7
        usage.sklearn: 53
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.uint16], /, *, copy: bool):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.int16], /, *, copy: bool):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.complex256], /, *, copy: bool):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.float128], /, *, copy: bool):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.uint64], /, *, copy: bool):
        """
        usage.scipy: 3
        usage.sklearn: 1
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.int64], /, *, copy: bool):
        """
        usage.dask: 3
        usage.scipy: 16
        usage.sklearn: 18
        """
        ...

    @overload
    def astype(self, _0: Literal["int16"], /, *, copy: bool):
        """
        usage.scipy: 6
        """
        ...

    @overload
    def astype(self, _0: Type[bool], /, *, copy: bool):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.longlong], /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def astype(self, _0: Literal[">f8"], /):
        """
        usage.matplotlib: 1
        usage.scipy: 1
        """
        ...

    @overload
    def astype(self, _0: Literal["int64"], /, *, copy: bool):
        """
        usage.scipy: 2
        usage.sklearn: 2
        """
        ...

    @overload
    def astype(self, _0: Literal["object"], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def astype(self, _0: Literal["datetime64"], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def astype(self, _0: Literal["i8"], /, *, copy: bool):
        """
        usage.dask: 1
        """
        ...

    @overload
    def astype(self, /, *, dtype: Literal["i2"]):
        """
        usage.dask: 1
        """
        ...

    @overload
    def astype(self, _0: Literal["float64"], /, *, copy: bool):
        """
        usage.sklearn: 3
        """
        ...

    @overload
    def astype(self, /, *, copy: bool, dtype: Type[bool]):
        """
        usage.sklearn: 3
        """
        ...

    @overload
    def astype(self, /, *, copy: bool, dtype: Literal[">u4"]):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def astype(self, _0: Literal["float"], /, *, copy: bool):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def astype(self, _0: Literal["intp"], /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def astype(self, _0: Literal["float32"], /, *, copy: bool):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def astype(self, _0: None, /, *, copy: bool):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def astype(self, _0: Type[object], /, *, copy: bool):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def astype(self, _0: Literal["str"], /):
        """
        usage.sklearn: 5
        """
        ...

    @overload
    def astype(self, /, *, copy: bool, dtype: Type[int]):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def astype(self, _0: Type[int], /, *, casting: Literal["unsafe"], copy: bool):
        """
        usage.sklearn: 3
        """
        ...

    @overload
    def astype(self, _0: Literal["int"], /, *, casting: Literal["unsafe"], copy: bool):
        """
        usage.sklearn: 6
        """
        ...

    @overload
    def astype(self, _0: Literal["S32"], /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def astype(
        self, _0: Type[numpy.int32], /, *, casting: Literal["unsafe"], copy: bool
    ):
        """
        usage.sklearn: 2
        """
        ...

    def astype(
        self,
        _0: object = ...,
        /,
        *,
        copy: bool = ...,
        dtype: Union[Literal[">u4", "i2", "i1"], type, numpy.dtype] = ...,
        casting: Literal["unsafe", "safe"] = ...,
        subok: bool = ...,
        order: Literal["C"] = ...,
    ):
        """
        usage.dask: 184
        usage.matplotlib: 77
        usage.pandas: 1453
        usage.sample-usage: 1
        usage.scipy: 1950
        usage.skimage: 469
        usage.sklearn: 555
        usage.xarray: 481
        """
        ...

    @overload
    def byteswap(self, /):
        """
        usage.matplotlib: 3
        usage.scipy: 12
        """
        ...

    @overload
    def byteswap(self, _0: bool, /):
        """
        usage.matplotlib: 1
        """
        ...

    def byteswap(self, _0: bool = ..., /):
        """
        usage.matplotlib: 4
        usage.scipy: 12
        """
        ...

    @overload
    def choose(self, _0: List[Union[numpy.ndarray, int]], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def choose(self, _0: List[numpy.ndarray], /):
        """
        usage.dask: 1
        """
        ...

    def choose(self, _0: List[Union[int, numpy.ndarray]], /):
        """
        usage.dask: 2
        """
        ...

    @overload
    def clip(self, /, *, min: int):
        """
        usage.dask: 1
        usage.skimage: 1
        """
        ...

    @overload
    def clip(self, /, *, max: Tuple[int, int]):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def clip(self, /, *, max: Tuple[int, int, int]):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def clip(self, _0: int, _1: int, /):
        """
        usage.dask: 2
        usage.scipy: 8
        usage.xarray: 3
        """
        ...

    @overload
    def clip(self, /, *, max: int, min: int):
        """
        usage.dask: 2
        usage.xarray: 1
        """
        ...

    @overload
    def clip(self, /, *, max: numpy.ndarray, min: numpy.ndarray):
        """
        usage.xarray: 4
        """
        ...

    @overload
    def clip(self, _0: float, _1: float, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def clip(self, _0: int, _1: float, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def clip(self, _0: numpy.ndarray, _1: numpy.ndarray, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def clip(self, _0: int, /):
        """
        usage.dask: 1
        usage.scipy: 2
        """
        ...

    @overload
    def clip(self, /, *, max: int):
        """
        usage.dask: 1
        """
        ...

    @overload
    def clip(self, _0: int, _1: float, _2: numpy.ndarray, /):
        """
        usage.sklearn: 1
        """
        ...

    def clip(
        self,
        /,
        *_args: Union[numpy.ndarray, int, float],
        min: Union[int, numpy.ndarray] = ...,
        max: Union[int, numpy.ndarray, Tuple[int, ...]] = ...,
    ):
        """
        usage.dask: 7
        usage.scipy: 14
        usage.skimage: 3
        usage.sklearn: 1
        usage.xarray: 8
        """
        ...

    def compress(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 1
        usage.sklearn: 2
        """
        ...

    def conj(self, /):
        """
        usage.dask: 2
        usage.scipy: 714
        usage.skimage: 4
        usage.xarray: 2
        """
        ...

    def conjugate(self, /):
        """
        usage.scipy: 26
        usage.xarray: 2
        """
        ...

    @overload
    def copy(self, /):
        """
        usage.dask: 7
        usage.matplotlib: 21
        usage.pandas: 284
        usage.scipy: 518
        usage.skimage: 93
        usage.sklearn: 213
        usage.xarray: 17
        """
        ...

    @overload
    def copy(self, /, *, order: Literal["C"]):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def copy(self, _0: Literal["C"], /):
        """
        usage.scipy: 72
        usage.sklearn: 3
        """
        ...

    @overload
    def copy(self, _0: Literal["F"], /):
        """
        usage.scipy: 256
        usage.sklearn: 7
        """
        ...

    @overload
    def copy(self, /, *, order: Literal["F"]):
        """
        usage.scipy: 2
        usage.sklearn: 2
        """
        ...

    @overload
    def copy(self, /, *, order: Literal["K"]):
        """
        usage.sklearn: 2
        """
        ...

    def copy(
        self, _0: Literal["F", "C"] = ..., /, *, order: Literal["F", "K", "C"] = ...
    ):
        """
        usage.dask: 7
        usage.matplotlib: 21
        usage.pandas: 284
        usage.scipy: 850
        usage.skimage: 93
        usage.sklearn: 227
        usage.xarray: 17
        """
        ...

    @overload
    def cumprod(self, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def cumprod(self, /, *, axis: int):
        """
        usage.dask: 3
        """
        ...

    def cumprod(self, /, *, axis: int = ...):
        """
        usage.dask: 4
        """
        ...

    @overload
    def cumsum(self, /):
        """
        usage.dask: 3
        usage.matplotlib: 2
        usage.scipy: 6
        usage.skimage: 1
        usage.sklearn: 6
        """
        ...

    @overload
    def cumsum(self, /, *, axis: int):
        """
        usage.dask: 4
        usage.matplotlib: 1
        usage.skimage: 6
        """
        ...

    @overload
    def cumsum(self, _0: int = ..., /):
        """
        usage.pandas: 6
        """
        ...

    @overload
    def cumsum(self, /, *, dtype: Type[numpy.int64]):
        """
        usage.scipy: 2
        """
        ...

    def cumsum(
        self, _0: int = ..., /, *, axis: int = ..., dtype: Type[numpy.int64] = ...
    ):
        """
        usage.dask: 7
        usage.matplotlib: 3
        usage.pandas: 6
        usage.scipy: 8
        usage.skimage: 7
        usage.sklearn: 6
        """
        ...

    @overload
    def diagonal(self, /):
        """
        usage.scipy: 15
        """
        ...

    @overload
    def diagonal(self, /, *, axis1: int, axis2: int):
        """
        usage.scipy: 1
        """
        ...

    def diagonal(self, /, *, axis1: int = ..., axis2: int = ...):
        """
        usage.scipy: 16
        """
        ...

    @overload
    def dot(self, _0: numpy.ndarray, /):
        """
        usage.dask: 7
        usage.matplotlib: 1
        usage.scipy: 649
        usage.skimage: 1
        usage.sklearn: 82
        """
        ...

    @overload
    def dot(self, _0: List[int], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def dot(self, _0: dask.array.core.Array, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def dot(self, _0: numpy.bool_, /):
        """
        usage.sklearn: 1
        """
        ...

    def dot(
        self, _0: Union[numpy.ndarray, numpy.bool_, dask.array.core.Array, List[int]], /
    ):
        """
        usage.dask: 8
        usage.matplotlib: 1
        usage.scipy: 650
        usage.skimage: 1
        usage.sklearn: 83
        """
        ...

    @overload
    def fill(self, _0: int, /):
        """
        usage.scipy: 18
        usage.skimage: 4
        usage.sklearn: 15
        """
        ...

    @overload
    def fill(self, _0: bool, /):
        """
        usage.skimage: 1
        usage.sklearn: 2
        """
        ...

    @overload
    def fill(self, _0: object, /):
        """
        usage.pandas: 107
        """
        ...

    @overload
    def fill(self, _0: float, /):
        """
        usage.scipy: 35
        usage.sklearn: 10
        """
        ...

    @overload
    def fill(self, _0: numpy.int8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def fill(self, _0: numpy.float64, /):
        """
        usage.scipy: 2
        usage.sklearn: 2
        """
        ...

    @overload
    def fill(self, _0: numpy.complex128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def fill(self, _0: numpy.int32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def fill(self, _0: numpy.int64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def fill(self, _0: list, /):
        """
        usage.scipy: 1
        """
        ...

    def fill(self, _0: object, /):
        """
        usage.pandas: 107
        usage.scipy: 60
        usage.skimage: 5
        usage.sklearn: 29
        """
        ...

    @overload
    def flatten(self, /):
        """
        usage.dask: 6
        usage.matplotlib: 29
        usage.pandas: 1
        usage.scipy: 69
        usage.skimage: 16
        usage.sklearn: 17
        usage.xarray: 5
        """
        ...

    @overload
    def flatten(self, _0: Literal["F"], /):
        """
        usage.scipy: 5
        """
        ...

    def flatten(self, _0: Literal["F"] = ..., /):
        """
        usage.dask: 6
        usage.matplotlib: 29
        usage.pandas: 1
        usage.scipy: 74
        usage.skimage: 16
        usage.sklearn: 17
        usage.xarray: 5
        """
        ...

    def getfield(self, _0: numpy.dtype, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def item(self, /):
        """
        usage.dask: 21
        usage.matplotlib: 1
        usage.pandas: 31
        usage.scipy: 43
        usage.sklearn: 3
        usage.xarray: 22
        """
        ...

    @overload
    def item(self, _0: int, /):
        """
        usage.scipy: 1
        usage.xarray: 2
        """
        ...

    @overload
    def item(self, _0: int, _1: int, /):
        """
        usage.scipy: 2
        """
        ...

    def item(self, _0: int = ..., _1: int = ..., /):
        """
        usage.dask: 21
        usage.matplotlib: 1
        usage.pandas: 31
        usage.scipy: 46
        usage.sklearn: 3
        usage.xarray: 24
        """
        ...

    @overload
    def itemset(self, _0: int, _1: numpy.float32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def itemset(self, _0: int, _1: None, /):
        """
        usage.scipy: 1
        """
        ...

    def itemset(self, _0: int, _1: Union[None, numpy.float32], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def max(self, _0: int, /):
        """
        usage.matplotlib: 1
        usage.scipy: 1
        usage.skimage: 3
        """
        ...

    @overload
    def max(self, /):
        """
        usage.dask: 8
        usage.matplotlib: 57
        usage.scipy: 138
        usage.skimage: 123
        usage.sklearn: 71
        usage.xarray: 16
        """
        ...

    @overload
    def max(self, _0: Union[int, None] = ..., /, *, axis: int = ...):
        """
        usage.pandas: 48
        """
        ...

    @overload
    def max(self, /, *, axis: int):
        """
        usage.dask: 1
        usage.scipy: 7
        usage.sklearn: 17
        """
        ...

    @overload
    def max(self, /, *, axis: int, keepdims: bool):
        """
        usage.dask: 1
        """
        ...

    def max(
        self, _0: Union[int, None] = ..., /, *, axis: int = ..., keepdims: bool = ...
    ):
        """
        usage.dask: 10
        usage.matplotlib: 58
        usage.pandas: 48
        usage.scipy: 146
        usage.skimage: 126
        usage.sklearn: 88
        usage.xarray: 16
        """
        ...

    @overload
    def mean(self, /):
        """
        usage.dask: 5
        usage.matplotlib: 6
        usage.sample-usage: 2
        usage.scipy: 75
        usage.skimage: 26
        usage.sklearn: 93
        """
        ...

    @overload
    def mean(self, /, *, axis: int):
        """
        usage.dask: 3
        usage.matplotlib: 8
        usage.scipy: 12
        usage.skimage: 16
        usage.sklearn: 114
        usage.xarray: 2
        """
        ...

    @overload
    def mean(self, _0: int, /):
        """
        usage.scipy: 3
        usage.skimage: 2
        usage.sklearn: 43
        usage.xarray: 1
        """
        ...

    @overload
    def mean(self, /, *, axis: Tuple[int, int, int]):
        """
        usage.skimage: 3
        """
        ...

    @overload
    def mean(self, /, *, axis: int, keepdims: bool):
        """
        usage.dask: 1
        usage.scipy: 9
        usage.xarray: 2
        """
        ...

    @overload
    def mean(self, /, *, keepdims: bool):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def mean(self, /, *, axis: int = ...):
        """
        usage.pandas: 11
        """
        ...

    @overload
    def mean(self, /, *, dtype: Type[numpy.float64]):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def mean(self, /, *, axis: None):
        """
        usage.scipy: 6
        """
        ...

    @overload
    def mean(self, /, *, axis: None, keepdims: bool):
        """
        usage.dask: 1
        usage.scipy: 1
        """
        ...

    @overload
    def mean(self, _0: None, /, *, keepdims: bool):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def mean(self, _0: int, /, *, keepdims: bool):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def mean(self, /, *, axis: Tuple[int, int], keepdims: bool):
        """
        usage.dask: 1
        """
        ...

    @overload
    def mean(self, /, *, axis: Tuple[None, ...]):
        """
        usage.dask: 1
        """
        ...

    def mean(
        self,
        _0: Union[int, None] = ...,
        /,
        *,
        axis: Union[int, None, Tuple[Union[None, int], ...]] = ...,
        keepdims: bool = ...,
        dtype: Type[numpy.float64] = ...,
    ):
        """
        usage.dask: 12
        usage.matplotlib: 16
        usage.pandas: 11
        usage.sample-usage: 2
        usage.scipy: 110
        usage.skimage: 47
        usage.sklearn: 250
        usage.xarray: 6
        """
        ...

    @overload
    def min(self, /):
        """
        usage.dask: 6
        usage.matplotlib: 50
        usage.scipy: 78
        usage.skimage: 89
        usage.sklearn: 71
        usage.xarray: 18
        """
        ...

    @overload
    def min(self, _0: int, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def min(self, _0: Union[int, None] = ..., /, *, axis: int = ...):
        """
        usage.pandas: 48
        """
        ...

    @overload
    def min(self, /, *, axis: int):
        """
        usage.scipy: 6
        usage.sklearn: 11
        """
        ...

    @overload
    def min(self, /, *, axis: int, keepdims: bool):
        """
        usage.dask: 1
        """
        ...

    @overload
    def min(self, /, *, keepdims: bool, out: numpy.ndarray):
        """
        usage.dask: 1
        """
        ...

    def min(
        self,
        _0: Union[None, int] = ...,
        /,
        *,
        axis: int = ...,
        keepdims: bool = ...,
        out: numpy.ndarray = ...,
    ):
        """
        usage.dask: 8
        usage.matplotlib: 50
        usage.pandas: 48
        usage.scipy: 84
        usage.skimage: 90
        usage.sklearn: 82
        usage.xarray: 18
        """
        ...

    @overload
    def newbyteorder(self, /):
        """
        usage.matplotlib: 3
        usage.scipy: 5
        """
        ...

    @overload
    def newbyteorder(self, _0: Literal["S"], /):
        """
        usage.matplotlib: 1
        """
        ...

    def newbyteorder(self, _0: Literal["S"] = ..., /):
        """
        usage.matplotlib: 4
        usage.scipy: 5
        """
        ...

    def nonzero(self, /):
        """
        usage.dask: 1
        usage.matplotlib: 1
        usage.pandas: 29
        usage.scipy: 31
        usage.skimage: 4
        usage.sklearn: 7
        usage.xarray: 4
        """
        ...

    @overload
    def prod(self, _0: Union[None, int] = ..., /, *, axis: int = ...):
        """
        usage.pandas: 12
        """
        ...

    @overload
    def prod(self, /):
        """
        usage.dask: 4
        usage.scipy: 3
        """
        ...

    def prod(self, _0: Union[None, int] = ..., /, *, axis: int = ...):
        """
        usage.dask: 4
        usage.pandas: 12
        usage.scipy: 3
        """
        ...

    @overload
    def ptp(self, _0: int, /):
        """
        usage.matplotlib: 1
        usage.skimage: 1
        """
        ...

    @overload
    def ptp(self, /):
        """
        usage.matplotlib: 3
        usage.scipy: 5
        usage.skimage: 3
        """
        ...

    @overload
    def ptp(self, /, *, axis: int):
        """
        usage.scipy: 1
        """
        ...

    def ptp(self, _0: int = ..., /, *, axis: int = ...):
        """
        usage.matplotlib: 4
        usage.scipy: 6
        usage.skimage: 4
        """
        ...

    def put(self, _0: numpy.ndarray, _1: Union[bool, numpy.ndarray], /):
        """
        usage.pandas: 3
        """
        ...

    @overload
    def ravel(self, /):
        """
        usage.dask: 12
        usage.matplotlib: 77
        usage.scipy: 405
        usage.skimage: 82
        usage.sklearn: 285
        usage.xarray: 46
        """
        ...

    @overload
    def ravel(self, _0: Literal["F"], /):
        """
        usage.skimage: 6
        """
        ...

    @overload
    def ravel(self, _0: Literal["C"], /):
        """
        usage.skimage: 9
        """
        ...

    @overload
    def ravel(self, /, *, order: Literal["F"]):
        """
        usage.dask: 1
        usage.scipy: 4
        usage.xarray: 1
        """
        ...

    @overload
    def ravel(self, _0: Literal["F"] = ..., /, *, order: Literal["F", "K", "C"] = ...):
        """
        usage.pandas: 171
        """
        ...

    @overload
    def ravel(self, _0: Literal["A"], /):
        """
        usage.scipy: 30
        """
        ...

    @overload
    def ravel(self, /, *, order: Literal["K"]):
        """
        usage.dask: 22
        """
        ...

    def ravel(
        self,
        _0: Literal["A", "F", "C"] = ...,
        /,
        *,
        order: Literal["K", "F", "C"] = ...,
    ):
        """
        usage.dask: 35
        usage.matplotlib: 77
        usage.pandas: 171
        usage.scipy: 439
        usage.skimage: 97
        usage.sklearn: 285
        usage.xarray: 47
        """
        ...

    @overload
    def repeat(self, _0: int, /, *, axis: int):
        """
        usage.dask: 1
        usage.matplotlib: 4
        usage.scipy: 11
        usage.skimage: 2
        """
        ...

    @overload
    def repeat(self, _0: int, _1: int, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def repeat(self, _0: Union[List[int], int, range, numpy.ndarray], /):
        """
        usage.pandas: 69
        """
        ...

    @overload
    def repeat(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 2
        usage.sklearn: 2
        """
        ...

    @overload
    def repeat(self, _0: int, /):
        """
        usage.dask: 1
        usage.scipy: 14
        """
        ...

    @overload
    def repeat(self, _0: Tuple[int], /):
        """
        usage.sklearn: 1
        """
        ...

    def repeat(
        self,
        _0: Union[numpy.ndarray, range, int, Tuple[int], List[int]],
        _1: int = ...,
        /,
        *,
        axis: int = ...,
    ):
        """
        usage.dask: 2
        usage.matplotlib: 4
        usage.pandas: 69
        usage.scipy: 27
        usage.skimage: 2
        usage.sklearn: 3
        usage.xarray: 1
        """
        ...

    @overload
    def reshape(self, _0: Tuple[int, int], /):
        """
        usage.dask: 94
        usage.matplotlib: 50
        usage.sample-usage: 1
        usage.scipy: 133
        usage.skimage: 34
        usage.sklearn: 85
        usage.xarray: 51
        """
        ...

    @overload
    def reshape(self, _0: int, _1: int, /):
        """
        usage.dask: 18
        usage.matplotlib: 35
        usage.sample-usage: 1
        usage.scipy: 325
        usage.skimage: 52
        usage.sklearn: 230
        usage.xarray: 86
        """
        ...

    @overload
    def reshape(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 1
        usage.skimage: 2
        """
        ...

    @overload
    def reshape(self, _0: Tuple[numpy.int64, int], /):
        """
        usage.scipy: 1
        usage.skimage: 2
        """
        ...

    @overload
    def reshape(self, _0: Tuple[int, int, int], /):
        """
        usage.dask: 26
        usage.matplotlib: 20
        usage.scipy: 38
        usage.skimage: 12
        usage.sklearn: 12
        usage.xarray: 27
        """
        ...

    @overload
    def reshape(self, _0: Tuple[int, int, int, int], /):
        """
        usage.dask: 10
        usage.scipy: 17
        usage.skimage: 7
        usage.sklearn: 2
        usage.xarray: 13
        """
        ...

    @overload
    def reshape(self, _0: Tuple[int, int, int, int, int, int], /):
        """
        usage.dask: 1
        usage.scipy: 4
        usage.skimage: 1
        """
        ...

    @overload
    def reshape(self, _0: Tuple[int], /):
        """
        usage.dask: 19
        usage.matplotlib: 4
        usage.scipy: 78
        usage.skimage: 3
        usage.sklearn: 7
        usage.xarray: 38
        """
        ...

    @overload
    def reshape(self, _0: List[int], /):
        """
        usage.matplotlib: 1
        usage.scipy: 45
        usage.skimage: 1
        usage.xarray: 13
        """
        ...

    @overload
    def reshape(self, _0: int, /):
        """
        usage.matplotlib: 3
        usage.scipy: 47
        usage.skimage: 8
        usage.sklearn: 22
        usage.xarray: 14
        """
        ...

    @overload
    def reshape(self, _0: Tuple[int, int, int, int, int], /):
        """
        usage.dask: 6
        usage.scipy: 3
        usage.skimage: 2
        usage.xarray: 2
        """
        ...

    @overload
    def reshape(self, _0: Tuple[int, numpy.int64], /):
        """
        usage.scipy: 1
        usage.skimage: 1
        """
        ...

    @overload
    def reshape(self, _0: Tuple[int, numpy.int64, numpy.int64], /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def reshape(self, _0: int, _1: int, _2: int, _3: int, /):
        """
        usage.dask: 3
        usage.scipy: 6
        usage.skimage: 2
        usage.sklearn: 5
        usage.xarray: 2
        """
        ...

    @overload
    def reshape(self, _0: int, _1: int, _2: int, /):
        """
        usage.dask: 6
        usage.matplotlib: 1
        usage.scipy: 106
        usage.skimage: 7
        usage.sklearn: 10
        usage.xarray: 36
        """
        ...

    @overload
    def reshape(self, _0: Tuple[None, ...], /):
        """
        usage.dask: 2
        usage.matplotlib: 2
        usage.scipy: 16
        usage.xarray: 15
        """
        ...

    @overload
    def reshape(
        self,
        _0: Union[Tuple[Union[numpy.int64, int, None], ...], List[int], int],
        _1: int = ...,
        _2: int = ...,
        /,
        *,
        order: Literal["F"] = ...,
    ):
        """
        usage.pandas: 373
        """
        ...

    @overload
    def reshape(self, _0: Tuple[int, int], /, *, order: Literal["F"]):
        """
        usage.scipy: 26
        """
        ...

    @overload
    def reshape(self, _0: Tuple[int, int, int, int, int, int, int], /):
        """
        usage.dask: 1
        usage.scipy: 1
        """
        ...

    @overload
    def reshape(self, _0: Tuple[int, int, int], /, *, order: Literal["F"]):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def reshape(self, _0: List[numpy.int32], /):
        """
        usage.scipy: 14
        """
        ...

    @overload
    def reshape(self, _0: int, /, *, order: Literal["F"]):
        """
        usage.scipy: 16
        """
        ...

    @overload
    def reshape(self, _0: numpy.int64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def reshape(self, _0: int, _1: int, _2: int, _3: int, _4: int, /):
        """
        usage.scipy: 4
        usage.sklearn: 1
        """
        ...

    @overload
    def reshape(self, _0: Tuple[numpy.int64, int, int], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def reshape(self, _0: List[numpy.int64], /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def reshape(self, _0: List[Union[numpy.int64, int]], /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def reshape(self, _0: Tuple[numpy.int64], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def reshape(self, _0: int, _1: int, /, *, order: Literal["F"]):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def reshape(self, _0: Tuple[int, int, int, int, int, int, int, int], /):
        """
        usage.dask: 1
        """
        ...

    def reshape(
        self,
        _0: Union[
            int,
            numpy.int64,
            numpy.ndarray,
            Tuple[Union[numpy.int64, int, None], ...],
            List[Union[int, numpy.int32, numpy.int64]],
        ],
        /,
        *_args: int,
        order: Literal["F"] = ...,
    ):
        """
        usage.dask: 187
        usage.matplotlib: 116
        usage.pandas: 373
        usage.sample-usage: 2
        usage.scipy: 896
        usage.skimage: 135
        usage.sklearn: 374
        usage.xarray: 297
        """
        ...

    def resize(self, _0: Tuple[int, int, int], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def round(self, /):
        """
        usage.scipy: 2
        usage.sklearn: 6
        usage.xarray: 2
        """
        ...

    @overload
    def round(self, _0: int, /):
        """
        usage.dask: 2
        usage.sklearn: 4
        usage.xarray: 2
        """
        ...

    @overload
    def round(self, /, *, decimals: int, out: None):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def round(self, _0: Union[numpy.int64, int] = ..., /):
        """
        usage.pandas: 13
        """
        ...

    @overload
    def round(self, /, *, decimals: int):
        """
        usage.sklearn: 2
        """
        ...

    def round(
        self,
        _0: Union[int, numpy.int64] = ...,
        /,
        *,
        decimals: int = ...,
        out: None = ...,
    ):
        """
        usage.dask: 2
        usage.pandas: 13
        usage.scipy: 2
        usage.sklearn: 12
        usage.xarray: 6
        """
        ...

    @overload
    def searchsorted(
        self, _0: cftime._cftime.DatetimeNoLeap, /, *, side: Literal["left"]
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def searchsorted(
        self, _0: cftime._cftime.DatetimeNoLeap, /, *, side: Literal["right"]
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def searchsorted(
        self, _0: cftime._cftime.Datetime360Day, /, *, side: Literal["left"]
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def searchsorted(
        self, _0: cftime._cftime.Datetime360Day, /, *, side: Literal["right"]
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def searchsorted(
        self, _0: cftime._cftime.DatetimeJulian, /, *, side: Literal["left"]
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def searchsorted(
        self, _0: cftime._cftime.DatetimeJulian, /, *, side: Literal["right"]
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def searchsorted(
        self, _0: cftime._cftime.DatetimeAllLeap, /, *, side: Literal["left"]
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def searchsorted(
        self, _0: cftime._cftime.DatetimeAllLeap, /, *, side: Literal["right"]
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def searchsorted(
        self, _0: cftime._cftime.DatetimeGregorian, /, *, side: Literal["left"]
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def searchsorted(
        self, _0: cftime._cftime.DatetimeGregorian, /, *, side: Literal["right"]
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def searchsorted(
        self, _0: cftime._cftime.DatetimeProlepticGregorian, /, *, side: Literal["left"]
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def searchsorted(
        self,
        _0: cftime._cftime.DatetimeProlepticGregorian,
        /,
        *,
        side: Literal["right"],
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def searchsorted(self, _0: numpy.ndarray, /):
        """
        usage.xarray: 4
        """
        ...

    @overload
    def searchsorted(self, /, *, v: numpy.ndarray):
        """
        usage.xarray: 4
        """
        ...

    @overload
    def searchsorted(self, _0: int, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def searchsorted(
        self,
        _0: object,
        _1: Literal["left", "right"] = ...,
        _2: Union[numpy.ndarray, None] = ...,
        /,
        *,
        side: Literal["left", "right"] = ...,
        sorter: Union[None, numpy.ndarray, range] = ...,
    ):
        """
        usage.pandas: 162
        """
        ...

    @overload
    def searchsorted(self, _0: numpy.ndarray, _1: Literal["right"], /):
        """
        usage.scipy: 6
        """
        ...

    @overload
    def searchsorted(self, _0: numpy.ndarray, _1: Literal["left"], /):
        """
        usage.scipy: 6
        """
        ...

    @overload
    def searchsorted(self, _0: numpy.ndarray, /, *, side: Literal["right"]):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def searchsorted(self, _0: float, /):
        """
        usage.matplotlib: 2
        """
        ...

    @overload
    def searchsorted(self, _0: numpy.float64, /):
        """
        usage.matplotlib: 2
        usage.sklearn: 2
        """
        ...

    @overload
    def searchsorted(self, _0: numpy.float64, _1: Literal["left"], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def searchsorted(self, _0: numpy.float64, _1: Literal["right"], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def searchsorted(self, _0: numpy.int64, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def searchsorted(self, _0: numpy.str_, /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def searchsorted(self, _0: Literal["one"], /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def searchsorted(self, _0: Literal["two"], /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def searchsorted(self, _0: Literal["three"], /):
        """
        usage.sklearn: 1
        """
        ...

    def searchsorted(
        self,
        /,
        *_args: object,
        side: Literal["right", "left"] = ...,
        v: numpy.ndarray = ...,
        sorter: Union[None, numpy.ndarray, range] = ...,
    ):
        """
        usage.matplotlib: 6
        usage.pandas: 162
        usage.scipy: 16
        usage.sklearn: 10
        usage.xarray: 21
        """
        ...

    def setflags(self, /, *, write: bool):
        """
        usage.pandas: 25
        usage.sklearn: 5
        """
        ...

    @overload
    def sort(self, /, *, order: Literal["accumulator"]):
        """
        usage.skimage: 8
        """
        ...

    @overload
    def sort(self, /, *, axis: int):
        """
        usage.sample-usage: 1
        usage.skimage: 1
        usage.sklearn: 2
        """
        ...

    @overload
    def sort(self, /):
        """
        usage.dask: 3
        usage.matplotlib: 4
        usage.pandas: 3
        usage.sample-usage: 1
        usage.scipy: 18
        usage.sklearn: 5
        """
        ...

    @overload
    def sort(self, /, *, order: Literal["dd"]):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def sort(self, /, *, kind: Literal["mergesort"]):
        """
        usage.dask: 1
        usage.scipy: 1
        """
        ...

    def sort(
        self,
        /,
        *,
        order: Literal["dd", "accumulator"] = ...,
        axis: int = ...,
        kind: Literal["mergesort"] = ...,
    ):
        """
        usage.dask: 4
        usage.matplotlib: 4
        usage.pandas: 3
        usage.sample-usage: 2
        usage.scipy: 20
        usage.skimage: 9
        usage.sklearn: 7
        """
        ...

    @overload
    def squeeze(self, _0: int, /):
        """
        usage.xarray: 6
        """
        ...

    @overload
    def squeeze(self, /):
        """
        usage.matplotlib: 6
        usage.pandas: 12
        usage.scipy: 40
        usage.sklearn: 17
        usage.xarray: 3
        """
        ...

    @overload
    def squeeze(self, /, *, axis: None):
        """
        usage.dask: 1
        """
        ...

    @overload
    def squeeze(self, /, *, axis: int):
        """
        usage.dask: 1
        usage.sklearn: 4
        """
        ...

    @overload
    def squeeze(self, /, *, axis: Tuple[int, int]):
        """
        usage.dask: 1
        """
        ...

    def squeeze(
        self, _0: int = ..., /, *, axis: Union[int, None, Tuple[int, int]] = ...
    ):
        """
        usage.dask: 3
        usage.matplotlib: 6
        usage.pandas: 12
        usage.scipy: 40
        usage.sklearn: 21
        usage.xarray: 9
        """
        ...

    @overload
    def std(self, /):
        """
        usage.dask: 3
        usage.scipy: 16
        usage.skimage: 64
        usage.sklearn: 13
        usage.xarray: 2
        """
        ...

    @overload
    def std(self, /, *, axis: int):
        """
        usage.scipy: 6
        usage.sklearn: 18
        usage.xarray: 1
        """
        ...

    @overload
    def std(self, /, *, axis: Tuple[int, int]):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def std(self, /, *, axis: int = ..., ddof: int = ...):
        """
        usage.pandas: 8
        """
        ...

    @overload
    def std(self, /, *, ddof: int):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def std(self, /, *, axis: int, ddof: int, keepdims: bool):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def std(self, _0: int, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def std(self, /, *, keepdims: bool):
        """
        usage.dask: 1
        """
        ...

    @overload
    def std(self, /, *, axis: int, ddof: int):
        """
        usage.sklearn: 5
        """
        ...

    def std(
        self,
        _0: int = ...,
        /,
        *,
        axis: Union[int, Tuple[int, int]] = ...,
        ddof: int = ...,
        keepdims: bool = ...,
    ):
        """
        usage.dask: 4
        usage.pandas: 8
        usage.scipy: 32
        usage.skimage: 64
        usage.sklearn: 36
        usage.xarray: 4
        """
        ...

    @overload
    def sum(self, /):
        """
        usage.dask: 40
        usage.matplotlib: 14
        usage.scipy: 169
        usage.skimage: 68
        usage.sklearn: 242
        usage.xarray: 8
        """
        ...

    @overload
    def sum(self, /, *, axis: int):
        """
        usage.dask: 18
        usage.scipy: 67
        usage.skimage: 15
        usage.sklearn: 164
        usage.xarray: 3
        """
        ...

    @overload
    def sum(self, _0: int, /):
        """
        usage.matplotlib: 2
        usage.scipy: 2
        usage.skimage: 17
        usage.sklearn: 39
        usage.xarray: 4
        """
        ...

    @overload
    def sum(
        self,
        _0: Union[int, None] = ...,
        /,
        *,
        dtype: Union[Literal["float64", "float32", "int64"], numpy.dtype, type] = ...,
        axis: Union[int, None] = ...,
    ):
        """
        usage.pandas: 101
        """
        ...

    @overload
    def sum(self, /, *, dtype: numpy.dtype):
        """
        usage.scipy: 15
        """
        ...

    @overload
    def sum(self, /, *, dtype: Literal["d"]):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def sum(self, /, *, axis: None):
        """
        usage.dask: 3
        usage.scipy: 10
        usage.sklearn: 2
        """
        ...

    @overload
    def sum(self, /, *, axis: Tuple[int, int], dtype: numpy.dtype, keepdims: bool):
        """
        usage.dask: 9
        """
        ...

    @overload
    def sum(self, /, *, axis: Tuple[int, int]):
        """
        usage.dask: 5
        """
        ...

    @overload
    def sum(self, /, *, axis: Tuple[int], dtype: numpy.dtype, keepdims: bool):
        """
        usage.dask: 17
        """
        ...

    @overload
    def sum(self, /, *, axis: int, keepdims: bool):
        """
        usage.dask: 3
        usage.sklearn: 4
        """
        ...

    @overload
    def sum(self, /, *, axis: Tuple[int, int], dtype: Literal["f8"], keepdims: bool):
        """
        usage.dask: 4
        """
        ...

    @overload
    def sum(self, /, *, axis: Tuple[int, int, int], dtype: numpy.dtype, keepdims: bool):
        """
        usage.dask: 2
        """
        ...

    @overload
    def sum(self, /, *, axis: Tuple[None, ...], dtype: numpy.dtype, keepdims: bool):
        """
        usage.dask: 13
        """
        ...

    @overload
    def sum(self, /, *, axis: Tuple[int], dtype: Literal["f8"], keepdims: bool):
        """
        usage.dask: 14
        """
        ...

    @overload
    def sum(self, /, *, axis: Tuple[int], dtype: Literal["i8"], keepdims: bool):
        """
        usage.dask: 7
        """
        ...

    @overload
    def sum(self, /, *, axis: Tuple[int], keepdims: bool):
        """
        usage.dask: 6
        """
        ...

    @overload
    def sum(self, /, *, axis: Tuple[int, int, int], keepdims: bool):
        """
        usage.dask: 2
        """
        ...

    @overload
    def sum(self, /, *, keepdims: bool, out: numpy.ndarray):
        """
        usage.dask: 1
        """
        ...

    @overload
    def sum(self, /, *, axis: int, dtype: Type[numpy.float64]):
        """
        usage.sklearn: 7
        """
        ...

    def sum(
        self,
        _0: Union[int, None] = ...,
        /,
        *,
        axis: Union[int, None, Tuple[Union[int, None], ...]] = ...,
        dtype: Union[Type[numpy.float64], type, str, numpy.dtype] = ...,
        keepdims: bool = ...,
        out: numpy.ndarray = ...,
    ):
        """
        usage.dask: 144
        usage.matplotlib: 16
        usage.pandas: 101
        usage.scipy: 264
        usage.skimage: 100
        usage.sklearn: 458
        usage.xarray: 15
        """
        ...

    def swapaxes(self, _0: int, _1: int, /):
        """
        usage.dask: 5
        usage.matplotlib: 1
        usage.pandas: 7
        usage.scipy: 10
        usage.skimage: 2
        usage.sklearn: 1
        """
        ...

    @overload
    def take(self, _0: numpy.ndarray, /, *, axis: int):
        """
        usage.sklearn: 69
        usage.xarray: 6
        """
        ...

    @overload
    def take(
        self,
        _0: Union[numpy.ndarray, List[int]],
        /,
        *,
        axis: int = ...,
        mode: Literal["wrap"] = ...,
        out: numpy.ndarray = ...,
    ):
        """
        usage.pandas: 287
        """
        ...

    @overload
    def take(self, _0: numpy.ndarray, /):
        """
        usage.dask: 1
        usage.scipy: 1
        usage.sklearn: 29
        """
        ...

    @overload
    def take(self, _0: numpy.ndarray, /, *, axis: int, mode: Literal["clip"]):
        """
        usage.matplotlib: 4
        usage.scipy: 6
        """
        ...

    @overload
    def take(self, _0: numpy.ndarray, /, *, mode: Literal["clip"]):
        """
        usage.scipy: 19
        usage.sklearn: 13
        """
        ...

    @overload
    def take(self, _0: int, /, *, axis: None):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def take(self, _0: List[numpy.int64], /, *, axis: int):
        """
        usage.sklearn: 6
        """
        ...

    @overload
    def take(self, _0: int, /, *, axis: int):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def take(self, _0: List[int], /, *, axis: int):
        """
        usage.sklearn: 4
        """
        ...

    def take(
        self,
        _0: Union[List[Union[int, numpy.int64]], int, numpy.ndarray],
        /,
        *,
        axis: Union[None, int] = ...,
        mode: Literal["clip", "wrap"] = ...,
        out: numpy.ndarray = ...,
    ):
        """
        usage.dask: 1
        usage.matplotlib: 4
        usage.pandas: 287
        usage.scipy: 26
        usage.sklearn: 123
        usage.xarray: 6
        """
        ...

    @overload
    def tobytes(self, /):
        """
        usage.matplotlib: 3
        usage.scipy: 43
        usage.skimage: 2
        """
        ...

    @overload
    def tobytes(self, /, *, order: Literal["F"]):
        """
        usage.scipy: 44
        """
        ...

    def tobytes(self, /, *, order: Literal["F"] = ...):
        """
        usage.matplotlib: 3
        usage.scipy: 87
        usage.skimage: 2
        """
        ...

    def tofile(self, _0: _io.BufferedWriter, /):
        """
        usage.scipy: 6
        """
        ...

    def tolist(self, /):
        """
        usage.dask: 39
        usage.matplotlib: 21
        usage.pandas: 44
        usage.scipy: 43
        usage.skimage: 7
        usage.sklearn: 54
        usage.xarray: 21
        """
        ...

    @overload
    def trace(self, /):
        """
        usage.dask: 1
        usage.scipy: 3
        """
        ...

    @overload
    def trace(self, _0: int, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def trace(self, _0: int, _1: int, _2: int, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def trace(self, _0: int, _1: int, _2: int, _3: Type[int], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def trace(self, _0: int, _1: int, _2: int, _3: Type[float], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def trace(self, /, *, axis1: int, axis2: int, dtype: Type[int], offset: int):
        """
        usage.dask: 1
        """
        ...

    @overload
    def trace(self, /, *, axis1: int, axis2: int, dtype: Type[float], offset: int):
        """
        usage.dask: 1
        """
        ...

    def trace(
        self,
        /,
        *_args: Union[type, int],
        axis1: int = ...,
        axis2: int = ...,
        dtype: type = ...,
        offset: int = ...,
    ):
        """
        usage.dask: 7
        usage.scipy: 3
        """
        ...

    @overload
    def transpose(self, _0: int, _1: int, _2: int, /):
        """
        usage.dask: 1
        usage.scipy: 4
        usage.skimage: 1
        usage.sklearn: 2
        """
        ...

    @overload
    def transpose(self, /):
        """
        usage.matplotlib: 2
        usage.scipy: 39
        usage.skimage: 4
        usage.sklearn: 8
        """
        ...

    @overload
    def transpose(self, _0: List[int], /):
        """
        usage.dask: 7
        usage.scipy: 34
        usage.xarray: 8
        """
        ...

    @overload
    def transpose(self, _0: Tuple[int, int], /):
        """
        usage.xarray: 3
        """
        ...

    @overload
    def transpose(self, _0: Tuple[int, int, int], /):
        """
        usage.dask: 2
        usage.scipy: 7
        usage.sklearn: 2
        usage.xarray: 3
        """
        ...

    @overload
    def transpose(self, _0: Tuple[int, int, int, int], /):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def transpose(self, _0: Tuple[int, int, int, int, int], /):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def transpose(self, _0: range, /):
        """
        usage.xarray: 3
        """
        ...

    @overload
    def transpose(self, _0: numpy.ndarray = ..., /):
        """
        usage.pandas: 33
        """
        ...

    @overload
    def transpose(self, _0: Tuple[int], /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def transpose(self, _0: int, _1: int, _2: int, _3: int, _4: int, _5: int, /):
        """
        usage.scipy: 6
        """
        ...

    @overload
    def transpose(self, _0: int, _1: int, _2: int, _3: int, /):
        """
        usage.scipy: 4
        """
        ...

    def transpose(
        self, /, *_args: Union[int, numpy.ndarray, range, Tuple[int, ...], List[int]]
    ):
        """
        usage.dask: 10
        usage.matplotlib: 2
        usage.pandas: 33
        usage.scipy: 97
        usage.skimage: 5
        usage.sklearn: 12
        usage.xarray: 21
        """
        ...

    @overload
    def var(self, /, *, axis: int):
        """
        usage.dask: 3
        usage.scipy: 1
        usage.skimage: 1
        usage.sklearn: 4
        """
        ...

    @overload
    def var(self, /):
        """
        usage.scipy: 5
        usage.skimage: 6
        usage.sklearn: 3
        """
        ...

    @overload
    def var(self, /, *, axis: int = ...):
        """
        usage.pandas: 2
        """
        ...

    @overload
    def var(self, /, *, ddof: int):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def var(self, /, *, axis: int, ddof: int):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def var(self, /, *, axis: None, ddof: int):
        """
        usage.scipy: 1
        """
        ...

    def var(self, /, *, axis: Union[int, None] = ..., ddof: int = ...):
        """
        usage.dask: 3
        usage.pandas: 2
        usage.scipy: 11
        usage.skimage: 7
        usage.sklearn: 7
        """
        ...

    @overload
    def view(self, _0: Type[numpy.uint8], /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def view(self, _0: Literal["|S16"], /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def view(self, _0: Type[bool], /):
        """
        usage.skimage: 4
        """
        ...

    @overload
    def view(self, _0: Type[numpy.int64], /):
        """
        usage.scipy: 1
        usage.skimage: 1
        """
        ...

    @overload
    def view(self, /):
        """
        usage.dask: 2
        usage.skimage: 10
        usage.sklearn: 1
        """
        ...

    @overload
    def view(self, _0: Type[numpy.int16], /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def view(self, _0: numpy.dtype, /):
        """
        usage.dask: 6
        usage.skimage: 2
        usage.sklearn: 1
        """
        ...

    @overload
    def view(self, _0: Literal["|S24"], /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def view(self, /, *, dtype: Type[numpy.uint8]):
        """
        usage.skimage: 4
        """
        ...

    @overload
    def view(self, _0: Literal["uint8"], /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def view(self, _0: Literal["|S3"], /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def view(self, _0: Literal["S1"], /):
        """
        usage.xarray: 6
        """
        ...

    @overload
    def view(self, _0: Literal["S6"], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def view(self, _0: Literal["S4"], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def view(self, _0: Literal["S3"], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def view(self, _0: Literal["S2"], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def view(self, _0: Literal["S0"], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def view(
        self,
        _0: Union[str, numpy.dtype, Tuple[Type[numpy.str_], int], type] = ...,
        /,
        *,
        dtype: Union[type, str, numpy.dtype] = ...,
    ):
        """
        usage.pandas: 247
        """
        ...

    @overload
    def view(self, _0: Type[scipy.io.matlab.mio5_params.MatlabObject], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def view(self, _0: Type[scipy.io.matlab.mio5_params.MatlabFunction], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def view(self, _0: Type[scipy.io.matlab.mio5_params.MatlabOpaque], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def view(self, /, *, dtype: Literal[">b"]):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def view(self, /, *, dtype: Literal[">i"]):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def view(self, /, *, dtype: Literal[">f"]):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def view(self, /, *, dtype: Literal[">d"]):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def view(self, /, *, dtype: Literal[">c"]):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def view(self, /, *, dtype: Dict[Literal["formats", "names"], List[str]]):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def view(
        self,
        /,
        *,
        dtype: Dict[
            Literal["formats", "names"],
            List[Literal["testData", "time", "(100, 100)>i", "()>d"]],
        ],
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def view(self, _0: Literal["b"], /):
        """
        usage.scipy: 7
        """
        ...

    @overload
    def view(self, _0: Literal["D"], /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def view(self, _0: Type[numpy.float64], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def view(self, _0: Type[numpy.complex128], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def view(self, /, *, type: Type[numpy.ndarray]):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def view(self, _0: Type[numpy.ndarray], /):
        """
        usage.matplotlib: 1
        usage.scipy: 15
        """
        ...

    @overload
    def view(self, _0: Type[complex], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def view(self, _0: Type[numpy.ma.core.MaskedArray], /):
        """
        usage.matplotlib: 1
        usage.scipy: 1
        """
        ...

    @overload
    def view(self, _0: type, /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def view(self, _0: Literal["i1"], /):
        """
        usage.dask: 22
        """
        ...

    @overload
    def view(self, _0: Literal["i4"], /):
        """
        usage.dask: 3
        """
        ...

    @overload
    def view(self, _0: Literal["i2"], /):
        """
        usage.dask: 2
        """
        ...

    @overload
    def view(self, _0: Literal[">u1"], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def view(self, _0: List[Tuple[Literal[""], numpy.dtype]], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def view(self, /, *, dtype: Literal["|S16"]):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def view(self, /, *, dtype: Literal["|S80"]):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def view(self, /, *, dtype: Literal["|S512"]):
        """
        usage.sklearn: 1
        """
        ...

    def view(
        self,
        _0: Union[
            List[Tuple[Literal[""], numpy.dtype]],
            str,
            numpy.dtype,
            type,
            Tuple[Type[numpy.str_], int],
        ] = ...,
        /,
        *,
        dtype: Union[
            str,
            numpy.dtype,
            type,
            Type[numpy.uint8],
            Dict[Literal["formats", "names"], List[str]],
        ] = ...,
        type: Type[numpy.ndarray] = ...,
    ):
        """
        usage.dask: 35
        usage.matplotlib: 3
        usage.pandas: 247
        usage.scipy: 42
        usage.skimage: 27
        usage.sklearn: 7
        usage.xarray: 11
        """
        ...


class ndenumerate:
    def __iter__(self, /):
        """
        usage.matplotlib: 1
        usage.xarray: 3
        """
        ...


class ndindex:
    def __iter__(self, /):
        """
        usage.dask: 5
        usage.scipy: 6
        usage.skimage: 3
        """
        ...


class nditer:

    # usage.scipy: 3
    finished: object

    # usage.scipy: 3
    # usage.skimage: 1
    multi_index: object

    # usage.scipy: 10
    operands: object

    def __getitem__(self, _0: int, /):
        """
        usage.scipy: 3
        """
        ...

    def __iter__(self, /):
        """
        usage.scipy: 11
        usage.skimage: 1
        """
        ...

    def iternext(self, /):
        """
        usage.scipy: 3
        """
        ...


class object_:
    @classmethod
    def __ne__(cls, _0: numpy.dtype, /):
        """
        usage.dask: 1
        usage.pandas: 1
        """
        ...


class poly1d:

    # usage.scipy: 41
    c: object

    # usage.scipy: 3
    coeffs: object

    def __iadd__(self, _0: numpy.poly1d, /):
        """
        usage.scipy: 1
        """
        ...

    def __imul__(self, _0: numpy.poly1d, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __mul__(self, _0: List[Union[numpy.complex128, int]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __mul__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __mul__(self, _0: numpy.float64, /):
        """
        usage.scipy: 1
        """
        ...

    def __mul__(
        self,
        _0: Union[numpy.float64, numpy.ndarray, List[Union[numpy.complex128, int]]],
        /,
    ):
        """
        usage.scipy: 3
        """
        ...

    def __pow__(self, _0: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __truediv__(self, _0: numpy.int64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __truediv__(self, _0: numpy.float64, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __truediv__(self, _0: float, /):
        """
        usage.scipy: 2
        """
        ...

    def __truediv__(self, _0: Union[float, numpy.int64, numpy.float64], /):
        """
        usage.scipy: 7
        """
        ...


class recarray:

    # usage.dask: 1
    __module__: ClassVar[object]

    @classmethod
    def __ne__(cls, _0: Type[numpy.recarray], /):
        """
        usage.pandas: 2
        """
        ...

    # usage.scipy: 11
    a: object

    # usage.scipy: 11
    b: object

    # usage.scipy: 12
    c: object

    # usage.scipy: 11
    d: object

    # usage.dask: 1
    # usage.matplotlib: 1
    # usage.pandas: 7
    dtype: object

    # usage.scipy: 3
    e: object

    # usage.scipy: 3
    f: object

    # usage.scipy: 17
    g: object

    # usage.scipy: 17
    h: object

    # usage.dask: 1
    ndim: object

    # usage.scipy: 1
    r: object

    # usage.dask: 7
    shape: object

    # usage.scipy: 2
    x: object

    # usage.scipy: 1
    y: object

    def __eq__(self, _0: numpy.ndarray, /):
        """
        usage.dask: 3
        """
        ...

    @overload
    def __getitem__(
        self, _0: Union[Literal["level_0", "index", "EXPIRY", "price", "date"], int], /
    ):
        """
        usage.pandas: 13
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["A"], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["B"], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["C"], /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["D"], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["E"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["F"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["X"], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["Y"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["R"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["G"], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["H"], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["a"], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __getitem__(self, _0: slice[None, int, None], /):
        """
        usage.dask: 1
        """
        ...

    def __getitem__(self, _0: Union[slice[None, int, None], int, str], /):
        """
        usage.dask: 1
        usage.matplotlib: 1
        usage.pandas: 13
        usage.scipy: 19
        """
        ...

    def __iter__(self, /):
        """
        usage.pandas: 1
        """
        ...

    def all(self, /):
        """
        usage.dask: 2
        """
        ...

    def reshape(self, _0: List[numpy.int32], /):
        """
        usage.scipy: 3
        """
        ...


class record:

    # usage.dask: 2
    ndim: object

    def __getitem__(self, _0: Tuple[ellipsis, None], /):
        """
        usage.dask: 1
        """
        ...

    def __setitem__(self, _0: int, _1: numpy.float32, /):
        """
        usage.scipy: 1
        """
        ...


class str_:

    # usage.dask: 1
    __module__: ClassVar[object]

    # usage.matplotlib: 1
    __mro__: ClassVar[object]

    # usage.pandas: 2
    __name__: ClassVar[object]

    # usage.dask: 2
    # usage.pandas: 1
    # usage.xarray: 1
    dtype: object

    # usage.dask: 2
    ndim: object

    # usage.dask: 4
    shape: object

    @overload
    def __add__(self, _0: Literal["%"], /):
        """
        usage.pandas: 1
        """
        ...

    @overload
    def __add__(self, _0: float, /):
        """
        usage.matplotlib: 1
        """
        ...

    def __add__(self, _0: Union[float, Literal["%"]], /):
        """
        usage.matplotlib: 1
        usage.pandas: 1
        """
        ...

    def __contains__(self, _0: Literal[" "], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __eq__(self, _0: Literal["a"], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __eq__(self, _0: Literal["b"], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __eq__(self, _0: Literal["c"], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __eq__(self, _0: xarray.core.dataarray.DataArray, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __eq__(self, _0: xarray.core.variable.Variable, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.ndarray, /):
        """
        usage.sklearn: 23
        usage.xarray: 1
        """
        ...

    @overload
    def __eq__(self, _0: Union[str, numpy.str_], /):
        """
        usage.pandas: 33
        """
        ...

    @overload
    def __eq__(self, _0: numpy.str_, /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def __eq__(self, _0: numpy.int64, /):
        """
        usage.sklearn: 1
        """
        ...

    def __eq__(self, _0: object, /):
        """
        usage.pandas: 33
        usage.sklearn: 26
        usage.xarray: 6
        """
        ...

    def __ge__(self, _0: numpy.str_, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: slice[int, int, int], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: slice[None, None, None], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, None], /):
        """
        usage.dask: 1
        """
        ...

    def __getitem__(
        self,
        _0: Union[
            Tuple[ellipsis, None],
            slice[Union[None, int], Union[None, int], Union[None, int]],
        ],
        /,
    ):
        """
        usage.dask: 1
        usage.xarray: 2
        """
        ...

    def __gt__(self, _0: numpy.str_, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __iadd__(self, _0: Literal["sh"], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __iadd__(self, _0: Literal["a "], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __iadd__(self, _0: Literal["ev"], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __iadd__(self, _0: Literal[""], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __iadd__(self, _0: Literal["shor"], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __iadd__(self, _0: Literal["a bit longe"], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __iadd__(self, _0: Literal["evenlongerthantha"], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __iadd__(self, _0: numpy.str_, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __iadd__(self, _0: Literal["short"], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __iadd__(self, _0: Literal["a bit "], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __iadd__(self, _0: Literal["evenlo"], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __iadd__(self, _0: Literal["evenlong"], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __iadd__(self, _0: Literal["1"], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __iadd__(self, _0: Literal["\n"], /):
        """
        usage.matplotlib: 1
        """
        ...

    def __iadd__(self, _0: Union[str, numpy.str_], /):
        """
        usage.matplotlib: 2
        usage.xarray: 12
        """
        ...

    def __iter__(self, /):
        """
        usage.sklearn: 2
        """
        ...

    def __le__(self, _0: numpy.str_, /):
        """
        usage.scipy: 1
        """
        ...

    def __lt__(self, _0: numpy.str_, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __ne__(self, _0: Literal["z"], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __ne__(self, _0: Literal["space"], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __ne__(self, _0: Union[numpy.str_, str], /):
        """
        usage.pandas: 10
        """
        ...

    @overload
    def __ne__(self, _0: Literal[""], /):
        """
        usage.matplotlib: 2
        """
        ...

    @overload
    def __ne__(self, _0: Literal["0"], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __ne__(self, _0: Literal["a"], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __ne__(self, _0: Literal["b"], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __ne__(self, _0: Literal["bar"], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __ne__(self, _0: Literal["baz"], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __ne__(self, _0: Literal["foo"], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __ne__(self, _0: numpy.ndarray, /):
        """
        usage.sklearn: 6
        """
        ...

    def __ne__(self, _0: Union[str, numpy.ndarray, numpy.str_], /):
        """
        usage.matplotlib: 5
        usage.pandas: 10
        usage.sklearn: 9
        usage.xarray: 2
        """
        ...

    @overload
    def __radd__(self, _0: Literal["sh"], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __radd__(self, _0: Literal["a "], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __radd__(self, _0: Literal["ev"], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __radd__(self, _0: Literal[""], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __radd__(self, _0: Literal["shor"], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __radd__(self, _0: Literal["a bit longe"], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __radd__(self, _0: Literal["evenlongerthantha"], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __radd__(self, _0: Literal["short"], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __radd__(self, _0: Literal["a bit "], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __radd__(self, _0: Literal["evenlo"], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __radd__(self, _0: Literal["evenlong"], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __radd__(self, _0: Literal[" "], /):
        """
        usage.pandas: 1
        """
        ...

    def __radd__(self, _0: str, /):
        """
        usage.pandas: 1
        usage.xarray: 11
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["%s"], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __rmod__(self, _0: Literal["not %s"], /):
        """
        usage.sklearn: 1
        """
        ...

    def __rmod__(self, _0: Literal["not %s", "%s"], /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def find(self, _0: numpy.str_, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def find(self, _0: numpy.str_, _1: int, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def find(self, _0: numpy.str_, _1: int, _2: int, /):
        """
        usage.xarray: 1
        """
        ...

    def find(self, _0: numpy.str_, _1: int = ..., _2: int = ..., /):
        """
        usage.xarray: 3
        """
        ...

    @overload
    def rfind(self, _0: numpy.str_, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def rfind(self, _0: numpy.str_, _1: int, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def rfind(self, _0: numpy.str_, _1: int, _2: int, /):
        """
        usage.xarray: 1
        """
        ...

    def rfind(self, _0: numpy.str_, _1: int = ..., _2: int = ..., /):
        """
        usage.xarray: 3
        """
        ...

    def startswith(self, _0: str, /):
        """
        usage.pandas: 9
        """
        ...


class timedelta64:

    # usage.dask: 1
    __module__: ClassVar[object]

    # usage.pandas: 7
    # usage.xarray: 1
    __name__: ClassVar[object]

    # usage.pandas: 5
    # usage.xarray: 7
    dtype: object

    # usage.dask: 1
    # usage.pandas: 1
    ndim: object

    # usage.dask: 2
    shape: object

    @overload
    def __add__(self, _0: numpy.ndarray, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __add__(self, _0: object, /):
        """
        usage.pandas: 59
        """
        ...

    def __add__(self, _0: object, /):
        """
        usage.pandas: 59
        usage.xarray: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.timedelta64, /):
        """
        usage.xarray: 4
        """
        ...

    @overload
    def __eq__(
        self, _0: Union[pandas._libs.tslibs.timedeltas.Timedelta, numpy.timedelta64], /
    ):
        """
        usage.pandas: 65
        """
        ...

    def __eq__(
        self, _0: Union[numpy.timedelta64, pandas._libs.tslibs.timedeltas.Timedelta], /
    ):
        """
        usage.pandas: 65
        usage.xarray: 4
        """
        ...

    def __floordiv__(
        self,
        _0: Union[
            pandas.core.arrays.timedeltas.TimedeltaArray,
            pandas.core.series.Series,
            pandas.core.indexes.timedeltas.TimedeltaIndex,
            pandas.core.frame.DataFrame,
        ],
        /,
    ):
        """
        usage.pandas: 7
        """
        ...

    def __ge__(self, _0: numpy.ndarray, /):
        """
        usage.xarray: 15
        """
        ...

    def __lt__(
        self,
        _0: Union[
            pandas.core.arrays.timedeltas.TimedeltaArray,
            pandas.core.series.Series,
            pandas.core.indexes.timedeltas.TimedeltaIndex,
            pandas.core.frame.DataFrame,
        ],
        /,
    ):
        """
        usage.pandas: 4
        """
        ...

    def __mod__(
        self,
        _0: Union[
            pandas._libs.tslibs.timedeltas.Timedelta,
            pandas.core.frame.DataFrame,
            pandas.core.indexes.timedeltas.TimedeltaIndex,
            pandas.core.series.Series,
            pandas.core.arrays.timedeltas.TimedeltaArray,
        ],
        /,
    ):
        """
        usage.pandas: 5
        """
        ...

    def __mul__(self, _0: object, /):
        """
        usage.pandas: 21
        """
        ...

    @overload
    def __ne__(self, _0: numpy.ndarray, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __ne__(
        self,
        _0: Union[
            pandas._libs.tslibs.timedeltas.Timedelta,
            pandas._libs.tslibs.nattype.NaTType,
        ],
        /,
    ):
        """
        usage.pandas: 3
        """
        ...

    def __ne__(
        self,
        _0: Union[
            pandas._libs.tslibs.nattype.NaTType,
            pandas._libs.tslibs.timedeltas.Timedelta,
            numpy.ndarray,
        ],
        /,
    ):
        """
        usage.pandas: 3
        usage.xarray: 1
        """
        ...

    def __neg__(self, /):
        """
        usage.pandas: 6
        """
        ...

    def __pow__(
        self,
        _0: Union[
            pandas.core.arrays.timedeltas.TimedeltaArray,
            pandas.core.series.Series,
            pandas.core.indexes.timedeltas.TimedeltaIndex,
            pandas.core.frame.DataFrame,
        ],
        /,
    ):
        """
        usage.pandas: 4
        """
        ...

    def __radd__(self, _0: object, /):
        """
        usage.pandas: 103
        """
        ...

    def __rfloordiv__(
        self,
        _0: Union[
            pandas._libs.tslibs.timedeltas.Timedelta,
            pandas.core.frame.DataFrame,
            pandas.core.indexes.timedeltas.TimedeltaIndex,
            pandas.core.series.Series,
            pandas.core.arrays.timedeltas.TimedeltaArray,
        ],
        /,
    ):
        """
        usage.pandas: 21
        """
        ...

    def __rmod__(
        self,
        _0: Union[
            pandas._libs.tslibs.timedeltas.Timedelta,
            pandas.core.frame.DataFrame,
            pandas.core.indexes.timedeltas.TimedeltaIndex,
            pandas.core.series.Series,
            pandas.core.arrays.timedeltas.TimedeltaArray,
        ],
        /,
    ):
        """
        usage.pandas: 6
        """
        ...

    @overload
    def __rmul__(self, _0: float, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.ndarray, /):
        """
        usage.xarray: 4
        """
        ...

    @overload
    def __rmul__(self, _0: object, /):
        """
        usage.pandas: 20
        """
        ...

    def __rmul__(self, _0: object, /):
        """
        usage.pandas: 20
        usage.xarray: 5
        """
        ...

    def __rpow__(
        self,
        _0: Union[
            pandas.core.arrays.timedeltas.TimedeltaArray,
            pandas.core.series.Series,
            pandas.core.indexes.timedeltas.TimedeltaIndex,
            pandas.core.frame.DataFrame,
        ],
        /,
    ):
        """
        usage.pandas: 4
        """
        ...

    @overload
    def __rsub__(self, _0: pandas.core.indexes.datetimes.DatetimeIndex, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __rsub__(self, _0: object, /):
        """
        usage.pandas: 75
        """
        ...

    def __rsub__(self, _0: object, /):
        """
        usage.pandas: 75
        usage.xarray: 1
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.ndarray, /):
        """
        usage.dask: 1
        usage.xarray: 4
        """
        ...

    @overload
    def __rtruediv__(self, _0: pandas.core.indexes.timedeltas.TimedeltaIndex, /):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.timedelta64, /):
        """
        usage.xarray: 3
        """
        ...

    @overload
    def __rtruediv__(self, _0: object, /):
        """
        usage.pandas: 36
        """
        ...

    @overload
    def __rtruediv__(self, _0: dask.array.core.Array, /):
        """
        usage.dask: 1
        """
        ...

    def __rtruediv__(self, _0: object, /):
        """
        usage.dask: 2
        usage.pandas: 36
        usage.xarray: 9
        """
        ...

    def __sub__(self, _0: object, /):
        """
        usage.pandas: 32
        """
        ...

    @overload
    def __truediv__(self, _0: numpy.timedelta64, /):
        """
        usage.xarray: 3
        """
        ...

    @overload
    def __truediv__(self, _0: object, /):
        """
        usage.pandas: 29
        """
        ...

    def __truediv__(self, _0: object, /):
        """
        usage.pandas: 29
        usage.xarray: 3
        """
        ...

    @overload
    def astype(self, _0: Literal["timedelta64[ns]"], /):
        """
        usage.matplotlib: 1
        usage.xarray: 2
        """
        ...

    @overload
    def astype(self, _0: Type[float], /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.float64], /):
        """
        usage.matplotlib: 2
        usage.xarray: 2
        """
        ...

    @overload
    def astype(
        self, _0: Literal["timedelta64[us]", "m8[ns]", "int64", "timedelta64[ns]"], /
    ):
        """
        usage.pandas: 15
        """
        ...

    @overload
    def astype(self, _0: numpy.dtype, /):
        """
        usage.dask: 1
        """
        ...

    def astype(
        self,
        _0: Union[
            numpy.dtype,
            type,
            Type[numpy.float64],
            Literal["timedelta64[ns]", "timedelta64[us]", "m8[ns]", "int64"],
        ],
        /,
    ):
        """
        usage.dask: 1
        usage.matplotlib: 3
        usage.pandas: 15
        usage.xarray: 5
        """
        ...

    def view(self, _0: Union[Type[numpy.int64], Literal["i8"]], /):
        """
        usage.pandas: 6
        """
        ...


class ufunc:

    # usage.dask: 1
    __module__: ClassVar[object]

    @overload
    def __call__(self, _0: numpy.ndarray, /):
        """
        usage.dask: 461
        usage.matplotlib: 317
        usage.sample-usage: 2
        usage.scipy: 2544
        usage.skimage: 255
        usage.sklearn: 810
        usage.xarray: 79
        """
        ...

    @overload
    def __call__(self, _0: numpy.int64, /):
        """
        usage.dask: 3
        usage.matplotlib: 6
        usage.scipy: 40
        usage.skimage: 3
        usage.sklearn: 7
        """
        ...

    @overload
    def __call__(self, _0: numpy.float64, /):
        """
        usage.dask: 12
        usage.matplotlib: 167
        usage.scipy: 946
        usage.skimage: 87
        usage.sklearn: 140
        usage.xarray: 4
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, _1: float, /, *, dtype: Type[numpy.float64]):
        """
        usage.skimage: 9
        """
        ...

    @overload
    def __call__(self, _0: int, /):
        """
        usage.dask: 20
        usage.matplotlib: 58
        usage.scipy: 583
        usage.skimage: 57
        usage.sklearn: 63
        usage.xarray: 4
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, _1: int, /, *, dtype: Type[numpy.float64]):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, /, *, out: numpy.ndarray):
        """
        usage.scipy: 3
        usage.skimage: 7
        usage.sklearn: 19
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, _1: float, /):
        """
        usage.dask: 13
        usage.matplotlib: 1
        usage.scipy: 61
        usage.skimage: 9
        usage.sklearn: 28
        usage.xarray: 3
        """
        ...

    @overload
    def __call__(self, _0: int, _1: numpy.ndarray, /):
        """
        usage.dask: 167
        usage.matplotlib: 3
        usage.scipy: 49
        usage.skimage: 2
        usage.sklearn: 12
        usage.xarray: 4
        """
        ...

    @overload
    def __call__(self, _0: List[float], /):
        """
        usage.matplotlib: 6
        usage.scipy: 21
        usage.skimage: 2
        usage.sklearn: 4
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, _1: numpy.ndarray, /):
        """
        usage.dask: 330
        usage.matplotlib: 42
        usage.sample-usage: 1
        usage.scipy: 581
        usage.skimage: 33
        usage.sklearn: 74
        usage.xarray: 31
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, _1: int, /):
        """
        usage.dask: 175
        usage.scipy: 77
        usage.skimage: 9
        usage.sklearn: 43
        usage.xarray: 6
        """
        ...

    @overload
    def __call__(self, _0: numpy.float64, _1: numpy.float64, /):
        """
        usage.dask: 1
        usage.matplotlib: 17
        usage.scipy: 31
        usage.skimage: 5
        usage.sklearn: 6
        """
        ...

    @overload
    def __call__(self, _0: numpy.bool_, _1: numpy.bool_, /):
        """
        usage.scipy: 14
        usage.skimage: 1
        """
        ...

    @overload
    def __call__(self, _0: numpy.float64, _1: int, /):
        """
        usage.scipy: 15
        usage.skimage: 2
        usage.sklearn: 1
        """
        ...

    @overload
    def __call__(self, _0: float, /):
        """
        usage.dask: 35
        usage.matplotlib: 102
        usage.scipy: 938
        usage.skimage: 58
        usage.sklearn: 83
        usage.xarray: 7
        """
        ...

    @overload
    def __call__(self, _0: Tuple[int, int], _1: Tuple[int, int], /):
        """
        usage.skimage: 3
        """
        ...

    @overload
    def __call__(self, _0: Tuple[int, int], _1: numpy.ndarray, /):
        """
        usage.skimage: 3
        """
        ...

    @overload
    def __call__(self, _0: numpy.float64, _1: float, /):
        """
        usage.scipy: 31
        usage.skimage: 2
        usage.sklearn: 1
        """
        ...

    @overload
    def __call__(self, _0: Tuple[int, int, int], _1: numpy.ndarray, /):
        """
        usage.skimage: 3
        """
        ...

    @overload
    def __call__(self, _0: Tuple[int, int, int], _1: Tuple[int, int, int], /):
        """
        usage.skimage: 3
        """
        ...

    @overload
    def __call__(
        self, _0: numpy.ndarray, _1: int, /, *, dtype: numpy.dtype, out: numpy.ndarray
    ):
        """
        usage.skimage: 8
        """
        ...

    @overload
    def __call__(self, _0: Tuple[numpy.ndarray, numpy.ndarray], /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, _1: float, /, *, dtype: Type[numpy.float32]):
        """
        usage.skimage: 6
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, _1: numpy.ndarray, /, *, out: numpy.ndarray):
        """
        usage.scipy: 6
        usage.skimage: 2
        usage.sklearn: 10
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, _1: numpy.int64, /, *, out: numpy.ndarray):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, _1: int, /, *, out: numpy.ndarray):
        """
        usage.dask: 3
        usage.skimage: 1
        usage.sklearn: 2
        """
        ...

    @overload
    def __call__(self, _0: Tuple[int, int, int], _1: Tuple[int, int], /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __call__(
        self,
        _0: numpy.ndarray,
        _1: int,
        /,
        *,
        casting: Literal["unsafe"],
        dtype: numpy.dtype,
        out: numpy.ndarray,
    ):
        """
        usage.skimage: 7
        """
        ...

    @overload
    def __call__(self, _0: int, _1: numpy.ndarray, /, *, dtype: numpy.dtype):
        """
        usage.skimage: 11
        """
        ...

    @overload
    def __call__(self, _0: List[Union[numpy.float64, numpy.int64]], /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __call__(self, _0: dask.array.core.Array, /):
        """
        usage.dask: 96
        usage.skimage: 2
        usage.xarray: 3
        """
        ...

    @overload
    def __call__(self, _0: numpy.int64, _1: numpy.int64, /):
        """
        usage.dask: 1
        usage.scipy: 8
        usage.skimage: 1
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, _1: numpy.float64, /):
        """
        usage.dask: 1
        usage.scipy: 18
        usage.skimage: 1
        usage.sklearn: 14
        usage.xarray: 1
        """
        ...

    @overload
    def __call__(self, _0: numpy.complex128, /):
        """
        usage.dask: 1
        usage.scipy: 57
        usage.skimage: 1
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, /, *, dtype: numpy.dtype):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __call__(self, _0: numpy.float32, /):
        """
        usage.dask: 2
        usage.scipy: 18
        usage.skimage: 1
        usage.sklearn: 11
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, _1: Tuple[int, int], /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, _1: Tuple[int, int, int], /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __call__(self, _0: numpy.ma.core.MaskedArray, /):
        """
        usage.dask: 2
        usage.matplotlib: 18
        usage.scipy: 9
        usage.skimage: 2
        usage.sklearn: 1
        """
        ...

    @overload
    def __call__(self, _0: List[numpy.ndarray], /):
        """
        usage.scipy: 9
        usage.skimage: 2
        usage.sklearn: 1
        """
        ...

    @overload
    def __call__(self, _0: int, _1: int, /):
        """
        usage.dask: 1
        usage.matplotlib: 2
        usage.scipy: 135
        usage.skimage: 1
        usage.sklearn: 3
        usage.xarray: 4
        """
        ...

    @overload
    def __call__(self, _0: List[bool], /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __call__(self, _0: List[int], /):
        """
        usage.matplotlib: 6
        usage.scipy: 12
        usage.skimage: 3
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, _1: int, /, *, dtype: Type[numpy.float32]):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __call__(self, _0: xarray.core.dataarray.DataArray, /):
        """
        usage.xarray: 49
        """
        ...

    @overload
    def __call__(
        self, _0: xarray.core.variable.Variable, _1: xarray.core.dataarray.DataArray, /
    ):
        """
        usage.xarray: 3
        """
        ...

    @overload
    def __call__(
        self, _0: xarray.core.dataarray.DataArray, _1: xarray.core.variable.Variable, /
    ):
        """
        usage.xarray: 3
        """
        ...

    @overload
    def __call__(self, _0: sparse._coo.core.COO, /):
        """
        usage.xarray: 6
        """
        ...

    @overload
    def __call__(self, _0: numpy.bool_, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __call__(self, _0: xarray.core.dataarray.DataArray, _1: int, /):
        """
        usage.xarray: 5
        """
        ...

    @overload
    def __call__(self, _0: sparse._coo.core.COO, _1: int, /):
        """
        usage.xarray: 3
        """
        ...

    @overload
    def __call__(self, _0: int, _1: sparse._coo.core.COO, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __call__(self, _0: xarray.core.variable.Variable, /):
        """
        usage.xarray: 5
        """
        ...

    @overload
    def __call__(self, _0: xarray.core.dataset.Dataset, /):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __call__(self, _0: int, _1: xarray.core.variable.Variable, /):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __call__(self, _0: xarray.core.variable.Variable, _1: int, /):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __call__(self, _0: int, _1: xarray.core.dataarray.DataArray, /):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __call__(self, _0: int, _1: xarray.core.dataset.Dataset, /):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __call__(self, _0: xarray.core.dataset.Dataset, _1: int, /):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, _1: xarray.core.variable.Variable, /):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __call__(self, _0: xarray.core.variable.Variable, _1: numpy.ndarray, /):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, _1: xarray.core.dataarray.DataArray, /):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __call__(self, _0: xarray.core.dataarray.DataArray, _1: numpy.ndarray, /):
        """
        usage.xarray: 4
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, _1: xarray.core.dataset.Dataset, /):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __call__(self, _0: xarray.core.dataset.Dataset, _1: numpy.ndarray, /):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __call__(
        self, _0: xarray.core.variable.Variable, _1: xarray.core.variable.Variable, /
    ):
        """
        usage.xarray: 4
        """
        ...

    @overload
    def __call__(
        self, _0: xarray.core.variable.Variable, _1: xarray.core.dataset.Dataset, /
    ):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __call__(
        self, _0: xarray.core.dataset.Dataset, _1: xarray.core.variable.Variable, /
    ):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __call__(
        self,
        _0: xarray.core.dataarray.DataArray,
        _1: xarray.core.dataarray.DataArray,
        /,
    ):
        """
        usage.xarray: 19
        """
        ...

    @overload
    def __call__(
        self, _0: xarray.core.dataarray.DataArray, _1: xarray.core.dataset.Dataset, /
    ):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __call__(
        self, _0: xarray.core.dataset.Dataset, _1: xarray.core.dataarray.DataArray, /
    ):
        """
        usage.xarray: 2
        """
        ...

    @overload
    def __call__(
        self, _0: xarray.core.dataset.Dataset, _1: xarray.core.dataset.Dataset, /
    ):
        """
        usage.xarray: 6
        """
        ...

    @overload
    def __call__(
        self, _0: xarray.core.groupby.DatasetGroupBy, _1: xarray.core.dataset.Dataset, /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __call__(
        self, _0: xarray.core.dataset.Dataset, _1: xarray.core.groupby.DatasetGroupBy, /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __call__(self, _0: numpy.float64, _1: numpy.ndarray, /):
        """
        usage.dask: 3
        usage.scipy: 24
        usage.sklearn: 1
        usage.xarray: 1
        """
        ...

    @overload
    def __call__(
        self,
        _0: xarray.core.groupby.DataArrayGroupBy,
        _1: xarray.core.dataset.Dataset,
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __call__(
        self,
        _0: xarray.core.dataset.Dataset,
        _1: xarray.core.groupby.DataArrayGroupBy,
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __call__(
        self,
        _0: xarray.core.groupby.DatasetGroupBy,
        _1: xarray.core.dataarray.DataArray,
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __call__(
        self,
        _0: xarray.core.dataarray.DataArray,
        _1: xarray.core.groupby.DatasetGroupBy,
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __call__(
        self,
        _0: xarray.core.groupby.DataArrayGroupBy,
        _1: xarray.core.dataarray.DataArray,
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __call__(
        self,
        _0: xarray.core.dataarray.DataArray,
        _1: xarray.core.groupby.DataArrayGroupBy,
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __call__(
        self,
        _0: xarray.core.variable.Variable,
        _1: xarray.core.groupby.DatasetGroupBy,
        /,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __call__(self, _0: float, _1: numpy.ndarray, /):
        """
        usage.dask: 12
        usage.matplotlib: 3
        usage.scipy: 42
        usage.sklearn: 4
        usage.xarray: 1
        """
        ...

    @overload
    def __call__(
        self,
        _0: xarray.core.dataarray.DataArray,
        _1: int,
        /,
        *,
        dtype: Type[numpy.float64],
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __call__(self, _0: xarray.core.dataarray.DataArray, _1: object, /):
        """
        usage.xarray: 3
        """
        ...

    @overload
    def __call__(self, _0: xarray.core.dataarray.DataArray, /, *, out: object):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __call__(
        self, _0: xarray.core.dataarray.DataArray, _1: dask.array.core.Array, /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, _1: dask.array.core.Array, /):
        """
        usage.dask: 21
        usage.xarray: 3
        """
        ...

    @overload
    def __call__(
        self, _0: dask.array.core.Array, _1: xarray.core.dataarray.DataArray, /
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __call__(self, _0: dask.array.core.Array, _1: numpy.ndarray, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __call__(
        self,
        _0: xarray.core.dataarray.DataArray,
        _1: int,
        /,
        *,
        out: xarray.core.dataarray.DataArray,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __call__(
        self,
        _0: numpy.ndarray,
        _1: xarray.core.dataarray.DataArray,
        /,
        *,
        out: numpy.ndarray,
    ):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __call__(self, _0: object, /):
        """
        usage.dask: 1
        usage.xarray: 7
        """
        ...

    @overload
    def __call__(self, _0: object, _1: int, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def __call__(self, _0: bool, /):
        """
        usage.scipy: 1
        usage.sklearn: 1
        usage.xarray: 1
        """
        ...

    @overload
    def __call__(self, _0: xarray.core.variable.IndexVariable, /):
        """
        usage.xarray: 3
        """
        ...

    @overload
    def __call__(
        self,
        _0: object,
        _1: object = ...,
        /,
        *,
        dtype: Union[Literal["float64", "float32"], type] = ...,
    ):
        """
        usage.pandas: 1228
        """
        ...

    @overload
    def __call__(self, _0: complex, /):
        """
        usage.scipy: 117
        """
        ...

    @overload
    def __call__(self, _0: numpy.int32, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __call__(self, _0: bytes, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: float, _1: float, /, *, dtype: Type[numpy.float32]):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: int, _1: float, /, *, dtype: Type[numpy.float32]):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(
        self,
        _0: numpy.ndarray,
        _1: numpy.ndarray,
        /,
        *,
        out: numpy.ndarray,
        where: numpy.ndarray,
    ):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, _1: numpy.ndarray, _2: numpy.ndarray, /):
        """
        usage.scipy: 82
        usage.sklearn: 4
        """
        ...

    @overload
    def __call__(
        self, _0: numpy.ndarray, _1: numpy.ndarray, /, *, casting: Literal["unsafe"]
    ):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __call__(self, _0: List[List[int]], _1: List[List[int]], /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __call__(self, _0: List[List[int]], /):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def __call__(self, _0: Tuple[float, int], /):
        """
        usage.dask: 1
        usage.matplotlib: 1
        usage.scipy: 2
        """
        ...

    @overload
    def __call__(self, _0: Tuple[int, int], /):
        """
        usage.dask: 6
        usage.matplotlib: 1
        usage.scipy: 2
        """
        ...

    @overload
    def __call__(self, _0: Tuple[float, float], /):
        """
        usage.dask: 11
        usage.matplotlib: 1
        usage.scipy: 2
        """
        ...

    @overload
    def __call__(self, _0: int, _1: numpy.float64, /):
        """
        usage.matplotlib: 1
        usage.scipy: 8
        usage.sklearn: 1
        """
        ...

    @overload
    def __call__(self, _0: scipy.sparse.csc.csc_matrix, /):
        """
        usage.scipy: 11
        usage.sklearn: 3
        """
        ...

    @overload
    def __call__(self, _0: scipy.sparse.csr.csr_matrix, /):
        """
        usage.scipy: 20
        usage.sklearn: 4
        """
        ...

    @overload
    def __call__(self, _0: int, _1: int, _2: float, /):
        """
        usage.scipy: 41
        """
        ...

    @overload
    def __call__(self, _0: List[numpy.float64], /):
        """
        usage.matplotlib: 3
        usage.scipy: 16
        usage.sklearn: 1
        """
        ...

    @overload
    def __call__(self, _0: float, _1: float, /):
        """
        usage.dask: 1
        usage.matplotlib: 2
        usage.scipy: 253
        usage.sklearn: 9
        """
        ...

    @overload
    def __call__(self, _0: int, _1: float, /):
        """
        usage.dask: 1
        usage.matplotlib: 2
        usage.scipy: 157
        """
        ...

    @overload
    def __call__(self, _0: List[Union[float, numpy.float64]], /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __call__(self, _0: List[Union[numpy.float64, float]], /):
        """
        usage.matplotlib: 1
        usage.scipy: 2
        """
        ...

    @overload
    def __call__(self, _0: List[Union[int, float, numpy.float64]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: List[Union[float, int, numpy.float64]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: List[Union[numpy.float64, int]], /):
        """
        usage.matplotlib: 1
        usage.scipy: 4
        """
        ...

    @overload
    def __call__(self, _0: range, /):
        """
        usage.matplotlib: 2
        usage.scipy: 1
        usage.sklearn: 1
        """
        ...

    @overload
    def __call__(self, _0: float, _1: numpy.complex128, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __call__(self, _0: List[complex], /):
        """
        usage.scipy: 13
        """
        ...

    @overload
    def __call__(self, _0: List[Union[complex, float]], /):
        """
        usage.scipy: 10
        """
        ...

    @overload
    def __call__(self, _0: list, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: numpy.float64, _1: numpy.complex128, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __call__(self, _0: float, _1: int, _2: float, /):
        """
        usage.scipy: 20
        """
        ...

    @overload
    def __call__(self, _0: numpy.float128, /):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def __call__(self, _0: float, _1: int, /):
        """
        usage.dask: 1
        usage.scipy: 70
        usage.sklearn: 8
        """
        ...

    @overload
    def __call__(self, _0: numpy.matrix, /):
        """
        usage.scipy: 4
        usage.sklearn: 3
        """
        ...

    @overload
    def __call__(self, _0: scipy.sparse.bsr.bsr_matrix, /):
        """
        usage.scipy: 10
        """
        ...

    @overload
    def __call__(self, _0: scipy.sparse.coo.coo_matrix, /):
        """
        usage.scipy: 10
        """
        ...

    @overload
    def __call__(self, _0: scipy.sparse.dia.dia_matrix, /):
        """
        usage.scipy: 10
        """
        ...

    @overload
    def __call__(self, _0: scipy.sparse.dok.dok_matrix, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: scipy.sparse.lil.lil_matrix, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: numpy.matrix, _1: float, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: numpy.matrix, _1: int, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __call__(self, _0: int, _1: numpy.ndarray, /, *, dtype: Type[numpy.int32]):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __call__(self, _0: numpy.matrix, _1: numpy.matrix, /):
        """
        usage.scipy: 35
        """
        ...

    @overload
    def __call__(self, _0: numpy.matrix, _1: numpy.ndarray, /):
        """
        usage.scipy: 52
        """
        ...

    @overload
    def __call__(self, _0: numpy.int64, _1: numpy.ndarray, /):
        """
        usage.dask: 6
        usage.scipy: 7
        """
        ...

    @overload
    def __call__(self, _0: numpy.matrix, _1: List[int], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __call__(self, _0: numpy.matrix, _1: numpy.int8, /):
        """
        usage.scipy: 8
        """
        ...

    @overload
    def __call__(self, _0: numpy.matrix, _1: numpy.float64, /):
        """
        usage.scipy: 8
        """
        ...

    @overload
    def __call__(self, _0: numpy.matrix, _1: numpy.complex128, /):
        """
        usage.scipy: 8
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, _1: numpy.matrix, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: numpy.float32, _1: numpy.float32, /):
        """
        usage.scipy: 2
        usage.sklearn: 4
        """
        ...

    @overload
    def __call__(self, _0: numpy.int32, _1: numpy.int32, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __call__(self, _0: numpy.complex128, _1: numpy.complex128, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __call__(self, _0: int, _1: numpy.ndarray, /, *, dtype: Type[numpy.int64]):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __call__(self, _0: int, _1: int, _2: int, /):
        """
        usage.scipy: 51
        """
        ...

    @overload
    def __call__(self, _0: float, _1: float, _2: int, /):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def __call__(self, _0: float, _1: int, _2: int, /):
        """
        usage.scipy: 11
        """
        ...

    @overload
    def __call__(self, _0: int, _1: float, _2: int, /):
        """
        usage.scipy: 7
        """
        ...

    @overload
    def __call__(self, _0: int, _1: float, _2: float, /):
        """
        usage.scipy: 12
        """
        ...

    @overload
    def __call__(self, _0: int, _1: int, _2: List[float], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: int, _1: int, _2: int, _3: int, /):
        """
        usage.scipy: 11
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, _1: numpy.ndarray, _2: float, /):
        """
        usage.scipy: 6
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, _1: numpy.ndarray, _2: int, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __call__(self, _0: int, _1: int, _2: float, _3: List[Union[float, int]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: int, _1: int, _2: float, _3: numpy.ndarray, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __call__(self, _0: int, _1: List[int], _2: float, _3: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: int, _1: numpy.ndarray, _2: float, _3: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: List[Union[float, int]], _1: int, _2: float, _3: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, _1: int, _2: float, _3: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: int, _1: int, _2: List[float], _3: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: int, _1: int, _2: numpy.ndarray, _3: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: float, _1: float, _2: float, /):
        """
        usage.scipy: 143
        """
        ...

    @overload
    def __call__(self, _0: int, _1: int, _2: int, _3: int, _4: int, /):
        """
        usage.scipy: 6
        """
        ...

    @overload
    def __call__(self, _0: List[int], _1: int, /):
        """
        usage.scipy: 2
        usage.sklearn: 4
        """
        ...

    @overload
    def __call__(self, _0: List[int], _1: float, /):
        """
        usage.scipy: 5
        usage.sklearn: 1
        """
        ...

    @overload
    def __call__(
        self, _0: List[List[Union[int, float]]], _1: List[Union[float, int]], /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: int, _1: int, _2: int, _3: float, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __call__(self, _0: int, _1: int, _2: numpy.ndarray, /):
        """
        usage.dask: 2
        usage.scipy: 8
        """
        ...

    @overload
    def __call__(self, _0: int, _1: int, _2: numpy.float64, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __call__(self, _0: float, _1: numpy.float64, /):
        """
        usage.scipy: 10
        """
        ...

    @overload
    def __call__(self, _0: float, _1: List[numpy.float64], /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __call__(self, _0: numpy.int64, _1: float, /):
        """
        usage.dask: 1
        usage.scipy: 10
        """
        ...

    @overload
    def __call__(self, _0: float, _1: List[Union[float, int]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: List[float], _1: List[Union[float, int]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, _1: List[Union[float, int]], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: float, _1: complex, /):
        """
        usage.scipy: 45
        """
        ...

    @overload
    def __call__(self, _0: numpy.float64, _1: numpy.float64, _2: numpy.float64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: float, _1: int, _2: float, _3: float, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: int, _1: float, _2: float, _3: float, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __call__(self, _0: int, _1: int, _2: float, _3: numpy.float64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: float, _1: float, _2: float, _3: float, /):
        """
        usage.scipy: 31
        """
        ...

    @overload
    def __call__(self, _0: int, _1: int, _2: float, _3: float, /):
        """
        usage.scipy: 8
        """
        ...

    @overload
    def __call__(self, _0: int, _1: complex, /):
        """
        usage.scipy: 26
        """
        ...

    @overload
    def __call__(self, _0: numpy.int64, _1: numpy.float64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: numpy.int32, _1: numpy.float64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: numpy.int64, _1: int, /):
        """
        usage.dask: 1
        usage.scipy: 7
        """
        ...

    @overload
    def __call__(self, _0: int, _1: float, _2: float, _3: numpy.ndarray, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __call__(self, _0: numpy.float64, _1: complex, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __call__(self, _0: Tuple[numpy.float64, numpy.float64], /):
        """
        usage.matplotlib: 1
        usage.scipy: 3
        """
        ...

    @overload
    def __call__(self, _0: int, _1: float, _2: numpy.ndarray, /):
        """
        usage.scipy: 7
        """
        ...

    @overload
    def __call__(self, _0: numpy.int64, _1: numpy.ndarray, _2: None, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __call__(self, _0: List[Union[float, int]], /):
        """
        usage.matplotlib: 3
        usage.scipy: 12
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, _1: numpy.ndarray, _2: None, /):
        """
        usage.dask: 5
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: List[int], _1: int, _2: int, _3: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: int, _1: List[int], _2: int, _3: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: int, _1: int, _2: List[int], _3: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: int, _1: int, _2: int, _3: List[int], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: List[int], _1: List[int], _2: List[int], _3: List[int], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: List[List[int]], _1: List[int], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: List[int], _1: int, _2: float, /):
        """
        usage.scipy: 9
        """
        ...

    @overload
    def __call__(self, _0: List[float], _1: int, _2: float, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __call__(self, _0: List[int], _1: int, _2: numpy.ndarray, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, _1: List[float], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __call__(self, _0: int, _1: List[Union[int, float]], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __call__(self, _0: float, _1: float, _2: complex, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: float, _1: float, _2: float, _3: complex, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: float, _1: float, _2: float, _3: float, _4: float, /):
        """
        usage.scipy: 8
        """
        ...

    @overload
    def __call__(self, _0: complex, _1: complex, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __call__(self, _0: int, _1: numpy.ndarray, _2: numpy.ndarray, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: float, _1: numpy.ndarray, _2: numpy.ndarray, /):
        """
        usage.scipy: 6
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, _1: float, _2: None, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(
        self,
        _0: numpy.ndarray,
        _1: numpy.ndarray,
        _2: numpy.ndarray,
        _3: numpy.ndarray,
        /,
    ):
        """
        usage.scipy: 9
        """
        ...

    @overload
    def __call__(
        self,
        _0: numpy.ndarray,
        _1: numpy.ndarray,
        _2: numpy.ndarray,
        _3: numpy.ndarray,
        _4: numpy.ndarray,
        _5: int,
        _6: int,
        /,
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: List[Union[int, float]], /):
        """
        usage.matplotlib: 1
        usage.scipy: 11
        """
        ...

    @overload
    def __call__(
        self, _0: int, _1: int, _2: int, _3: int, _4: int, _5: int, _6: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(
        self, _0: int, _1: int, _2: int, _3: int, _4: numpy.float64, _5: int, _6: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(
        self, _0: int, _1: int, _2: int, _3: int, _4: float, _5: int, _6: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(
        self, _0: float, _1: float, _2: int, _3: int, _4: float, _5: int, _6: int, /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, _1: int, _2: int, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, _1: float, _2: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, _1: int, _2: float, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, _1: float, _2: float, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: int, _1: List[int], _2: float, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: List[int], _1: int, _2: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: int, _1: List[int], _2: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: int, _1: int, _2: List[int], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: List[int], _1: List[int], _2: List[int], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(
        self, _0: Tuple[numpy.float64, numpy.float64, numpy.float64, numpy.float64], /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(
        self,
        _0: Tuple[
            numpy.complex128, numpy.complex128, numpy.complex128, numpy.complex128
        ],
        /,
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: Tuple[numpy.complex128, numpy.complex128], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, _1: float, _2: float, _3: numpy.ndarray, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, _1: int, _2: float, _3: numpy.ndarray, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __call__(self, _0: int, _1: float, _2: int, _3: numpy.ndarray, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, _1: float, _2: int, _3: numpy.ndarray, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: int, _1: int, _2: int, _3: numpy.ndarray, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, _1: float, _2: numpy.ndarray, /):
        """
        usage.matplotlib: 1
        usage.scipy: 4
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, _1: int, _2: numpy.ndarray, /):
        """
        usage.dask: 2
        usage.matplotlib: 1
        usage.scipy: 10
        usage.sklearn: 1
        """
        ...

    @overload
    def __call__(
        self, _0: int, _1: numpy.float64, _2: numpy.float64, _3: numpy.ndarray, /
    ):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __call__(self, _0: int, _1: numpy.float64, _2: numpy.ndarray, /):
        """
        usage.scipy: 6
        """
        ...

    @overload
    def __call__(
        self,
        _0: numpy.int64,
        _1: numpy.float64,
        _2: numpy.float64,
        _3: numpy.ndarray,
        /,
        *,
        sig: Literal["dddd->d"],
    ):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __call__(
        self,
        _0: numpy.ndarray,
        _1: numpy.ndarray,
        _2: numpy.ndarray,
        _3: numpy.ndarray,
        /,
        *,
        sig: Literal["lddd->d"],
    ):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __call__(
        self,
        _0: numpy.int64,
        _1: numpy.float64,
        _2: numpy.ndarray,
        /,
        *,
        sig: Literal["ddd->d"],
    ):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __call__(
        self,
        _0: numpy.ndarray,
        _1: numpy.ndarray,
        _2: numpy.ndarray,
        /,
        *,
        sig: Literal["ldd->d"],
    ):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __call__(self, _0: numpy.int64, _1: numpy.ndarray, /, *, sig: Literal["dd->d"]):
        """
        usage.scipy: 9
        """
        ...

    @overload
    def __call__(
        self, _0: numpy.ndarray, _1: numpy.ndarray, /, *, sig: Literal["ld->d"]
    ):
        """
        usage.scipy: 9
        """
        ...

    @overload
    def __call__(self, _0: List[float], _1: float, /):
        """
        usage.scipy: 6
        """
        ...

    @overload
    def __call__(self, _0: int, _1: int, _2: numpy.ndarray, _3: numpy.ndarray, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, _1: complex, /):
        """
        usage.scipy: 4
        """
        ...

    @overload
    def __call__(self, _0: int, _1: int, _2: None, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: float, _1: None, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: int, _1: None, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: List[int], _1: None, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: int, _1: numpy.bool_, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __call__(self, _0: float, _1: float, _2: numpy.float64, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __call__(self, _0: float, _1: float, _2: numpy.ndarray, /):
        """
        usage.scipy: 5
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, _1: numpy.bool_, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __call__(self, _0: int, _1: numpy.ndarray, _2: None, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: int, _1: float, _2: None, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: float, _1: int, /, *, out: numpy.ndarray, where: bool):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __call__(self, _0: numpy.float64, _1: float, _2: numpy.ndarray, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __call__(self, _0: float, _1: int, _2: numpy.ndarray, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, _1: int, _2: numpy.float64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, _1: int, _2: None, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: float, _1: int, _2: None, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: numpy.bool_, _1: numpy.ndarray, /):
        """
        usage.scipy: 6
        """
        ...

    @overload
    def __call__(self, _0: bool, _1: bool, /):
        """
        usage.scipy: 6
        """
        ...

    @overload
    def __call__(self, _0: numpy.float128, _1: int, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __call__(self, _0: List[Union[int, float]], _1: float, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(
        self, _0: Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray], /
    ):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: numpy.float64, _1: float, _2: numpy.ma.core.MaskedArray, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __call__(self, _0: float, _1: float, _2: numpy.ma.core.MaskedArray, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: int, _1: numpy.int64, _2: numpy.float64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: numpy.float64, _1: float, _2: numpy.float64, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __call__(
        self, _0: numpy.ma.core.MaskedArray, _1: float, _2: numpy.ma.core.MaskedArray, /
    ):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __call__(
        self, _0: numpy.float64, _1: float, _2: numpy.ma.core.MaskedConstant, /
    ):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __call__(self, _0: scipy.stats.mstats_basic.Ttest_relResult, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: scipy.stats.mstats_basic.Ttest_indResult, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: float, _1: List[float], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __call__(self, _0: scipy.stats.stats.SpearmanrResult, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: str, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: Tuple[int, float], /):
        """
        usage.dask: 2
        usage.matplotlib: 1
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: numpy.ma.core.MaskedArray, _1: numpy.ma.core.MaskedArray, /):
        """
        usage.matplotlib: 1
        usage.scipy: 1
        """
        ...

    @overload
    def __call__(self, _0: matplotlib.transforms.Bbox, /):
        """
        usage.matplotlib: 2
        """
        ...

    @overload
    def __call__(self, _0: List[numpy.int64], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __call__(self, _0: Tuple[int, int, int, int], /):
        """
        usage.dask: 3
        usage.matplotlib: 1
        """
        ...

    @overload
    def __call__(self, _0: numpy.int16, /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __call__(self, _0: float, _1: numpy.ma.core.MaskedArray, /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __call__(self, _0: Tuple[float, float, float, float], /):
        """
        usage.dask: 1
        usage.matplotlib: 1
        """
        ...

    @overload
    def __call__(self, _0: int, _1: numpy.ma.core.MaskedArray, /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __call__(self, _0: Tuple[int, int, float, float], /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __call__(self, _0: dask.array.core.Array, /, *, output_dtypes: Type[float]):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __call__(
        self,
        _0: dask.array.core.Array,
        /,
        *,
        output_dtypes: Tuple[Type[float], Type[float]],
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __call__(self, _0: Tuple[int, int, int], /):
        """
        usage.dask: 7
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, _1: numpy.int64, /):
        """
        usage.dask: 6
        usage.sklearn: 3
        """
        ...

    @overload
    def __call__(self, _0: int, _1: numpy.int64, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __call__(self, _0: float, _1: numpy.int64, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __call__(self, _0: dask.array.core.Array, _1: dask.array.core.Array, /):
        """
        usage.dask: 75
        """
        ...

    @overload
    def __call__(self, _0: numpy.float64, _1: numpy.float64, _2: None, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __call__(self, _0: Tuple[float], /):
        """
        usage.dask: 6
        """
        ...

    @overload
    def __call__(self, _0: Tuple[int, int, int, int, int, int, int], /):
        """
        usage.dask: 2
        """
        ...

    @overload
    def __call__(self, _0: Tuple[int], /):
        """
        usage.dask: 5
        """
        ...

    @overload
    def __call__(self, _0: Tuple[float, float, float, float, float], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __call__(self, _0: Tuple[int, int, int, int, int], /):
        """
        usage.dask: 3
        """
        ...

    @overload
    def __call__(self, _0: object, _1: object, _2: None, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __call__(self, _0: object, _1: object, /):
        """
        usage.dask: 2
        """
        ...

    @overload
    def __call__(self, _0: numpy.ma.core.MaskedArray, _1: numpy.ndarray, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __call__(
        self,
        _0: Tuple[float, float, float, float, float, float, float, float, float, float],
        /,
    ):
        """
        usage.dask: 2
        """
        ...

    @overload
    def __call__(self, _0: Tuple[int, int, int, int, int, int, int, int, int, int], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __call__(self, _0: numpy.float32, _1: numpy.float32, _2: None, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __call__(self, _0: numpy.int64, _1: numpy.int64, _2: None, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __call__(self, _0: numpy.float32, _1: numpy.float64, _2: None, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __call__(self, _0: dask.array.core.Array, _1: float, /):
        """
        usage.dask: 2
        """
        ...

    @overload
    def __call__(self, _0: Tuple[int, int, int, int, int, int], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __call__(self, _0: Tuple[None, ...], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __call__(self, _0: dask.array.core.Array, /, *, out: dask.array.core.Array):
        """
        usage.dask: 2
        """
        ...

    @overload
    def __call__(
        self, _0: dask.array.core.Array, _1: int, /, *, out: dask.array.core.Array
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __call__(self, _0: dask.array.core.Array, _1: int, /, *, out: numpy.ndarray):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __call__(self, _0: numpy.float64, _1: float, _2: None, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __call__(self, _0: pandas.core.series.Series, /):
        """
        usage.dask: 295
        """
        ...

    @overload
    def __call__(self, _0: dask.dataframe.core.Series, /):
        """
        usage.dask: 128
        """
        ...

    @overload
    def __call__(self, _0: pandas.core.frame.DataFrame, /):
        """
        usage.dask: 290
        """
        ...

    @overload
    def __call__(self, _0: dask.dataframe.groupby.DataFrameGroupBy, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __call__(self, _0: pandas.core.indexes.numeric.Int64Index, /):
        """
        usage.dask: 37
        """
        ...

    @overload
    def __call__(self, _0: pandas.core.indexes.range.RangeIndex, /):
        """
        usage.dask: 111
        """
        ...

    @overload
    def __call__(self, _0: dask.dataframe.core.Index, /):
        """
        usage.dask: 111
        """
        ...

    @overload
    def __call__(self, _0: dask.dataframe.core.DataFrame, /):
        """
        usage.dask: 126
        """
        ...

    @overload
    def __call__(self, _0: pandas.core.series.Series, _1: pandas.core.series.Series, /):
        """
        usage.dask: 147
        """
        ...

    @overload
    def __call__(
        self, _0: dask.dataframe.core.Series, _1: dask.dataframe.core.Series, /
    ):
        """
        usage.dask: 42
        """
        ...

    @overload
    def __call__(
        self, _0: dask.dataframe.core.Series, _1: pandas.core.series.Series, /
    ):
        """
        usage.dask: 42
        """
        ...

    @overload
    def __call__(
        self, _0: pandas.core.frame.DataFrame, _1: pandas.core.frame.DataFrame, /
    ):
        """
        usage.dask: 147
        """
        ...

    @overload
    def __call__(
        self, _0: dask.dataframe.core.DataFrame, _1: dask.dataframe.core.DataFrame, /
    ):
        """
        usage.dask: 42
        """
        ...

    @overload
    def __call__(
        self, _0: dask.dataframe.core.DataFrame, _1: pandas.core.frame.DataFrame, /
    ):
        """
        usage.dask: 42
        """
        ...

    @overload
    def __call__(
        self,
        _0: dask.dataframe.core.DataFrame,
        /,
        *,
        out: dask.dataframe.core.DataFrame,
    ):
        """
        usage.dask: 44
        """
        ...

    @overload
    def __call__(
        self, _0: dask.dataframe.core.DataFrame, /, *, out: dask.dataframe.core.Series
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __call__(
        self,
        _0: dask.dataframe.core.DataFrame,
        _1: int,
        /,
        *,
        out: dask.dataframe.core.DataFrame,
    ):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __call__(self, _0: pandas.core.frame.DataFrame, _1: int, /):
        """
        usage.dask: 85
        """
        ...

    @overload
    def __call__(self, _0: pandas.core.series.Series, _1: int, /):
        """
        usage.dask: 84
        """
        ...

    @overload
    def __call__(self, _0: dask.dataframe.core.Series, _1: int, /):
        """
        usage.dask: 63
        """
        ...

    @overload
    def __call__(self, _0: int, _1: pandas.core.series.Series, /):
        """
        usage.dask: 60
        """
        ...

    @overload
    def __call__(self, _0: int, _1: dask.dataframe.core.Series, /):
        """
        usage.dask: 60
        """
        ...

    @overload
    def __call__(self, _0: dask.dataframe.core.DataFrame, _1: int, /):
        """
        usage.dask: 63
        """
        ...

    @overload
    def __call__(self, _0: int, _1: pandas.core.frame.DataFrame, /):
        """
        usage.dask: 60
        """
        ...

    @overload
    def __call__(self, _0: int, _1: dask.dataframe.core.DataFrame, /):
        """
        usage.dask: 60
        """
        ...

    @overload
    def __call__(self, _0: pandas.core.series.Series, _1: numpy.int64, /):
        """
        usage.dask: 21
        """
        ...

    @overload
    def __call__(
        self, _0: dask.dataframe.core.Series, _1: dask.dataframe.core.Scalar, /
    ):
        """
        usage.dask: 63
        """
        ...

    @overload
    def __call__(
        self, _0: pandas.core.series.Series, _1: dask.dataframe.core.Scalar, /
    ):
        """
        usage.dask: 63
        """
        ...

    @overload
    def __call__(self, _0: numpy.int64, _1: pandas.core.series.Series, /):
        """
        usage.dask: 20
        """
        ...

    @overload
    def __call__(
        self, _0: dask.dataframe.core.Scalar, _1: dask.dataframe.core.Series, /
    ):
        """
        usage.dask: 60
        """
        ...

    @overload
    def __call__(
        self, _0: dask.dataframe.core.Scalar, _1: pandas.core.series.Series, /
    ):
        """
        usage.dask: 40
        """
        ...

    @overload
    def __call__(self, _0: pandas.core.frame.DataFrame, _1: numpy.int64, /):
        """
        usage.dask: 21
        """
        ...

    @overload
    def __call__(
        self, _0: dask.dataframe.core.DataFrame, _1: dask.dataframe.core.Scalar, /
    ):
        """
        usage.dask: 63
        """
        ...

    @overload
    def __call__(
        self, _0: pandas.core.frame.DataFrame, _1: dask.dataframe.core.Scalar, /
    ):
        """
        usage.dask: 63
        """
        ...

    @overload
    def __call__(self, _0: numpy.int64, _1: pandas.core.frame.DataFrame, /):
        """
        usage.dask: 20
        """
        ...

    @overload
    def __call__(
        self, _0: dask.dataframe.core.Scalar, _1: dask.dataframe.core.DataFrame, /
    ):
        """
        usage.dask: 60
        """
        ...

    @overload
    def __call__(
        self, _0: dask.dataframe.core.Scalar, _1: pandas.core.frame.DataFrame, /
    ):
        """
        usage.dask: 40
        """
        ...

    @overload
    def __call__(self, _0: pandas.core.series.Series, _1: numpy.ndarray, /):
        """
        usage.dask: 21
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, _1: dask.dataframe.core.Series, /):
        """
        usage.dask: 21
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, _1: pandas.core.series.Series, /):
        """
        usage.dask: 22
        """
        ...

    @overload
    def __call__(self, _0: dask.dataframe.core.Series, _1: dask.array.core.Array, /):
        """
        usage.dask: 42
        """
        ...

    @overload
    def __call__(self, _0: dask.array.core.Array, _1: dask.dataframe.core.Series, /):
        """
        usage.dask: 42
        """
        ...

    @overload
    def __call__(self, _0: pandas.core.frame.DataFrame, _1: numpy.ndarray, /):
        """
        usage.dask: 21
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, _1: dask.dataframe.core.DataFrame, /):
        """
        usage.dask: 21
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, _1: pandas.core.frame.DataFrame, /):
        """
        usage.dask: 22
        """
        ...

    @overload
    def __call__(self, _0: dask.dataframe.core.DataFrame, _1: dask.array.core.Array, /):
        """
        usage.dask: 42
        """
        ...

    @overload
    def __call__(self, _0: dask.array.core.Array, _1: dask.dataframe.core.DataFrame, /):
        """
        usage.dask: 42
        """
        ...

    @overload
    def __call__(self, _0: numpy.ndarray, _1: float, /, *, out: numpy.ndarray):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __call__(self, _0: int, _1: numpy.int64, _2: numpy.ndarray, /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def __call__(self, _0: int, _1: numpy.ndarray, /, *, out: numpy.ndarray):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __call__(
        self,
        _0: numpy.ndarray,
        _1: numpy.ndarray,
        /,
        *,
        casting: Literal["no"],
        out: numpy.ndarray,
    ):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def __call__(self, _0: numpy.memmap, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __call__(self, _0: List[List[numpy.float64]], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __call__(self, _0: numpy.memmap, _1: numpy.ndarray, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __call__(self, _0: float, /, *, dtype: Type[numpy.float64]):
        """
        usage.sklearn: 1
        """
        ...

    def __call__(
        self,
        _0: object,
        /,
        *_args: object,
        dtype: Union[
            Type[numpy.float64], type, Literal["float64", "float32"], numpy.dtype
        ] = ...,
        out: object = ...,
        casting: Literal["no", "unsafe"] = ...,
        where: Union[numpy.ndarray, bool] = ...,
        sig: str = ...,
        output_dtypes: Union[Tuple[Type[float], Type[float]], Type[float]] = ...,
    ):
        """
        usage.dask: 4506
        usage.matplotlib: 781
        usage.pandas: 1228
        usage.sample-usage: 3
        usage.scipy: 8006
        usage.skimage: 613
        usage.sklearn: 1396
        usage.xarray: 321
        """
        ...

    @overload
    def accumulate(self, _0: Union[pandas.core.series.Series, numpy.ndarray], /):
        """
        usage.pandas: 4
        """
        ...

    @overload
    def accumulate(self, _0: numpy.ndarray, /):
        """
        usage.sklearn: 2
        """
        ...

    def accumulate(self, _0: Union[numpy.ndarray, pandas.core.series.Series], /):
        """
        usage.pandas: 4
        usage.sklearn: 2
        """
        ...

    @overload
    def at(
        self,
        _0: Union[pandas._libs.missing.NAType, pandas.core.series.Series],
        _1: Union[int, List[int]],
        _2: int = ...,
        /,
    ):
        """
        usage.pandas: 2
        """
        ...

    @overload
    def at(
        self, _0: numpy.ndarray, _1: Tuple[numpy.ndarray, numpy.ndarray], _2: int, /
    ):
        """
        usage.matplotlib: 2
        """
        ...

    @overload
    def at(self, _0: numpy.ndarray, _1: numpy.ndarray, _2: numpy.ndarray, /):
        """
        usage.sklearn: 4
        """
        ...

    def at(
        self,
        _0: Union[
            numpy.ndarray, pandas._libs.missing.NAType, pandas.core.series.Series
        ],
        _1: Union[numpy.ndarray, int, List[int], Tuple[numpy.ndarray, numpy.ndarray]],
        _2: Union[numpy.ndarray, int] = ...,
        /,
    ):
        """
        usage.matplotlib: 2
        usage.pandas: 2
        usage.sklearn: 4
        """
        ...

    @overload
    def outer(self, _0: pandas.core.series.Series, _1: numpy.ndarray, /):
        """
        usage.pandas: 1
        """
        ...

    @overload
    def outer(self, _0: numpy.ndarray, _1: numpy.ndarray, /):
        """
        usage.dask: 7
        usage.scipy: 2
        """
        ...

    @overload
    def outer(self, _0: numpy.ndarray, _1: int, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def outer(self, _0: int, _1: numpy.ndarray, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def outer(self, _0: float, _1: numpy.ndarray, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def outer(self, _0: List[int], _1: numpy.ndarray, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def outer(self, _0: numpy.int64, _1: numpy.ndarray, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def outer(self, _0: dask.array.core.Array, _1: dask.array.core.Array, /):
        """
        usage.dask: 2
        """
        ...

    def outer(
        self, _0: object, _1: Union[int, dask.array.core.Array, numpy.ndarray], /
    ):
        """
        usage.dask: 14
        usage.pandas: 1
        usage.scipy: 2
        """
        ...

    @overload
    def reduce(self, _0: List[numpy.ndarray], /):
        """
        usage.matplotlib: 8
        usage.skimage: 4
        """
        ...

    @overload
    def reduce(self, _0: Tuple[int], /):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def reduce(self, _0: xarray.core.dataarray.DataArray, _1: int, /):
        """
        usage.xarray: 1
        """
        ...

    @overload
    def reduce(
        self,
        _0: Union[
            pandas.core.arrays.integer.IntegerArray,
            numpy.ndarray,
            pandas.core.arrays.boolean.BooleanArray,
        ],
        /,
    ):
        """
        usage.pandas: 5
        """
        ...

    @overload
    def reduce(self, _0: numpy.ndarray, /):
        """
        usage.sample-usage: 1
        usage.scipy: 22
        usage.sklearn: 8
        """
        ...

    @overload
    def reduce(self, _0: numpy.ndarray, _1: int, /):
        """
        usage.scipy: 2
        """
        ...

    def reduce(self, _0: object, _1: int = ..., /):
        """
        usage.matplotlib: 8
        usage.pandas: 5
        usage.sample-usage: 1
        usage.scipy: 24
        usage.skimage: 6
        usage.sklearn: 8
        usage.xarray: 1
        """
        ...

    def reduceat(self, _0: numpy.ndarray, _1: numpy.ndarray, /):
        """
        usage.pandas: 1
        usage.scipy: 38
        usage.sklearn: 10
        """
        ...


class uint16:

    # usage.pandas: 3
    __name__: ClassVar[object]

    # usage.pandas: 3
    # usage.scipy: 2
    dtype: object

    # usage.dask: 1
    ndim: object

    # usage.scipy: 1
    size: object

    @overload
    def __add__(self, _0: int, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __add__(
        self,
        _0: Union[
            numpy.uint16,
            pandas.core.arrays.integer.IntegerArray,
            pandas.core.series.Series,
            pandas.core.arrays.timedeltas.TimedeltaArray,
            numpy.ndarray,
        ],
        /,
    ):
        """
        usage.pandas: 8
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.longlong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.ulonglong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float64, /):
        """
        usage.matplotlib: 1
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex256, /):
        """
        usage.scipy: 1
        """
        ...

    def __add__(self, _0: object, /):
        """
        usage.matplotlib: 1
        usage.pandas: 8
        usage.scipy: 17
        usage.skimage: 1
        """
        ...

    def __bool__(self, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __eq__(self, _0: int, /):
        """
        usage.skimage: 8
        """
        ...

    @overload
    def __eq__(self, _0: numpy.int64, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __eq__(
        self,
        _0: Union[
            numpy.uint64,
            pandas.core.series.Series,
            numpy.uint16,
            int,
            pandas.core.arrays.integer.IntegerArray,
        ],
        /,
    ):
        """
        usage.pandas: 66
        """
        ...

    @overload
    def __eq__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 2
        """
        ...

    def __eq__(self, _0: object, /):
        """
        usage.pandas: 66
        usage.scipy: 2
        usage.skimage: 9
        """
        ...

    def __floordiv__(
        self, _0: Union[numpy.ndarray, pandas.core.arrays.integer.IntegerArray], /
    ):
        """
        usage.pandas: 2
        """
        ...

    def __ge__(self, _0: int, /):
        """
        usage.skimage: 1
        usage.sklearn: 1
        """
        ...

    @overload
    def __gt__(self, _0: numpy.float64, /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __gt__(self, _0: int, /):
        """
        usage.matplotlib: 1
        """
        ...

    def __gt__(self, _0: Union[int, numpy.float64], /):
        """
        usage.matplotlib: 2
        """
        ...

    @overload
    def __lt__(self, _0: int, /):
        """
        usage.matplotlib: 1
        usage.skimage: 4
        usage.sklearn: 1
        """
        ...

    @overload
    def __lt__(self, _0: numpy.float64, /):
        """
        usage.matplotlib: 1
        """
        ...

    def __lt__(self, _0: Union[int, numpy.float64], /):
        """
        usage.matplotlib: 2
        usage.skimage: 4
        usage.sklearn: 1
        """
        ...

    def __mod__(
        self, _0: Union[numpy.ndarray, pandas.core.arrays.integer.IntegerArray], /
    ):
        """
        usage.pandas: 2
        """
        ...

    @overload
    def __mul__(
        self,
        _0: Union[
            numpy.ndarray,
            pandas.core.arrays.timedeltas.TimedeltaArray,
            pandas.core.series.Series,
            pandas.core.arrays.integer.IntegerArray,
        ],
        /,
    ):
        """
        usage.pandas: 4
        """
        ...

    @overload
    def __mul__(self, _0: int, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __mul__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    def __mul__(self, _0: object, /):
        """
        usage.pandas: 4
        usage.scipy: 4
        """
        ...

    def __ne__(self, _0: numpy.uint16, /):
        """
        usage.pandas: 8
        usage.scipy: 2
        usage.skimage: 2
        """
        ...

    def __pow__(
        self, _0: Union[numpy.ndarray, pandas.core.arrays.integer.IntegerArray], /
    ):
        """
        usage.pandas: 2
        """
        ...

    @overload
    def __radd__(self, _0: Union[pandas._libs.missing.NAType, numpy.uint16], /):
        """
        usage.pandas: 6
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int64, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.longlong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.ulonglong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex256, /):
        """
        usage.scipy: 1
        """
        ...

    def __radd__(self, _0: object, /):
        """
        usage.pandas: 6
        usage.scipy: 18
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.ndarray, /):
        """
        usage.pandas: 1
        """
        ...

    @overload
    def __rmul__(self, _0: float, /):
        """
        usage.scipy: 1
        """
        ...

    def __rmul__(self, _0: Union[float, numpy.ndarray], /):
        """
        usage.pandas: 1
        usage.scipy: 1
        """
        ...

    def __rsub__(self, _0: pandas.core.arrays.timedeltas.TimedeltaArray, /):
        """
        usage.pandas: 1
        """
        ...

    def __rtruediv__(
        self,
        _0: Union[
            numpy.ndarray,
            pandas._libs.tslibs.timedeltas.Timedelta,
            pandas._libs.tslibs.nattype.NaTType,
        ],
        /,
    ):
        """
        usage.pandas: 5
        """
        ...

    def __sub__(
        self,
        _0: Union[
            int, pandas.core.series.Series, pandas.core.arrays.timedeltas.TimedeltaArray
        ],
        /,
    ):
        """
        usage.pandas: 3
        """
        ...

    def __truediv__(
        self,
        _0: Union[
            numpy.ndarray,
            pandas.core.arrays.timedeltas.TimedeltaArray,
            pandas.core.series.Series,
            pandas.core.arrays.integer.IntegerArray,
        ],
        /,
    ):
        """
        usage.pandas: 4
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.int64], /):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def astype(self, _0: numpy.dtype, /):
        """
        usage.pandas: 1
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.float64], /):
        """
        usage.matplotlib: 1
        """
        ...

    def astype(self, _0: Union[Type[numpy.float64], Type[numpy.int64], numpy.dtype], /):
        """
        usage.matplotlib: 1
        usage.pandas: 1
        usage.skimage: 2
        """
        ...


class uint32:

    # usage.dask: 1
    __module__: ClassVar[object]

    # usage.pandas: 3
    __name__: ClassVar[object]

    @overload
    @classmethod
    def __ne__(cls, _0: numpy.dtype, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: numpy.uint32, /):
        """
        usage.pandas: 8
        usage.scipy: 6
        """
        ...

    @classmethod
    def __ne__(cls, _0: Union[numpy.uint32, numpy.dtype], /):
        """
        usage.dask: 1
        usage.pandas: 8
        usage.scipy: 6
        """
        ...

    # usage.pandas: 3
    # usage.scipy: 2
    dtype: object

    # usage.dask: 2
    ndim: object

    # usage.scipy: 1
    size: object

    @overload
    def __add__(self, _0: int, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __add__(
        self,
        _0: Union[
            numpy.uint32,
            pandas.core.arrays.integer.IntegerArray,
            pandas.core.series.Series,
            pandas.core.arrays.timedeltas.TimedeltaArray,
            numpy.ndarray,
        ],
        /,
    ):
        """
        usage.pandas: 8
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int64, /):
        """
        usage.dask: 2
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.longlong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.ulonglong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex256, /):
        """
        usage.scipy: 1
        """
        ...

    def __add__(self, _0: object, /):
        """
        usage.dask: 2
        usage.pandas: 8
        usage.scipy: 17
        usage.skimage: 1
        """
        ...

    def __bool__(self, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __eq__(self, _0: int, /):
        """
        usage.skimage: 1
        usage.sklearn: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.int64, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __eq__(
        self,
        _0: Union[
            numpy.uint64,
            pandas.core.series.Series,
            numpy.uint32,
            int,
            pandas.core.arrays.integer.IntegerArray,
        ],
        /,
    ):
        """
        usage.pandas: 66
        """
        ...

    @overload
    def __eq__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 2
        """
        ...

    def __eq__(self, _0: object, /):
        """
        usage.pandas: 66
        usage.scipy: 2
        usage.skimage: 2
        usage.sklearn: 1
        """
        ...

    def __floordiv__(
        self, _0: Union[numpy.ndarray, pandas.core.arrays.integer.IntegerArray], /
    ):
        """
        usage.pandas: 2
        """
        ...

    def __ge__(self, _0: int, /):
        """
        usage.scipy: 1
        usage.skimage: 1
        usage.sklearn: 1
        """
        ...

    def __getitem__(self, _0: Tuple[ellipsis, None], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __gt__(self, _0: int, /):
        """
        usage.matplotlib: 1
        """
        ...

    @overload
    def __gt__(self, _0: numpy.uint32, /):
        """
        usage.sklearn: 1
        """
        ...

    def __gt__(self, _0: Union[numpy.uint32, int], /):
        """
        usage.matplotlib: 1
        usage.sklearn: 1
        """
        ...

    def __iadd__(self, _0: numpy.int64, /):
        """
        usage.scipy: 2
        """
        ...

    def __le__(self, _0: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __lt__(self, _0: int, /):
        """
        usage.matplotlib: 1
        usage.skimage: 1
        """
        ...

    @overload
    def __lt__(self, _0: numpy.uint32, /):
        """
        usage.sklearn: 1
        """
        ...

    def __lt__(self, _0: Union[numpy.uint32, int], /):
        """
        usage.matplotlib: 1
        usage.skimage: 1
        usage.sklearn: 1
        """
        ...

    def __mod__(
        self, _0: Union[numpy.ndarray, pandas.core.arrays.integer.IntegerArray], /
    ):
        """
        usage.pandas: 2
        """
        ...

    @overload
    def __mul__(
        self,
        _0: Union[
            numpy.ndarray,
            pandas.core.arrays.timedeltas.TimedeltaArray,
            pandas.core.series.Series,
            pandas.core.arrays.integer.IntegerArray,
        ],
        /,
    ):
        """
        usage.pandas: 4
        """
        ...

    @overload
    def __mul__(self, _0: int, /):
        """
        usage.dask: 1
        usage.scipy: 5
        """
        ...

    @overload
    def __mul__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    def __mul__(self, _0: object, /):
        """
        usage.dask: 1
        usage.pandas: 4
        usage.scipy: 6
        """
        ...

    def __neg__(self, /):
        """
        usage.scipy: 1
        """
        ...

    def __pow__(
        self, _0: Union[numpy.ndarray, pandas.core.arrays.integer.IntegerArray], /
    ):
        """
        usage.pandas: 2
        """
        ...

    @overload
    def __radd__(self, _0: Union[pandas._libs.missing.NAType, numpy.uint32], /):
        """
        usage.pandas: 6
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int64, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.longlong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.ulonglong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex256, /):
        """
        usage.scipy: 1
        """
        ...

    def __radd__(self, _0: object, /):
        """
        usage.pandas: 6
        usage.scipy: 18
        """
        ...

    def __rmod__(self, _0: Literal["%u\n"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.ndarray, /):
        """
        usage.pandas: 1
        """
        ...

    @overload
    def __rmul__(self, _0: float, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rmul__(self, _0: int, /):
        """
        usage.dask: 2
        """
        ...

    def __rmul__(self, _0: Union[int, numpy.ndarray, float], /):
        """
        usage.dask: 2
        usage.pandas: 1
        usage.scipy: 1
        """
        ...

    @overload
    def __rsub__(self, _0: pandas.core.arrays.timedeltas.TimedeltaArray, /):
        """
        usage.pandas: 1
        """
        ...

    @overload
    def __rsub__(self, _0: numpy.uint32, /):
        """
        usage.dask: 1
        """
        ...

    def __rsub__(
        self, _0: Union[numpy.uint32, pandas.core.arrays.timedeltas.TimedeltaArray], /
    ):
        """
        usage.dask: 1
        usage.pandas: 1
        """
        ...

    @overload
    def __rtruediv__(
        self,
        _0: Union[
            numpy.ndarray,
            pandas._libs.tslibs.timedeltas.Timedelta,
            pandas._libs.tslibs.nattype.NaTType,
        ],
        /,
    ):
        """
        usage.pandas: 5
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.uint32, /):
        """
        usage.dask: 1
        """
        ...

    def __rtruediv__(
        self,
        _0: Union[
            numpy.uint32,
            pandas._libs.tslibs.nattype.NaTType,
            pandas._libs.tslibs.timedeltas.Timedelta,
            numpy.ndarray,
        ],
        /,
    ):
        """
        usage.dask: 1
        usage.pandas: 5
        """
        ...

    @overload
    def __sub__(
        self,
        _0: Union[
            int, pandas.core.series.Series, pandas.core.arrays.timedeltas.TimedeltaArray
        ],
        /,
    ):
        """
        usage.pandas: 3
        """
        ...

    @overload
    def __sub__(self, _0: numpy.uint32, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __sub__(self, _0: int, /):
        """
        usage.sklearn: 2
        """
        ...

    def __sub__(
        self,
        _0: Union[
            int,
            pandas.core.series.Series,
            pandas.core.arrays.timedeltas.TimedeltaArray,
            numpy.uint32,
        ],
        /,
    ):
        """
        usage.dask: 1
        usage.pandas: 3
        usage.sklearn: 2
        """
        ...

    @overload
    def __truediv__(
        self,
        _0: Union[
            numpy.ndarray,
            pandas.core.arrays.timedeltas.TimedeltaArray,
            pandas.core.series.Series,
            pandas.core.arrays.integer.IntegerArray,
        ],
        /,
    ):
        """
        usage.pandas: 4
        """
        ...

    @overload
    def __truediv__(self, _0: numpy.uint32, /):
        """
        usage.dask: 1
        """
        ...

    def __truediv__(
        self,
        _0: Union[
            numpy.uint32,
            pandas.core.arrays.integer.IntegerArray,
            pandas.core.series.Series,
            pandas.core.arrays.timedeltas.TimedeltaArray,
            numpy.ndarray,
        ],
        /,
    ):
        """
        usage.dask: 1
        usage.pandas: 4
        """
        ...

    def astype(self, _0: numpy.dtype, /):
        """
        usage.pandas: 1
        """
        ...


class uint64:

    # usage.dask: 1
    __module__: ClassVar[object]

    # usage.pandas: 3
    __name__: ClassVar[object]

    @overload
    @classmethod
    def __ne__(cls, _0: numpy.dtype, /):
        """
        usage.dask: 1
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: numpy.uint64, /):
        """
        usage.scipy: 6
        usage.skimage: 4
        usage.sklearn: 4
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: float, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: Union[numpy.uint64, int], /):
        """
        usage.pandas: 9
        """
        ...

    @classmethod
    def __ne__(cls, _0: Union[numpy.uint64, numpy.dtype, float, int], /):
        """
        usage.dask: 1
        usage.pandas: 9
        usage.scipy: 6
        usage.skimage: 5
        usage.sklearn: 4
        """
        ...

    # usage.pandas: 3
    # usage.scipy: 5
    dtype: object

    # usage.dask: 2
    ndim: object

    # usage.scipy: 1
    size: object

    @overload
    def __add__(
        self,
        _0: Union[
            numpy.uint64,
            pandas.core.arrays.integer.IntegerArray,
            pandas.core.series.Series,
            pandas.core.arrays.timedeltas.TimedeltaArray,
            numpy.ndarray,
        ],
        /,
    ):
        """
        usage.pandas: 10
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.ulonglong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.longlong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float64, /):
        """
        usage.dask: 2
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex256, /):
        """
        usage.scipy: 1
        """
        ...

    def __add__(self, _0: object, /):
        """
        usage.dask: 2
        usage.pandas: 10
        usage.scipy: 17
        """
        ...

    def __bool__(self, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __eq__(self, _0: int, /):
        """
        usage.matplotlib: 1
        usage.scipy: 4
        usage.skimage: 8
        usage.sklearn: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.int64, /):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __eq__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 2
        usage.skimage: 1
        """
        ...

    @overload
    def __eq__(self, _0: object, /):
        """
        usage.pandas: 84
        """
        ...

    @overload
    def __eq__(self, _0: numpy.uint64, /):
        """
        usage.sklearn: 6
        """
        ...

    def __eq__(self, _0: object, /):
        """
        usage.matplotlib: 1
        usage.pandas: 84
        usage.scipy: 6
        usage.skimage: 11
        usage.sklearn: 7
        """
        ...

    def __floordiv__(
        self, _0: Union[numpy.ndarray, pandas.core.arrays.integer.IntegerArray], /
    ):
        """
        usage.pandas: 2
        """
        ...

    def __ge__(self, _0: int, /):
        """
        usage.pandas: 1
        usage.skimage: 1
        """
        ...

    def __getitem__(self, _0: Tuple[ellipsis, None], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __gt__(self, _0: numpy.float64, /):
        """
        usage.matplotlib: 1
        usage.skimage: 1
        """
        ...

    @overload
    def __gt__(self, _0: numpy.uint64, /):
        """
        usage.pandas: 2
        usage.skimage: 1
        """
        ...

    def __gt__(self, _0: Union[numpy.float64, numpy.uint64], /):
        """
        usage.matplotlib: 1
        usage.pandas: 2
        usage.skimage: 2
        """
        ...

    @overload
    def __iadd__(self, _0: numpy.uint64, /):
        """
        usage.pandas: 1
        usage.scipy: 1
        """
        ...

    @overload
    def __iadd__(self, _0: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __iadd__(self, _0: numpy.ulonglong, /):
        """
        usage.scipy: 1
        """
        ...

    def __iadd__(self, _0: Union[numpy.uint64, int, numpy.ulonglong], /):
        """
        usage.pandas: 1
        usage.scipy: 3
        """
        ...

    @overload
    def __lt__(self, _0: int, /):
        """
        usage.skimage: 3
        """
        ...

    @overload
    def __lt__(self, _0: numpy.uint64, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __lt__(self, _0: Union[int, numpy.uint64], /):
        """
        usage.pandas: 2
        """
        ...

    @overload
    def __lt__(self, _0: numpy.float64, /):
        """
        usage.matplotlib: 1
        """
        ...

    def __lt__(self, _0: Union[numpy.float64, int, numpy.uint64], /):
        """
        usage.matplotlib: 1
        usage.pandas: 2
        usage.skimage: 4
        """
        ...

    def __mod__(
        self, _0: Union[numpy.ndarray, pandas.core.arrays.integer.IntegerArray], /
    ):
        """
        usage.pandas: 2
        """
        ...

    @overload
    def __mul__(
        self,
        _0: Union[
            numpy.ndarray,
            pandas.core.arrays.timedeltas.TimedeltaArray,
            numpy.uint64,
            pandas.core.series.Series,
            pandas.core.arrays.integer.IntegerArray,
        ],
        /,
    ):
        """
        usage.pandas: 6
        """
        ...

    @overload
    def __mul__(self, _0: int, /):
        """
        usage.dask: 1
        usage.scipy: 3
        """
        ...

    @overload
    def __mul__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    def __mul__(self, _0: object, /):
        """
        usage.dask: 1
        usage.pandas: 6
        usage.scipy: 4
        """
        ...

    def __neg__(self, /):
        """
        usage.scipy: 1
        """
        ...

    def __pow__(
        self, _0: Union[numpy.ndarray, pandas.core.arrays.integer.IntegerArray], /
    ):
        """
        usage.pandas: 2
        """
        ...

    @overload
    def __radd__(
        self, _0: Union[pandas._libs.missing.NAType, numpy.ndarray, numpy.uint64], /
    ):
        """
        usage.pandas: 272
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float64, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.longlong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.ulonglong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex256, /):
        """
        usage.scipy: 1
        """
        ...

    def __radd__(self, _0: object, /):
        """
        usage.pandas: 272
        usage.scipy: 18
        """
        ...

    def __rfloordiv__(self, _0: pandas.core.indexes.numeric.Int64Index, /):
        """
        usage.pandas: 1
        """
        ...

    def __rmod__(self, _0: Literal["%u\n"], /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __rmul__(self, _0: float, /):
        """
        usage.scipy: 1
        usage.skimage: 1
        """
        ...

    @overload
    def __rmul__(self, _0: int, /):
        """
        usage.dask: 2
        usage.skimage: 1
        """
        ...

    @overload
    def __rmul__(self, _0: Union[numpy.ndarray, numpy.uint64], /):
        """
        usage.pandas: 6
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.uint8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.uint32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.ulonglong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.uint16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    def __rmul__(self, _0: object, /):
        """
        usage.dask: 2
        usage.pandas: 6
        usage.scipy: 6
        usage.skimage: 2
        """
        ...

    def __rshift__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rsub__(self, _0: numpy.ndarray, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __rsub__(self, _0: pandas.core.arrays.timedeltas.TimedeltaArray, /):
        """
        usage.pandas: 1
        """
        ...

    @overload
    def __rsub__(self, _0: numpy.uint64, /):
        """
        usage.dask: 1
        """
        ...

    def __rsub__(
        self,
        _0: Union[
            numpy.uint64, numpy.ndarray, pandas.core.arrays.timedeltas.TimedeltaArray
        ],
        /,
    ):
        """
        usage.dask: 1
        usage.pandas: 1
        usage.skimage: 1
        """
        ...

    @overload
    def __rtruediv__(self, _0: float, /):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __rtruediv__(
        self,
        _0: Union[
            numpy.ndarray,
            pandas._libs.tslibs.timedeltas.Timedelta,
            pandas._libs.tslibs.nattype.NaTType,
        ],
        /,
    ):
        """
        usage.pandas: 5
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.float64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.uint64, /):
        """
        usage.dask: 1
        """
        ...

    def __rtruediv__(self, _0: object, /):
        """
        usage.dask: 1
        usage.pandas: 5
        usage.scipy: 1
        usage.skimage: 2
        """
        ...

    def __rxor__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __sub__(
        self,
        _0: Union[
            int, pandas.core.series.Series, pandas.core.arrays.timedeltas.TimedeltaArray
        ],
        /,
    ):
        """
        usage.pandas: 3
        """
        ...

    @overload
    def __sub__(self, _0: numpy.uint64, /):
        """
        usage.dask: 1
        """
        ...

    def __sub__(
        self,
        _0: Union[
            numpy.uint64,
            pandas.core.arrays.timedeltas.TimedeltaArray,
            pandas.core.series.Series,
            int,
        ],
        /,
    ):
        """
        usage.dask: 1
        usage.pandas: 3
        """
        ...

    @overload
    def __truediv__(self, _0: int, /):
        """
        usage.scipy: 2
        usage.skimage: 1
        """
        ...

    @overload
    def __truediv__(
        self,
        _0: Union[
            numpy.ndarray,
            pandas.core.arrays.timedeltas.TimedeltaArray,
            pandas.core.series.Series,
            pandas.core.arrays.integer.IntegerArray,
        ],
        /,
    ):
        """
        usage.pandas: 4
        """
        ...

    @overload
    def __truediv__(self, _0: numpy.ndarray, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __truediv__(self, _0: numpy.uint64, /):
        """
        usage.dask: 1
        """
        ...

    def __truediv__(self, _0: object, /):
        """
        usage.dask: 1
        usage.pandas: 4
        usage.scipy: 3
        usage.skimage: 1
        """
        ...

    def __xor__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def astype(self, _0: numpy.dtype, /):
        """
        usage.pandas: 1
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.float64], /):
        """
        usage.matplotlib: 2
        """
        ...

    def astype(self, _0: Union[Type[numpy.float64], numpy.dtype], /):
        """
        usage.matplotlib: 2
        usage.pandas: 1
        """
        ...


class uint8:

    # usage.matplotlib: 1
    __mro__: ClassVar[object]

    # usage.pandas: 3
    __name__: ClassVar[object]

    @overload
    @classmethod
    def __ne__(cls, _0: numpy.dtype, /):
        """
        usage.matplotlib: 19
        usage.sklearn: 2
        """
        ...

    @overload
    @classmethod
    def __ne__(cls, _0: numpy.uint8, /):
        """
        usage.matplotlib: 6
        usage.pandas: 8
        usage.scipy: 2
        usage.skimage: 2
        """
        ...

    @classmethod
    def __ne__(cls, _0: Union[numpy.dtype, numpy.uint8], /):
        """
        usage.matplotlib: 25
        usage.pandas: 8
        usage.scipy: 2
        usage.skimage: 2
        usage.sklearn: 2
        """
        ...

    # usage.pandas: 3
    # usage.scipy: 2
    dtype: object

    # usage.dask: 2
    ndim: object

    # usage.scipy: 1
    size: object

    @overload
    def __add__(self, _0: numpy.uint8, /):
        """
        usage.scipy: 1
        usage.skimage: 1
        """
        ...

    @overload
    def __add__(self, _0: int, /):
        """
        usage.skimage: 7
        """
        ...

    @overload
    def __add__(
        self,
        _0: Union[
            numpy.uint8,
            pandas.core.arrays.integer.IntegerArray,
            pandas.core.series.Series,
            pandas.core.arrays.timedeltas.TimedeltaArray,
            numpy.ndarray,
        ],
        /,
    ):
        """
        usage.pandas: 8
        """
        ...

    @overload
    def __add__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.longlong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.ulonglong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float64, /):
        """
        usage.matplotlib: 1
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex256, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: float, /):
        """
        usage.matplotlib: 1
        """
        ...

    def __add__(self, _0: object, /):
        """
        usage.matplotlib: 2
        usage.pandas: 8
        usage.scipy: 17
        usage.skimage: 8
        """
        ...

    def __bool__(self, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.ndarray, /):
        """
        usage.matplotlib: 1
        usage.scipy: 2
        usage.skimage: 3
        usage.xarray: 1
        """
        ...

    @overload
    def __eq__(self, _0: int, /):
        """
        usage.matplotlib: 1
        usage.skimage: 8
        usage.sklearn: 3
        """
        ...

    @overload
    def __eq__(self, _0: numpy.uint8, /):
        """
        usage.matplotlib: 4
        usage.skimage: 2
        usage.xarray: 2
        """
        ...

    @overload
    def __eq__(self, _0: numpy.int64, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __eq__(
        self,
        _0: Union[
            numpy.uint64,
            pandas.core.series.Series,
            numpy.uint8,
            int,
            pandas.core.arrays.integer.IntegerArray,
        ],
        /,
    ):
        """
        usage.pandas: 66
        """
        ...

    def __eq__(self, _0: object, /):
        """
        usage.matplotlib: 6
        usage.pandas: 66
        usage.scipy: 2
        usage.skimage: 14
        usage.sklearn: 3
        usage.xarray: 3
        """
        ...

    def __floordiv__(
        self, _0: Union[numpy.ndarray, pandas.core.arrays.integer.IntegerArray], /
    ):
        """
        usage.pandas: 2
        """
        ...

    @overload
    def __ge__(self, _0: int, /):
        """
        usage.skimage: 3
        """
        ...

    @overload
    def __ge__(self, _0: numpy.ndarray, /):
        """
        usage.matplotlib: 1
        """
        ...

    def __ge__(self, _0: Union[numpy.ndarray, int], /):
        """
        usage.matplotlib: 1
        usage.skimage: 3
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, None, None, None], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, None, None], /):
        """
        usage.dask: 1
        """
        ...

    def __getitem__(self, _0: Tuple[Union[None, ellipsis], ...], /):
        """
        usage.dask: 2
        """
        ...

    @overload
    def __gt__(self, _0: numpy.float64, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __gt__(self, _0: int, /):
        """
        usage.matplotlib: 1
        usage.skimage: 3
        """
        ...

    @overload
    def __gt__(self, _0: numpy.int64, /):
        """
        usage.xarray: 1
        """
        ...

    def __gt__(self, _0: Union[int, numpy.float64, numpy.int64], /):
        """
        usage.matplotlib: 1
        usage.skimage: 4
        usage.xarray: 1
        """
        ...

    def __iadd__(self, _0: int, /):
        """
        usage.xarray: 2
        """
        ...

    def __le__(self, _0: int, /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def __lt__(self, _0: int, /):
        """
        usage.matplotlib: 1
        usage.skimage: 7
        usage.xarray: 1
        """
        ...

    @overload
    def __lt__(self, _0: numpy.ndarray, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __lt__(self, _0: numpy.int64, /):
        """
        usage.xarray: 1
        """
        ...

    def __lt__(self, _0: Union[int, numpy.ndarray, numpy.int64], /):
        """
        usage.matplotlib: 1
        usage.skimage: 8
        usage.xarray: 2
        """
        ...

    def __mod__(
        self, _0: Union[numpy.ndarray, pandas.core.arrays.integer.IntegerArray], /
    ):
        """
        usage.pandas: 2
        """
        ...

    @overload
    def __mul__(
        self,
        _0: Union[
            numpy.ndarray,
            pandas.core.arrays.timedeltas.TimedeltaArray,
            pandas.core.series.Series,
            pandas.core.arrays.integer.IntegerArray,
        ],
        /,
    ):
        """
        usage.pandas: 4
        """
        ...

    @overload
    def __mul__(self, _0: int, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __mul__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    def __mul__(self, _0: object, /):
        """
        usage.pandas: 4
        usage.scipy: 4
        """
        ...

    @overload
    def __pow__(self, _0: int, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __pow__(
        self, _0: Union[numpy.ndarray, pandas.core.arrays.integer.IntegerArray], /
    ):
        """
        usage.pandas: 2
        """
        ...

    def __pow__(
        self, _0: Union[pandas.core.arrays.integer.IntegerArray, numpy.ndarray, int], /
    ):
        """
        usage.pandas: 2
        usage.skimage: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float64, /):
        """
        usage.scipy: 1
        usage.skimage: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint8, /):
        """
        usage.scipy: 1
        usage.skimage: 1
        """
        ...

    @overload
    def __radd__(self, _0: Union[pandas._libs.missing.NAType, numpy.uint8], /):
        """
        usage.pandas: 6
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int64, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __radd__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.longlong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.ulonglong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex256, /):
        """
        usage.scipy: 1
        """
        ...

    def __radd__(self, _0: object, /):
        """
        usage.pandas: 6
        usage.scipy: 18
        usage.skimage: 2
        """
        ...

    def __rfloordiv__(self, _0: pandas._libs.tslibs.timedeltas.Timedelta, /):
        """
        usage.pandas: 1
        """
        ...

    @overload
    def __rmul__(self, _0: float, /):
        """
        usage.scipy: 1
        usage.skimage: 3
        """
        ...

    @overload
    def __rmul__(self, _0: numpy.ndarray, /):
        """
        usage.pandas: 1
        """
        ...

    def __rmul__(self, _0: Union[float, numpy.ndarray], /):
        """
        usage.pandas: 1
        usage.scipy: 1
        usage.skimage: 3
        """
        ...

    @overload
    def __rsub__(self, _0: numpy.ndarray, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __rsub__(self, _0: numpy.float64, /):
        """
        usage.matplotlib: 1
        usage.skimage: 1
        """
        ...

    @overload
    def __rsub__(self, _0: int, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __rsub__(self, _0: numpy.uint8, /):
        """
        usage.skimage: 4
        """
        ...

    @overload
    def __rsub__(self, _0: pandas.core.arrays.timedeltas.TimedeltaArray, /):
        """
        usage.pandas: 1
        """
        ...

    def __rsub__(
        self,
        _0: Union[
            numpy.float64,
            numpy.uint8,
            numpy.ndarray,
            int,
            pandas.core.arrays.timedeltas.TimedeltaArray,
        ],
        /,
    ):
        """
        usage.matplotlib: 1
        usage.pandas: 1
        usage.skimage: 7
        """
        ...

    @overload
    def __rtruediv__(self, _0: numpy.float64, /):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def __rtruediv__(
        self,
        _0: Union[
            numpy.ndarray,
            pandas._libs.tslibs.timedeltas.Timedelta,
            pandas._libs.tslibs.nattype.NaTType,
        ],
        /,
    ):
        """
        usage.pandas: 5
        """
        ...

    def __rtruediv__(
        self,
        _0: Union[
            pandas._libs.tslibs.nattype.NaTType,
            pandas._libs.tslibs.timedeltas.Timedelta,
            numpy.ndarray,
            numpy.float64,
        ],
        /,
    ):
        """
        usage.pandas: 5
        usage.skimage: 2
        """
        ...

    @overload
    def __sub__(self, _0: numpy.uint8, /):
        """
        usage.skimage: 4
        """
        ...

    @overload
    def __sub__(self, _0: int, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __sub__(
        self,
        _0: Union[
            int, pandas.core.series.Series, pandas.core.arrays.timedeltas.TimedeltaArray
        ],
        /,
    ):
        """
        usage.pandas: 3
        """
        ...

    def __sub__(
        self,
        _0: Union[
            pandas.core.arrays.timedeltas.TimedeltaArray,
            pandas.core.series.Series,
            int,
            numpy.uint8,
        ],
        /,
    ):
        """
        usage.pandas: 3
        usage.skimage: 5
        """
        ...

    @overload
    def __truediv__(self, _0: int, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __truediv__(
        self,
        _0: Union[
            numpy.ndarray,
            pandas.core.arrays.timedeltas.TimedeltaArray,
            pandas.core.series.Series,
            pandas.core.arrays.integer.IntegerArray,
        ],
        /,
    ):
        """
        usage.pandas: 4
        """
        ...

    def __truediv__(
        self,
        _0: Union[
            pandas.core.arrays.integer.IntegerArray,
            pandas.core.series.Series,
            pandas.core.arrays.timedeltas.TimedeltaArray,
            numpy.ndarray,
            int,
        ],
        /,
    ):
        """
        usage.pandas: 4
        usage.skimage: 1
        """
        ...

    @overload
    def astype(self, _0: Type[numpy.int64], /):
        """
        usage.skimage: 2
        """
        ...

    @overload
    def astype(self, _0: numpy.dtype, /):
        """
        usage.pandas: 1
        """
        ...

    def astype(self, _0: Union[numpy.dtype, Type[numpy.int64]], /):
        """
        usage.pandas: 1
        usage.skimage: 2
        """
        ...


class ulonglong:

    # usage.pandas: 2
    __name__: ClassVar[object]

    # usage.scipy: 4
    dtype: object

    # usage.pandas: 1
    itemsize: object

    # usage.dask: 1
    ndim: object

    # usage.scipy: 1
    size: object

    @overload
    def __add__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.int64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.longlong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.ulonglong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __add__(self, _0: numpy.complex256, /):
        """
        usage.scipy: 1
        """
        ...

    def __add__(self, _0: object, /):
        """
        usage.scipy: 17
        """
        ...

    def __bool__(self, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __eq__(self, _0: int, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.int64, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __eq__(self, _0: numpy.uint64, /):
        """
        usage.pandas: 84
        """
        ...

    def __eq__(self, _0: Union[numpy.uint64, int, numpy.int64], /):
        """
        usage.pandas: 84
        usage.skimage: 2
        """
        ...

    def __lt__(self, _0: int, /):
        """
        usage.skimage: 1
        """
        ...

    @overload
    def __mul__(self, _0: int, /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __mul__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    def __mul__(self, _0: Union[numpy.uint64, int], /):
        """
        usage.scipy: 4
        """
        ...

    def __ne__(self, _0: numpy.ulonglong, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float64, /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.bool_, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint8, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint16, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.uint32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.int64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.longlong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.ulonglong, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float32, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.float128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex128, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex64, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __radd__(self, _0: numpy.complex256, /):
        """
        usage.scipy: 1
        """
        ...

    def __radd__(self, _0: object, /):
        """
        usage.scipy: 18
        """
        ...

    def __rmul__(self, _0: float, /):
        """
        usage.scipy: 1
        """
        ...


class vectorize:

    # usage.scipy: 6
    nin: int

    # usage.dask: 1
    pyfunc: object


class void:

    # usage.dask: 1
    __module__: ClassVar[object]

    # usage.pandas: 2
    # usage.scipy: 2
    dtype: object

    # usage.dask: 2
    ndim: object

    # usage.scipy: 3
    shape: object

    @overload
    def __getitem__(self, _0: int, /):
        """
        usage.scipy: 2
        usage.skimage: 33
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["stringfield"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["doublefield"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["complexfield"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["one"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["two"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["three"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["expr"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["inputExpr"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["args"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["isEmpty"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["numArgs"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["version"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: str, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["a"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["b"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["f1"], /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["f2"], /):
        """
        usage.scipy: 3
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["field1"], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["field2"], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["sparsefield"], /):
        """
        usage.scipy: 2
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["c"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, None, None], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Tuple[ellipsis, None], /):
        """
        usage.dask: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["value"], /):
        """
        usage.sklearn: 5
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["is_leaf"], /):
        """
        usage.sklearn: 5
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["count"], /):
        """
        usage.sklearn: 3
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["left"], /):
        """
        usage.sklearn: 3
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["right"], /):
        """
        usage.sklearn: 3
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["threshold"], /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __getitem__(self, _0: Literal["bin_threshold"], /):
        """
        usage.sklearn: 1
        """
        ...

    def __getitem__(self, _0: Union[str, int, Tuple[Union[None, ellipsis], ...]], /):
        """
        usage.dask: 2
        usage.scipy: 30
        usage.skimage: 33
        usage.sklearn: 21
        """
        ...

    @overload
    def __setitem__(self, _0: Literal["f1"], _1: float, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Literal["f2"], _1: Literal["python"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Literal["f1"], _1: int, /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Literal["f2"], _1: Literal["not perl"], /):
        """
        usage.scipy: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Literal["count"], _1: int, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Literal["depth"], _1: int, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Literal["gain"], _1: float, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Literal["value"], _1: int, /):
        """
        usage.sklearn: 3
        """
        ...

    @overload
    def __setitem__(self, _0: Literal["feature_idx"], _1: int, /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Literal["bin_threshold"], _1: int, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Literal["missing_go_to_left"], _1: bool, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Literal["threshold"], _1: numpy.float64, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Literal["left"], _1: int, /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Literal["value"], _1: float, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Literal["gain"], _1: int, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Literal["is_leaf"], _1: bool, /):
        """
        usage.sklearn: 3
        """
        ...

    @overload
    def __setitem__(self, _0: Literal["right"], _1: int, /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Literal["value"], _1: numpy.float64, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Literal["missing_go_to_left"], _1: int, /):
        """
        usage.sklearn: 1
        """
        ...

    @overload
    def __setitem__(self, _0: Literal["threshold"], _1: float, /):
        """
        usage.sklearn: 2
        """
        ...

    @overload
    def __setitem__(self, _0: Literal["threshold"], _1: int, /):
        """
        usage.sklearn: 1
        """
        ...

    def __setitem__(
        self,
        _0: str,
        _1: Union[float, numpy.float64, bool, int, Literal["not perl", "python"]],
        /,
    ):
        """
        usage.scipy: 4
        usage.sklearn: 25
        """
        ...
